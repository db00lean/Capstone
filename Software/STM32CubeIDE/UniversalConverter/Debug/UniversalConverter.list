
UniversalConverter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001b4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008cac  080001b4  080001b4  000101b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000008c  08008e60  08008e60  00018e60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008eec  08008eec  00020190  2**0
                  CONTENTS
  4 .ARM          00000008  08008eec  08008eec  00018eec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008ef4  08008ef4  00020190  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008ef4  08008ef4  00018ef4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008ef8  08008ef8  00018ef8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000190  20000000  08008efc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020190  2**0
                  CONTENTS
 10 .bss          00001c70  20000190  20000190  00020190  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20001e00  20001e00  00020190  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020190  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001c2f6  00000000  00000000  000201c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003bb5  00000000  00000000  0003c4b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001178  00000000  00000000  00040070  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001010  00000000  00000000  000411e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002cf85  00000000  00000000  000421f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00017265  00000000  00000000  0006f17d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000faf47  00000000  00000000  000863e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  00181329  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000047e4  00000000  00000000  0018137c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b4 <__do_global_dtors_aux>:
 80001b4:	b510      	push	{r4, lr}
 80001b6:	4c05      	ldr	r4, [pc, #20]	; (80001cc <__do_global_dtors_aux+0x18>)
 80001b8:	7823      	ldrb	r3, [r4, #0]
 80001ba:	b933      	cbnz	r3, 80001ca <__do_global_dtors_aux+0x16>
 80001bc:	4b04      	ldr	r3, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x1c>)
 80001be:	b113      	cbz	r3, 80001c6 <__do_global_dtors_aux+0x12>
 80001c0:	4804      	ldr	r0, [pc, #16]	; (80001d4 <__do_global_dtors_aux+0x20>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	2301      	movs	r3, #1
 80001c8:	7023      	strb	r3, [r4, #0]
 80001ca:	bd10      	pop	{r4, pc}
 80001cc:	20000190 	.word	0x20000190
 80001d0:	00000000 	.word	0x00000000
 80001d4:	08008e48 	.word	0x08008e48

080001d8 <frame_dummy>:
 80001d8:	b508      	push	{r3, lr}
 80001da:	4b03      	ldr	r3, [pc, #12]	; (80001e8 <frame_dummy+0x10>)
 80001dc:	b11b      	cbz	r3, 80001e6 <frame_dummy+0xe>
 80001de:	4903      	ldr	r1, [pc, #12]	; (80001ec <frame_dummy+0x14>)
 80001e0:	4803      	ldr	r0, [pc, #12]	; (80001f0 <frame_dummy+0x18>)
 80001e2:	f3af 8000 	nop.w
 80001e6:	bd08      	pop	{r3, pc}
 80001e8:	00000000 	.word	0x00000000
 80001ec:	20000194 	.word	0x20000194
 80001f0:	08008e48 	.word	0x08008e48

080001f4 <__aeabi_uldivmod>:
 80001f4:	b953      	cbnz	r3, 800020c <__aeabi_uldivmod+0x18>
 80001f6:	b94a      	cbnz	r2, 800020c <__aeabi_uldivmod+0x18>
 80001f8:	2900      	cmp	r1, #0
 80001fa:	bf08      	it	eq
 80001fc:	2800      	cmpeq	r0, #0
 80001fe:	bf1c      	itt	ne
 8000200:	f04f 31ff 	movne.w	r1, #4294967295
 8000204:	f04f 30ff 	movne.w	r0, #4294967295
 8000208:	f000 b96e 	b.w	80004e8 <__aeabi_idiv0>
 800020c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000210:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000214:	f000 f806 	bl	8000224 <__udivmoddi4>
 8000218:	f8dd e004 	ldr.w	lr, [sp, #4]
 800021c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000220:	b004      	add	sp, #16
 8000222:	4770      	bx	lr

08000224 <__udivmoddi4>:
 8000224:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000228:	9d08      	ldr	r5, [sp, #32]
 800022a:	4604      	mov	r4, r0
 800022c:	468c      	mov	ip, r1
 800022e:	2b00      	cmp	r3, #0
 8000230:	f040 8083 	bne.w	800033a <__udivmoddi4+0x116>
 8000234:	428a      	cmp	r2, r1
 8000236:	4617      	mov	r7, r2
 8000238:	d947      	bls.n	80002ca <__udivmoddi4+0xa6>
 800023a:	fab2 f282 	clz	r2, r2
 800023e:	b142      	cbz	r2, 8000252 <__udivmoddi4+0x2e>
 8000240:	f1c2 0020 	rsb	r0, r2, #32
 8000244:	fa24 f000 	lsr.w	r0, r4, r0
 8000248:	4091      	lsls	r1, r2
 800024a:	4097      	lsls	r7, r2
 800024c:	ea40 0c01 	orr.w	ip, r0, r1
 8000250:	4094      	lsls	r4, r2
 8000252:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000256:	0c23      	lsrs	r3, r4, #16
 8000258:	fbbc f6f8 	udiv	r6, ip, r8
 800025c:	fa1f fe87 	uxth.w	lr, r7
 8000260:	fb08 c116 	mls	r1, r8, r6, ip
 8000264:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000268:	fb06 f10e 	mul.w	r1, r6, lr
 800026c:	4299      	cmp	r1, r3
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x60>
 8000270:	18fb      	adds	r3, r7, r3
 8000272:	f106 30ff 	add.w	r0, r6, #4294967295
 8000276:	f080 8119 	bcs.w	80004ac <__udivmoddi4+0x288>
 800027a:	4299      	cmp	r1, r3
 800027c:	f240 8116 	bls.w	80004ac <__udivmoddi4+0x288>
 8000280:	3e02      	subs	r6, #2
 8000282:	443b      	add	r3, r7
 8000284:	1a5b      	subs	r3, r3, r1
 8000286:	b2a4      	uxth	r4, r4
 8000288:	fbb3 f0f8 	udiv	r0, r3, r8
 800028c:	fb08 3310 	mls	r3, r8, r0, r3
 8000290:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000294:	fb00 fe0e 	mul.w	lr, r0, lr
 8000298:	45a6      	cmp	lr, r4
 800029a:	d909      	bls.n	80002b0 <__udivmoddi4+0x8c>
 800029c:	193c      	adds	r4, r7, r4
 800029e:	f100 33ff 	add.w	r3, r0, #4294967295
 80002a2:	f080 8105 	bcs.w	80004b0 <__udivmoddi4+0x28c>
 80002a6:	45a6      	cmp	lr, r4
 80002a8:	f240 8102 	bls.w	80004b0 <__udivmoddi4+0x28c>
 80002ac:	3802      	subs	r0, #2
 80002ae:	443c      	add	r4, r7
 80002b0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002b4:	eba4 040e 	sub.w	r4, r4, lr
 80002b8:	2600      	movs	r6, #0
 80002ba:	b11d      	cbz	r5, 80002c4 <__udivmoddi4+0xa0>
 80002bc:	40d4      	lsrs	r4, r2
 80002be:	2300      	movs	r3, #0
 80002c0:	e9c5 4300 	strd	r4, r3, [r5]
 80002c4:	4631      	mov	r1, r6
 80002c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ca:	b902      	cbnz	r2, 80002ce <__udivmoddi4+0xaa>
 80002cc:	deff      	udf	#255	; 0xff
 80002ce:	fab2 f282 	clz	r2, r2
 80002d2:	2a00      	cmp	r2, #0
 80002d4:	d150      	bne.n	8000378 <__udivmoddi4+0x154>
 80002d6:	1bcb      	subs	r3, r1, r7
 80002d8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002dc:	fa1f f887 	uxth.w	r8, r7
 80002e0:	2601      	movs	r6, #1
 80002e2:	fbb3 fcfe 	udiv	ip, r3, lr
 80002e6:	0c21      	lsrs	r1, r4, #16
 80002e8:	fb0e 331c 	mls	r3, lr, ip, r3
 80002ec:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002f0:	fb08 f30c 	mul.w	r3, r8, ip
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d907      	bls.n	8000308 <__udivmoddi4+0xe4>
 80002f8:	1879      	adds	r1, r7, r1
 80002fa:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002fe:	d202      	bcs.n	8000306 <__udivmoddi4+0xe2>
 8000300:	428b      	cmp	r3, r1
 8000302:	f200 80e9 	bhi.w	80004d8 <__udivmoddi4+0x2b4>
 8000306:	4684      	mov	ip, r0
 8000308:	1ac9      	subs	r1, r1, r3
 800030a:	b2a3      	uxth	r3, r4
 800030c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000310:	fb0e 1110 	mls	r1, lr, r0, r1
 8000314:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000318:	fb08 f800 	mul.w	r8, r8, r0
 800031c:	45a0      	cmp	r8, r4
 800031e:	d907      	bls.n	8000330 <__udivmoddi4+0x10c>
 8000320:	193c      	adds	r4, r7, r4
 8000322:	f100 33ff 	add.w	r3, r0, #4294967295
 8000326:	d202      	bcs.n	800032e <__udivmoddi4+0x10a>
 8000328:	45a0      	cmp	r8, r4
 800032a:	f200 80d9 	bhi.w	80004e0 <__udivmoddi4+0x2bc>
 800032e:	4618      	mov	r0, r3
 8000330:	eba4 0408 	sub.w	r4, r4, r8
 8000334:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000338:	e7bf      	b.n	80002ba <__udivmoddi4+0x96>
 800033a:	428b      	cmp	r3, r1
 800033c:	d909      	bls.n	8000352 <__udivmoddi4+0x12e>
 800033e:	2d00      	cmp	r5, #0
 8000340:	f000 80b1 	beq.w	80004a6 <__udivmoddi4+0x282>
 8000344:	2600      	movs	r6, #0
 8000346:	e9c5 0100 	strd	r0, r1, [r5]
 800034a:	4630      	mov	r0, r6
 800034c:	4631      	mov	r1, r6
 800034e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000352:	fab3 f683 	clz	r6, r3
 8000356:	2e00      	cmp	r6, #0
 8000358:	d14a      	bne.n	80003f0 <__udivmoddi4+0x1cc>
 800035a:	428b      	cmp	r3, r1
 800035c:	d302      	bcc.n	8000364 <__udivmoddi4+0x140>
 800035e:	4282      	cmp	r2, r0
 8000360:	f200 80b8 	bhi.w	80004d4 <__udivmoddi4+0x2b0>
 8000364:	1a84      	subs	r4, r0, r2
 8000366:	eb61 0103 	sbc.w	r1, r1, r3
 800036a:	2001      	movs	r0, #1
 800036c:	468c      	mov	ip, r1
 800036e:	2d00      	cmp	r5, #0
 8000370:	d0a8      	beq.n	80002c4 <__udivmoddi4+0xa0>
 8000372:	e9c5 4c00 	strd	r4, ip, [r5]
 8000376:	e7a5      	b.n	80002c4 <__udivmoddi4+0xa0>
 8000378:	f1c2 0320 	rsb	r3, r2, #32
 800037c:	fa20 f603 	lsr.w	r6, r0, r3
 8000380:	4097      	lsls	r7, r2
 8000382:	fa01 f002 	lsl.w	r0, r1, r2
 8000386:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800038a:	40d9      	lsrs	r1, r3
 800038c:	4330      	orrs	r0, r6
 800038e:	0c03      	lsrs	r3, r0, #16
 8000390:	fbb1 f6fe 	udiv	r6, r1, lr
 8000394:	fa1f f887 	uxth.w	r8, r7
 8000398:	fb0e 1116 	mls	r1, lr, r6, r1
 800039c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003a0:	fb06 f108 	mul.w	r1, r6, r8
 80003a4:	4299      	cmp	r1, r3
 80003a6:	fa04 f402 	lsl.w	r4, r4, r2
 80003aa:	d909      	bls.n	80003c0 <__udivmoddi4+0x19c>
 80003ac:	18fb      	adds	r3, r7, r3
 80003ae:	f106 3cff 	add.w	ip, r6, #4294967295
 80003b2:	f080 808d 	bcs.w	80004d0 <__udivmoddi4+0x2ac>
 80003b6:	4299      	cmp	r1, r3
 80003b8:	f240 808a 	bls.w	80004d0 <__udivmoddi4+0x2ac>
 80003bc:	3e02      	subs	r6, #2
 80003be:	443b      	add	r3, r7
 80003c0:	1a5b      	subs	r3, r3, r1
 80003c2:	b281      	uxth	r1, r0
 80003c4:	fbb3 f0fe 	udiv	r0, r3, lr
 80003c8:	fb0e 3310 	mls	r3, lr, r0, r3
 80003cc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003d0:	fb00 f308 	mul.w	r3, r0, r8
 80003d4:	428b      	cmp	r3, r1
 80003d6:	d907      	bls.n	80003e8 <__udivmoddi4+0x1c4>
 80003d8:	1879      	adds	r1, r7, r1
 80003da:	f100 3cff 	add.w	ip, r0, #4294967295
 80003de:	d273      	bcs.n	80004c8 <__udivmoddi4+0x2a4>
 80003e0:	428b      	cmp	r3, r1
 80003e2:	d971      	bls.n	80004c8 <__udivmoddi4+0x2a4>
 80003e4:	3802      	subs	r0, #2
 80003e6:	4439      	add	r1, r7
 80003e8:	1acb      	subs	r3, r1, r3
 80003ea:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003ee:	e778      	b.n	80002e2 <__udivmoddi4+0xbe>
 80003f0:	f1c6 0c20 	rsb	ip, r6, #32
 80003f4:	fa03 f406 	lsl.w	r4, r3, r6
 80003f8:	fa22 f30c 	lsr.w	r3, r2, ip
 80003fc:	431c      	orrs	r4, r3
 80003fe:	fa20 f70c 	lsr.w	r7, r0, ip
 8000402:	fa01 f306 	lsl.w	r3, r1, r6
 8000406:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 800040a:	fa21 f10c 	lsr.w	r1, r1, ip
 800040e:	431f      	orrs	r7, r3
 8000410:	0c3b      	lsrs	r3, r7, #16
 8000412:	fbb1 f9fe 	udiv	r9, r1, lr
 8000416:	fa1f f884 	uxth.w	r8, r4
 800041a:	fb0e 1119 	mls	r1, lr, r9, r1
 800041e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000422:	fb09 fa08 	mul.w	sl, r9, r8
 8000426:	458a      	cmp	sl, r1
 8000428:	fa02 f206 	lsl.w	r2, r2, r6
 800042c:	fa00 f306 	lsl.w	r3, r0, r6
 8000430:	d908      	bls.n	8000444 <__udivmoddi4+0x220>
 8000432:	1861      	adds	r1, r4, r1
 8000434:	f109 30ff 	add.w	r0, r9, #4294967295
 8000438:	d248      	bcs.n	80004cc <__udivmoddi4+0x2a8>
 800043a:	458a      	cmp	sl, r1
 800043c:	d946      	bls.n	80004cc <__udivmoddi4+0x2a8>
 800043e:	f1a9 0902 	sub.w	r9, r9, #2
 8000442:	4421      	add	r1, r4
 8000444:	eba1 010a 	sub.w	r1, r1, sl
 8000448:	b2bf      	uxth	r7, r7
 800044a:	fbb1 f0fe 	udiv	r0, r1, lr
 800044e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000452:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000456:	fb00 f808 	mul.w	r8, r0, r8
 800045a:	45b8      	cmp	r8, r7
 800045c:	d907      	bls.n	800046e <__udivmoddi4+0x24a>
 800045e:	19e7      	adds	r7, r4, r7
 8000460:	f100 31ff 	add.w	r1, r0, #4294967295
 8000464:	d22e      	bcs.n	80004c4 <__udivmoddi4+0x2a0>
 8000466:	45b8      	cmp	r8, r7
 8000468:	d92c      	bls.n	80004c4 <__udivmoddi4+0x2a0>
 800046a:	3802      	subs	r0, #2
 800046c:	4427      	add	r7, r4
 800046e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000472:	eba7 0708 	sub.w	r7, r7, r8
 8000476:	fba0 8902 	umull	r8, r9, r0, r2
 800047a:	454f      	cmp	r7, r9
 800047c:	46c6      	mov	lr, r8
 800047e:	4649      	mov	r1, r9
 8000480:	d31a      	bcc.n	80004b8 <__udivmoddi4+0x294>
 8000482:	d017      	beq.n	80004b4 <__udivmoddi4+0x290>
 8000484:	b15d      	cbz	r5, 800049e <__udivmoddi4+0x27a>
 8000486:	ebb3 020e 	subs.w	r2, r3, lr
 800048a:	eb67 0701 	sbc.w	r7, r7, r1
 800048e:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000492:	40f2      	lsrs	r2, r6
 8000494:	ea4c 0202 	orr.w	r2, ip, r2
 8000498:	40f7      	lsrs	r7, r6
 800049a:	e9c5 2700 	strd	r2, r7, [r5]
 800049e:	2600      	movs	r6, #0
 80004a0:	4631      	mov	r1, r6
 80004a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004a6:	462e      	mov	r6, r5
 80004a8:	4628      	mov	r0, r5
 80004aa:	e70b      	b.n	80002c4 <__udivmoddi4+0xa0>
 80004ac:	4606      	mov	r6, r0
 80004ae:	e6e9      	b.n	8000284 <__udivmoddi4+0x60>
 80004b0:	4618      	mov	r0, r3
 80004b2:	e6fd      	b.n	80002b0 <__udivmoddi4+0x8c>
 80004b4:	4543      	cmp	r3, r8
 80004b6:	d2e5      	bcs.n	8000484 <__udivmoddi4+0x260>
 80004b8:	ebb8 0e02 	subs.w	lr, r8, r2
 80004bc:	eb69 0104 	sbc.w	r1, r9, r4
 80004c0:	3801      	subs	r0, #1
 80004c2:	e7df      	b.n	8000484 <__udivmoddi4+0x260>
 80004c4:	4608      	mov	r0, r1
 80004c6:	e7d2      	b.n	800046e <__udivmoddi4+0x24a>
 80004c8:	4660      	mov	r0, ip
 80004ca:	e78d      	b.n	80003e8 <__udivmoddi4+0x1c4>
 80004cc:	4681      	mov	r9, r0
 80004ce:	e7b9      	b.n	8000444 <__udivmoddi4+0x220>
 80004d0:	4666      	mov	r6, ip
 80004d2:	e775      	b.n	80003c0 <__udivmoddi4+0x19c>
 80004d4:	4630      	mov	r0, r6
 80004d6:	e74a      	b.n	800036e <__udivmoddi4+0x14a>
 80004d8:	f1ac 0c02 	sub.w	ip, ip, #2
 80004dc:	4439      	add	r1, r7
 80004de:	e713      	b.n	8000308 <__udivmoddi4+0xe4>
 80004e0:	3802      	subs	r0, #2
 80004e2:	443c      	add	r4, r7
 80004e4:	e724      	b.n	8000330 <__udivmoddi4+0x10c>
 80004e6:	bf00      	nop

080004e8 <__aeabi_idiv0>:
 80004e8:	4770      	bx	lr
 80004ea:	bf00      	nop

080004ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004ec:	b580      	push	{r7, lr}
 80004ee:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004f0:	f000 fde2 	bl	80010b8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004f4:	f000 f814 	bl	8000520 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004f8:	f000 f9be 	bl	8000878 <MX_GPIO_Init>
  MX_FMC_Init();
 80004fc:	f000 f95a 	bl	80007b4 <MX_FMC_Init>
  MX_USB_DEVICE_Init();
 8000500:	f007 fee0 	bl	80082c4 <MX_USB_DEVICE_Init>
  MX_LTDC_Init();
 8000504:	f000 f87a 	bl	80005fc <MX_LTDC_Init>
  MX_UART4_Init();
 8000508:	f000 f92a 	bl	8000760 <MX_UART4_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart4, rx_buff, sizeof(rx_buff));
 800050c:	2201      	movs	r2, #1
 800050e:	4902      	ldr	r1, [pc, #8]	; (8000518 <main+0x2c>)
 8000510:	4802      	ldr	r0, [pc, #8]	; (800051c <main+0x30>)
 8000512:	f003 febc 	bl	800428e <HAL_UART_Receive_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000516:	e7fe      	b.n	8000516 <main+0x2a>
 8000518:	200003d8 	.word	0x200003d8
 800051c:	200004d4 	.word	0x200004d4

08000520 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000520:	b580      	push	{r7, lr}
 8000522:	b094      	sub	sp, #80	; 0x50
 8000524:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000526:	f107 031c 	add.w	r3, r7, #28
 800052a:	2234      	movs	r2, #52	; 0x34
 800052c:	2100      	movs	r1, #0
 800052e:	4618      	mov	r0, r3
 8000530:	f008 fc82 	bl	8008e38 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000534:	f107 0308 	add.w	r3, r7, #8
 8000538:	2200      	movs	r2, #0
 800053a:	601a      	str	r2, [r3, #0]
 800053c:	605a      	str	r2, [r3, #4]
 800053e:	609a      	str	r2, [r3, #8]
 8000540:	60da      	str	r2, [r3, #12]
 8000542:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000544:	2300      	movs	r3, #0
 8000546:	607b      	str	r3, [r7, #4]
 8000548:	4b2a      	ldr	r3, [pc, #168]	; (80005f4 <SystemClock_Config+0xd4>)
 800054a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800054c:	4a29      	ldr	r2, [pc, #164]	; (80005f4 <SystemClock_Config+0xd4>)
 800054e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000552:	6413      	str	r3, [r2, #64]	; 0x40
 8000554:	4b27      	ldr	r3, [pc, #156]	; (80005f4 <SystemClock_Config+0xd4>)
 8000556:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000558:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800055c:	607b      	str	r3, [r7, #4]
 800055e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000560:	2300      	movs	r3, #0
 8000562:	603b      	str	r3, [r7, #0]
 8000564:	4b24      	ldr	r3, [pc, #144]	; (80005f8 <SystemClock_Config+0xd8>)
 8000566:	681b      	ldr	r3, [r3, #0]
 8000568:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800056c:	4a22      	ldr	r2, [pc, #136]	; (80005f8 <SystemClock_Config+0xd8>)
 800056e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000572:	6013      	str	r3, [r2, #0]
 8000574:	4b20      	ldr	r3, [pc, #128]	; (80005f8 <SystemClock_Config+0xd8>)
 8000576:	681b      	ldr	r3, [r3, #0]
 8000578:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800057c:	603b      	str	r3, [r7, #0]
 800057e:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000580:	2301      	movs	r3, #1
 8000582:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000584:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000588:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800058a:	2302      	movs	r3, #2
 800058c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800058e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000592:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000594:	2319      	movs	r3, #25
 8000596:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 192;
 8000598:	23c0      	movs	r3, #192	; 0xc0
 800059a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800059c:	2302      	movs	r3, #2
 800059e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80005a0:	2304      	movs	r3, #4
 80005a2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80005a4:	2302      	movs	r3, #2
 80005a6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005a8:	f107 031c 	add.w	r3, r7, #28
 80005ac:	4618      	mov	r0, r3
 80005ae:	f003 fac7 	bl	8003b40 <HAL_RCC_OscConfig>
 80005b2:	4603      	mov	r3, r0
 80005b4:	2b00      	cmp	r3, #0
 80005b6:	d001      	beq.n	80005bc <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80005b8:	f000 fac2 	bl	8000b40 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005bc:	230f      	movs	r3, #15
 80005be:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005c0:	2302      	movs	r3, #2
 80005c2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 80005c4:	2380      	movs	r3, #128	; 0x80
 80005c6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80005c8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80005cc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80005ce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005d2:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80005d4:	f107 0308 	add.w	r3, r7, #8
 80005d8:	2101      	movs	r1, #1
 80005da:	4618      	mov	r0, r3
 80005dc:	f002 fea2 	bl	8003324 <HAL_RCC_ClockConfig>
 80005e0:	4603      	mov	r3, r0
 80005e2:	2b00      	cmp	r3, #0
 80005e4:	d001      	beq.n	80005ea <SystemClock_Config+0xca>
  {
    Error_Handler();
 80005e6:	f000 faab 	bl	8000b40 <Error_Handler>
  }
}
 80005ea:	bf00      	nop
 80005ec:	3750      	adds	r7, #80	; 0x50
 80005ee:	46bd      	mov	sp, r7
 80005f0:	bd80      	pop	{r7, pc}
 80005f2:	bf00      	nop
 80005f4:	40023800 	.word	0x40023800
 80005f8:	40007000 	.word	0x40007000

080005fc <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	b09a      	sub	sp, #104	; 0x68
 8000600:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8000602:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000606:	2234      	movs	r2, #52	; 0x34
 8000608:	2100      	movs	r1, #0
 800060a:	4618      	mov	r0, r3
 800060c:	f008 fc14 	bl	8008e38 <memset>
  LTDC_LayerCfgTypeDef pLayerCfg1 = {0};
 8000610:	463b      	mov	r3, r7
 8000612:	2234      	movs	r2, #52	; 0x34
 8000614:	2100      	movs	r1, #0
 8000616:	4618      	mov	r0, r3
 8000618:	f008 fc0e 	bl	8008e38 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 800061c:	4b4e      	ldr	r3, [pc, #312]	; (8000758 <MX_LTDC_Init+0x15c>)
 800061e:	4a4f      	ldr	r2, [pc, #316]	; (800075c <MX_LTDC_Init+0x160>)
 8000620:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8000622:	4b4d      	ldr	r3, [pc, #308]	; (8000758 <MX_LTDC_Init+0x15c>)
 8000624:	2200      	movs	r2, #0
 8000626:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8000628:	4b4b      	ldr	r3, [pc, #300]	; (8000758 <MX_LTDC_Init+0x15c>)
 800062a:	2200      	movs	r2, #0
 800062c:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 800062e:	4b4a      	ldr	r3, [pc, #296]	; (8000758 <MX_LTDC_Init+0x15c>)
 8000630:	2200      	movs	r2, #0
 8000632:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8000634:	4b48      	ldr	r3, [pc, #288]	; (8000758 <MX_LTDC_Init+0x15c>)
 8000636:	2200      	movs	r2, #0
 8000638:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 47;
 800063a:	4b47      	ldr	r3, [pc, #284]	; (8000758 <MX_LTDC_Init+0x15c>)
 800063c:	222f      	movs	r2, #47	; 0x2f
 800063e:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 0;
 8000640:	4b45      	ldr	r3, [pc, #276]	; (8000758 <MX_LTDC_Init+0x15c>)
 8000642:	2200      	movs	r2, #0
 8000644:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 87;
 8000646:	4b44      	ldr	r3, [pc, #272]	; (8000758 <MX_LTDC_Init+0x15c>)
 8000648:	2257      	movs	r2, #87	; 0x57
 800064a:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 31;
 800064c:	4b42      	ldr	r3, [pc, #264]	; (8000758 <MX_LTDC_Init+0x15c>)
 800064e:	221f      	movs	r2, #31
 8000650:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 887;
 8000652:	4b41      	ldr	r3, [pc, #260]	; (8000758 <MX_LTDC_Init+0x15c>)
 8000654:	f240 3277 	movw	r2, #887	; 0x377
 8000658:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 511;
 800065a:	4b3f      	ldr	r3, [pc, #252]	; (8000758 <MX_LTDC_Init+0x15c>)
 800065c:	f240 12ff 	movw	r2, #511	; 0x1ff
 8000660:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 927;
 8000662:	4b3d      	ldr	r3, [pc, #244]	; (8000758 <MX_LTDC_Init+0x15c>)
 8000664:	f240 329f 	movw	r2, #927	; 0x39f
 8000668:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 524;
 800066a:	4b3b      	ldr	r3, [pc, #236]	; (8000758 <MX_LTDC_Init+0x15c>)
 800066c:	f44f 7203 	mov.w	r2, #524	; 0x20c
 8000670:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 50;
 8000672:	4b39      	ldr	r3, [pc, #228]	; (8000758 <MX_LTDC_Init+0x15c>)
 8000674:	2232      	movs	r2, #50	; 0x32
 8000676:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 120;
 800067a:	4b37      	ldr	r3, [pc, #220]	; (8000758 <MX_LTDC_Init+0x15c>)
 800067c:	2278      	movs	r2, #120	; 0x78
 800067e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 255;
 8000682:	4b35      	ldr	r3, [pc, #212]	; (8000758 <MX_LTDC_Init+0x15c>)
 8000684:	22ff      	movs	r2, #255	; 0xff
 8000686:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 800068a:	4833      	ldr	r0, [pc, #204]	; (8000758 <MX_LTDC_Init+0x15c>)
 800068c:	f001 f914 	bl	80018b8 <HAL_LTDC_Init>
 8000690:	4603      	mov	r3, r0
 8000692:	2b00      	cmp	r3, #0
 8000694:	d001      	beq.n	800069a <MX_LTDC_Init+0x9e>
  {
    Error_Handler();
 8000696:	f000 fa53 	bl	8000b40 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 800069a:	2300      	movs	r3, #0
 800069c:	637b      	str	r3, [r7, #52]	; 0x34
  pLayerCfg.WindowX1 = 0;
 800069e:	2300      	movs	r3, #0
 80006a0:	63bb      	str	r3, [r7, #56]	; 0x38
  pLayerCfg.WindowY0 = 0;
 80006a2:	2300      	movs	r3, #0
 80006a4:	63fb      	str	r3, [r7, #60]	; 0x3c
  pLayerCfg.WindowY1 = 0;
 80006a6:	2300      	movs	r3, #0
 80006a8:	643b      	str	r3, [r7, #64]	; 0x40
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 80006aa:	2300      	movs	r3, #0
 80006ac:	647b      	str	r3, [r7, #68]	; 0x44
  pLayerCfg.Alpha = 0;
 80006ae:	2300      	movs	r3, #0
 80006b0:	64bb      	str	r3, [r7, #72]	; 0x48
  pLayerCfg.Alpha0 = 0;
 80006b2:	2300      	movs	r3, #0
 80006b4:	64fb      	str	r3, [r7, #76]	; 0x4c
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 80006b6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80006ba:	653b      	str	r3, [r7, #80]	; 0x50
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 80006bc:	2305      	movs	r3, #5
 80006be:	657b      	str	r3, [r7, #84]	; 0x54
  pLayerCfg.FBStartAdress = 0;
 80006c0:	2300      	movs	r3, #0
 80006c2:	65bb      	str	r3, [r7, #88]	; 0x58
  pLayerCfg.ImageWidth = 0;
 80006c4:	2300      	movs	r3, #0
 80006c6:	65fb      	str	r3, [r7, #92]	; 0x5c
  pLayerCfg.ImageHeight = 0;
 80006c8:	2300      	movs	r3, #0
 80006ca:	663b      	str	r3, [r7, #96]	; 0x60
  pLayerCfg.Backcolor.Blue = 0;
 80006cc:	2300      	movs	r3, #0
 80006ce:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  pLayerCfg.Backcolor.Green = 0;
 80006d2:	2300      	movs	r3, #0
 80006d4:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
  pLayerCfg.Backcolor.Red = 0;
 80006d8:	2300      	movs	r3, #0
 80006da:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 80006de:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80006e2:	2200      	movs	r2, #0
 80006e4:	4619      	mov	r1, r3
 80006e6:	481c      	ldr	r0, [pc, #112]	; (8000758 <MX_LTDC_Init+0x15c>)
 80006e8:	f001 fa78 	bl	8001bdc <HAL_LTDC_ConfigLayer>
 80006ec:	4603      	mov	r3, r0
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	d001      	beq.n	80006f6 <MX_LTDC_Init+0xfa>
  {
    Error_Handler();
 80006f2:	f000 fa25 	bl	8000b40 <Error_Handler>
  }
  pLayerCfg1.WindowX0 = 0;
 80006f6:	2300      	movs	r3, #0
 80006f8:	603b      	str	r3, [r7, #0]
  pLayerCfg1.WindowX1 = 0;
 80006fa:	2300      	movs	r3, #0
 80006fc:	607b      	str	r3, [r7, #4]
  pLayerCfg1.WindowY0 = 0;
 80006fe:	2300      	movs	r3, #0
 8000700:	60bb      	str	r3, [r7, #8]
  pLayerCfg1.WindowY1 = 0;
 8000702:	2300      	movs	r3, #0
 8000704:	60fb      	str	r3, [r7, #12]
  pLayerCfg1.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8000706:	2300      	movs	r3, #0
 8000708:	613b      	str	r3, [r7, #16]
  pLayerCfg1.Alpha = 0;
 800070a:	2300      	movs	r3, #0
 800070c:	617b      	str	r3, [r7, #20]
  pLayerCfg1.Alpha0 = 0;
 800070e:	2300      	movs	r3, #0
 8000710:	61bb      	str	r3, [r7, #24]
  pLayerCfg1.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8000712:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000716:	61fb      	str	r3, [r7, #28]
  pLayerCfg1.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8000718:	2305      	movs	r3, #5
 800071a:	623b      	str	r3, [r7, #32]
  pLayerCfg1.FBStartAdress = 0;
 800071c:	2300      	movs	r3, #0
 800071e:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg1.ImageWidth = 0;
 8000720:	2300      	movs	r3, #0
 8000722:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg1.ImageHeight = 0;
 8000724:	2300      	movs	r3, #0
 8000726:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg1.Backcolor.Blue = 0;
 8000728:	2300      	movs	r3, #0
 800072a:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  pLayerCfg1.Backcolor.Green = 0;
 800072e:	2300      	movs	r3, #0
 8000730:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  pLayerCfg1.Backcolor.Red = 0;
 8000734:	2300      	movs	r3, #0
 8000736:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg1, 1) != HAL_OK)
 800073a:	463b      	mov	r3, r7
 800073c:	2201      	movs	r2, #1
 800073e:	4619      	mov	r1, r3
 8000740:	4805      	ldr	r0, [pc, #20]	; (8000758 <MX_LTDC_Init+0x15c>)
 8000742:	f001 fa4b 	bl	8001bdc <HAL_LTDC_ConfigLayer>
 8000746:	4603      	mov	r3, r0
 8000748:	2b00      	cmp	r3, #0
 800074a:	d001      	beq.n	8000750 <MX_LTDC_Init+0x154>
  {
    Error_Handler();
 800074c:	f000 f9f8 	bl	8000b40 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8000750:	bf00      	nop
 8000752:	3768      	adds	r7, #104	; 0x68
 8000754:	46bd      	mov	sp, r7
 8000756:	bd80      	pop	{r7, pc}
 8000758:	2000042c 	.word	0x2000042c
 800075c:	40016800 	.word	0x40016800

08000760 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8000764:	4b11      	ldr	r3, [pc, #68]	; (80007ac <MX_UART4_Init+0x4c>)
 8000766:	4a12      	ldr	r2, [pc, #72]	; (80007b0 <MX_UART4_Init+0x50>)
 8000768:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 800076a:	4b10      	ldr	r3, [pc, #64]	; (80007ac <MX_UART4_Init+0x4c>)
 800076c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000770:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8000772:	4b0e      	ldr	r3, [pc, #56]	; (80007ac <MX_UART4_Init+0x4c>)
 8000774:	2200      	movs	r2, #0
 8000776:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000778:	4b0c      	ldr	r3, [pc, #48]	; (80007ac <MX_UART4_Init+0x4c>)
 800077a:	2200      	movs	r2, #0
 800077c:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800077e:	4b0b      	ldr	r3, [pc, #44]	; (80007ac <MX_UART4_Init+0x4c>)
 8000780:	2200      	movs	r2, #0
 8000782:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8000784:	4b09      	ldr	r3, [pc, #36]	; (80007ac <MX_UART4_Init+0x4c>)
 8000786:	220c      	movs	r2, #12
 8000788:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800078a:	4b08      	ldr	r3, [pc, #32]	; (80007ac <MX_UART4_Init+0x4c>)
 800078c:	2200      	movs	r2, #0
 800078e:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000790:	4b06      	ldr	r3, [pc, #24]	; (80007ac <MX_UART4_Init+0x4c>)
 8000792:	2200      	movs	r2, #0
 8000794:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8000796:	4805      	ldr	r0, [pc, #20]	; (80007ac <MX_UART4_Init+0x4c>)
 8000798:	f003 fc9a 	bl	80040d0 <HAL_UART_Init>
 800079c:	4603      	mov	r3, r0
 800079e:	2b00      	cmp	r3, #0
 80007a0:	d001      	beq.n	80007a6 <MX_UART4_Init+0x46>
  {
    Error_Handler();
 80007a2:	f000 f9cd 	bl	8000b40 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 80007a6:	bf00      	nop
 80007a8:	bd80      	pop	{r7, pc}
 80007aa:	bf00      	nop
 80007ac:	200004d4 	.word	0x200004d4
 80007b0:	40004c00 	.word	0x40004c00

080007b4 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	b088      	sub	sp, #32
 80007b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_NORSRAM_TimingTypeDef Timing = {0};
 80007ba:	1d3b      	adds	r3, r7, #4
 80007bc:	2200      	movs	r2, #0
 80007be:	601a      	str	r2, [r3, #0]
 80007c0:	605a      	str	r2, [r3, #4]
 80007c2:	609a      	str	r2, [r3, #8]
 80007c4:	60da      	str	r2, [r3, #12]
 80007c6:	611a      	str	r2, [r3, #16]
 80007c8:	615a      	str	r2, [r3, #20]
 80007ca:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FMC_NORSRAM_DEVICE;
 80007cc:	4b28      	ldr	r3, [pc, #160]	; (8000870 <MX_FMC_Init+0xbc>)
 80007ce:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 80007d2:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FMC_NORSRAM_EXTENDED_DEVICE;
 80007d4:	4b26      	ldr	r3, [pc, #152]	; (8000870 <MX_FMC_Init+0xbc>)
 80007d6:	4a27      	ldr	r2, [pc, #156]	; (8000874 <MX_FMC_Init+0xc0>)
 80007d8:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FMC_NORSRAM_BANK2;
 80007da:	4b25      	ldr	r3, [pc, #148]	; (8000870 <MX_FMC_Init+0xbc>)
 80007dc:	2202      	movs	r2, #2
 80007de:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FMC_DATA_ADDRESS_MUX_DISABLE;
 80007e0:	4b23      	ldr	r3, [pc, #140]	; (8000870 <MX_FMC_Init+0xbc>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FMC_MEMORY_TYPE_SRAM;
 80007e6:	4b22      	ldr	r3, [pc, #136]	; (8000870 <MX_FMC_Init+0xbc>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FMC_NORSRAM_MEM_BUS_WIDTH_16;
 80007ec:	4b20      	ldr	r3, [pc, #128]	; (8000870 <MX_FMC_Init+0xbc>)
 80007ee:	2210      	movs	r2, #16
 80007f0:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FMC_BURST_ACCESS_MODE_DISABLE;
 80007f2:	4b1f      	ldr	r3, [pc, #124]	; (8000870 <MX_FMC_Init+0xbc>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FMC_WAIT_SIGNAL_POLARITY_LOW;
 80007f8:	4b1d      	ldr	r3, [pc, #116]	; (8000870 <MX_FMC_Init+0xbc>)
 80007fa:	2200      	movs	r2, #0
 80007fc:	61da      	str	r2, [r3, #28]
  hsram1.Init.WaitSignalActive = FMC_WAIT_TIMING_BEFORE_WS;
 80007fe:	4b1c      	ldr	r3, [pc, #112]	; (8000870 <MX_FMC_Init+0xbc>)
 8000800:	2200      	movs	r2, #0
 8000802:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WriteOperation = FMC_WRITE_OPERATION_DISABLE;
 8000804:	4b1a      	ldr	r3, [pc, #104]	; (8000870 <MX_FMC_Init+0xbc>)
 8000806:	2200      	movs	r2, #0
 8000808:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.WaitSignal = FMC_WAIT_SIGNAL_DISABLE;
 800080a:	4b19      	ldr	r3, [pc, #100]	; (8000870 <MX_FMC_Init+0xbc>)
 800080c:	2200      	movs	r2, #0
 800080e:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.ExtendedMode = FMC_EXTENDED_MODE_DISABLE;
 8000810:	4b17      	ldr	r3, [pc, #92]	; (8000870 <MX_FMC_Init+0xbc>)
 8000812:	2200      	movs	r2, #0
 8000814:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.AsynchronousWait = FMC_ASYNCHRONOUS_WAIT_DISABLE;
 8000816:	4b16      	ldr	r3, [pc, #88]	; (8000870 <MX_FMC_Init+0xbc>)
 8000818:	2200      	movs	r2, #0
 800081a:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.WriteBurst = FMC_WRITE_BURST_DISABLE;
 800081c:	4b14      	ldr	r3, [pc, #80]	; (8000870 <MX_FMC_Init+0xbc>)
 800081e:	2200      	movs	r2, #0
 8000820:	639a      	str	r2, [r3, #56]	; 0x38
  hsram1.Init.ContinuousClock = FMC_CONTINUOUS_CLOCK_SYNC_ONLY;
 8000822:	4b13      	ldr	r3, [pc, #76]	; (8000870 <MX_FMC_Init+0xbc>)
 8000824:	2200      	movs	r2, #0
 8000826:	63da      	str	r2, [r3, #60]	; 0x3c
  hsram1.Init.WriteFifo = FMC_WRITE_FIFO_DISABLE;
 8000828:	4b11      	ldr	r3, [pc, #68]	; (8000870 <MX_FMC_Init+0xbc>)
 800082a:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800082e:	641a      	str	r2, [r3, #64]	; 0x40
  hsram1.Init.PageSize = FMC_PAGE_SIZE_NONE;
 8000830:	4b0f      	ldr	r3, [pc, #60]	; (8000870 <MX_FMC_Init+0xbc>)
 8000832:	2200      	movs	r2, #0
 8000834:	645a      	str	r2, [r3, #68]	; 0x44
  /* Timing */
  Timing.AddressSetupTime = 10;
 8000836:	230a      	movs	r3, #10
 8000838:	607b      	str	r3, [r7, #4]
  Timing.AddressHoldTime = 15;
 800083a:	230f      	movs	r3, #15
 800083c:	60bb      	str	r3, [r7, #8]
  Timing.DataSetupTime = 10;
 800083e:	230a      	movs	r3, #10
 8000840:	60fb      	str	r3, [r7, #12]
  Timing.BusTurnAroundDuration = 2;
 8000842:	2302      	movs	r3, #2
 8000844:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 8000846:	2310      	movs	r3, #16
 8000848:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 800084a:	2311      	movs	r3, #17
 800084c:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FMC_ACCESS_MODE_A;
 800084e:	2300      	movs	r3, #0
 8000850:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK)
 8000852:	1d3b      	adds	r3, r7, #4
 8000854:	2200      	movs	r2, #0
 8000856:	4619      	mov	r1, r3
 8000858:	4805      	ldr	r0, [pc, #20]	; (8000870 <MX_FMC_Init+0xbc>)
 800085a:	f003 fbf5 	bl	8004048 <HAL_SRAM_Init>
 800085e:	4603      	mov	r3, r0
 8000860:	2b00      	cmp	r3, #0
 8000862:	d001      	beq.n	8000868 <MX_FMC_Init+0xb4>
  {
    Error_Handler( );
 8000864:	f000 f96c 	bl	8000b40 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8000868:	bf00      	nop
 800086a:	3720      	adds	r7, #32
 800086c:	46bd      	mov	sp, r7
 800086e:	bd80      	pop	{r7, pc}
 8000870:	200003dc 	.word	0x200003dc
 8000874:	a0000104 	.word	0xa0000104

08000878 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	b090      	sub	sp, #64	; 0x40
 800087c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800087e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000882:	2200      	movs	r2, #0
 8000884:	601a      	str	r2, [r3, #0]
 8000886:	605a      	str	r2, [r3, #4]
 8000888:	609a      	str	r2, [r3, #8]
 800088a:	60da      	str	r2, [r3, #12]
 800088c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800088e:	2300      	movs	r3, #0
 8000890:	62bb      	str	r3, [r7, #40]	; 0x28
 8000892:	4b58      	ldr	r3, [pc, #352]	; (80009f4 <MX_GPIO_Init+0x17c>)
 8000894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000896:	4a57      	ldr	r2, [pc, #348]	; (80009f4 <MX_GPIO_Init+0x17c>)
 8000898:	f043 0310 	orr.w	r3, r3, #16
 800089c:	6313      	str	r3, [r2, #48]	; 0x30
 800089e:	4b55      	ldr	r3, [pc, #340]	; (80009f4 <MX_GPIO_Init+0x17c>)
 80008a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008a2:	f003 0310 	and.w	r3, r3, #16
 80008a6:	62bb      	str	r3, [r7, #40]	; 0x28
 80008a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008aa:	2300      	movs	r3, #0
 80008ac:	627b      	str	r3, [r7, #36]	; 0x24
 80008ae:	4b51      	ldr	r3, [pc, #324]	; (80009f4 <MX_GPIO_Init+0x17c>)
 80008b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008b2:	4a50      	ldr	r2, [pc, #320]	; (80009f4 <MX_GPIO_Init+0x17c>)
 80008b4:	f043 0304 	orr.w	r3, r3, #4
 80008b8:	6313      	str	r3, [r2, #48]	; 0x30
 80008ba:	4b4e      	ldr	r3, [pc, #312]	; (80009f4 <MX_GPIO_Init+0x17c>)
 80008bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008be:	f003 0304 	and.w	r3, r3, #4
 80008c2:	627b      	str	r3, [r7, #36]	; 0x24
 80008c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOI_CLK_ENABLE();
 80008c6:	2300      	movs	r3, #0
 80008c8:	623b      	str	r3, [r7, #32]
 80008ca:	4b4a      	ldr	r3, [pc, #296]	; (80009f4 <MX_GPIO_Init+0x17c>)
 80008cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ce:	4a49      	ldr	r2, [pc, #292]	; (80009f4 <MX_GPIO_Init+0x17c>)
 80008d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80008d4:	6313      	str	r3, [r2, #48]	; 0x30
 80008d6:	4b47      	ldr	r3, [pc, #284]	; (80009f4 <MX_GPIO_Init+0x17c>)
 80008d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80008de:	623b      	str	r3, [r7, #32]
 80008e0:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80008e2:	2300      	movs	r3, #0
 80008e4:	61fb      	str	r3, [r7, #28]
 80008e6:	4b43      	ldr	r3, [pc, #268]	; (80009f4 <MX_GPIO_Init+0x17c>)
 80008e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ea:	4a42      	ldr	r2, [pc, #264]	; (80009f4 <MX_GPIO_Init+0x17c>)
 80008ec:	f043 0320 	orr.w	r3, r3, #32
 80008f0:	6313      	str	r3, [r2, #48]	; 0x30
 80008f2:	4b40      	ldr	r3, [pc, #256]	; (80009f4 <MX_GPIO_Init+0x17c>)
 80008f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008f6:	f003 0320 	and.w	r3, r3, #32
 80008fa:	61fb      	str	r3, [r7, #28]
 80008fc:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008fe:	2300      	movs	r3, #0
 8000900:	61bb      	str	r3, [r7, #24]
 8000902:	4b3c      	ldr	r3, [pc, #240]	; (80009f4 <MX_GPIO_Init+0x17c>)
 8000904:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000906:	4a3b      	ldr	r2, [pc, #236]	; (80009f4 <MX_GPIO_Init+0x17c>)
 8000908:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800090c:	6313      	str	r3, [r2, #48]	; 0x30
 800090e:	4b39      	ldr	r3, [pc, #228]	; (80009f4 <MX_GPIO_Init+0x17c>)
 8000910:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000912:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000916:	61bb      	str	r3, [r7, #24]
 8000918:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800091a:	2300      	movs	r3, #0
 800091c:	617b      	str	r3, [r7, #20]
 800091e:	4b35      	ldr	r3, [pc, #212]	; (80009f4 <MX_GPIO_Init+0x17c>)
 8000920:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000922:	4a34      	ldr	r2, [pc, #208]	; (80009f4 <MX_GPIO_Init+0x17c>)
 8000924:	f043 0302 	orr.w	r3, r3, #2
 8000928:	6313      	str	r3, [r2, #48]	; 0x30
 800092a:	4b32      	ldr	r3, [pc, #200]	; (80009f4 <MX_GPIO_Init+0x17c>)
 800092c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800092e:	f003 0302 	and.w	r3, r3, #2
 8000932:	617b      	str	r3, [r7, #20]
 8000934:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8000936:	2300      	movs	r3, #0
 8000938:	613b      	str	r3, [r7, #16]
 800093a:	4b2e      	ldr	r3, [pc, #184]	; (80009f4 <MX_GPIO_Init+0x17c>)
 800093c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800093e:	4a2d      	ldr	r2, [pc, #180]	; (80009f4 <MX_GPIO_Init+0x17c>)
 8000940:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000944:	6313      	str	r3, [r2, #48]	; 0x30
 8000946:	4b2b      	ldr	r3, [pc, #172]	; (80009f4 <MX_GPIO_Init+0x17c>)
 8000948:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800094a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800094e:	613b      	str	r3, [r7, #16]
 8000950:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000952:	2300      	movs	r3, #0
 8000954:	60fb      	str	r3, [r7, #12]
 8000956:	4b27      	ldr	r3, [pc, #156]	; (80009f4 <MX_GPIO_Init+0x17c>)
 8000958:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800095a:	4a26      	ldr	r2, [pc, #152]	; (80009f4 <MX_GPIO_Init+0x17c>)
 800095c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000960:	6313      	str	r3, [r2, #48]	; 0x30
 8000962:	4b24      	ldr	r3, [pc, #144]	; (80009f4 <MX_GPIO_Init+0x17c>)
 8000964:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000966:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800096a:	60fb      	str	r3, [r7, #12]
 800096c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800096e:	2300      	movs	r3, #0
 8000970:	60bb      	str	r3, [r7, #8]
 8000972:	4b20      	ldr	r3, [pc, #128]	; (80009f4 <MX_GPIO_Init+0x17c>)
 8000974:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000976:	4a1f      	ldr	r2, [pc, #124]	; (80009f4 <MX_GPIO_Init+0x17c>)
 8000978:	f043 0308 	orr.w	r3, r3, #8
 800097c:	6313      	str	r3, [r2, #48]	; 0x30
 800097e:	4b1d      	ldr	r3, [pc, #116]	; (80009f4 <MX_GPIO_Init+0x17c>)
 8000980:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000982:	f003 0308 	and.w	r3, r3, #8
 8000986:	60bb      	str	r3, [r7, #8]
 8000988:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800098a:	2300      	movs	r3, #0
 800098c:	607b      	str	r3, [r7, #4]
 800098e:	4b19      	ldr	r3, [pc, #100]	; (80009f4 <MX_GPIO_Init+0x17c>)
 8000990:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000992:	4a18      	ldr	r2, [pc, #96]	; (80009f4 <MX_GPIO_Init+0x17c>)
 8000994:	f043 0301 	orr.w	r3, r3, #1
 8000998:	6313      	str	r3, [r2, #48]	; 0x30
 800099a:	4b16      	ldr	r3, [pc, #88]	; (80009f4 <MX_GPIO_Init+0x17c>)
 800099c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800099e:	f003 0301 	and.w	r3, r3, #1
 80009a2:	607b      	str	r3, [r7, #4]
 80009a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 80009a6:	2300      	movs	r3, #0
 80009a8:	603b      	str	r3, [r7, #0]
 80009aa:	4b12      	ldr	r3, [pc, #72]	; (80009f4 <MX_GPIO_Init+0x17c>)
 80009ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ae:	4a11      	ldr	r2, [pc, #68]	; (80009f4 <MX_GPIO_Init+0x17c>)
 80009b0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80009b4:	6313      	str	r3, [r2, #48]	; 0x30
 80009b6:	4b0f      	ldr	r3, [pc, #60]	; (80009f4 <MX_GPIO_Init+0x17c>)
 80009b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80009be:	603b      	str	r3, [r7, #0]
 80009c0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_SET);
 80009c2:	2201      	movs	r2, #1
 80009c4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80009c8:	480b      	ldr	r0, [pc, #44]	; (80009f8 <MX_GPIO_Init+0x180>)
 80009ca:	f000 ff5b 	bl	8001884 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 80009ce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80009d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009d4:	2301      	movs	r3, #1
 80009d6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80009d8:	2301      	movs	r3, #1
 80009da:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009dc:	2300      	movs	r3, #0
 80009de:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009e0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80009e4:	4619      	mov	r1, r3
 80009e6:	4804      	ldr	r0, [pc, #16]	; (80009f8 <MX_GPIO_Init+0x180>)
 80009e8:	f000 fda0 	bl	800152c <HAL_GPIO_Init>

}
 80009ec:	bf00      	nop
 80009ee:	3740      	adds	r7, #64	; 0x40
 80009f0:	46bd      	mov	sp, r7
 80009f2:	bd80      	pop	{r7, pc}
 80009f4:	40023800 	.word	0x40023800
 80009f8:	40020400 	.word	0x40020400

080009fc <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	b082      	sub	sp, #8
 8000a00:	af00      	add	r7, sp, #0
 8000a02:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart4, rx_buff, sizeof(rx_buff), 100);
 8000a04:	2364      	movs	r3, #100	; 0x64
 8000a06:	2201      	movs	r2, #1
 8000a08:	490a      	ldr	r1, [pc, #40]	; (8000a34 <HAL_UART_RxCpltCallback+0x38>)
 8000a0a:	480b      	ldr	r0, [pc, #44]	; (8000a38 <HAL_UART_RxCpltCallback+0x3c>)
 8000a0c:	f003 fbad 	bl	800416a <HAL_UART_Transmit>

	if (*rx_buff == '\n')
 8000a10:	4b08      	ldr	r3, [pc, #32]	; (8000a34 <HAL_UART_RxCpltCallback+0x38>)
 8000a12:	781b      	ldrb	r3, [r3, #0]
 8000a14:	2b0a      	cmp	r3, #10
 8000a16:	d102      	bne.n	8000a1e <HAL_UART_RxCpltCallback+0x22>
	{
		debugMenu();
 8000a18:	f000 f84e 	bl	8000ab8 <debugMenu>
 8000a1c:	e001      	b.n	8000a22 <HAL_UART_RxCpltCallback+0x26>
	}
	else
	{
		buildCmd();
 8000a1e:	f000 f80d 	bl	8000a3c <buildCmd>
	}

    HAL_UART_Receive_IT(&huart4, rx_buff, sizeof(rx_buff));
 8000a22:	2201      	movs	r2, #1
 8000a24:	4903      	ldr	r1, [pc, #12]	; (8000a34 <HAL_UART_RxCpltCallback+0x38>)
 8000a26:	4804      	ldr	r0, [pc, #16]	; (8000a38 <HAL_UART_RxCpltCallback+0x3c>)
 8000a28:	f003 fc31 	bl	800428e <HAL_UART_Receive_IT>
}
 8000a2c:	bf00      	nop
 8000a2e:	3708      	adds	r7, #8
 8000a30:	46bd      	mov	sp, r7
 8000a32:	bd80      	pop	{r7, pc}
 8000a34:	200003d8 	.word	0x200003d8
 8000a38:	200004d4 	.word	0x200004d4

08000a3c <buildCmd>:

void buildCmd()
{
 8000a3c:	b480      	push	{r7}
 8000a3e:	af00      	add	r7, sp, #0
	if(curr_idx < sizeof(cmd_arr))
 8000a40:	4b0c      	ldr	r3, [pc, #48]	; (8000a74 <buildCmd+0x38>)
 8000a42:	781b      	ldrb	r3, [r3, #0]
 8000a44:	2b09      	cmp	r3, #9
 8000a46:	d806      	bhi.n	8000a56 <buildCmd+0x1a>
	{
		cmd_arr[curr_idx] = *rx_buff;
 8000a48:	4b0a      	ldr	r3, [pc, #40]	; (8000a74 <buildCmd+0x38>)
 8000a4a:	781b      	ldrb	r3, [r3, #0]
 8000a4c:	461a      	mov	r2, r3
 8000a4e:	4b0a      	ldr	r3, [pc, #40]	; (8000a78 <buildCmd+0x3c>)
 8000a50:	7819      	ldrb	r1, [r3, #0]
 8000a52:	4b0a      	ldr	r3, [pc, #40]	; (8000a7c <buildCmd+0x40>)
 8000a54:	5499      	strb	r1, [r3, r2]
	}
	curr_idx++;
 8000a56:	4b07      	ldr	r3, [pc, #28]	; (8000a74 <buildCmd+0x38>)
 8000a58:	781b      	ldrb	r3, [r3, #0]
 8000a5a:	3301      	adds	r3, #1
 8000a5c:	b2da      	uxtb	r2, r3
 8000a5e:	4b05      	ldr	r3, [pc, #20]	; (8000a74 <buildCmd+0x38>)
 8000a60:	701a      	strb	r2, [r3, #0]
	debug_en = true;
 8000a62:	4b07      	ldr	r3, [pc, #28]	; (8000a80 <buildCmd+0x44>)
 8000a64:	2201      	movs	r2, #1
 8000a66:	701a      	strb	r2, [r3, #0]
}
 8000a68:	bf00      	nop
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a70:	4770      	bx	lr
 8000a72:	bf00      	nop
 8000a74:	200001ac 	.word	0x200001ac
 8000a78:	200003d8 	.word	0x200003d8
 8000a7c:	20000518 	.word	0x20000518
 8000a80:	200001ad 	.word	0x200001ad

08000a84 <printDBM>:

void printDBM()
// Contains the structure of the Debug Menu that is printed out to the user
{
 8000a84:	b5b0      	push	{r4, r5, r7, lr}
 8000a86:	b088      	sub	sp, #32
 8000a88:	af00      	add	r7, sp, #0
	uint8_t tx_buff[] = {"\n? - Help"
 8000a8a:	4b09      	ldr	r3, [pc, #36]	; (8000ab0 <printDBM+0x2c>)
 8000a8c:	1d3c      	adds	r4, r7, #4
 8000a8e:	461d      	mov	r5, r3
 8000a90:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a92:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a94:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000a98:	e884 0007 	stmia.w	r4, {r0, r1, r2}
						 "\nH - Hello World\n\n"};
	HAL_UART_Transmit(&huart4, tx_buff, sizeof(tx_buff), 100);
 8000a9c:	1d39      	adds	r1, r7, #4
 8000a9e:	2364      	movs	r3, #100	; 0x64
 8000aa0:	221c      	movs	r2, #28
 8000aa2:	4804      	ldr	r0, [pc, #16]	; (8000ab4 <printDBM+0x30>)
 8000aa4:	f003 fb61 	bl	800416a <HAL_UART_Transmit>
}
 8000aa8:	bf00      	nop
 8000aaa:	3720      	adds	r7, #32
 8000aac:	46bd      	mov	sp, r7
 8000aae:	bdb0      	pop	{r4, r5, r7, pc}
 8000ab0:	08008e60 	.word	0x08008e60
 8000ab4:	200004d4 	.word	0x200004d4

08000ab8 <debugMenu>:

void debugMenu()
// Logic for traversing the various commands in the menu
{
 8000ab8:	b590      	push	{r4, r7, lr}
 8000aba:	b087      	sub	sp, #28
 8000abc:	af00      	add	r7, sp, #0
	if (debug_en)
 8000abe:	4b1b      	ldr	r3, [pc, #108]	; (8000b2c <debugMenu+0x74>)
 8000ac0:	781b      	ldrb	r3, [r3, #0]
 8000ac2:	2b00      	cmp	r3, #0
 8000ac4:	d028      	beq.n	8000b18 <debugMenu+0x60>
	{
		int rb_idx = 0;
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	617b      	str	r3, [r7, #20]
		uint8_t tx_buff[] = {"Hello World\n"};
 8000aca:	4b19      	ldr	r3, [pc, #100]	; (8000b30 <debugMenu+0x78>)
 8000acc:	1d3c      	adds	r4, r7, #4
 8000ace:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000ad0:	c407      	stmia	r4!, {r0, r1, r2}
 8000ad2:	7023      	strb	r3, [r4, #0]

		switch(cmd_arr[rb_idx])
 8000ad4:	4a17      	ldr	r2, [pc, #92]	; (8000b34 <debugMenu+0x7c>)
 8000ad6:	697b      	ldr	r3, [r7, #20]
 8000ad8:	4413      	add	r3, r2
 8000ada:	781b      	ldrb	r3, [r3, #0]
 8000adc:	2b3f      	cmp	r3, #63	; 0x3f
 8000ade:	d002      	beq.n	8000ae6 <debugMenu+0x2e>
 8000ae0:	2b48      	cmp	r3, #72	; 0x48
 8000ae2:	d009      	beq.n	8000af8 <debugMenu+0x40>
 8000ae4:	e018      	b.n	8000b18 <debugMenu+0x60>
		{
		case '?':
			if (rb_idx == curr_idx - 1)
 8000ae6:	4b14      	ldr	r3, [pc, #80]	; (8000b38 <debugMenu+0x80>)
 8000ae8:	781b      	ldrb	r3, [r3, #0]
 8000aea:	3b01      	subs	r3, #1
 8000aec:	697a      	ldr	r2, [r7, #20]
 8000aee:	429a      	cmp	r2, r3
 8000af0:	d10f      	bne.n	8000b12 <debugMenu+0x5a>
			{
				printDBM();
 8000af2:	f7ff ffc7 	bl	8000a84 <printDBM>
			}
			break;
 8000af6:	e00c      	b.n	8000b12 <debugMenu+0x5a>
		case 'H':
			if (rb_idx == curr_idx - 1)
 8000af8:	4b0f      	ldr	r3, [pc, #60]	; (8000b38 <debugMenu+0x80>)
 8000afa:	781b      	ldrb	r3, [r3, #0]
 8000afc:	3b01      	subs	r3, #1
 8000afe:	697a      	ldr	r2, [r7, #20]
 8000b00:	429a      	cmp	r2, r3
 8000b02:	d108      	bne.n	8000b16 <debugMenu+0x5e>
			{
				HAL_UART_Transmit(&huart4, tx_buff, sizeof(tx_buff), 100);
 8000b04:	1d39      	adds	r1, r7, #4
 8000b06:	2364      	movs	r3, #100	; 0x64
 8000b08:	220d      	movs	r2, #13
 8000b0a:	480c      	ldr	r0, [pc, #48]	; (8000b3c <debugMenu+0x84>)
 8000b0c:	f003 fb2d 	bl	800416a <HAL_UART_Transmit>
			}
			break;
 8000b10:	e001      	b.n	8000b16 <debugMenu+0x5e>
			break;
 8000b12:	bf00      	nop
 8000b14:	e000      	b.n	8000b18 <debugMenu+0x60>
			break;
 8000b16:	bf00      	nop
		}
	}
	curr_idx = 0;
 8000b18:	4b07      	ldr	r3, [pc, #28]	; (8000b38 <debugMenu+0x80>)
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	701a      	strb	r2, [r3, #0]
	debug_en = false;
 8000b1e:	4b03      	ldr	r3, [pc, #12]	; (8000b2c <debugMenu+0x74>)
 8000b20:	2200      	movs	r2, #0
 8000b22:	701a      	strb	r2, [r3, #0]
}
 8000b24:	bf00      	nop
 8000b26:	371c      	adds	r7, #28
 8000b28:	46bd      	mov	sp, r7
 8000b2a:	bd90      	pop	{r4, r7, pc}
 8000b2c:	200001ad 	.word	0x200001ad
 8000b30:	08008e7c 	.word	0x08008e7c
 8000b34:	20000518 	.word	0x20000518
 8000b38:	200001ac 	.word	0x200001ac
 8000b3c:	200004d4 	.word	0x200004d4

08000b40 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b40:	b480      	push	{r7}
 8000b42:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b44:	b672      	cpsid	i
}
 8000b46:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b48:	e7fe      	b.n	8000b48 <Error_Handler+0x8>
	...

08000b4c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b4c:	b480      	push	{r7}
 8000b4e:	b083      	sub	sp, #12
 8000b50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b52:	2300      	movs	r3, #0
 8000b54:	607b      	str	r3, [r7, #4]
 8000b56:	4b10      	ldr	r3, [pc, #64]	; (8000b98 <HAL_MspInit+0x4c>)
 8000b58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b5a:	4a0f      	ldr	r2, [pc, #60]	; (8000b98 <HAL_MspInit+0x4c>)
 8000b5c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b60:	6453      	str	r3, [r2, #68]	; 0x44
 8000b62:	4b0d      	ldr	r3, [pc, #52]	; (8000b98 <HAL_MspInit+0x4c>)
 8000b64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b66:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b6a:	607b      	str	r3, [r7, #4]
 8000b6c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b6e:	2300      	movs	r3, #0
 8000b70:	603b      	str	r3, [r7, #0]
 8000b72:	4b09      	ldr	r3, [pc, #36]	; (8000b98 <HAL_MspInit+0x4c>)
 8000b74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b76:	4a08      	ldr	r2, [pc, #32]	; (8000b98 <HAL_MspInit+0x4c>)
 8000b78:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b7c:	6413      	str	r3, [r2, #64]	; 0x40
 8000b7e:	4b06      	ldr	r3, [pc, #24]	; (8000b98 <HAL_MspInit+0x4c>)
 8000b80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b86:	603b      	str	r3, [r7, #0]
 8000b88:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b8a:	bf00      	nop
 8000b8c:	370c      	adds	r7, #12
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b94:	4770      	bx	lr
 8000b96:	bf00      	nop
 8000b98:	40023800 	.word	0x40023800

08000b9c <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b09e      	sub	sp, #120	; 0x78
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ba4:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000ba8:	2200      	movs	r2, #0
 8000baa:	601a      	str	r2, [r3, #0]
 8000bac:	605a      	str	r2, [r3, #4]
 8000bae:	609a      	str	r2, [r3, #8]
 8000bb0:	60da      	str	r2, [r3, #12]
 8000bb2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000bb4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000bb8:	223c      	movs	r2, #60	; 0x3c
 8000bba:	2100      	movs	r1, #0
 8000bbc:	4618      	mov	r0, r3
 8000bbe:	f008 f93b 	bl	8008e38 <memset>
  if(hltdc->Instance==LTDC)
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	681b      	ldr	r3, [r3, #0]
 8000bc6:	4a8d      	ldr	r2, [pc, #564]	; (8000dfc <HAL_LTDC_MspInit+0x260>)
 8000bc8:	4293      	cmp	r3, r2
 8000bca:	f040 8112 	bne.w	8000df2 <HAL_LTDC_MspInit+0x256>
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8000bce:	2308      	movs	r3, #8
 8000bd0:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 8000bd2:	23c0      	movs	r3, #192	; 0xc0
 8000bd4:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 8000bd6:	2302      	movs	r3, #2
 8000bd8:	647b      	str	r3, [r7, #68]	; 0x44
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 8000bda:	2300      	movs	r3, #0
 8000bdc:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000bde:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000be2:	4618      	mov	r0, r3
 8000be4:	f002 fd6e 	bl	80036c4 <HAL_RCCEx_PeriphCLKConfig>
 8000be8:	4603      	mov	r3, r0
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	d001      	beq.n	8000bf2 <HAL_LTDC_MspInit+0x56>
    {
      Error_Handler();
 8000bee:	f7ff ffa7 	bl	8000b40 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	627b      	str	r3, [r7, #36]	; 0x24
 8000bf6:	4b82      	ldr	r3, [pc, #520]	; (8000e00 <HAL_LTDC_MspInit+0x264>)
 8000bf8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bfa:	4a81      	ldr	r2, [pc, #516]	; (8000e00 <HAL_LTDC_MspInit+0x264>)
 8000bfc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000c00:	6453      	str	r3, [r2, #68]	; 0x44
 8000c02:	4b7f      	ldr	r3, [pc, #508]	; (8000e00 <HAL_LTDC_MspInit+0x264>)
 8000c04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c06:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000c0a:	627b      	str	r3, [r7, #36]	; 0x24
 8000c0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24

    __HAL_RCC_GPIOI_CLK_ENABLE();
 8000c0e:	2300      	movs	r3, #0
 8000c10:	623b      	str	r3, [r7, #32]
 8000c12:	4b7b      	ldr	r3, [pc, #492]	; (8000e00 <HAL_LTDC_MspInit+0x264>)
 8000c14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c16:	4a7a      	ldr	r2, [pc, #488]	; (8000e00 <HAL_LTDC_MspInit+0x264>)
 8000c18:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c1c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c1e:	4b78      	ldr	r3, [pc, #480]	; (8000e00 <HAL_LTDC_MspInit+0x264>)
 8000c20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000c26:	623b      	str	r3, [r7, #32]
 8000c28:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	61fb      	str	r3, [r7, #28]
 8000c2e:	4b74      	ldr	r3, [pc, #464]	; (8000e00 <HAL_LTDC_MspInit+0x264>)
 8000c30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c32:	4a73      	ldr	r2, [pc, #460]	; (8000e00 <HAL_LTDC_MspInit+0x264>)
 8000c34:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c38:	6313      	str	r3, [r2, #48]	; 0x30
 8000c3a:	4b71      	ldr	r3, [pc, #452]	; (8000e00 <HAL_LTDC_MspInit+0x264>)
 8000c3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c42:	61fb      	str	r3, [r7, #28]
 8000c44:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c46:	2300      	movs	r3, #0
 8000c48:	61bb      	str	r3, [r7, #24]
 8000c4a:	4b6d      	ldr	r3, [pc, #436]	; (8000e00 <HAL_LTDC_MspInit+0x264>)
 8000c4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c4e:	4a6c      	ldr	r2, [pc, #432]	; (8000e00 <HAL_LTDC_MspInit+0x264>)
 8000c50:	f043 0302 	orr.w	r3, r3, #2
 8000c54:	6313      	str	r3, [r2, #48]	; 0x30
 8000c56:	4b6a      	ldr	r3, [pc, #424]	; (8000e00 <HAL_LTDC_MspInit+0x264>)
 8000c58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c5a:	f003 0302 	and.w	r3, r3, #2
 8000c5e:	61bb      	str	r3, [r7, #24]
 8000c60:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8000c62:	2300      	movs	r3, #0
 8000c64:	617b      	str	r3, [r7, #20]
 8000c66:	4b66      	ldr	r3, [pc, #408]	; (8000e00 <HAL_LTDC_MspInit+0x264>)
 8000c68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c6a:	4a65      	ldr	r2, [pc, #404]	; (8000e00 <HAL_LTDC_MspInit+0x264>)
 8000c6c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c70:	6313      	str	r3, [r2, #48]	; 0x30
 8000c72:	4b63      	ldr	r3, [pc, #396]	; (8000e00 <HAL_LTDC_MspInit+0x264>)
 8000c74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c76:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000c7a:	617b      	str	r3, [r7, #20]
 8000c7c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000c7e:	2300      	movs	r3, #0
 8000c80:	613b      	str	r3, [r7, #16]
 8000c82:	4b5f      	ldr	r3, [pc, #380]	; (8000e00 <HAL_LTDC_MspInit+0x264>)
 8000c84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c86:	4a5e      	ldr	r2, [pc, #376]	; (8000e00 <HAL_LTDC_MspInit+0x264>)
 8000c88:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000c8c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c8e:	4b5c      	ldr	r3, [pc, #368]	; (8000e00 <HAL_LTDC_MspInit+0x264>)
 8000c90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000c96:	613b      	str	r3, [r7, #16]
 8000c98:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOK_CLK_ENABLE();
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	60fb      	str	r3, [r7, #12]
 8000c9e:	4b58      	ldr	r3, [pc, #352]	; (8000e00 <HAL_LTDC_MspInit+0x264>)
 8000ca0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ca2:	4a57      	ldr	r2, [pc, #348]	; (8000e00 <HAL_LTDC_MspInit+0x264>)
 8000ca4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000ca8:	6313      	str	r3, [r2, #48]	; 0x30
 8000caa:	4b55      	ldr	r3, [pc, #340]	; (8000e00 <HAL_LTDC_MspInit+0x264>)
 8000cac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000cb2:	60fb      	str	r3, [r7, #12]
 8000cb4:	68fb      	ldr	r3, [r7, #12]
    PK5     ------> LTDC_B6
    PK6     ------> LTDC_B7
    PK7     ------> LTDC_DE
    PB5     ------> LTDC_G7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_15;
 8000cb6:	f44f 4308 	mov.w	r3, #34816	; 0x8800
 8000cba:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cbc:	2302      	movs	r3, #2
 8000cbe:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cc4:	2303      	movs	r3, #3
 8000cc6:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8000cc8:	2309      	movs	r3, #9
 8000cca:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000ccc:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000cd0:	4619      	mov	r1, r3
 8000cd2:	484c      	ldr	r0, [pc, #304]	; (8000e04 <HAL_LTDC_MspInit+0x268>)
 8000cd4:	f000 fc2a 	bl	800152c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14;
 8000cd8:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 8000cdc:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cde:	2302      	movs	r3, #2
 8000ce0:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ce6:	2303      	movs	r3, #3
 8000ce8:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000cea:	230e      	movs	r3, #14
 8000cec:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000cee:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000cf2:	4619      	mov	r1, r3
 8000cf4:	4843      	ldr	r0, [pc, #268]	; (8000e04 <HAL_LTDC_MspInit+0x268>)
 8000cf6:	f000 fc19 	bl	800152c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000cfa:	2310      	movs	r3, #16
 8000cfc:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cfe:	2302      	movs	r3, #2
 8000d00:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d02:	2300      	movs	r3, #0
 8000d04:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d06:	2303      	movs	r3, #3
 8000d08:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8000d0a:	2309      	movs	r3, #9
 8000d0c:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000d0e:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000d12:	4619      	mov	r1, r3
 8000d14:	483c      	ldr	r0, [pc, #240]	; (8000e08 <HAL_LTDC_MspInit+0x26c>)
 8000d16:	f000 fc09 	bl	800152c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_5;
 8000d1a:	2323      	movs	r3, #35	; 0x23
 8000d1c:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d1e:	2302      	movs	r3, #2
 8000d20:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d22:	2300      	movs	r3, #0
 8000d24:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d26:	2303      	movs	r3, #3
 8000d28:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000d2a:	230e      	movs	r3, #14
 8000d2c:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d2e:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000d32:	4619      	mov	r1, r3
 8000d34:	4835      	ldr	r0, [pc, #212]	; (8000e0c <HAL_LTDC_MspInit+0x270>)
 8000d36:	f000 fbf9 	bl	800152c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000d3a:	f24d 033f 	movw	r3, #53311	; 0xd03f
 8000d3e:	667b      	str	r3, [r7, #100]	; 0x64
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_12|GPIO_PIN_14
                          |GPIO_PIN_15;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d40:	2302      	movs	r3, #2
 8000d42:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d44:	2300      	movs	r3, #0
 8000d46:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d48:	2303      	movs	r3, #3
 8000d4a:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000d4c:	230e      	movs	r3, #14
 8000d4e:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8000d50:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000d54:	4619      	mov	r1, r3
 8000d56:	482e      	ldr	r0, [pc, #184]	; (8000e10 <HAL_LTDC_MspInit+0x274>)
 8000d58:	f000 fbe8 	bl	800152c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_12|GPIO_PIN_13;
 8000d5c:	f44f 5341 	mov.w	r3, #12352	; 0x3040
 8000d60:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d62:	2302      	movs	r3, #2
 8000d64:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d66:	2300      	movs	r3, #0
 8000d68:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d6a:	2303      	movs	r3, #3
 8000d6c:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000d6e:	230e      	movs	r3, #14
 8000d70:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000d72:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000d76:	4619      	mov	r1, r3
 8000d78:	4826      	ldr	r0, [pc, #152]	; (8000e14 <HAL_LTDC_MspInit+0x278>)
 8000d7a:	f000 fbd7 	bl	800152c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000d7e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d82:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d84:	2302      	movs	r3, #2
 8000d86:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d88:	2300      	movs	r3, #0
 8000d8a:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d8c:	2303      	movs	r3, #3
 8000d8e:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8000d90:	2309      	movs	r3, #9
 8000d92:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8000d94:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000d98:	4619      	mov	r1, r3
 8000d9a:	481d      	ldr	r0, [pc, #116]	; (8000e10 <HAL_LTDC_MspInit+0x274>)
 8000d9c:	f000 fbc6 	bl	800152c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000da0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000da4:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000da6:	2302      	movs	r3, #2
 8000da8:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000daa:	2300      	movs	r3, #0
 8000dac:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dae:	2303      	movs	r3, #3
 8000db0:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8000db2:	2309      	movs	r3, #9
 8000db4:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000db6:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000dba:	4619      	mov	r1, r3
 8000dbc:	4815      	ldr	r0, [pc, #84]	; (8000e14 <HAL_LTDC_MspInit+0x278>)
 8000dbe:	f000 fbb5 	bl	800152c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
 8000dc2:	23f8      	movs	r3, #248	; 0xf8
 8000dc4:	667b      	str	r3, [r7, #100]	; 0x64
                          |GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dc6:	2302      	movs	r3, #2
 8000dc8:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dca:	2300      	movs	r3, #0
 8000dcc:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dce:	2303      	movs	r3, #3
 8000dd0:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000dd2:	230e      	movs	r3, #14
 8000dd4:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8000dd6:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000dda:	4619      	mov	r1, r3
 8000ddc:	480e      	ldr	r0, [pc, #56]	; (8000e18 <HAL_LTDC_MspInit+0x27c>)
 8000dde:	f000 fba5 	bl	800152c <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 0, 0);
 8000de2:	2200      	movs	r2, #0
 8000de4:	2100      	movs	r1, #0
 8000de6:	2058      	movs	r0, #88	; 0x58
 8000de8:	f000 fad7 	bl	800139a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8000dec:	2058      	movs	r0, #88	; 0x58
 8000dee:	f000 faf0 	bl	80013d2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 8000df2:	bf00      	nop
 8000df4:	3778      	adds	r7, #120	; 0x78
 8000df6:	46bd      	mov	sp, r7
 8000df8:	bd80      	pop	{r7, pc}
 8000dfa:	bf00      	nop
 8000dfc:	40016800 	.word	0x40016800
 8000e00:	40023800 	.word	0x40023800
 8000e04:	40022000 	.word	0x40022000
 8000e08:	40021c00 	.word	0x40021c00
 8000e0c:	40020400 	.word	0x40020400
 8000e10:	40022400 	.word	0x40022400
 8000e14:	40021800 	.word	0x40021800
 8000e18:	40022800 	.word	0x40022800

08000e1c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b08a      	sub	sp, #40	; 0x28
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e24:	f107 0314 	add.w	r3, r7, #20
 8000e28:	2200      	movs	r2, #0
 8000e2a:	601a      	str	r2, [r3, #0]
 8000e2c:	605a      	str	r2, [r3, #4]
 8000e2e:	609a      	str	r2, [r3, #8]
 8000e30:	60da      	str	r2, [r3, #12]
 8000e32:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	4a1d      	ldr	r2, [pc, #116]	; (8000eb0 <HAL_UART_MspInit+0x94>)
 8000e3a:	4293      	cmp	r3, r2
 8000e3c:	d134      	bne.n	8000ea8 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8000e3e:	2300      	movs	r3, #0
 8000e40:	613b      	str	r3, [r7, #16]
 8000e42:	4b1c      	ldr	r3, [pc, #112]	; (8000eb4 <HAL_UART_MspInit+0x98>)
 8000e44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e46:	4a1b      	ldr	r2, [pc, #108]	; (8000eb4 <HAL_UART_MspInit+0x98>)
 8000e48:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000e4c:	6413      	str	r3, [r2, #64]	; 0x40
 8000e4e:	4b19      	ldr	r3, [pc, #100]	; (8000eb4 <HAL_UART_MspInit+0x98>)
 8000e50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e52:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000e56:	613b      	str	r3, [r7, #16]
 8000e58:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	60fb      	str	r3, [r7, #12]
 8000e5e:	4b15      	ldr	r3, [pc, #84]	; (8000eb4 <HAL_UART_MspInit+0x98>)
 8000e60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e62:	4a14      	ldr	r2, [pc, #80]	; (8000eb4 <HAL_UART_MspInit+0x98>)
 8000e64:	f043 0304 	orr.w	r3, r3, #4
 8000e68:	6313      	str	r3, [r2, #48]	; 0x30
 8000e6a:	4b12      	ldr	r3, [pc, #72]	; (8000eb4 <HAL_UART_MspInit+0x98>)
 8000e6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e6e:	f003 0304 	and.w	r3, r3, #4
 8000e72:	60fb      	str	r3, [r7, #12]
 8000e74:	68fb      	ldr	r3, [r7, #12]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000e76:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000e7a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e7c:	2302      	movs	r3, #2
 8000e7e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e80:	2300      	movs	r3, #0
 8000e82:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e84:	2303      	movs	r3, #3
 8000e86:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8000e88:	2308      	movs	r3, #8
 8000e8a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e8c:	f107 0314 	add.w	r3, r7, #20
 8000e90:	4619      	mov	r1, r3
 8000e92:	4809      	ldr	r0, [pc, #36]	; (8000eb8 <HAL_UART_MspInit+0x9c>)
 8000e94:	f000 fb4a 	bl	800152c <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 8000e98:	2200      	movs	r2, #0
 8000e9a:	2100      	movs	r1, #0
 8000e9c:	2034      	movs	r0, #52	; 0x34
 8000e9e:	f000 fa7c 	bl	800139a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8000ea2:	2034      	movs	r0, #52	; 0x34
 8000ea4:	f000 fa95 	bl	80013d2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }

}
 8000ea8:	bf00      	nop
 8000eaa:	3728      	adds	r7, #40	; 0x28
 8000eac:	46bd      	mov	sp, r7
 8000eae:	bd80      	pop	{r7, pc}
 8000eb0:	40004c00 	.word	0x40004c00
 8000eb4:	40023800 	.word	0x40023800
 8000eb8:	40020800 	.word	0x40020800

08000ebc <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b086      	sub	sp, #24
 8000ec0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8000ec2:	1d3b      	adds	r3, r7, #4
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	601a      	str	r2, [r3, #0]
 8000ec8:	605a      	str	r2, [r3, #4]
 8000eca:	609a      	str	r2, [r3, #8]
 8000ecc:	60da      	str	r2, [r3, #12]
 8000ece:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8000ed0:	4b2c      	ldr	r3, [pc, #176]	; (8000f84 <HAL_FMC_MspInit+0xc8>)
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d151      	bne.n	8000f7c <HAL_FMC_MspInit+0xc0>
    return;
  }
  FMC_Initialized = 1;
 8000ed8:	4b2a      	ldr	r3, [pc, #168]	; (8000f84 <HAL_FMC_MspInit+0xc8>)
 8000eda:	2201      	movs	r2, #1
 8000edc:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8000ede:	2300      	movs	r3, #0
 8000ee0:	603b      	str	r3, [r7, #0]
 8000ee2:	4b29      	ldr	r3, [pc, #164]	; (8000f88 <HAL_FMC_MspInit+0xcc>)
 8000ee4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000ee6:	4a28      	ldr	r2, [pc, #160]	; (8000f88 <HAL_FMC_MspInit+0xcc>)
 8000ee8:	f043 0301 	orr.w	r3, r3, #1
 8000eec:	6393      	str	r3, [r2, #56]	; 0x38
 8000eee:	4b26      	ldr	r3, [pc, #152]	; (8000f88 <HAL_FMC_MspInit+0xcc>)
 8000ef0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000ef2:	f003 0301 	and.w	r3, r3, #1
 8000ef6:	603b      	str	r3, [r7, #0]
 8000ef8:	683b      	ldr	r3, [r7, #0]
  PD5   ------> FMC_NWE
  PG9   ------> FMC_NE2
  PE0   ------> FMC_NBL0
  PE1   ------> FMC_NBL1
  */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_7|GPIO_PIN_8
 8000efa:	f64f 739b 	movw	r3, #65435	; 0xff9b
 8000efe:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0
                          |GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f00:	2302      	movs	r3, #2
 8000f02:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f04:	2301      	movs	r3, #1
 8000f06:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f08:	2303      	movs	r3, #3
 8000f0a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000f0c:	230c      	movs	r3, #12
 8000f0e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000f10:	1d3b      	adds	r3, r7, #4
 8000f12:	4619      	mov	r1, r3
 8000f14:	481d      	ldr	r0, [pc, #116]	; (8000f8c <HAL_FMC_MspInit+0xd0>)
 8000f16:	f000 fb09 	bl	800152c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000f1a:	f24f 033f 	movw	r3, #61503	; 0xf03f
 8000f1e:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_12|GPIO_PIN_13
                          |GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f20:	2302      	movs	r3, #2
 8000f22:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f24:	2301      	movs	r3, #1
 8000f26:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f28:	2303      	movs	r3, #3
 8000f2a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000f2c:	230c      	movs	r3, #12
 8000f2e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000f30:	1d3b      	adds	r3, r7, #4
 8000f32:	4619      	mov	r1, r3
 8000f34:	4816      	ldr	r0, [pc, #88]	; (8000f90 <HAL_FMC_MspInit+0xd4>)
 8000f36:	f000 faf9 	bl	800152c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000f3a:	f240 233f 	movw	r3, #575	; 0x23f
 8000f3e:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f40:	2302      	movs	r3, #2
 8000f42:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f44:	2301      	movs	r3, #1
 8000f46:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f48:	2303      	movs	r3, #3
 8000f4a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000f4c:	230c      	movs	r3, #12
 8000f4e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000f50:	1d3b      	adds	r3, r7, #4
 8000f52:	4619      	mov	r1, r3
 8000f54:	480f      	ldr	r0, [pc, #60]	; (8000f94 <HAL_FMC_MspInit+0xd8>)
 8000f56:	f000 fae9 	bl	800152c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8000f5a:	f64f 7333 	movw	r3, #65331	; 0xff33
 8000f5e:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
                          |GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f60:	2302      	movs	r3, #2
 8000f62:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f64:	2301      	movs	r3, #1
 8000f66:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f68:	2303      	movs	r3, #3
 8000f6a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000f6c:	230c      	movs	r3, #12
 8000f6e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f70:	1d3b      	adds	r3, r7, #4
 8000f72:	4619      	mov	r1, r3
 8000f74:	4808      	ldr	r0, [pc, #32]	; (8000f98 <HAL_FMC_MspInit+0xdc>)
 8000f76:	f000 fad9 	bl	800152c <HAL_GPIO_Init>
 8000f7a:	e000      	b.n	8000f7e <HAL_FMC_MspInit+0xc2>
    return;
 8000f7c:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8000f7e:	3718      	adds	r7, #24
 8000f80:	46bd      	mov	sp, r7
 8000f82:	bd80      	pop	{r7, pc}
 8000f84:	200001b0 	.word	0x200001b0
 8000f88:	40023800 	.word	0x40023800
 8000f8c:	40021000 	.word	0x40021000
 8000f90:	40021400 	.word	0x40021400
 8000f94:	40021800 	.word	0x40021800
 8000f98:	40020c00 	.word	0x40020c00

08000f9c <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* hsram){
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b082      	sub	sp, #8
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8000fa4:	f7ff ff8a 	bl	8000ebc <HAL_FMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 8000fa8:	bf00      	nop
 8000faa:	3708      	adds	r7, #8
 8000fac:	46bd      	mov	sp, r7
 8000fae:	bd80      	pop	{r7, pc}

08000fb0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000fb0:	b480      	push	{r7}
 8000fb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000fb4:	e7fe      	b.n	8000fb4 <NMI_Handler+0x4>

08000fb6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000fb6:	b480      	push	{r7}
 8000fb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000fba:	e7fe      	b.n	8000fba <HardFault_Handler+0x4>

08000fbc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000fc0:	e7fe      	b.n	8000fc0 <MemManage_Handler+0x4>

08000fc2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000fc2:	b480      	push	{r7}
 8000fc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000fc6:	e7fe      	b.n	8000fc6 <BusFault_Handler+0x4>

08000fc8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000fc8:	b480      	push	{r7}
 8000fca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000fcc:	e7fe      	b.n	8000fcc <UsageFault_Handler+0x4>

08000fce <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000fce:	b480      	push	{r7}
 8000fd0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000fd2:	bf00      	nop
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fda:	4770      	bx	lr

08000fdc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000fdc:	b480      	push	{r7}
 8000fde:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000fe0:	bf00      	nop
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe8:	4770      	bx	lr

08000fea <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000fea:	b480      	push	{r7}
 8000fec:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000fee:	bf00      	nop
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff6:	4770      	bx	lr

08000ff8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ffc:	f000 f8ae 	bl	800115c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001000:	bf00      	nop
 8001002:	bd80      	pop	{r7, pc}

08001004 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8001008:	4802      	ldr	r0, [pc, #8]	; (8001014 <UART4_IRQHandler+0x10>)
 800100a:	f003 f971 	bl	80042f0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 800100e:	bf00      	nop
 8001010:	bd80      	pop	{r7, pc}
 8001012:	bf00      	nop
 8001014:	200004d4 	.word	0x200004d4

08001018 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 800101c:	4802      	ldr	r0, [pc, #8]	; (8001028 <OTG_FS_IRQHandler+0x10>)
 800101e:	f001 f909 	bl	8002234 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001022:	bf00      	nop
 8001024:	bd80      	pop	{r7, pc}
 8001026:	bf00      	nop
 8001028:	200019f8 	.word	0x200019f8

0800102c <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8001030:	4802      	ldr	r0, [pc, #8]	; (800103c <LTDC_IRQHandler+0x10>)
 8001032:	f000 fd11 	bl	8001a58 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 8001036:	bf00      	nop
 8001038:	bd80      	pop	{r7, pc}
 800103a:	bf00      	nop
 800103c:	2000042c 	.word	0x2000042c

08001040 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001040:	b480      	push	{r7}
 8001042:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001044:	4b06      	ldr	r3, [pc, #24]	; (8001060 <SystemInit+0x20>)
 8001046:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800104a:	4a05      	ldr	r2, [pc, #20]	; (8001060 <SystemInit+0x20>)
 800104c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001050:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001054:	bf00      	nop
 8001056:	46bd      	mov	sp, r7
 8001058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105c:	4770      	bx	lr
 800105e:	bf00      	nop
 8001060:	e000ed00 	.word	0xe000ed00

08001064 <Reset_Handler>:
 8001064:	f8df d034 	ldr.w	sp, [pc, #52]	; 800109c <LoopFillZerobss+0x12>
 8001068:	480d      	ldr	r0, [pc, #52]	; (80010a0 <LoopFillZerobss+0x16>)
 800106a:	490e      	ldr	r1, [pc, #56]	; (80010a4 <LoopFillZerobss+0x1a>)
 800106c:	4a0e      	ldr	r2, [pc, #56]	; (80010a8 <LoopFillZerobss+0x1e>)
 800106e:	2300      	movs	r3, #0
 8001070:	e002      	b.n	8001078 <LoopCopyDataInit>

08001072 <CopyDataInit>:
 8001072:	58d4      	ldr	r4, [r2, r3]
 8001074:	50c4      	str	r4, [r0, r3]
 8001076:	3304      	adds	r3, #4

08001078 <LoopCopyDataInit>:
 8001078:	18c4      	adds	r4, r0, r3
 800107a:	428c      	cmp	r4, r1
 800107c:	d3f9      	bcc.n	8001072 <CopyDataInit>
 800107e:	4a0b      	ldr	r2, [pc, #44]	; (80010ac <LoopFillZerobss+0x22>)
 8001080:	4c0b      	ldr	r4, [pc, #44]	; (80010b0 <LoopFillZerobss+0x26>)
 8001082:	2300      	movs	r3, #0
 8001084:	e001      	b.n	800108a <LoopFillZerobss>

08001086 <FillZerobss>:
 8001086:	6013      	str	r3, [r2, #0]
 8001088:	3204      	adds	r2, #4

0800108a <LoopFillZerobss>:
 800108a:	42a2      	cmp	r2, r4
 800108c:	d3fb      	bcc.n	8001086 <FillZerobss>
 800108e:	f7ff ffd7 	bl	8001040 <SystemInit>
 8001092:	f007 fead 	bl	8008df0 <__libc_init_array>
 8001096:	f7ff fa29 	bl	80004ec <main>
 800109a:	4770      	bx	lr
 800109c:	20050000 	.word	0x20050000
 80010a0:	20000000 	.word	0x20000000
 80010a4:	20000190 	.word	0x20000190
 80010a8:	08008efc 	.word	0x08008efc
 80010ac:	20000190 	.word	0x20000190
 80010b0:	20001e00 	.word	0x20001e00

080010b4 <ADC_IRQHandler>:
 80010b4:	e7fe      	b.n	80010b4 <ADC_IRQHandler>
	...

080010b8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80010bc:	4b0e      	ldr	r3, [pc, #56]	; (80010f8 <HAL_Init+0x40>)
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	4a0d      	ldr	r2, [pc, #52]	; (80010f8 <HAL_Init+0x40>)
 80010c2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80010c6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80010c8:	4b0b      	ldr	r3, [pc, #44]	; (80010f8 <HAL_Init+0x40>)
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	4a0a      	ldr	r2, [pc, #40]	; (80010f8 <HAL_Init+0x40>)
 80010ce:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80010d2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80010d4:	4b08      	ldr	r3, [pc, #32]	; (80010f8 <HAL_Init+0x40>)
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	4a07      	ldr	r2, [pc, #28]	; (80010f8 <HAL_Init+0x40>)
 80010da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010de:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010e0:	2003      	movs	r0, #3
 80010e2:	f000 f94f 	bl	8001384 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80010e6:	2000      	movs	r0, #0
 80010e8:	f000 f808 	bl	80010fc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80010ec:	f7ff fd2e 	bl	8000b4c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80010f0:	2300      	movs	r3, #0
}
 80010f2:	4618      	mov	r0, r3
 80010f4:	bd80      	pop	{r7, pc}
 80010f6:	bf00      	nop
 80010f8:	40023c00 	.word	0x40023c00

080010fc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b082      	sub	sp, #8
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001104:	4b12      	ldr	r3, [pc, #72]	; (8001150 <HAL_InitTick+0x54>)
 8001106:	681a      	ldr	r2, [r3, #0]
 8001108:	4b12      	ldr	r3, [pc, #72]	; (8001154 <HAL_InitTick+0x58>)
 800110a:	781b      	ldrb	r3, [r3, #0]
 800110c:	4619      	mov	r1, r3
 800110e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001112:	fbb3 f3f1 	udiv	r3, r3, r1
 8001116:	fbb2 f3f3 	udiv	r3, r2, r3
 800111a:	4618      	mov	r0, r3
 800111c:	f000 f967 	bl	80013ee <HAL_SYSTICK_Config>
 8001120:	4603      	mov	r3, r0
 8001122:	2b00      	cmp	r3, #0
 8001124:	d001      	beq.n	800112a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001126:	2301      	movs	r3, #1
 8001128:	e00e      	b.n	8001148 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	2b0f      	cmp	r3, #15
 800112e:	d80a      	bhi.n	8001146 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001130:	2200      	movs	r2, #0
 8001132:	6879      	ldr	r1, [r7, #4]
 8001134:	f04f 30ff 	mov.w	r0, #4294967295
 8001138:	f000 f92f 	bl	800139a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800113c:	4a06      	ldr	r2, [pc, #24]	; (8001158 <HAL_InitTick+0x5c>)
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001142:	2300      	movs	r3, #0
 8001144:	e000      	b.n	8001148 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001146:	2301      	movs	r3, #1
}
 8001148:	4618      	mov	r0, r3
 800114a:	3708      	adds	r7, #8
 800114c:	46bd      	mov	sp, r7
 800114e:	bd80      	pop	{r7, pc}
 8001150:	20000000 	.word	0x20000000
 8001154:	20000008 	.word	0x20000008
 8001158:	20000004 	.word	0x20000004

0800115c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800115c:	b480      	push	{r7}
 800115e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001160:	4b06      	ldr	r3, [pc, #24]	; (800117c <HAL_IncTick+0x20>)
 8001162:	781b      	ldrb	r3, [r3, #0]
 8001164:	461a      	mov	r2, r3
 8001166:	4b06      	ldr	r3, [pc, #24]	; (8001180 <HAL_IncTick+0x24>)
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	4413      	add	r3, r2
 800116c:	4a04      	ldr	r2, [pc, #16]	; (8001180 <HAL_IncTick+0x24>)
 800116e:	6013      	str	r3, [r2, #0]
}
 8001170:	bf00      	nop
 8001172:	46bd      	mov	sp, r7
 8001174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001178:	4770      	bx	lr
 800117a:	bf00      	nop
 800117c:	20000008 	.word	0x20000008
 8001180:	20000524 	.word	0x20000524

08001184 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001184:	b480      	push	{r7}
 8001186:	af00      	add	r7, sp, #0
  return uwTick;
 8001188:	4b03      	ldr	r3, [pc, #12]	; (8001198 <HAL_GetTick+0x14>)
 800118a:	681b      	ldr	r3, [r3, #0]
}
 800118c:	4618      	mov	r0, r3
 800118e:	46bd      	mov	sp, r7
 8001190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001194:	4770      	bx	lr
 8001196:	bf00      	nop
 8001198:	20000524 	.word	0x20000524

0800119c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b084      	sub	sp, #16
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80011a4:	f7ff ffee 	bl	8001184 <HAL_GetTick>
 80011a8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80011ae:	68fb      	ldr	r3, [r7, #12]
 80011b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80011b4:	d005      	beq.n	80011c2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80011b6:	4b0a      	ldr	r3, [pc, #40]	; (80011e0 <HAL_Delay+0x44>)
 80011b8:	781b      	ldrb	r3, [r3, #0]
 80011ba:	461a      	mov	r2, r3
 80011bc:	68fb      	ldr	r3, [r7, #12]
 80011be:	4413      	add	r3, r2
 80011c0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80011c2:	bf00      	nop
 80011c4:	f7ff ffde 	bl	8001184 <HAL_GetTick>
 80011c8:	4602      	mov	r2, r0
 80011ca:	68bb      	ldr	r3, [r7, #8]
 80011cc:	1ad3      	subs	r3, r2, r3
 80011ce:	68fa      	ldr	r2, [r7, #12]
 80011d0:	429a      	cmp	r2, r3
 80011d2:	d8f7      	bhi.n	80011c4 <HAL_Delay+0x28>
  {
  }
}
 80011d4:	bf00      	nop
 80011d6:	bf00      	nop
 80011d8:	3710      	adds	r7, #16
 80011da:	46bd      	mov	sp, r7
 80011dc:	bd80      	pop	{r7, pc}
 80011de:	bf00      	nop
 80011e0:	20000008 	.word	0x20000008

080011e4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011e4:	b480      	push	{r7}
 80011e6:	b085      	sub	sp, #20
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	f003 0307 	and.w	r3, r3, #7
 80011f2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80011f4:	4b0c      	ldr	r3, [pc, #48]	; (8001228 <__NVIC_SetPriorityGrouping+0x44>)
 80011f6:	68db      	ldr	r3, [r3, #12]
 80011f8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80011fa:	68ba      	ldr	r2, [r7, #8]
 80011fc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001200:	4013      	ands	r3, r2
 8001202:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001204:	68fb      	ldr	r3, [r7, #12]
 8001206:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001208:	68bb      	ldr	r3, [r7, #8]
 800120a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800120c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001210:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001214:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001216:	4a04      	ldr	r2, [pc, #16]	; (8001228 <__NVIC_SetPriorityGrouping+0x44>)
 8001218:	68bb      	ldr	r3, [r7, #8]
 800121a:	60d3      	str	r3, [r2, #12]
}
 800121c:	bf00      	nop
 800121e:	3714      	adds	r7, #20
 8001220:	46bd      	mov	sp, r7
 8001222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001226:	4770      	bx	lr
 8001228:	e000ed00 	.word	0xe000ed00

0800122c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800122c:	b480      	push	{r7}
 800122e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001230:	4b04      	ldr	r3, [pc, #16]	; (8001244 <__NVIC_GetPriorityGrouping+0x18>)
 8001232:	68db      	ldr	r3, [r3, #12]
 8001234:	0a1b      	lsrs	r3, r3, #8
 8001236:	f003 0307 	and.w	r3, r3, #7
}
 800123a:	4618      	mov	r0, r3
 800123c:	46bd      	mov	sp, r7
 800123e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001242:	4770      	bx	lr
 8001244:	e000ed00 	.word	0xe000ed00

08001248 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001248:	b480      	push	{r7}
 800124a:	b083      	sub	sp, #12
 800124c:	af00      	add	r7, sp, #0
 800124e:	4603      	mov	r3, r0
 8001250:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001252:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001256:	2b00      	cmp	r3, #0
 8001258:	db0b      	blt.n	8001272 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800125a:	79fb      	ldrb	r3, [r7, #7]
 800125c:	f003 021f 	and.w	r2, r3, #31
 8001260:	4907      	ldr	r1, [pc, #28]	; (8001280 <__NVIC_EnableIRQ+0x38>)
 8001262:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001266:	095b      	lsrs	r3, r3, #5
 8001268:	2001      	movs	r0, #1
 800126a:	fa00 f202 	lsl.w	r2, r0, r2
 800126e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001272:	bf00      	nop
 8001274:	370c      	adds	r7, #12
 8001276:	46bd      	mov	sp, r7
 8001278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127c:	4770      	bx	lr
 800127e:	bf00      	nop
 8001280:	e000e100 	.word	0xe000e100

08001284 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001284:	b480      	push	{r7}
 8001286:	b083      	sub	sp, #12
 8001288:	af00      	add	r7, sp, #0
 800128a:	4603      	mov	r3, r0
 800128c:	6039      	str	r1, [r7, #0]
 800128e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001290:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001294:	2b00      	cmp	r3, #0
 8001296:	db0a      	blt.n	80012ae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001298:	683b      	ldr	r3, [r7, #0]
 800129a:	b2da      	uxtb	r2, r3
 800129c:	490c      	ldr	r1, [pc, #48]	; (80012d0 <__NVIC_SetPriority+0x4c>)
 800129e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012a2:	0112      	lsls	r2, r2, #4
 80012a4:	b2d2      	uxtb	r2, r2
 80012a6:	440b      	add	r3, r1
 80012a8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80012ac:	e00a      	b.n	80012c4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012ae:	683b      	ldr	r3, [r7, #0]
 80012b0:	b2da      	uxtb	r2, r3
 80012b2:	4908      	ldr	r1, [pc, #32]	; (80012d4 <__NVIC_SetPriority+0x50>)
 80012b4:	79fb      	ldrb	r3, [r7, #7]
 80012b6:	f003 030f 	and.w	r3, r3, #15
 80012ba:	3b04      	subs	r3, #4
 80012bc:	0112      	lsls	r2, r2, #4
 80012be:	b2d2      	uxtb	r2, r2
 80012c0:	440b      	add	r3, r1
 80012c2:	761a      	strb	r2, [r3, #24]
}
 80012c4:	bf00      	nop
 80012c6:	370c      	adds	r7, #12
 80012c8:	46bd      	mov	sp, r7
 80012ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ce:	4770      	bx	lr
 80012d0:	e000e100 	.word	0xe000e100
 80012d4:	e000ed00 	.word	0xe000ed00

080012d8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012d8:	b480      	push	{r7}
 80012da:	b089      	sub	sp, #36	; 0x24
 80012dc:	af00      	add	r7, sp, #0
 80012de:	60f8      	str	r0, [r7, #12]
 80012e0:	60b9      	str	r1, [r7, #8]
 80012e2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80012e4:	68fb      	ldr	r3, [r7, #12]
 80012e6:	f003 0307 	and.w	r3, r3, #7
 80012ea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80012ec:	69fb      	ldr	r3, [r7, #28]
 80012ee:	f1c3 0307 	rsb	r3, r3, #7
 80012f2:	2b04      	cmp	r3, #4
 80012f4:	bf28      	it	cs
 80012f6:	2304      	movcs	r3, #4
 80012f8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012fa:	69fb      	ldr	r3, [r7, #28]
 80012fc:	3304      	adds	r3, #4
 80012fe:	2b06      	cmp	r3, #6
 8001300:	d902      	bls.n	8001308 <NVIC_EncodePriority+0x30>
 8001302:	69fb      	ldr	r3, [r7, #28]
 8001304:	3b03      	subs	r3, #3
 8001306:	e000      	b.n	800130a <NVIC_EncodePriority+0x32>
 8001308:	2300      	movs	r3, #0
 800130a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800130c:	f04f 32ff 	mov.w	r2, #4294967295
 8001310:	69bb      	ldr	r3, [r7, #24]
 8001312:	fa02 f303 	lsl.w	r3, r2, r3
 8001316:	43da      	mvns	r2, r3
 8001318:	68bb      	ldr	r3, [r7, #8]
 800131a:	401a      	ands	r2, r3
 800131c:	697b      	ldr	r3, [r7, #20]
 800131e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001320:	f04f 31ff 	mov.w	r1, #4294967295
 8001324:	697b      	ldr	r3, [r7, #20]
 8001326:	fa01 f303 	lsl.w	r3, r1, r3
 800132a:	43d9      	mvns	r1, r3
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001330:	4313      	orrs	r3, r2
         );
}
 8001332:	4618      	mov	r0, r3
 8001334:	3724      	adds	r7, #36	; 0x24
 8001336:	46bd      	mov	sp, r7
 8001338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133c:	4770      	bx	lr
	...

08001340 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	b082      	sub	sp, #8
 8001344:	af00      	add	r7, sp, #0
 8001346:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	3b01      	subs	r3, #1
 800134c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001350:	d301      	bcc.n	8001356 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001352:	2301      	movs	r3, #1
 8001354:	e00f      	b.n	8001376 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001356:	4a0a      	ldr	r2, [pc, #40]	; (8001380 <SysTick_Config+0x40>)
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	3b01      	subs	r3, #1
 800135c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800135e:	210f      	movs	r1, #15
 8001360:	f04f 30ff 	mov.w	r0, #4294967295
 8001364:	f7ff ff8e 	bl	8001284 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001368:	4b05      	ldr	r3, [pc, #20]	; (8001380 <SysTick_Config+0x40>)
 800136a:	2200      	movs	r2, #0
 800136c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800136e:	4b04      	ldr	r3, [pc, #16]	; (8001380 <SysTick_Config+0x40>)
 8001370:	2207      	movs	r2, #7
 8001372:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001374:	2300      	movs	r3, #0
}
 8001376:	4618      	mov	r0, r3
 8001378:	3708      	adds	r7, #8
 800137a:	46bd      	mov	sp, r7
 800137c:	bd80      	pop	{r7, pc}
 800137e:	bf00      	nop
 8001380:	e000e010 	.word	0xe000e010

08001384 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	b082      	sub	sp, #8
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800138c:	6878      	ldr	r0, [r7, #4]
 800138e:	f7ff ff29 	bl	80011e4 <__NVIC_SetPriorityGrouping>
}
 8001392:	bf00      	nop
 8001394:	3708      	adds	r7, #8
 8001396:	46bd      	mov	sp, r7
 8001398:	bd80      	pop	{r7, pc}

0800139a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800139a:	b580      	push	{r7, lr}
 800139c:	b086      	sub	sp, #24
 800139e:	af00      	add	r7, sp, #0
 80013a0:	4603      	mov	r3, r0
 80013a2:	60b9      	str	r1, [r7, #8]
 80013a4:	607a      	str	r2, [r7, #4]
 80013a6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80013a8:	2300      	movs	r3, #0
 80013aa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80013ac:	f7ff ff3e 	bl	800122c <__NVIC_GetPriorityGrouping>
 80013b0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80013b2:	687a      	ldr	r2, [r7, #4]
 80013b4:	68b9      	ldr	r1, [r7, #8]
 80013b6:	6978      	ldr	r0, [r7, #20]
 80013b8:	f7ff ff8e 	bl	80012d8 <NVIC_EncodePriority>
 80013bc:	4602      	mov	r2, r0
 80013be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013c2:	4611      	mov	r1, r2
 80013c4:	4618      	mov	r0, r3
 80013c6:	f7ff ff5d 	bl	8001284 <__NVIC_SetPriority>
}
 80013ca:	bf00      	nop
 80013cc:	3718      	adds	r7, #24
 80013ce:	46bd      	mov	sp, r7
 80013d0:	bd80      	pop	{r7, pc}

080013d2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013d2:	b580      	push	{r7, lr}
 80013d4:	b082      	sub	sp, #8
 80013d6:	af00      	add	r7, sp, #0
 80013d8:	4603      	mov	r3, r0
 80013da:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80013dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013e0:	4618      	mov	r0, r3
 80013e2:	f7ff ff31 	bl	8001248 <__NVIC_EnableIRQ>
}
 80013e6:	bf00      	nop
 80013e8:	3708      	adds	r7, #8
 80013ea:	46bd      	mov	sp, r7
 80013ec:	bd80      	pop	{r7, pc}

080013ee <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80013ee:	b580      	push	{r7, lr}
 80013f0:	b082      	sub	sp, #8
 80013f2:	af00      	add	r7, sp, #0
 80013f4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80013f6:	6878      	ldr	r0, [r7, #4]
 80013f8:	f7ff ffa2 	bl	8001340 <SysTick_Config>
 80013fc:	4603      	mov	r3, r0
}
 80013fe:	4618      	mov	r0, r3
 8001400:	3708      	adds	r7, #8
 8001402:	46bd      	mov	sp, r7
 8001404:	bd80      	pop	{r7, pc}

08001406 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001406:	b580      	push	{r7, lr}
 8001408:	b084      	sub	sp, #16
 800140a:	af00      	add	r7, sp, #0
 800140c:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001412:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001414:	f7ff feb6 	bl	8001184 <HAL_GetTick>
 8001418:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001420:	b2db      	uxtb	r3, r3
 8001422:	2b02      	cmp	r3, #2
 8001424:	d008      	beq.n	8001438 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	2280      	movs	r2, #128	; 0x80
 800142a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	2200      	movs	r2, #0
 8001430:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001434:	2301      	movs	r3, #1
 8001436:	e052      	b.n	80014de <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	681a      	ldr	r2, [r3, #0]
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	f022 0216 	bic.w	r2, r2, #22
 8001446:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	695a      	ldr	r2, [r3, #20]
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001456:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800145c:	2b00      	cmp	r3, #0
 800145e:	d103      	bne.n	8001468 <HAL_DMA_Abort+0x62>
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001464:	2b00      	cmp	r3, #0
 8001466:	d007      	beq.n	8001478 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	681a      	ldr	r2, [r3, #0]
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	f022 0208 	bic.w	r2, r2, #8
 8001476:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	681a      	ldr	r2, [r3, #0]
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	f022 0201 	bic.w	r2, r2, #1
 8001486:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001488:	e013      	b.n	80014b2 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800148a:	f7ff fe7b 	bl	8001184 <HAL_GetTick>
 800148e:	4602      	mov	r2, r0
 8001490:	68bb      	ldr	r3, [r7, #8]
 8001492:	1ad3      	subs	r3, r2, r3
 8001494:	2b05      	cmp	r3, #5
 8001496:	d90c      	bls.n	80014b2 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	2220      	movs	r2, #32
 800149c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	2203      	movs	r2, #3
 80014a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	2200      	movs	r2, #0
 80014aa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80014ae:	2303      	movs	r3, #3
 80014b0:	e015      	b.n	80014de <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	f003 0301 	and.w	r3, r3, #1
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d1e4      	bne.n	800148a <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80014c4:	223f      	movs	r2, #63	; 0x3f
 80014c6:	409a      	lsls	r2, r3
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	2201      	movs	r2, #1
 80014d0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	2200      	movs	r2, #0
 80014d8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80014dc:	2300      	movs	r3, #0
}
 80014de:	4618      	mov	r0, r3
 80014e0:	3710      	adds	r7, #16
 80014e2:	46bd      	mov	sp, r7
 80014e4:	bd80      	pop	{r7, pc}

080014e6 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80014e6:	b480      	push	{r7}
 80014e8:	b083      	sub	sp, #12
 80014ea:	af00      	add	r7, sp, #0
 80014ec:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80014f4:	b2db      	uxtb	r3, r3
 80014f6:	2b02      	cmp	r3, #2
 80014f8:	d004      	beq.n	8001504 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	2280      	movs	r2, #128	; 0x80
 80014fe:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001500:	2301      	movs	r3, #1
 8001502:	e00c      	b.n	800151e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	2205      	movs	r2, #5
 8001508:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	681a      	ldr	r2, [r3, #0]
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	f022 0201 	bic.w	r2, r2, #1
 800151a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800151c:	2300      	movs	r3, #0
}
 800151e:	4618      	mov	r0, r3
 8001520:	370c      	adds	r7, #12
 8001522:	46bd      	mov	sp, r7
 8001524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001528:	4770      	bx	lr
	...

0800152c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800152c:	b480      	push	{r7}
 800152e:	b089      	sub	sp, #36	; 0x24
 8001530:	af00      	add	r7, sp, #0
 8001532:	6078      	str	r0, [r7, #4]
 8001534:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001536:	2300      	movs	r3, #0
 8001538:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800153a:	2300      	movs	r3, #0
 800153c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800153e:	2300      	movs	r3, #0
 8001540:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001542:	2300      	movs	r3, #0
 8001544:	61fb      	str	r3, [r7, #28]
 8001546:	e177      	b.n	8001838 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001548:	2201      	movs	r2, #1
 800154a:	69fb      	ldr	r3, [r7, #28]
 800154c:	fa02 f303 	lsl.w	r3, r2, r3
 8001550:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001552:	683b      	ldr	r3, [r7, #0]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	697a      	ldr	r2, [r7, #20]
 8001558:	4013      	ands	r3, r2
 800155a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800155c:	693a      	ldr	r2, [r7, #16]
 800155e:	697b      	ldr	r3, [r7, #20]
 8001560:	429a      	cmp	r2, r3
 8001562:	f040 8166 	bne.w	8001832 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001566:	683b      	ldr	r3, [r7, #0]
 8001568:	685b      	ldr	r3, [r3, #4]
 800156a:	f003 0303 	and.w	r3, r3, #3
 800156e:	2b01      	cmp	r3, #1
 8001570:	d005      	beq.n	800157e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001572:	683b      	ldr	r3, [r7, #0]
 8001574:	685b      	ldr	r3, [r3, #4]
 8001576:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800157a:	2b02      	cmp	r3, #2
 800157c:	d130      	bne.n	80015e0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	689b      	ldr	r3, [r3, #8]
 8001582:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001584:	69fb      	ldr	r3, [r7, #28]
 8001586:	005b      	lsls	r3, r3, #1
 8001588:	2203      	movs	r2, #3
 800158a:	fa02 f303 	lsl.w	r3, r2, r3
 800158e:	43db      	mvns	r3, r3
 8001590:	69ba      	ldr	r2, [r7, #24]
 8001592:	4013      	ands	r3, r2
 8001594:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001596:	683b      	ldr	r3, [r7, #0]
 8001598:	68da      	ldr	r2, [r3, #12]
 800159a:	69fb      	ldr	r3, [r7, #28]
 800159c:	005b      	lsls	r3, r3, #1
 800159e:	fa02 f303 	lsl.w	r3, r2, r3
 80015a2:	69ba      	ldr	r2, [r7, #24]
 80015a4:	4313      	orrs	r3, r2
 80015a6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	69ba      	ldr	r2, [r7, #24]
 80015ac:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	685b      	ldr	r3, [r3, #4]
 80015b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80015b4:	2201      	movs	r2, #1
 80015b6:	69fb      	ldr	r3, [r7, #28]
 80015b8:	fa02 f303 	lsl.w	r3, r2, r3
 80015bc:	43db      	mvns	r3, r3
 80015be:	69ba      	ldr	r2, [r7, #24]
 80015c0:	4013      	ands	r3, r2
 80015c2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80015c4:	683b      	ldr	r3, [r7, #0]
 80015c6:	685b      	ldr	r3, [r3, #4]
 80015c8:	091b      	lsrs	r3, r3, #4
 80015ca:	f003 0201 	and.w	r2, r3, #1
 80015ce:	69fb      	ldr	r3, [r7, #28]
 80015d0:	fa02 f303 	lsl.w	r3, r2, r3
 80015d4:	69ba      	ldr	r2, [r7, #24]
 80015d6:	4313      	orrs	r3, r2
 80015d8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	69ba      	ldr	r2, [r7, #24]
 80015de:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80015e0:	683b      	ldr	r3, [r7, #0]
 80015e2:	685b      	ldr	r3, [r3, #4]
 80015e4:	f003 0303 	and.w	r3, r3, #3
 80015e8:	2b03      	cmp	r3, #3
 80015ea:	d017      	beq.n	800161c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	68db      	ldr	r3, [r3, #12]
 80015f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80015f2:	69fb      	ldr	r3, [r7, #28]
 80015f4:	005b      	lsls	r3, r3, #1
 80015f6:	2203      	movs	r2, #3
 80015f8:	fa02 f303 	lsl.w	r3, r2, r3
 80015fc:	43db      	mvns	r3, r3
 80015fe:	69ba      	ldr	r2, [r7, #24]
 8001600:	4013      	ands	r3, r2
 8001602:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001604:	683b      	ldr	r3, [r7, #0]
 8001606:	689a      	ldr	r2, [r3, #8]
 8001608:	69fb      	ldr	r3, [r7, #28]
 800160a:	005b      	lsls	r3, r3, #1
 800160c:	fa02 f303 	lsl.w	r3, r2, r3
 8001610:	69ba      	ldr	r2, [r7, #24]
 8001612:	4313      	orrs	r3, r2
 8001614:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	69ba      	ldr	r2, [r7, #24]
 800161a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800161c:	683b      	ldr	r3, [r7, #0]
 800161e:	685b      	ldr	r3, [r3, #4]
 8001620:	f003 0303 	and.w	r3, r3, #3
 8001624:	2b02      	cmp	r3, #2
 8001626:	d123      	bne.n	8001670 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001628:	69fb      	ldr	r3, [r7, #28]
 800162a:	08da      	lsrs	r2, r3, #3
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	3208      	adds	r2, #8
 8001630:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001634:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001636:	69fb      	ldr	r3, [r7, #28]
 8001638:	f003 0307 	and.w	r3, r3, #7
 800163c:	009b      	lsls	r3, r3, #2
 800163e:	220f      	movs	r2, #15
 8001640:	fa02 f303 	lsl.w	r3, r2, r3
 8001644:	43db      	mvns	r3, r3
 8001646:	69ba      	ldr	r2, [r7, #24]
 8001648:	4013      	ands	r3, r2
 800164a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800164c:	683b      	ldr	r3, [r7, #0]
 800164e:	691a      	ldr	r2, [r3, #16]
 8001650:	69fb      	ldr	r3, [r7, #28]
 8001652:	f003 0307 	and.w	r3, r3, #7
 8001656:	009b      	lsls	r3, r3, #2
 8001658:	fa02 f303 	lsl.w	r3, r2, r3
 800165c:	69ba      	ldr	r2, [r7, #24]
 800165e:	4313      	orrs	r3, r2
 8001660:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001662:	69fb      	ldr	r3, [r7, #28]
 8001664:	08da      	lsrs	r2, r3, #3
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	3208      	adds	r2, #8
 800166a:	69b9      	ldr	r1, [r7, #24]
 800166c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001676:	69fb      	ldr	r3, [r7, #28]
 8001678:	005b      	lsls	r3, r3, #1
 800167a:	2203      	movs	r2, #3
 800167c:	fa02 f303 	lsl.w	r3, r2, r3
 8001680:	43db      	mvns	r3, r3
 8001682:	69ba      	ldr	r2, [r7, #24]
 8001684:	4013      	ands	r3, r2
 8001686:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001688:	683b      	ldr	r3, [r7, #0]
 800168a:	685b      	ldr	r3, [r3, #4]
 800168c:	f003 0203 	and.w	r2, r3, #3
 8001690:	69fb      	ldr	r3, [r7, #28]
 8001692:	005b      	lsls	r3, r3, #1
 8001694:	fa02 f303 	lsl.w	r3, r2, r3
 8001698:	69ba      	ldr	r2, [r7, #24]
 800169a:	4313      	orrs	r3, r2
 800169c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	69ba      	ldr	r2, [r7, #24]
 80016a2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80016a4:	683b      	ldr	r3, [r7, #0]
 80016a6:	685b      	ldr	r3, [r3, #4]
 80016a8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	f000 80c0 	beq.w	8001832 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016b2:	2300      	movs	r3, #0
 80016b4:	60fb      	str	r3, [r7, #12]
 80016b6:	4b66      	ldr	r3, [pc, #408]	; (8001850 <HAL_GPIO_Init+0x324>)
 80016b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016ba:	4a65      	ldr	r2, [pc, #404]	; (8001850 <HAL_GPIO_Init+0x324>)
 80016bc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80016c0:	6453      	str	r3, [r2, #68]	; 0x44
 80016c2:	4b63      	ldr	r3, [pc, #396]	; (8001850 <HAL_GPIO_Init+0x324>)
 80016c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80016ca:	60fb      	str	r3, [r7, #12]
 80016cc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80016ce:	4a61      	ldr	r2, [pc, #388]	; (8001854 <HAL_GPIO_Init+0x328>)
 80016d0:	69fb      	ldr	r3, [r7, #28]
 80016d2:	089b      	lsrs	r3, r3, #2
 80016d4:	3302      	adds	r3, #2
 80016d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016da:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80016dc:	69fb      	ldr	r3, [r7, #28]
 80016de:	f003 0303 	and.w	r3, r3, #3
 80016e2:	009b      	lsls	r3, r3, #2
 80016e4:	220f      	movs	r2, #15
 80016e6:	fa02 f303 	lsl.w	r3, r2, r3
 80016ea:	43db      	mvns	r3, r3
 80016ec:	69ba      	ldr	r2, [r7, #24]
 80016ee:	4013      	ands	r3, r2
 80016f0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	4a58      	ldr	r2, [pc, #352]	; (8001858 <HAL_GPIO_Init+0x32c>)
 80016f6:	4293      	cmp	r3, r2
 80016f8:	d037      	beq.n	800176a <HAL_GPIO_Init+0x23e>
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	4a57      	ldr	r2, [pc, #348]	; (800185c <HAL_GPIO_Init+0x330>)
 80016fe:	4293      	cmp	r3, r2
 8001700:	d031      	beq.n	8001766 <HAL_GPIO_Init+0x23a>
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	4a56      	ldr	r2, [pc, #344]	; (8001860 <HAL_GPIO_Init+0x334>)
 8001706:	4293      	cmp	r3, r2
 8001708:	d02b      	beq.n	8001762 <HAL_GPIO_Init+0x236>
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	4a55      	ldr	r2, [pc, #340]	; (8001864 <HAL_GPIO_Init+0x338>)
 800170e:	4293      	cmp	r3, r2
 8001710:	d025      	beq.n	800175e <HAL_GPIO_Init+0x232>
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	4a54      	ldr	r2, [pc, #336]	; (8001868 <HAL_GPIO_Init+0x33c>)
 8001716:	4293      	cmp	r3, r2
 8001718:	d01f      	beq.n	800175a <HAL_GPIO_Init+0x22e>
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	4a53      	ldr	r2, [pc, #332]	; (800186c <HAL_GPIO_Init+0x340>)
 800171e:	4293      	cmp	r3, r2
 8001720:	d019      	beq.n	8001756 <HAL_GPIO_Init+0x22a>
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	4a52      	ldr	r2, [pc, #328]	; (8001870 <HAL_GPIO_Init+0x344>)
 8001726:	4293      	cmp	r3, r2
 8001728:	d013      	beq.n	8001752 <HAL_GPIO_Init+0x226>
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	4a51      	ldr	r2, [pc, #324]	; (8001874 <HAL_GPIO_Init+0x348>)
 800172e:	4293      	cmp	r3, r2
 8001730:	d00d      	beq.n	800174e <HAL_GPIO_Init+0x222>
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	4a50      	ldr	r2, [pc, #320]	; (8001878 <HAL_GPIO_Init+0x34c>)
 8001736:	4293      	cmp	r3, r2
 8001738:	d007      	beq.n	800174a <HAL_GPIO_Init+0x21e>
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	4a4f      	ldr	r2, [pc, #316]	; (800187c <HAL_GPIO_Init+0x350>)
 800173e:	4293      	cmp	r3, r2
 8001740:	d101      	bne.n	8001746 <HAL_GPIO_Init+0x21a>
 8001742:	2309      	movs	r3, #9
 8001744:	e012      	b.n	800176c <HAL_GPIO_Init+0x240>
 8001746:	230a      	movs	r3, #10
 8001748:	e010      	b.n	800176c <HAL_GPIO_Init+0x240>
 800174a:	2308      	movs	r3, #8
 800174c:	e00e      	b.n	800176c <HAL_GPIO_Init+0x240>
 800174e:	2307      	movs	r3, #7
 8001750:	e00c      	b.n	800176c <HAL_GPIO_Init+0x240>
 8001752:	2306      	movs	r3, #6
 8001754:	e00a      	b.n	800176c <HAL_GPIO_Init+0x240>
 8001756:	2305      	movs	r3, #5
 8001758:	e008      	b.n	800176c <HAL_GPIO_Init+0x240>
 800175a:	2304      	movs	r3, #4
 800175c:	e006      	b.n	800176c <HAL_GPIO_Init+0x240>
 800175e:	2303      	movs	r3, #3
 8001760:	e004      	b.n	800176c <HAL_GPIO_Init+0x240>
 8001762:	2302      	movs	r3, #2
 8001764:	e002      	b.n	800176c <HAL_GPIO_Init+0x240>
 8001766:	2301      	movs	r3, #1
 8001768:	e000      	b.n	800176c <HAL_GPIO_Init+0x240>
 800176a:	2300      	movs	r3, #0
 800176c:	69fa      	ldr	r2, [r7, #28]
 800176e:	f002 0203 	and.w	r2, r2, #3
 8001772:	0092      	lsls	r2, r2, #2
 8001774:	4093      	lsls	r3, r2
 8001776:	69ba      	ldr	r2, [r7, #24]
 8001778:	4313      	orrs	r3, r2
 800177a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800177c:	4935      	ldr	r1, [pc, #212]	; (8001854 <HAL_GPIO_Init+0x328>)
 800177e:	69fb      	ldr	r3, [r7, #28]
 8001780:	089b      	lsrs	r3, r3, #2
 8001782:	3302      	adds	r3, #2
 8001784:	69ba      	ldr	r2, [r7, #24]
 8001786:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800178a:	4b3d      	ldr	r3, [pc, #244]	; (8001880 <HAL_GPIO_Init+0x354>)
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001790:	693b      	ldr	r3, [r7, #16]
 8001792:	43db      	mvns	r3, r3
 8001794:	69ba      	ldr	r2, [r7, #24]
 8001796:	4013      	ands	r3, r2
 8001798:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800179a:	683b      	ldr	r3, [r7, #0]
 800179c:	685b      	ldr	r3, [r3, #4]
 800179e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d003      	beq.n	80017ae <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80017a6:	69ba      	ldr	r2, [r7, #24]
 80017a8:	693b      	ldr	r3, [r7, #16]
 80017aa:	4313      	orrs	r3, r2
 80017ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80017ae:	4a34      	ldr	r2, [pc, #208]	; (8001880 <HAL_GPIO_Init+0x354>)
 80017b0:	69bb      	ldr	r3, [r7, #24]
 80017b2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80017b4:	4b32      	ldr	r3, [pc, #200]	; (8001880 <HAL_GPIO_Init+0x354>)
 80017b6:	685b      	ldr	r3, [r3, #4]
 80017b8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017ba:	693b      	ldr	r3, [r7, #16]
 80017bc:	43db      	mvns	r3, r3
 80017be:	69ba      	ldr	r2, [r7, #24]
 80017c0:	4013      	ands	r3, r2
 80017c2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80017c4:	683b      	ldr	r3, [r7, #0]
 80017c6:	685b      	ldr	r3, [r3, #4]
 80017c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d003      	beq.n	80017d8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80017d0:	69ba      	ldr	r2, [r7, #24]
 80017d2:	693b      	ldr	r3, [r7, #16]
 80017d4:	4313      	orrs	r3, r2
 80017d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80017d8:	4a29      	ldr	r2, [pc, #164]	; (8001880 <HAL_GPIO_Init+0x354>)
 80017da:	69bb      	ldr	r3, [r7, #24]
 80017dc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80017de:	4b28      	ldr	r3, [pc, #160]	; (8001880 <HAL_GPIO_Init+0x354>)
 80017e0:	689b      	ldr	r3, [r3, #8]
 80017e2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017e4:	693b      	ldr	r3, [r7, #16]
 80017e6:	43db      	mvns	r3, r3
 80017e8:	69ba      	ldr	r2, [r7, #24]
 80017ea:	4013      	ands	r3, r2
 80017ec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80017ee:	683b      	ldr	r3, [r7, #0]
 80017f0:	685b      	ldr	r3, [r3, #4]
 80017f2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d003      	beq.n	8001802 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80017fa:	69ba      	ldr	r2, [r7, #24]
 80017fc:	693b      	ldr	r3, [r7, #16]
 80017fe:	4313      	orrs	r3, r2
 8001800:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001802:	4a1f      	ldr	r2, [pc, #124]	; (8001880 <HAL_GPIO_Init+0x354>)
 8001804:	69bb      	ldr	r3, [r7, #24]
 8001806:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001808:	4b1d      	ldr	r3, [pc, #116]	; (8001880 <HAL_GPIO_Init+0x354>)
 800180a:	68db      	ldr	r3, [r3, #12]
 800180c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800180e:	693b      	ldr	r3, [r7, #16]
 8001810:	43db      	mvns	r3, r3
 8001812:	69ba      	ldr	r2, [r7, #24]
 8001814:	4013      	ands	r3, r2
 8001816:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001818:	683b      	ldr	r3, [r7, #0]
 800181a:	685b      	ldr	r3, [r3, #4]
 800181c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001820:	2b00      	cmp	r3, #0
 8001822:	d003      	beq.n	800182c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001824:	69ba      	ldr	r2, [r7, #24]
 8001826:	693b      	ldr	r3, [r7, #16]
 8001828:	4313      	orrs	r3, r2
 800182a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800182c:	4a14      	ldr	r2, [pc, #80]	; (8001880 <HAL_GPIO_Init+0x354>)
 800182e:	69bb      	ldr	r3, [r7, #24]
 8001830:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001832:	69fb      	ldr	r3, [r7, #28]
 8001834:	3301      	adds	r3, #1
 8001836:	61fb      	str	r3, [r7, #28]
 8001838:	69fb      	ldr	r3, [r7, #28]
 800183a:	2b0f      	cmp	r3, #15
 800183c:	f67f ae84 	bls.w	8001548 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001840:	bf00      	nop
 8001842:	bf00      	nop
 8001844:	3724      	adds	r7, #36	; 0x24
 8001846:	46bd      	mov	sp, r7
 8001848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184c:	4770      	bx	lr
 800184e:	bf00      	nop
 8001850:	40023800 	.word	0x40023800
 8001854:	40013800 	.word	0x40013800
 8001858:	40020000 	.word	0x40020000
 800185c:	40020400 	.word	0x40020400
 8001860:	40020800 	.word	0x40020800
 8001864:	40020c00 	.word	0x40020c00
 8001868:	40021000 	.word	0x40021000
 800186c:	40021400 	.word	0x40021400
 8001870:	40021800 	.word	0x40021800
 8001874:	40021c00 	.word	0x40021c00
 8001878:	40022000 	.word	0x40022000
 800187c:	40022400 	.word	0x40022400
 8001880:	40013c00 	.word	0x40013c00

08001884 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001884:	b480      	push	{r7}
 8001886:	b083      	sub	sp, #12
 8001888:	af00      	add	r7, sp, #0
 800188a:	6078      	str	r0, [r7, #4]
 800188c:	460b      	mov	r3, r1
 800188e:	807b      	strh	r3, [r7, #2]
 8001890:	4613      	mov	r3, r2
 8001892:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001894:	787b      	ldrb	r3, [r7, #1]
 8001896:	2b00      	cmp	r3, #0
 8001898:	d003      	beq.n	80018a2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800189a:	887a      	ldrh	r2, [r7, #2]
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80018a0:	e003      	b.n	80018aa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80018a2:	887b      	ldrh	r3, [r7, #2]
 80018a4:	041a      	lsls	r2, r3, #16
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	619a      	str	r2, [r3, #24]
}
 80018aa:	bf00      	nop
 80018ac:	370c      	adds	r7, #12
 80018ae:	46bd      	mov	sp, r7
 80018b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b4:	4770      	bx	lr
	...

080018b8 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b084      	sub	sp, #16
 80018bc:	af00      	add	r7, sp, #0
 80018be:	6078      	str	r0, [r7, #4]
  uint32_t tmp, tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d101      	bne.n	80018ca <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 80018c6:	2301      	movs	r3, #1
 80018c8:	e0bf      	b.n	8001a4a <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 80018d0:	b2db      	uxtb	r3, r3
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d106      	bne.n	80018e4 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	2200      	movs	r2, #0
 80018da:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 80018de:	6878      	ldr	r0, [r7, #4]
 80018e0:	f7ff f95c 	bl	8000b9c <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	2202      	movs	r2, #2
 80018e8:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	699a      	ldr	r2, [r3, #24]
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 80018fa:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	6999      	ldr	r1, [r3, #24]
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	685a      	ldr	r2, [r3, #4]
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	689b      	ldr	r3, [r3, #8]
 800190a:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8001910:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	691b      	ldr	r3, [r3, #16]
 8001916:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	430a      	orrs	r2, r1
 800191e:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	6899      	ldr	r1, [r3, #8]
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681a      	ldr	r2, [r3, #0]
 800192a:	4b4a      	ldr	r3, [pc, #296]	; (8001a54 <HAL_LTDC_Init+0x19c>)
 800192c:	400b      	ands	r3, r1
 800192e:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	695b      	ldr	r3, [r3, #20]
 8001934:	041b      	lsls	r3, r3, #16
 8001936:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	6899      	ldr	r1, [r3, #8]
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	699a      	ldr	r2, [r3, #24]
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	431a      	orrs	r2, r3
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	430a      	orrs	r2, r1
 800194c:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	68d9      	ldr	r1, [r3, #12]
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681a      	ldr	r2, [r3, #0]
 8001958:	4b3e      	ldr	r3, [pc, #248]	; (8001a54 <HAL_LTDC_Init+0x19c>)
 800195a:	400b      	ands	r3, r1
 800195c:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	69db      	ldr	r3, [r3, #28]
 8001962:	041b      	lsls	r3, r3, #16
 8001964:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	68d9      	ldr	r1, [r3, #12]
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	6a1a      	ldr	r2, [r3, #32]
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	431a      	orrs	r2, r3
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	430a      	orrs	r2, r1
 800197a:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	6919      	ldr	r1, [r3, #16]
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681a      	ldr	r2, [r3, #0]
 8001986:	4b33      	ldr	r3, [pc, #204]	; (8001a54 <HAL_LTDC_Init+0x19c>)
 8001988:	400b      	ands	r3, r1
 800198a:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001990:	041b      	lsls	r3, r3, #16
 8001992:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	6919      	ldr	r1, [r3, #16]
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	431a      	orrs	r2, r3
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	430a      	orrs	r2, r1
 80019a8:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	6959      	ldr	r1, [r3, #20]
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681a      	ldr	r2, [r3, #0]
 80019b4:	4b27      	ldr	r3, [pc, #156]	; (8001a54 <HAL_LTDC_Init+0x19c>)
 80019b6:	400b      	ands	r3, r1
 80019b8:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019be:	041b      	lsls	r3, r3, #16
 80019c0:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	6959      	ldr	r1, [r3, #20]
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	431a      	orrs	r2, r3
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	430a      	orrs	r2, r1
 80019d6:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80019de:	021b      	lsls	r3, r3, #8
 80019e0:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 80019e8:	041b      	lsls	r3, r3, #16
 80019ea:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 80019fa:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001a02:	68ba      	ldr	r2, [r7, #8]
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	4313      	orrs	r3, r2
 8001a08:	687a      	ldr	r2, [r7, #4]
 8001a0a:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 8001a0e:	431a      	orrs	r2, r3
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	430a      	orrs	r2, r1
 8001a16:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	f042 0206 	orr.w	r2, r2, #6
 8001a26:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	699a      	ldr	r2, [r3, #24]
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	f042 0201 	orr.w	r2, r2, #1
 8001a36:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	2201      	movs	r2, #1
 8001a44:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8001a48:	2300      	movs	r3, #0
}
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	3710      	adds	r7, #16
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	bd80      	pop	{r7, pc}
 8001a52:	bf00      	nop
 8001a54:	f000f800 	.word	0xf000f800

08001a58 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	b084      	sub	sp, #16
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a66:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a6e:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	f003 0304 	and.w	r3, r3, #4
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d023      	beq.n	8001ac2 <HAL_LTDC_IRQHandler+0x6a>
 8001a7a:	68bb      	ldr	r3, [r7, #8]
 8001a7c:	f003 0304 	and.w	r3, r3, #4
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d01e      	beq.n	8001ac2 <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	f022 0204 	bic.w	r2, r2, #4
 8001a92:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	2204      	movs	r2, #4
 8001a9a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8001aa2:	f043 0201 	orr.w	r2, r3, #1
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	2204      	movs	r2, #4
 8001ab0:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8001abc:	6878      	ldr	r0, [r7, #4]
 8001abe:	f000 f86f 	bl	8001ba0 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	f003 0302 	and.w	r3, r3, #2
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d023      	beq.n	8001b14 <HAL_LTDC_IRQHandler+0xbc>
 8001acc:	68bb      	ldr	r3, [r7, #8]
 8001ace:	f003 0302 	and.w	r3, r3, #2
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d01e      	beq.n	8001b14 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	f022 0202 	bic.w	r2, r2, #2
 8001ae4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	2202      	movs	r2, #2
 8001aec:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8001af4:	f043 0202 	orr.w	r2, r3, #2
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	2204      	movs	r2, #4
 8001b02:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	2200      	movs	r2, #0
 8001b0a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8001b0e:	6878      	ldr	r0, [r7, #4]
 8001b10:	f000 f846 	bl	8001ba0 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	f003 0301 	and.w	r3, r3, #1
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d01b      	beq.n	8001b56 <HAL_LTDC_IRQHandler+0xfe>
 8001b1e:	68bb      	ldr	r3, [r7, #8]
 8001b20:	f003 0301 	and.w	r3, r3, #1
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d016      	beq.n	8001b56 <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	f022 0201 	bic.w	r2, r2, #1
 8001b36:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	2201      	movs	r2, #1
 8001b3e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	2201      	movs	r2, #1
 8001b44:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 8001b50:	6878      	ldr	r0, [r7, #4]
 8001b52:	f000 f82f 	bl	8001bb4 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	f003 0308 	and.w	r3, r3, #8
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d01b      	beq.n	8001b98 <HAL_LTDC_IRQHandler+0x140>
 8001b60:	68bb      	ldr	r3, [r7, #8]
 8001b62:	f003 0308 	and.w	r3, r3, #8
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d016      	beq.n	8001b98 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	f022 0208 	bic.w	r2, r2, #8
 8001b78:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	2208      	movs	r2, #8
 8001b80:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	2201      	movs	r2, #1
 8001b86:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 8001b92:	6878      	ldr	r0, [r7, #4]
 8001b94:	f000 f818 	bl	8001bc8 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 8001b98:	bf00      	nop
 8001b9a:	3710      	adds	r7, #16
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	bd80      	pop	{r7, pc}

08001ba0 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 8001ba0:	b480      	push	{r7}
 8001ba2:	b083      	sub	sp, #12
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 8001ba8:	bf00      	nop
 8001baa:	370c      	adds	r7, #12
 8001bac:	46bd      	mov	sp, r7
 8001bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb2:	4770      	bx	lr

08001bb4 <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8001bb4:	b480      	push	{r7}
 8001bb6:	b083      	sub	sp, #12
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 8001bbc:	bf00      	nop
 8001bbe:	370c      	adds	r7, #12
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc6:	4770      	bx	lr

08001bc8 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8001bc8:	b480      	push	{r7}
 8001bca:	b083      	sub	sp, #12
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 8001bd0:	bf00      	nop
 8001bd2:	370c      	adds	r7, #12
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bda:	4770      	bx	lr

08001bdc <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8001bdc:	b5b0      	push	{r4, r5, r7, lr}
 8001bde:	b084      	sub	sp, #16
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	60f8      	str	r0, [r7, #12]
 8001be4:	60b9      	str	r1, [r7, #8]
 8001be6:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8001bee:	2b01      	cmp	r3, #1
 8001bf0:	d101      	bne.n	8001bf6 <HAL_LTDC_ConfigLayer+0x1a>
 8001bf2:	2302      	movs	r3, #2
 8001bf4:	e02c      	b.n	8001c50 <HAL_LTDC_ConfigLayer+0x74>
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	2201      	movs	r2, #1
 8001bfa:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	2202      	movs	r2, #2
 8001c02:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8001c06:	68fa      	ldr	r2, [r7, #12]
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	2134      	movs	r1, #52	; 0x34
 8001c0c:	fb01 f303 	mul.w	r3, r1, r3
 8001c10:	4413      	add	r3, r2
 8001c12:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8001c16:	68bb      	ldr	r3, [r7, #8]
 8001c18:	4614      	mov	r4, r2
 8001c1a:	461d      	mov	r5, r3
 8001c1c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001c1e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001c20:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001c22:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001c24:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001c26:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001c28:	682b      	ldr	r3, [r5, #0]
 8001c2a:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8001c2c:	687a      	ldr	r2, [r7, #4]
 8001c2e:	68b9      	ldr	r1, [r7, #8]
 8001c30:	68f8      	ldr	r0, [r7, #12]
 8001c32:	f000 f811 	bl	8001c58 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	2201      	movs	r2, #1
 8001c3c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	2201      	movs	r2, #1
 8001c42:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	2200      	movs	r2, #0
 8001c4a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8001c4e:	2300      	movs	r3, #0
}
 8001c50:	4618      	mov	r0, r3
 8001c52:	3710      	adds	r7, #16
 8001c54:	46bd      	mov	sp, r7
 8001c56:	bdb0      	pop	{r4, r5, r7, pc}

08001c58 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8001c58:	b480      	push	{r7}
 8001c5a:	b089      	sub	sp, #36	; 0x24
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	60f8      	str	r0, [r7, #12]
 8001c60:	60b9      	str	r1, [r7, #8]
 8001c62:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8001c64:	68bb      	ldr	r3, [r7, #8]
 8001c66:	685a      	ldr	r2, [r3, #4]
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	68db      	ldr	r3, [r3, #12]
 8001c6e:	0c1b      	lsrs	r3, r3, #16
 8001c70:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001c74:	4413      	add	r3, r2
 8001c76:	041b      	lsls	r3, r3, #16
 8001c78:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	461a      	mov	r2, r3
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	01db      	lsls	r3, r3, #7
 8001c84:	4413      	add	r3, r2
 8001c86:	3384      	adds	r3, #132	; 0x84
 8001c88:	685b      	ldr	r3, [r3, #4]
 8001c8a:	68fa      	ldr	r2, [r7, #12]
 8001c8c:	6812      	ldr	r2, [r2, #0]
 8001c8e:	4611      	mov	r1, r2
 8001c90:	687a      	ldr	r2, [r7, #4]
 8001c92:	01d2      	lsls	r2, r2, #7
 8001c94:	440a      	add	r2, r1
 8001c96:	3284      	adds	r2, #132	; 0x84
 8001c98:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8001c9c:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8001c9e:	68bb      	ldr	r3, [r7, #8]
 8001ca0:	681a      	ldr	r2, [r3, #0]
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	68db      	ldr	r3, [r3, #12]
 8001ca8:	0c1b      	lsrs	r3, r3, #16
 8001caa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001cae:	4413      	add	r3, r2
 8001cb0:	1c5a      	adds	r2, r3, #1
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	4619      	mov	r1, r3
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	01db      	lsls	r3, r3, #7
 8001cbc:	440b      	add	r3, r1
 8001cbe:	3384      	adds	r3, #132	; 0x84
 8001cc0:	4619      	mov	r1, r3
 8001cc2:	69fb      	ldr	r3, [r7, #28]
 8001cc4:	4313      	orrs	r3, r2
 8001cc6:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8001cc8:	68bb      	ldr	r3, [r7, #8]
 8001cca:	68da      	ldr	r2, [r3, #12]
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	68db      	ldr	r3, [r3, #12]
 8001cd2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001cd6:	4413      	add	r3, r2
 8001cd8:	041b      	lsls	r3, r3, #16
 8001cda:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	461a      	mov	r2, r3
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	01db      	lsls	r3, r3, #7
 8001ce6:	4413      	add	r3, r2
 8001ce8:	3384      	adds	r3, #132	; 0x84
 8001cea:	689b      	ldr	r3, [r3, #8]
 8001cec:	68fa      	ldr	r2, [r7, #12]
 8001cee:	6812      	ldr	r2, [r2, #0]
 8001cf0:	4611      	mov	r1, r2
 8001cf2:	687a      	ldr	r2, [r7, #4]
 8001cf4:	01d2      	lsls	r2, r2, #7
 8001cf6:	440a      	add	r2, r1
 8001cf8:	3284      	adds	r2, #132	; 0x84
 8001cfa:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8001cfe:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8001d00:	68bb      	ldr	r3, [r7, #8]
 8001d02:	689a      	ldr	r2, [r3, #8]
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	68db      	ldr	r3, [r3, #12]
 8001d0a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001d0e:	4413      	add	r3, r2
 8001d10:	1c5a      	adds	r2, r3, #1
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	4619      	mov	r1, r3
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	01db      	lsls	r3, r3, #7
 8001d1c:	440b      	add	r3, r1
 8001d1e:	3384      	adds	r3, #132	; 0x84
 8001d20:	4619      	mov	r1, r3
 8001d22:	69fb      	ldr	r3, [r7, #28]
 8001d24:	4313      	orrs	r3, r2
 8001d26:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	461a      	mov	r2, r3
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	01db      	lsls	r3, r3, #7
 8001d32:	4413      	add	r3, r2
 8001d34:	3384      	adds	r3, #132	; 0x84
 8001d36:	691b      	ldr	r3, [r3, #16]
 8001d38:	68fa      	ldr	r2, [r7, #12]
 8001d3a:	6812      	ldr	r2, [r2, #0]
 8001d3c:	4611      	mov	r1, r2
 8001d3e:	687a      	ldr	r2, [r7, #4]
 8001d40:	01d2      	lsls	r2, r2, #7
 8001d42:	440a      	add	r2, r1
 8001d44:	3284      	adds	r2, #132	; 0x84
 8001d46:	f023 0307 	bic.w	r3, r3, #7
 8001d4a:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	461a      	mov	r2, r3
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	01db      	lsls	r3, r3, #7
 8001d56:	4413      	add	r3, r2
 8001d58:	3384      	adds	r3, #132	; 0x84
 8001d5a:	461a      	mov	r2, r3
 8001d5c:	68bb      	ldr	r3, [r7, #8]
 8001d5e:	691b      	ldr	r3, [r3, #16]
 8001d60:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8001d62:	68bb      	ldr	r3, [r7, #8]
 8001d64:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8001d68:	021b      	lsls	r3, r3, #8
 8001d6a:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8001d6c:	68bb      	ldr	r3, [r7, #8]
 8001d6e:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8001d72:	041b      	lsls	r3, r3, #16
 8001d74:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8001d76:	68bb      	ldr	r3, [r7, #8]
 8001d78:	699b      	ldr	r3, [r3, #24]
 8001d7a:	061b      	lsls	r3, r3, #24
 8001d7c:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	461a      	mov	r2, r3
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	01db      	lsls	r3, r3, #7
 8001d88:	4413      	add	r3, r2
 8001d8a:	3384      	adds	r3, #132	; 0x84
 8001d8c:	699b      	ldr	r3, [r3, #24]
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	461a      	mov	r2, r3
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	01db      	lsls	r3, r3, #7
 8001d98:	4413      	add	r3, r2
 8001d9a:	3384      	adds	r3, #132	; 0x84
 8001d9c:	461a      	mov	r2, r3
 8001d9e:	2300      	movs	r3, #0
 8001da0:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8001da2:	68bb      	ldr	r3, [r7, #8]
 8001da4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001da8:	461a      	mov	r2, r3
 8001daa:	69fb      	ldr	r3, [r7, #28]
 8001dac:	431a      	orrs	r2, r3
 8001dae:	69bb      	ldr	r3, [r7, #24]
 8001db0:	431a      	orrs	r2, r3
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	4619      	mov	r1, r3
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	01db      	lsls	r3, r3, #7
 8001dbc:	440b      	add	r3, r1
 8001dbe:	3384      	adds	r3, #132	; 0x84
 8001dc0:	4619      	mov	r1, r3
 8001dc2:	697b      	ldr	r3, [r7, #20]
 8001dc4:	4313      	orrs	r3, r2
 8001dc6:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	461a      	mov	r2, r3
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	01db      	lsls	r3, r3, #7
 8001dd2:	4413      	add	r3, r2
 8001dd4:	3384      	adds	r3, #132	; 0x84
 8001dd6:	695b      	ldr	r3, [r3, #20]
 8001dd8:	68fa      	ldr	r2, [r7, #12]
 8001dda:	6812      	ldr	r2, [r2, #0]
 8001ddc:	4611      	mov	r1, r2
 8001dde:	687a      	ldr	r2, [r7, #4]
 8001de0:	01d2      	lsls	r2, r2, #7
 8001de2:	440a      	add	r2, r1
 8001de4:	3284      	adds	r2, #132	; 0x84
 8001de6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001dea:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	461a      	mov	r2, r3
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	01db      	lsls	r3, r3, #7
 8001df6:	4413      	add	r3, r2
 8001df8:	3384      	adds	r3, #132	; 0x84
 8001dfa:	461a      	mov	r2, r3
 8001dfc:	68bb      	ldr	r3, [r7, #8]
 8001dfe:	695b      	ldr	r3, [r3, #20]
 8001e00:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	461a      	mov	r2, r3
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	01db      	lsls	r3, r3, #7
 8001e0c:	4413      	add	r3, r2
 8001e0e:	3384      	adds	r3, #132	; 0x84
 8001e10:	69db      	ldr	r3, [r3, #28]
 8001e12:	68fa      	ldr	r2, [r7, #12]
 8001e14:	6812      	ldr	r2, [r2, #0]
 8001e16:	4611      	mov	r1, r2
 8001e18:	687a      	ldr	r2, [r7, #4]
 8001e1a:	01d2      	lsls	r2, r2, #7
 8001e1c:	440a      	add	r2, r1
 8001e1e:	3284      	adds	r2, #132	; 0x84
 8001e20:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001e24:	f023 0307 	bic.w	r3, r3, #7
 8001e28:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8001e2a:	68bb      	ldr	r3, [r7, #8]
 8001e2c:	69da      	ldr	r2, [r3, #28]
 8001e2e:	68bb      	ldr	r3, [r7, #8]
 8001e30:	6a1b      	ldr	r3, [r3, #32]
 8001e32:	68f9      	ldr	r1, [r7, #12]
 8001e34:	6809      	ldr	r1, [r1, #0]
 8001e36:	4608      	mov	r0, r1
 8001e38:	6879      	ldr	r1, [r7, #4]
 8001e3a:	01c9      	lsls	r1, r1, #7
 8001e3c:	4401      	add	r1, r0
 8001e3e:	3184      	adds	r1, #132	; 0x84
 8001e40:	4313      	orrs	r3, r2
 8001e42:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	461a      	mov	r2, r3
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	01db      	lsls	r3, r3, #7
 8001e4e:	4413      	add	r3, r2
 8001e50:	3384      	adds	r3, #132	; 0x84
 8001e52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	461a      	mov	r2, r3
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	01db      	lsls	r3, r3, #7
 8001e5e:	4413      	add	r3, r2
 8001e60:	3384      	adds	r3, #132	; 0x84
 8001e62:	461a      	mov	r2, r3
 8001e64:	2300      	movs	r3, #0
 8001e66:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	461a      	mov	r2, r3
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	01db      	lsls	r3, r3, #7
 8001e72:	4413      	add	r3, r2
 8001e74:	3384      	adds	r3, #132	; 0x84
 8001e76:	461a      	mov	r2, r3
 8001e78:	68bb      	ldr	r3, [r7, #8]
 8001e7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e7c:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8001e7e:	68bb      	ldr	r3, [r7, #8]
 8001e80:	691b      	ldr	r3, [r3, #16]
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d102      	bne.n	8001e8c <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 8001e86:	2304      	movs	r3, #4
 8001e88:	61fb      	str	r3, [r7, #28]
 8001e8a:	e01b      	b.n	8001ec4 <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8001e8c:	68bb      	ldr	r3, [r7, #8]
 8001e8e:	691b      	ldr	r3, [r3, #16]
 8001e90:	2b01      	cmp	r3, #1
 8001e92:	d102      	bne.n	8001e9a <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 8001e94:	2303      	movs	r3, #3
 8001e96:	61fb      	str	r3, [r7, #28]
 8001e98:	e014      	b.n	8001ec4 <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8001e9a:	68bb      	ldr	r3, [r7, #8]
 8001e9c:	691b      	ldr	r3, [r3, #16]
 8001e9e:	2b04      	cmp	r3, #4
 8001ea0:	d00b      	beq.n	8001eba <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8001ea2:	68bb      	ldr	r3, [r7, #8]
 8001ea4:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8001ea6:	2b02      	cmp	r3, #2
 8001ea8:	d007      	beq.n	8001eba <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8001eaa:	68bb      	ldr	r3, [r7, #8]
 8001eac:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8001eae:	2b03      	cmp	r3, #3
 8001eb0:	d003      	beq.n	8001eba <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8001eb2:	68bb      	ldr	r3, [r7, #8]
 8001eb4:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8001eb6:	2b07      	cmp	r3, #7
 8001eb8:	d102      	bne.n	8001ec0 <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 8001eba:	2302      	movs	r3, #2
 8001ebc:	61fb      	str	r3, [r7, #28]
 8001ebe:	e001      	b.n	8001ec4 <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 8001ec0:	2301      	movs	r3, #1
 8001ec2:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	461a      	mov	r2, r3
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	01db      	lsls	r3, r3, #7
 8001ece:	4413      	add	r3, r2
 8001ed0:	3384      	adds	r3, #132	; 0x84
 8001ed2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ed4:	68fa      	ldr	r2, [r7, #12]
 8001ed6:	6812      	ldr	r2, [r2, #0]
 8001ed8:	4611      	mov	r1, r2
 8001eda:	687a      	ldr	r2, [r7, #4]
 8001edc:	01d2      	lsls	r2, r2, #7
 8001ede:	440a      	add	r2, r1
 8001ee0:	3284      	adds	r2, #132	; 0x84
 8001ee2:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 8001ee6:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8001ee8:	68bb      	ldr	r3, [r7, #8]
 8001eea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001eec:	69fa      	ldr	r2, [r7, #28]
 8001eee:	fb02 f303 	mul.w	r3, r2, r3
 8001ef2:	041a      	lsls	r2, r3, #16
 8001ef4:	68bb      	ldr	r3, [r7, #8]
 8001ef6:	6859      	ldr	r1, [r3, #4]
 8001ef8:	68bb      	ldr	r3, [r7, #8]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	1acb      	subs	r3, r1, r3
 8001efe:	69f9      	ldr	r1, [r7, #28]
 8001f00:	fb01 f303 	mul.w	r3, r1, r3
 8001f04:	3303      	adds	r3, #3
 8001f06:	68f9      	ldr	r1, [r7, #12]
 8001f08:	6809      	ldr	r1, [r1, #0]
 8001f0a:	4608      	mov	r0, r1
 8001f0c:	6879      	ldr	r1, [r7, #4]
 8001f0e:	01c9      	lsls	r1, r1, #7
 8001f10:	4401      	add	r1, r0
 8001f12:	3184      	adds	r1, #132	; 0x84
 8001f14:	4313      	orrs	r3, r2
 8001f16:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	461a      	mov	r2, r3
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	01db      	lsls	r3, r3, #7
 8001f22:	4413      	add	r3, r2
 8001f24:	3384      	adds	r3, #132	; 0x84
 8001f26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f28:	68fa      	ldr	r2, [r7, #12]
 8001f2a:	6812      	ldr	r2, [r2, #0]
 8001f2c:	4611      	mov	r1, r2
 8001f2e:	687a      	ldr	r2, [r7, #4]
 8001f30:	01d2      	lsls	r2, r2, #7
 8001f32:	440a      	add	r2, r1
 8001f34:	3284      	adds	r2, #132	; 0x84
 8001f36:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8001f3a:	f023 0307 	bic.w	r3, r3, #7
 8001f3e:	6313      	str	r3, [r2, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	461a      	mov	r2, r3
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	01db      	lsls	r3, r3, #7
 8001f4a:	4413      	add	r3, r2
 8001f4c:	3384      	adds	r3, #132	; 0x84
 8001f4e:	461a      	mov	r2, r3
 8001f50:	68bb      	ldr	r3, [r7, #8]
 8001f52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f54:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	461a      	mov	r2, r3
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	01db      	lsls	r3, r3, #7
 8001f60:	4413      	add	r3, r2
 8001f62:	3384      	adds	r3, #132	; 0x84
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	68fa      	ldr	r2, [r7, #12]
 8001f68:	6812      	ldr	r2, [r2, #0]
 8001f6a:	4611      	mov	r1, r2
 8001f6c:	687a      	ldr	r2, [r7, #4]
 8001f6e:	01d2      	lsls	r2, r2, #7
 8001f70:	440a      	add	r2, r1
 8001f72:	3284      	adds	r2, #132	; 0x84
 8001f74:	f043 0301 	orr.w	r3, r3, #1
 8001f78:	6013      	str	r3, [r2, #0]
}
 8001f7a:	bf00      	nop
 8001f7c:	3724      	adds	r7, #36	; 0x24
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f84:	4770      	bx	lr

08001f86 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001f86:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001f88:	b08f      	sub	sp, #60	; 0x3c
 8001f8a:	af0a      	add	r7, sp, #40	; 0x28
 8001f8c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d101      	bne.n	8001f98 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001f94:	2301      	movs	r3, #1
 8001f96:	e116      	b.n	80021c6 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8001fa4:	b2db      	uxtb	r3, r3
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d106      	bne.n	8001fb8 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	2200      	movs	r2, #0
 8001fae:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001fb2:	6878      	ldr	r0, [r7, #4]
 8001fb4:	f006 fba4 	bl	8008700 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	2203      	movs	r2, #3
 8001fbc:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001fc0:	68bb      	ldr	r3, [r7, #8]
 8001fc2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001fc4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d102      	bne.n	8001fd2 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	2200      	movs	r2, #0
 8001fd0:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	4618      	mov	r0, r3
 8001fd8:	f003 fa5b 	bl	8005492 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	603b      	str	r3, [r7, #0]
 8001fe2:	687e      	ldr	r6, [r7, #4]
 8001fe4:	466d      	mov	r5, sp
 8001fe6:	f106 0410 	add.w	r4, r6, #16
 8001fea:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001fec:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001fee:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001ff0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001ff2:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001ff6:	e885 0003 	stmia.w	r5, {r0, r1}
 8001ffa:	1d33      	adds	r3, r6, #4
 8001ffc:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001ffe:	6838      	ldr	r0, [r7, #0]
 8002000:	f003 f932 	bl	8005268 <USB_CoreInit>
 8002004:	4603      	mov	r3, r0
 8002006:	2b00      	cmp	r3, #0
 8002008:	d005      	beq.n	8002016 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	2202      	movs	r2, #2
 800200e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002012:	2301      	movs	r3, #1
 8002014:	e0d7      	b.n	80021c6 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	2100      	movs	r1, #0
 800201c:	4618      	mov	r0, r3
 800201e:	f003 fa49 	bl	80054b4 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002022:	2300      	movs	r3, #0
 8002024:	73fb      	strb	r3, [r7, #15]
 8002026:	e04a      	b.n	80020be <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002028:	7bfa      	ldrb	r2, [r7, #15]
 800202a:	6879      	ldr	r1, [r7, #4]
 800202c:	4613      	mov	r3, r2
 800202e:	00db      	lsls	r3, r3, #3
 8002030:	1a9b      	subs	r3, r3, r2
 8002032:	009b      	lsls	r3, r3, #2
 8002034:	440b      	add	r3, r1
 8002036:	333d      	adds	r3, #61	; 0x3d
 8002038:	2201      	movs	r2, #1
 800203a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800203c:	7bfa      	ldrb	r2, [r7, #15]
 800203e:	6879      	ldr	r1, [r7, #4]
 8002040:	4613      	mov	r3, r2
 8002042:	00db      	lsls	r3, r3, #3
 8002044:	1a9b      	subs	r3, r3, r2
 8002046:	009b      	lsls	r3, r3, #2
 8002048:	440b      	add	r3, r1
 800204a:	333c      	adds	r3, #60	; 0x3c
 800204c:	7bfa      	ldrb	r2, [r7, #15]
 800204e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002050:	7bfa      	ldrb	r2, [r7, #15]
 8002052:	7bfb      	ldrb	r3, [r7, #15]
 8002054:	b298      	uxth	r0, r3
 8002056:	6879      	ldr	r1, [r7, #4]
 8002058:	4613      	mov	r3, r2
 800205a:	00db      	lsls	r3, r3, #3
 800205c:	1a9b      	subs	r3, r3, r2
 800205e:	009b      	lsls	r3, r3, #2
 8002060:	440b      	add	r3, r1
 8002062:	3342      	adds	r3, #66	; 0x42
 8002064:	4602      	mov	r2, r0
 8002066:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002068:	7bfa      	ldrb	r2, [r7, #15]
 800206a:	6879      	ldr	r1, [r7, #4]
 800206c:	4613      	mov	r3, r2
 800206e:	00db      	lsls	r3, r3, #3
 8002070:	1a9b      	subs	r3, r3, r2
 8002072:	009b      	lsls	r3, r3, #2
 8002074:	440b      	add	r3, r1
 8002076:	333f      	adds	r3, #63	; 0x3f
 8002078:	2200      	movs	r2, #0
 800207a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800207c:	7bfa      	ldrb	r2, [r7, #15]
 800207e:	6879      	ldr	r1, [r7, #4]
 8002080:	4613      	mov	r3, r2
 8002082:	00db      	lsls	r3, r3, #3
 8002084:	1a9b      	subs	r3, r3, r2
 8002086:	009b      	lsls	r3, r3, #2
 8002088:	440b      	add	r3, r1
 800208a:	3344      	adds	r3, #68	; 0x44
 800208c:	2200      	movs	r2, #0
 800208e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002090:	7bfa      	ldrb	r2, [r7, #15]
 8002092:	6879      	ldr	r1, [r7, #4]
 8002094:	4613      	mov	r3, r2
 8002096:	00db      	lsls	r3, r3, #3
 8002098:	1a9b      	subs	r3, r3, r2
 800209a:	009b      	lsls	r3, r3, #2
 800209c:	440b      	add	r3, r1
 800209e:	3348      	adds	r3, #72	; 0x48
 80020a0:	2200      	movs	r2, #0
 80020a2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80020a4:	7bfa      	ldrb	r2, [r7, #15]
 80020a6:	6879      	ldr	r1, [r7, #4]
 80020a8:	4613      	mov	r3, r2
 80020aa:	00db      	lsls	r3, r3, #3
 80020ac:	1a9b      	subs	r3, r3, r2
 80020ae:	009b      	lsls	r3, r3, #2
 80020b0:	440b      	add	r3, r1
 80020b2:	3350      	adds	r3, #80	; 0x50
 80020b4:	2200      	movs	r2, #0
 80020b6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80020b8:	7bfb      	ldrb	r3, [r7, #15]
 80020ba:	3301      	adds	r3, #1
 80020bc:	73fb      	strb	r3, [r7, #15]
 80020be:	7bfa      	ldrb	r2, [r7, #15]
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	685b      	ldr	r3, [r3, #4]
 80020c4:	429a      	cmp	r2, r3
 80020c6:	d3af      	bcc.n	8002028 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80020c8:	2300      	movs	r3, #0
 80020ca:	73fb      	strb	r3, [r7, #15]
 80020cc:	e044      	b.n	8002158 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80020ce:	7bfa      	ldrb	r2, [r7, #15]
 80020d0:	6879      	ldr	r1, [r7, #4]
 80020d2:	4613      	mov	r3, r2
 80020d4:	00db      	lsls	r3, r3, #3
 80020d6:	1a9b      	subs	r3, r3, r2
 80020d8:	009b      	lsls	r3, r3, #2
 80020da:	440b      	add	r3, r1
 80020dc:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 80020e0:	2200      	movs	r2, #0
 80020e2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80020e4:	7bfa      	ldrb	r2, [r7, #15]
 80020e6:	6879      	ldr	r1, [r7, #4]
 80020e8:	4613      	mov	r3, r2
 80020ea:	00db      	lsls	r3, r3, #3
 80020ec:	1a9b      	subs	r3, r3, r2
 80020ee:	009b      	lsls	r3, r3, #2
 80020f0:	440b      	add	r3, r1
 80020f2:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 80020f6:	7bfa      	ldrb	r2, [r7, #15]
 80020f8:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80020fa:	7bfa      	ldrb	r2, [r7, #15]
 80020fc:	6879      	ldr	r1, [r7, #4]
 80020fe:	4613      	mov	r3, r2
 8002100:	00db      	lsls	r3, r3, #3
 8002102:	1a9b      	subs	r3, r3, r2
 8002104:	009b      	lsls	r3, r3, #2
 8002106:	440b      	add	r3, r1
 8002108:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800210c:	2200      	movs	r2, #0
 800210e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002110:	7bfa      	ldrb	r2, [r7, #15]
 8002112:	6879      	ldr	r1, [r7, #4]
 8002114:	4613      	mov	r3, r2
 8002116:	00db      	lsls	r3, r3, #3
 8002118:	1a9b      	subs	r3, r3, r2
 800211a:	009b      	lsls	r3, r3, #2
 800211c:	440b      	add	r3, r1
 800211e:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002122:	2200      	movs	r2, #0
 8002124:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002126:	7bfa      	ldrb	r2, [r7, #15]
 8002128:	6879      	ldr	r1, [r7, #4]
 800212a:	4613      	mov	r3, r2
 800212c:	00db      	lsls	r3, r3, #3
 800212e:	1a9b      	subs	r3, r3, r2
 8002130:	009b      	lsls	r3, r3, #2
 8002132:	440b      	add	r3, r1
 8002134:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002138:	2200      	movs	r2, #0
 800213a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800213c:	7bfa      	ldrb	r2, [r7, #15]
 800213e:	6879      	ldr	r1, [r7, #4]
 8002140:	4613      	mov	r3, r2
 8002142:	00db      	lsls	r3, r3, #3
 8002144:	1a9b      	subs	r3, r3, r2
 8002146:	009b      	lsls	r3, r3, #2
 8002148:	440b      	add	r3, r1
 800214a:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800214e:	2200      	movs	r2, #0
 8002150:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002152:	7bfb      	ldrb	r3, [r7, #15]
 8002154:	3301      	adds	r3, #1
 8002156:	73fb      	strb	r3, [r7, #15]
 8002158:	7bfa      	ldrb	r2, [r7, #15]
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	685b      	ldr	r3, [r3, #4]
 800215e:	429a      	cmp	r2, r3
 8002160:	d3b5      	bcc.n	80020ce <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	603b      	str	r3, [r7, #0]
 8002168:	687e      	ldr	r6, [r7, #4]
 800216a:	466d      	mov	r5, sp
 800216c:	f106 0410 	add.w	r4, r6, #16
 8002170:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002172:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002174:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002176:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002178:	e894 0003 	ldmia.w	r4, {r0, r1}
 800217c:	e885 0003 	stmia.w	r5, {r0, r1}
 8002180:	1d33      	adds	r3, r6, #4
 8002182:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002184:	6838      	ldr	r0, [r7, #0]
 8002186:	f003 f9e1 	bl	800554c <USB_DevInit>
 800218a:	4603      	mov	r3, r0
 800218c:	2b00      	cmp	r3, #0
 800218e:	d005      	beq.n	800219c <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	2202      	movs	r2, #2
 8002194:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002198:	2301      	movs	r3, #1
 800219a:	e014      	b.n	80021c6 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	2200      	movs	r2, #0
 80021a0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	2201      	movs	r2, #1
 80021a8:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021b0:	2b01      	cmp	r3, #1
 80021b2:	d102      	bne.n	80021ba <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80021b4:	6878      	ldr	r0, [r7, #4]
 80021b6:	f001 f891 	bl	80032dc <HAL_PCDEx_ActivateLPM>
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	4618      	mov	r0, r3
 80021c0:	f004 fa50 	bl	8006664 <USB_DevDisconnect>

  return HAL_OK;
 80021c4:	2300      	movs	r3, #0
}
 80021c6:	4618      	mov	r0, r3
 80021c8:	3714      	adds	r7, #20
 80021ca:	46bd      	mov	sp, r7
 80021cc:	bdf0      	pop	{r4, r5, r6, r7, pc}

080021ce <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80021ce:	b580      	push	{r7, lr}
 80021d0:	b084      	sub	sp, #16
 80021d2:	af00      	add	r7, sp, #0
 80021d4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80021e2:	2b01      	cmp	r3, #1
 80021e4:	d101      	bne.n	80021ea <HAL_PCD_Start+0x1c>
 80021e6:	2302      	movs	r3, #2
 80021e8:	e020      	b.n	800222c <HAL_PCD_Start+0x5e>
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	2201      	movs	r2, #1
 80021ee:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021f6:	2b01      	cmp	r3, #1
 80021f8:	d109      	bne.n	800220e <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80021fe:	2b01      	cmp	r3, #1
 8002200:	d005      	beq.n	800220e <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002206:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	4618      	mov	r0, r3
 8002214:	f003 f92c 	bl	8005470 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	4618      	mov	r0, r3
 800221e:	f004 fa00 	bl	8006622 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	2200      	movs	r2, #0
 8002226:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800222a:	2300      	movs	r3, #0
}
 800222c:	4618      	mov	r0, r3
 800222e:	3710      	adds	r7, #16
 8002230:	46bd      	mov	sp, r7
 8002232:	bd80      	pop	{r7, pc}

08002234 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002234:	b590      	push	{r4, r7, lr}
 8002236:	b08d      	sub	sp, #52	; 0x34
 8002238:	af00      	add	r7, sp, #0
 800223a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002242:	6a3b      	ldr	r3, [r7, #32]
 8002244:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t temp;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	4618      	mov	r0, r3
 800224c:	f004 fabe 	bl	80067cc <USB_GetMode>
 8002250:	4603      	mov	r3, r0
 8002252:	2b00      	cmp	r3, #0
 8002254:	f040 83ca 	bne.w	80029ec <HAL_PCD_IRQHandler+0x7b8>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	4618      	mov	r0, r3
 800225e:	f004 fa22 	bl	80066a6 <USB_ReadInterrupts>
 8002262:	4603      	mov	r3, r0
 8002264:	2b00      	cmp	r3, #0
 8002266:	f000 83c0 	beq.w	80029ea <HAL_PCD_IRQHandler+0x7b6>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	4618      	mov	r0, r3
 8002270:	f004 fa19 	bl	80066a6 <USB_ReadInterrupts>
 8002274:	4603      	mov	r3, r0
 8002276:	f003 0302 	and.w	r3, r3, #2
 800227a:	2b02      	cmp	r3, #2
 800227c:	d107      	bne.n	800228e <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	695a      	ldr	r2, [r3, #20]
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	f002 0202 	and.w	r2, r2, #2
 800228c:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	4618      	mov	r0, r3
 8002294:	f004 fa07 	bl	80066a6 <USB_ReadInterrupts>
 8002298:	4603      	mov	r3, r0
 800229a:	f003 0310 	and.w	r3, r3, #16
 800229e:	2b10      	cmp	r3, #16
 80022a0:	d161      	bne.n	8002366 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	699a      	ldr	r2, [r3, #24]
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f022 0210 	bic.w	r2, r2, #16
 80022b0:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 80022b2:	6a3b      	ldr	r3, [r7, #32]
 80022b4:	6a1b      	ldr	r3, [r3, #32]
 80022b6:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 80022b8:	69bb      	ldr	r3, [r7, #24]
 80022ba:	f003 020f 	and.w	r2, r3, #15
 80022be:	4613      	mov	r3, r2
 80022c0:	00db      	lsls	r3, r3, #3
 80022c2:	1a9b      	subs	r3, r3, r2
 80022c4:	009b      	lsls	r3, r3, #2
 80022c6:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80022ca:	687a      	ldr	r2, [r7, #4]
 80022cc:	4413      	add	r3, r2
 80022ce:	3304      	adds	r3, #4
 80022d0:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80022d2:	69bb      	ldr	r3, [r7, #24]
 80022d4:	0c5b      	lsrs	r3, r3, #17
 80022d6:	f003 030f 	and.w	r3, r3, #15
 80022da:	2b02      	cmp	r3, #2
 80022dc:	d124      	bne.n	8002328 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 80022de:	69ba      	ldr	r2, [r7, #24]
 80022e0:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80022e4:	4013      	ands	r3, r2
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d035      	beq.n	8002356 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80022ea:	697b      	ldr	r3, [r7, #20]
 80022ec:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 80022ee:	69bb      	ldr	r3, [r7, #24]
 80022f0:	091b      	lsrs	r3, r3, #4
 80022f2:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80022f4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80022f8:	b29b      	uxth	r3, r3
 80022fa:	461a      	mov	r2, r3
 80022fc:	6a38      	ldr	r0, [r7, #32]
 80022fe:	f004 f83e 	bl	800637e <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002302:	697b      	ldr	r3, [r7, #20]
 8002304:	68da      	ldr	r2, [r3, #12]
 8002306:	69bb      	ldr	r3, [r7, #24]
 8002308:	091b      	lsrs	r3, r3, #4
 800230a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800230e:	441a      	add	r2, r3
 8002310:	697b      	ldr	r3, [r7, #20]
 8002312:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002314:	697b      	ldr	r3, [r7, #20]
 8002316:	699a      	ldr	r2, [r3, #24]
 8002318:	69bb      	ldr	r3, [r7, #24]
 800231a:	091b      	lsrs	r3, r3, #4
 800231c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002320:	441a      	add	r2, r3
 8002322:	697b      	ldr	r3, [r7, #20]
 8002324:	619a      	str	r2, [r3, #24]
 8002326:	e016      	b.n	8002356 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8002328:	69bb      	ldr	r3, [r7, #24]
 800232a:	0c5b      	lsrs	r3, r3, #17
 800232c:	f003 030f 	and.w	r3, r3, #15
 8002330:	2b06      	cmp	r3, #6
 8002332:	d110      	bne.n	8002356 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800233a:	2208      	movs	r2, #8
 800233c:	4619      	mov	r1, r3
 800233e:	6a38      	ldr	r0, [r7, #32]
 8002340:	f004 f81d 	bl	800637e <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002344:	697b      	ldr	r3, [r7, #20]
 8002346:	699a      	ldr	r2, [r3, #24]
 8002348:	69bb      	ldr	r3, [r7, #24]
 800234a:	091b      	lsrs	r3, r3, #4
 800234c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002350:	441a      	add	r2, r3
 8002352:	697b      	ldr	r3, [r7, #20]
 8002354:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	699a      	ldr	r2, [r3, #24]
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	f042 0210 	orr.w	r2, r2, #16
 8002364:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	4618      	mov	r0, r3
 800236c:	f004 f99b 	bl	80066a6 <USB_ReadInterrupts>
 8002370:	4603      	mov	r3, r0
 8002372:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002376:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800237a:	d16e      	bne.n	800245a <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 800237c:	2300      	movs	r3, #0
 800237e:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	4618      	mov	r0, r3
 8002386:	f004 f9a1 	bl	80066cc <USB_ReadDevAllOutEpInterrupt>
 800238a:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 800238c:	e062      	b.n	8002454 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 800238e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002390:	f003 0301 	and.w	r3, r3, #1
 8002394:	2b00      	cmp	r3, #0
 8002396:	d057      	beq.n	8002448 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800239e:	b2d2      	uxtb	r2, r2
 80023a0:	4611      	mov	r1, r2
 80023a2:	4618      	mov	r0, r3
 80023a4:	f004 f9c6 	bl	8006734 <USB_ReadDevOutEPInterrupt>
 80023a8:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80023aa:	693b      	ldr	r3, [r7, #16]
 80023ac:	f003 0301 	and.w	r3, r3, #1
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d00c      	beq.n	80023ce <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80023b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023b6:	015a      	lsls	r2, r3, #5
 80023b8:	69fb      	ldr	r3, [r7, #28]
 80023ba:	4413      	add	r3, r2
 80023bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80023c0:	461a      	mov	r2, r3
 80023c2:	2301      	movs	r3, #1
 80023c4:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80023c6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80023c8:	6878      	ldr	r0, [r7, #4]
 80023ca:	f000 fddd 	bl	8002f88 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80023ce:	693b      	ldr	r3, [r7, #16]
 80023d0:	f003 0308 	and.w	r3, r3, #8
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d00c      	beq.n	80023f2 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80023d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023da:	015a      	lsls	r2, r3, #5
 80023dc:	69fb      	ldr	r3, [r7, #28]
 80023de:	4413      	add	r3, r2
 80023e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80023e4:	461a      	mov	r2, r3
 80023e6:	2308      	movs	r3, #8
 80023e8:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80023ea:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80023ec:	6878      	ldr	r0, [r7, #4]
 80023ee:	f000 fed7 	bl	80031a0 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80023f2:	693b      	ldr	r3, [r7, #16]
 80023f4:	f003 0310 	and.w	r3, r3, #16
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d008      	beq.n	800240e <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80023fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023fe:	015a      	lsls	r2, r3, #5
 8002400:	69fb      	ldr	r3, [r7, #28]
 8002402:	4413      	add	r3, r2
 8002404:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002408:	461a      	mov	r2, r3
 800240a:	2310      	movs	r3, #16
 800240c:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800240e:	693b      	ldr	r3, [r7, #16]
 8002410:	f003 0320 	and.w	r3, r3, #32
 8002414:	2b00      	cmp	r3, #0
 8002416:	d008      	beq.n	800242a <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002418:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800241a:	015a      	lsls	r2, r3, #5
 800241c:	69fb      	ldr	r3, [r7, #28]
 800241e:	4413      	add	r3, r2
 8002420:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002424:	461a      	mov	r2, r3
 8002426:	2320      	movs	r3, #32
 8002428:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800242a:	693b      	ldr	r3, [r7, #16]
 800242c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002430:	2b00      	cmp	r3, #0
 8002432:	d009      	beq.n	8002448 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8002434:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002436:	015a      	lsls	r2, r3, #5
 8002438:	69fb      	ldr	r3, [r7, #28]
 800243a:	4413      	add	r3, r2
 800243c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002440:	461a      	mov	r2, r3
 8002442:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002446:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8002448:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800244a:	3301      	adds	r3, #1
 800244c:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800244e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002450:	085b      	lsrs	r3, r3, #1
 8002452:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002454:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002456:	2b00      	cmp	r3, #0
 8002458:	d199      	bne.n	800238e <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	4618      	mov	r0, r3
 8002460:	f004 f921 	bl	80066a6 <USB_ReadInterrupts>
 8002464:	4603      	mov	r3, r0
 8002466:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800246a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800246e:	f040 80c0 	bne.w	80025f2 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	4618      	mov	r0, r3
 8002478:	f004 f942 	bl	8006700 <USB_ReadDevAllInEpInterrupt>
 800247c:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 800247e:	2300      	movs	r3, #0
 8002480:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8002482:	e0b2      	b.n	80025ea <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002484:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002486:	f003 0301 	and.w	r3, r3, #1
 800248a:	2b00      	cmp	r3, #0
 800248c:	f000 80a7 	beq.w	80025de <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002496:	b2d2      	uxtb	r2, r2
 8002498:	4611      	mov	r1, r2
 800249a:	4618      	mov	r0, r3
 800249c:	f004 f968 	bl	8006770 <USB_ReadDevInEPInterrupt>
 80024a0:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80024a2:	693b      	ldr	r3, [r7, #16]
 80024a4:	f003 0301 	and.w	r3, r3, #1
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d057      	beq.n	800255c <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80024ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024ae:	f003 030f 	and.w	r3, r3, #15
 80024b2:	2201      	movs	r2, #1
 80024b4:	fa02 f303 	lsl.w	r3, r2, r3
 80024b8:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80024ba:	69fb      	ldr	r3, [r7, #28]
 80024bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80024c0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	43db      	mvns	r3, r3
 80024c6:	69f9      	ldr	r1, [r7, #28]
 80024c8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80024cc:	4013      	ands	r3, r2
 80024ce:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80024d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024d2:	015a      	lsls	r2, r3, #5
 80024d4:	69fb      	ldr	r3, [r7, #28]
 80024d6:	4413      	add	r3, r2
 80024d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80024dc:	461a      	mov	r2, r3
 80024de:	2301      	movs	r3, #1
 80024e0:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	691b      	ldr	r3, [r3, #16]
 80024e6:	2b01      	cmp	r3, #1
 80024e8:	d132      	bne.n	8002550 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80024ea:	6879      	ldr	r1, [r7, #4]
 80024ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80024ee:	4613      	mov	r3, r2
 80024f0:	00db      	lsls	r3, r3, #3
 80024f2:	1a9b      	subs	r3, r3, r2
 80024f4:	009b      	lsls	r3, r3, #2
 80024f6:	440b      	add	r3, r1
 80024f8:	3348      	adds	r3, #72	; 0x48
 80024fa:	6819      	ldr	r1, [r3, #0]
 80024fc:	6878      	ldr	r0, [r7, #4]
 80024fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002500:	4613      	mov	r3, r2
 8002502:	00db      	lsls	r3, r3, #3
 8002504:	1a9b      	subs	r3, r3, r2
 8002506:	009b      	lsls	r3, r3, #2
 8002508:	4403      	add	r3, r0
 800250a:	3344      	adds	r3, #68	; 0x44
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	4419      	add	r1, r3
 8002510:	6878      	ldr	r0, [r7, #4]
 8002512:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002514:	4613      	mov	r3, r2
 8002516:	00db      	lsls	r3, r3, #3
 8002518:	1a9b      	subs	r3, r3, r2
 800251a:	009b      	lsls	r3, r3, #2
 800251c:	4403      	add	r3, r0
 800251e:	3348      	adds	r3, #72	; 0x48
 8002520:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8002522:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002524:	2b00      	cmp	r3, #0
 8002526:	d113      	bne.n	8002550 <HAL_PCD_IRQHandler+0x31c>
 8002528:	6879      	ldr	r1, [r7, #4]
 800252a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800252c:	4613      	mov	r3, r2
 800252e:	00db      	lsls	r3, r3, #3
 8002530:	1a9b      	subs	r3, r3, r2
 8002532:	009b      	lsls	r3, r3, #2
 8002534:	440b      	add	r3, r1
 8002536:	3350      	adds	r3, #80	; 0x50
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	2b00      	cmp	r3, #0
 800253c:	d108      	bne.n	8002550 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	6818      	ldr	r0, [r3, #0]
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002548:	461a      	mov	r2, r3
 800254a:	2101      	movs	r1, #1
 800254c:	f004 f970 	bl	8006830 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002550:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002552:	b2db      	uxtb	r3, r3
 8002554:	4619      	mov	r1, r3
 8002556:	6878      	ldr	r0, [r7, #4]
 8002558:	f006 f969 	bl	800882e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800255c:	693b      	ldr	r3, [r7, #16]
 800255e:	f003 0308 	and.w	r3, r3, #8
 8002562:	2b00      	cmp	r3, #0
 8002564:	d008      	beq.n	8002578 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002566:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002568:	015a      	lsls	r2, r3, #5
 800256a:	69fb      	ldr	r3, [r7, #28]
 800256c:	4413      	add	r3, r2
 800256e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002572:	461a      	mov	r2, r3
 8002574:	2308      	movs	r3, #8
 8002576:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002578:	693b      	ldr	r3, [r7, #16]
 800257a:	f003 0310 	and.w	r3, r3, #16
 800257e:	2b00      	cmp	r3, #0
 8002580:	d008      	beq.n	8002594 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8002582:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002584:	015a      	lsls	r2, r3, #5
 8002586:	69fb      	ldr	r3, [r7, #28]
 8002588:	4413      	add	r3, r2
 800258a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800258e:	461a      	mov	r2, r3
 8002590:	2310      	movs	r3, #16
 8002592:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8002594:	693b      	ldr	r3, [r7, #16]
 8002596:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800259a:	2b00      	cmp	r3, #0
 800259c:	d008      	beq.n	80025b0 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800259e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025a0:	015a      	lsls	r2, r3, #5
 80025a2:	69fb      	ldr	r3, [r7, #28]
 80025a4:	4413      	add	r3, r2
 80025a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80025aa:	461a      	mov	r2, r3
 80025ac:	2340      	movs	r3, #64	; 0x40
 80025ae:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80025b0:	693b      	ldr	r3, [r7, #16]
 80025b2:	f003 0302 	and.w	r3, r3, #2
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d008      	beq.n	80025cc <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80025ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025bc:	015a      	lsls	r2, r3, #5
 80025be:	69fb      	ldr	r3, [r7, #28]
 80025c0:	4413      	add	r3, r2
 80025c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80025c6:	461a      	mov	r2, r3
 80025c8:	2302      	movs	r3, #2
 80025ca:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80025cc:	693b      	ldr	r3, [r7, #16]
 80025ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d003      	beq.n	80025de <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80025d6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80025d8:	6878      	ldr	r0, [r7, #4]
 80025da:	f000 fc48 	bl	8002e6e <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80025de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025e0:	3301      	adds	r3, #1
 80025e2:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80025e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025e6:	085b      	lsrs	r3, r3, #1
 80025e8:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80025ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	f47f af49 	bne.w	8002484 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	4618      	mov	r0, r3
 80025f8:	f004 f855 	bl	80066a6 <USB_ReadInterrupts>
 80025fc:	4603      	mov	r3, r0
 80025fe:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002602:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002606:	d122      	bne.n	800264e <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002608:	69fb      	ldr	r3, [r7, #28]
 800260a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800260e:	685b      	ldr	r3, [r3, #4]
 8002610:	69fa      	ldr	r2, [r7, #28]
 8002612:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002616:	f023 0301 	bic.w	r3, r3, #1
 800261a:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8002622:	2b01      	cmp	r3, #1
 8002624:	d108      	bne.n	8002638 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	2200      	movs	r2, #0
 800262a:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800262e:	2100      	movs	r1, #0
 8002630:	6878      	ldr	r0, [r7, #4]
 8002632:	f006 fb4b 	bl	8008ccc <HAL_PCDEx_LPM_Callback>
 8002636:	e002      	b.n	800263e <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8002638:	6878      	ldr	r0, [r7, #4]
 800263a:	f006 f96f 	bl	800891c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	695a      	ldr	r2, [r3, #20]
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800264c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	4618      	mov	r0, r3
 8002654:	f004 f827 	bl	80066a6 <USB_ReadInterrupts>
 8002658:	4603      	mov	r3, r0
 800265a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800265e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002662:	d112      	bne.n	800268a <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002664:	69fb      	ldr	r3, [r7, #28]
 8002666:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800266a:	689b      	ldr	r3, [r3, #8]
 800266c:	f003 0301 	and.w	r3, r3, #1
 8002670:	2b01      	cmp	r3, #1
 8002672:	d102      	bne.n	800267a <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002674:	6878      	ldr	r0, [r7, #4]
 8002676:	f006 f92b 	bl	80088d0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	695a      	ldr	r2, [r3, #20]
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8002688:	615a      	str	r2, [r3, #20]
    }
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	4618      	mov	r0, r3
 8002690:	f004 f809 	bl	80066a6 <USB_ReadInterrupts>
 8002694:	4603      	mov	r3, r0
 8002696:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800269a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800269e:	d121      	bne.n	80026e4 <HAL_PCD_IRQHandler+0x4b0>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	695a      	ldr	r2, [r3, #20]
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 80026ae:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d111      	bne.n	80026de <HAL_PCD_IRQHandler+0x4aa>
      {
        hpcd->LPM_State = LPM_L1;
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	2201      	movs	r2, #1
 80026be:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026c8:	089b      	lsrs	r3, r3, #2
 80026ca:	f003 020f 	and.w	r2, r3, #15
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80026d4:	2101      	movs	r1, #1
 80026d6:	6878      	ldr	r0, [r7, #4]
 80026d8:	f006 faf8 	bl	8008ccc <HAL_PCDEx_LPM_Callback>
 80026dc:	e002      	b.n	80026e4 <HAL_PCD_IRQHandler+0x4b0>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80026de:	6878      	ldr	r0, [r7, #4]
 80026e0:	f006 f8f6 	bl	80088d0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	4618      	mov	r0, r3
 80026ea:	f003 ffdc 	bl	80066a6 <USB_ReadInterrupts>
 80026ee:	4603      	mov	r3, r0
 80026f0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80026f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80026f8:	f040 80c7 	bne.w	800288a <HAL_PCD_IRQHandler+0x656>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80026fc:	69fb      	ldr	r3, [r7, #28]
 80026fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002702:	685b      	ldr	r3, [r3, #4]
 8002704:	69fa      	ldr	r2, [r7, #28]
 8002706:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800270a:	f023 0301 	bic.w	r3, r3, #1
 800270e:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	2110      	movs	r1, #16
 8002716:	4618      	mov	r0, r3
 8002718:	f003 f876 	bl	8005808 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800271c:	2300      	movs	r3, #0
 800271e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002720:	e056      	b.n	80027d0 <HAL_PCD_IRQHandler+0x59c>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8002722:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002724:	015a      	lsls	r2, r3, #5
 8002726:	69fb      	ldr	r3, [r7, #28]
 8002728:	4413      	add	r3, r2
 800272a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800272e:	461a      	mov	r2, r3
 8002730:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002734:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002736:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002738:	015a      	lsls	r2, r3, #5
 800273a:	69fb      	ldr	r3, [r7, #28]
 800273c:	4413      	add	r3, r2
 800273e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002746:	0151      	lsls	r1, r2, #5
 8002748:	69fa      	ldr	r2, [r7, #28]
 800274a:	440a      	add	r2, r1
 800274c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002750:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002754:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8002756:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002758:	015a      	lsls	r2, r3, #5
 800275a:	69fb      	ldr	r3, [r7, #28]
 800275c:	4413      	add	r3, r2
 800275e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002766:	0151      	lsls	r1, r2, #5
 8002768:	69fa      	ldr	r2, [r7, #28]
 800276a:	440a      	add	r2, r1
 800276c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002770:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002774:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002776:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002778:	015a      	lsls	r2, r3, #5
 800277a:	69fb      	ldr	r3, [r7, #28]
 800277c:	4413      	add	r3, r2
 800277e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002782:	461a      	mov	r2, r3
 8002784:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002788:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800278a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800278c:	015a      	lsls	r2, r3, #5
 800278e:	69fb      	ldr	r3, [r7, #28]
 8002790:	4413      	add	r3, r2
 8002792:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800279a:	0151      	lsls	r1, r2, #5
 800279c:	69fa      	ldr	r2, [r7, #28]
 800279e:	440a      	add	r2, r1
 80027a0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80027a4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80027a8:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80027aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027ac:	015a      	lsls	r2, r3, #5
 80027ae:	69fb      	ldr	r3, [r7, #28]
 80027b0:	4413      	add	r3, r2
 80027b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80027ba:	0151      	lsls	r1, r2, #5
 80027bc:	69fa      	ldr	r2, [r7, #28]
 80027be:	440a      	add	r2, r1
 80027c0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80027c4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80027c8:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80027ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027cc:	3301      	adds	r3, #1
 80027ce:	62fb      	str	r3, [r7, #44]	; 0x2c
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	685b      	ldr	r3, [r3, #4]
 80027d4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80027d6:	429a      	cmp	r2, r3
 80027d8:	d3a3      	bcc.n	8002722 <HAL_PCD_IRQHandler+0x4ee>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80027da:	69fb      	ldr	r3, [r7, #28]
 80027dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80027e0:	69db      	ldr	r3, [r3, #28]
 80027e2:	69fa      	ldr	r2, [r7, #28]
 80027e4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80027e8:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80027ec:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d016      	beq.n	8002824 <HAL_PCD_IRQHandler+0x5f0>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80027f6:	69fb      	ldr	r3, [r7, #28]
 80027f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80027fc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002800:	69fa      	ldr	r2, [r7, #28]
 8002802:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002806:	f043 030b 	orr.w	r3, r3, #11
 800280a:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800280e:	69fb      	ldr	r3, [r7, #28]
 8002810:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002814:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002816:	69fa      	ldr	r2, [r7, #28]
 8002818:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800281c:	f043 030b 	orr.w	r3, r3, #11
 8002820:	6453      	str	r3, [r2, #68]	; 0x44
 8002822:	e015      	b.n	8002850 <HAL_PCD_IRQHandler+0x61c>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002824:	69fb      	ldr	r3, [r7, #28]
 8002826:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800282a:	695b      	ldr	r3, [r3, #20]
 800282c:	69fa      	ldr	r2, [r7, #28]
 800282e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002832:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002836:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 800283a:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800283c:	69fb      	ldr	r3, [r7, #28]
 800283e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002842:	691b      	ldr	r3, [r3, #16]
 8002844:	69fa      	ldr	r2, [r7, #28]
 8002846:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800284a:	f043 030b 	orr.w	r3, r3, #11
 800284e:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002850:	69fb      	ldr	r3, [r7, #28]
 8002852:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	69fa      	ldr	r2, [r7, #28]
 800285a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800285e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8002862:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	6818      	ldr	r0, [r3, #0]
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	691b      	ldr	r3, [r3, #16]
 800286c:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002874:	461a      	mov	r2, r3
 8002876:	f003 ffdb 	bl	8006830 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	695a      	ldr	r2, [r3, #20]
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8002888:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	4618      	mov	r0, r3
 8002890:	f003 ff09 	bl	80066a6 <USB_ReadInterrupts>
 8002894:	4603      	mov	r3, r0
 8002896:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800289a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800289e:	d124      	bne.n	80028ea <HAL_PCD_IRQHandler+0x6b6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	4618      	mov	r0, r3
 80028a6:	f003 ff9f 	bl	80067e8 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	4618      	mov	r0, r3
 80028b0:	f003 f807 	bl	80058c2 <USB_GetDevSpeed>
 80028b4:	4603      	mov	r3, r0
 80028b6:	461a      	mov	r2, r3
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681c      	ldr	r4, [r3, #0]
 80028c0:	f000 fecc 	bl	800365c <HAL_RCC_GetHCLKFreq>
 80028c4:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80028ca:	b2db      	uxtb	r3, r3
 80028cc:	461a      	mov	r2, r3
 80028ce:	4620      	mov	r0, r4
 80028d0:	f002 fd2c 	bl	800532c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80028d4:	6878      	ldr	r0, [r7, #4]
 80028d6:	f005 ffd2 	bl	800887e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	695a      	ldr	r2, [r3, #20]
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80028e8:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	4618      	mov	r0, r3
 80028f0:	f003 fed9 	bl	80066a6 <USB_ReadInterrupts>
 80028f4:	4603      	mov	r3, r0
 80028f6:	f003 0308 	and.w	r3, r3, #8
 80028fa:	2b08      	cmp	r3, #8
 80028fc:	d10a      	bne.n	8002914 <HAL_PCD_IRQHandler+0x6e0>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80028fe:	6878      	ldr	r0, [r7, #4]
 8002900:	f005 ffaf 	bl	8008862 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	695a      	ldr	r2, [r3, #20]
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f002 0208 	and.w	r2, r2, #8
 8002912:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	4618      	mov	r0, r3
 800291a:	f003 fec4 	bl	80066a6 <USB_ReadInterrupts>
 800291e:	4603      	mov	r3, r0
 8002920:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002924:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002928:	d10f      	bne.n	800294a <HAL_PCD_IRQHandler+0x716>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 800292a:	2300      	movs	r3, #0
 800292c:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800292e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002930:	b2db      	uxtb	r3, r3
 8002932:	4619      	mov	r1, r3
 8002934:	6878      	ldr	r0, [r7, #4]
 8002936:	f006 f811 	bl	800895c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	695a      	ldr	r2, [r3, #20]
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8002948:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	4618      	mov	r0, r3
 8002950:	f003 fea9 	bl	80066a6 <USB_ReadInterrupts>
 8002954:	4603      	mov	r3, r0
 8002956:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800295a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800295e:	d10f      	bne.n	8002980 <HAL_PCD_IRQHandler+0x74c>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8002960:	2300      	movs	r3, #0
 8002962:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002964:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002966:	b2db      	uxtb	r3, r3
 8002968:	4619      	mov	r1, r3
 800296a:	6878      	ldr	r0, [r7, #4]
 800296c:	f005 ffe4 	bl	8008938 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	695a      	ldr	r2, [r3, #20]
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 800297e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	4618      	mov	r0, r3
 8002986:	f003 fe8e 	bl	80066a6 <USB_ReadInterrupts>
 800298a:	4603      	mov	r3, r0
 800298c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002990:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002994:	d10a      	bne.n	80029ac <HAL_PCD_IRQHandler+0x778>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8002996:	6878      	ldr	r0, [r7, #4]
 8002998:	f005 fff2 	bl	8008980 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	695a      	ldr	r2, [r3, #20]
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80029aa:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	4618      	mov	r0, r3
 80029b2:	f003 fe78 	bl	80066a6 <USB_ReadInterrupts>
 80029b6:	4603      	mov	r3, r0
 80029b8:	f003 0304 	and.w	r3, r3, #4
 80029bc:	2b04      	cmp	r3, #4
 80029be:	d115      	bne.n	80029ec <HAL_PCD_IRQHandler+0x7b8>
    {
      temp = hpcd->Instance->GOTGINT;
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	685b      	ldr	r3, [r3, #4]
 80029c6:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80029c8:	69bb      	ldr	r3, [r7, #24]
 80029ca:	f003 0304 	and.w	r3, r3, #4
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d002      	beq.n	80029d8 <HAL_PCD_IRQHandler+0x7a4>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80029d2:	6878      	ldr	r0, [r7, #4]
 80029d4:	f005 ffe2 	bl	800899c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	6859      	ldr	r1, [r3, #4]
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	69ba      	ldr	r2, [r7, #24]
 80029e4:	430a      	orrs	r2, r1
 80029e6:	605a      	str	r2, [r3, #4]
 80029e8:	e000      	b.n	80029ec <HAL_PCD_IRQHandler+0x7b8>
      return;
 80029ea:	bf00      	nop
    }
  }
}
 80029ec:	3734      	adds	r7, #52	; 0x34
 80029ee:	46bd      	mov	sp, r7
 80029f0:	bd90      	pop	{r4, r7, pc}

080029f2 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80029f2:	b580      	push	{r7, lr}
 80029f4:	b082      	sub	sp, #8
 80029f6:	af00      	add	r7, sp, #0
 80029f8:	6078      	str	r0, [r7, #4]
 80029fa:	460b      	mov	r3, r1
 80029fc:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002a04:	2b01      	cmp	r3, #1
 8002a06:	d101      	bne.n	8002a0c <HAL_PCD_SetAddress+0x1a>
 8002a08:	2302      	movs	r3, #2
 8002a0a:	e013      	b.n	8002a34 <HAL_PCD_SetAddress+0x42>
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	2201      	movs	r2, #1
 8002a10:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	78fa      	ldrb	r2, [r7, #3]
 8002a18:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	78fa      	ldrb	r2, [r7, #3]
 8002a22:	4611      	mov	r1, r2
 8002a24:	4618      	mov	r0, r3
 8002a26:	f003 fdd6 	bl	80065d6 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	2200      	movs	r2, #0
 8002a2e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002a32:	2300      	movs	r3, #0
}
 8002a34:	4618      	mov	r0, r3
 8002a36:	3708      	adds	r7, #8
 8002a38:	46bd      	mov	sp, r7
 8002a3a:	bd80      	pop	{r7, pc}

08002a3c <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002a3c:	b580      	push	{r7, lr}
 8002a3e:	b084      	sub	sp, #16
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	6078      	str	r0, [r7, #4]
 8002a44:	4608      	mov	r0, r1
 8002a46:	4611      	mov	r1, r2
 8002a48:	461a      	mov	r2, r3
 8002a4a:	4603      	mov	r3, r0
 8002a4c:	70fb      	strb	r3, [r7, #3]
 8002a4e:	460b      	mov	r3, r1
 8002a50:	803b      	strh	r3, [r7, #0]
 8002a52:	4613      	mov	r3, r2
 8002a54:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002a56:	2300      	movs	r3, #0
 8002a58:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002a5a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	da0f      	bge.n	8002a82 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002a62:	78fb      	ldrb	r3, [r7, #3]
 8002a64:	f003 020f 	and.w	r2, r3, #15
 8002a68:	4613      	mov	r3, r2
 8002a6a:	00db      	lsls	r3, r3, #3
 8002a6c:	1a9b      	subs	r3, r3, r2
 8002a6e:	009b      	lsls	r3, r3, #2
 8002a70:	3338      	adds	r3, #56	; 0x38
 8002a72:	687a      	ldr	r2, [r7, #4]
 8002a74:	4413      	add	r3, r2
 8002a76:	3304      	adds	r3, #4
 8002a78:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	2201      	movs	r2, #1
 8002a7e:	705a      	strb	r2, [r3, #1]
 8002a80:	e00f      	b.n	8002aa2 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002a82:	78fb      	ldrb	r3, [r7, #3]
 8002a84:	f003 020f 	and.w	r2, r3, #15
 8002a88:	4613      	mov	r3, r2
 8002a8a:	00db      	lsls	r3, r3, #3
 8002a8c:	1a9b      	subs	r3, r3, r2
 8002a8e:	009b      	lsls	r3, r3, #2
 8002a90:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002a94:	687a      	ldr	r2, [r7, #4]
 8002a96:	4413      	add	r3, r2
 8002a98:	3304      	adds	r3, #4
 8002a9a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	2200      	movs	r2, #0
 8002aa0:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002aa2:	78fb      	ldrb	r3, [r7, #3]
 8002aa4:	f003 030f 	and.w	r3, r3, #15
 8002aa8:	b2da      	uxtb	r2, r3
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002aae:	883a      	ldrh	r2, [r7, #0]
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	78ba      	ldrb	r2, [r7, #2]
 8002ab8:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	785b      	ldrb	r3, [r3, #1]
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d004      	beq.n	8002acc <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	781b      	ldrb	r3, [r3, #0]
 8002ac6:	b29a      	uxth	r2, r3
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002acc:	78bb      	ldrb	r3, [r7, #2]
 8002ace:	2b02      	cmp	r3, #2
 8002ad0:	d102      	bne.n	8002ad8 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	2200      	movs	r2, #0
 8002ad6:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002ade:	2b01      	cmp	r3, #1
 8002ae0:	d101      	bne.n	8002ae6 <HAL_PCD_EP_Open+0xaa>
 8002ae2:	2302      	movs	r3, #2
 8002ae4:	e00e      	b.n	8002b04 <HAL_PCD_EP_Open+0xc8>
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	2201      	movs	r2, #1
 8002aea:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	68f9      	ldr	r1, [r7, #12]
 8002af4:	4618      	mov	r0, r3
 8002af6:	f002 ff09 	bl	800590c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	2200      	movs	r2, #0
 8002afe:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8002b02:	7afb      	ldrb	r3, [r7, #11]
}
 8002b04:	4618      	mov	r0, r3
 8002b06:	3710      	adds	r7, #16
 8002b08:	46bd      	mov	sp, r7
 8002b0a:	bd80      	pop	{r7, pc}

08002b0c <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002b0c:	b580      	push	{r7, lr}
 8002b0e:	b084      	sub	sp, #16
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	6078      	str	r0, [r7, #4]
 8002b14:	460b      	mov	r3, r1
 8002b16:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002b18:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	da0f      	bge.n	8002b40 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002b20:	78fb      	ldrb	r3, [r7, #3]
 8002b22:	f003 020f 	and.w	r2, r3, #15
 8002b26:	4613      	mov	r3, r2
 8002b28:	00db      	lsls	r3, r3, #3
 8002b2a:	1a9b      	subs	r3, r3, r2
 8002b2c:	009b      	lsls	r3, r3, #2
 8002b2e:	3338      	adds	r3, #56	; 0x38
 8002b30:	687a      	ldr	r2, [r7, #4]
 8002b32:	4413      	add	r3, r2
 8002b34:	3304      	adds	r3, #4
 8002b36:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	2201      	movs	r2, #1
 8002b3c:	705a      	strb	r2, [r3, #1]
 8002b3e:	e00f      	b.n	8002b60 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002b40:	78fb      	ldrb	r3, [r7, #3]
 8002b42:	f003 020f 	and.w	r2, r3, #15
 8002b46:	4613      	mov	r3, r2
 8002b48:	00db      	lsls	r3, r3, #3
 8002b4a:	1a9b      	subs	r3, r3, r2
 8002b4c:	009b      	lsls	r3, r3, #2
 8002b4e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002b52:	687a      	ldr	r2, [r7, #4]
 8002b54:	4413      	add	r3, r2
 8002b56:	3304      	adds	r3, #4
 8002b58:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8002b60:	78fb      	ldrb	r3, [r7, #3]
 8002b62:	f003 030f 	and.w	r3, r3, #15
 8002b66:	b2da      	uxtb	r2, r3
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002b72:	2b01      	cmp	r3, #1
 8002b74:	d101      	bne.n	8002b7a <HAL_PCD_EP_Close+0x6e>
 8002b76:	2302      	movs	r3, #2
 8002b78:	e00e      	b.n	8002b98 <HAL_PCD_EP_Close+0x8c>
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	2201      	movs	r2, #1
 8002b7e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	68f9      	ldr	r1, [r7, #12]
 8002b88:	4618      	mov	r0, r3
 8002b8a:	f002 ff47 	bl	8005a1c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	2200      	movs	r2, #0
 8002b92:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8002b96:	2300      	movs	r3, #0
}
 8002b98:	4618      	mov	r0, r3
 8002b9a:	3710      	adds	r7, #16
 8002b9c:	46bd      	mov	sp, r7
 8002b9e:	bd80      	pop	{r7, pc}

08002ba0 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002ba0:	b580      	push	{r7, lr}
 8002ba2:	b086      	sub	sp, #24
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	60f8      	str	r0, [r7, #12]
 8002ba8:	607a      	str	r2, [r7, #4]
 8002baa:	603b      	str	r3, [r7, #0]
 8002bac:	460b      	mov	r3, r1
 8002bae:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002bb0:	7afb      	ldrb	r3, [r7, #11]
 8002bb2:	f003 020f 	and.w	r2, r3, #15
 8002bb6:	4613      	mov	r3, r2
 8002bb8:	00db      	lsls	r3, r3, #3
 8002bba:	1a9b      	subs	r3, r3, r2
 8002bbc:	009b      	lsls	r3, r3, #2
 8002bbe:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002bc2:	68fa      	ldr	r2, [r7, #12]
 8002bc4:	4413      	add	r3, r2
 8002bc6:	3304      	adds	r3, #4
 8002bc8:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002bca:	697b      	ldr	r3, [r7, #20]
 8002bcc:	687a      	ldr	r2, [r7, #4]
 8002bce:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002bd0:	697b      	ldr	r3, [r7, #20]
 8002bd2:	683a      	ldr	r2, [r7, #0]
 8002bd4:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8002bd6:	697b      	ldr	r3, [r7, #20]
 8002bd8:	2200      	movs	r2, #0
 8002bda:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8002bdc:	697b      	ldr	r3, [r7, #20]
 8002bde:	2200      	movs	r2, #0
 8002be0:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002be2:	7afb      	ldrb	r3, [r7, #11]
 8002be4:	f003 030f 	and.w	r3, r3, #15
 8002be8:	b2da      	uxtb	r2, r3
 8002bea:	697b      	ldr	r3, [r7, #20]
 8002bec:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	691b      	ldr	r3, [r3, #16]
 8002bf2:	2b01      	cmp	r3, #1
 8002bf4:	d102      	bne.n	8002bfc <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002bf6:	687a      	ldr	r2, [r7, #4]
 8002bf8:	697b      	ldr	r3, [r7, #20]
 8002bfa:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002bfc:	7afb      	ldrb	r3, [r7, #11]
 8002bfe:	f003 030f 	and.w	r3, r3, #15
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d109      	bne.n	8002c1a <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	6818      	ldr	r0, [r3, #0]
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	691b      	ldr	r3, [r3, #16]
 8002c0e:	b2db      	uxtb	r3, r3
 8002c10:	461a      	mov	r2, r3
 8002c12:	6979      	ldr	r1, [r7, #20]
 8002c14:	f003 fa22 	bl	800605c <USB_EP0StartXfer>
 8002c18:	e008      	b.n	8002c2c <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	6818      	ldr	r0, [r3, #0]
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	691b      	ldr	r3, [r3, #16]
 8002c22:	b2db      	uxtb	r3, r3
 8002c24:	461a      	mov	r2, r3
 8002c26:	6979      	ldr	r1, [r7, #20]
 8002c28:	f002 ffd4 	bl	8005bd4 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002c2c:	2300      	movs	r3, #0
}
 8002c2e:	4618      	mov	r0, r3
 8002c30:	3718      	adds	r7, #24
 8002c32:	46bd      	mov	sp, r7
 8002c34:	bd80      	pop	{r7, pc}

08002c36 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002c36:	b480      	push	{r7}
 8002c38:	b083      	sub	sp, #12
 8002c3a:	af00      	add	r7, sp, #0
 8002c3c:	6078      	str	r0, [r7, #4]
 8002c3e:	460b      	mov	r3, r1
 8002c40:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002c42:	78fb      	ldrb	r3, [r7, #3]
 8002c44:	f003 020f 	and.w	r2, r3, #15
 8002c48:	6879      	ldr	r1, [r7, #4]
 8002c4a:	4613      	mov	r3, r2
 8002c4c:	00db      	lsls	r3, r3, #3
 8002c4e:	1a9b      	subs	r3, r3, r2
 8002c50:	009b      	lsls	r3, r3, #2
 8002c52:	440b      	add	r3, r1
 8002c54:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8002c58:	681b      	ldr	r3, [r3, #0]
}
 8002c5a:	4618      	mov	r0, r3
 8002c5c:	370c      	adds	r7, #12
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c64:	4770      	bx	lr

08002c66 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002c66:	b580      	push	{r7, lr}
 8002c68:	b086      	sub	sp, #24
 8002c6a:	af00      	add	r7, sp, #0
 8002c6c:	60f8      	str	r0, [r7, #12]
 8002c6e:	607a      	str	r2, [r7, #4]
 8002c70:	603b      	str	r3, [r7, #0]
 8002c72:	460b      	mov	r3, r1
 8002c74:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002c76:	7afb      	ldrb	r3, [r7, #11]
 8002c78:	f003 020f 	and.w	r2, r3, #15
 8002c7c:	4613      	mov	r3, r2
 8002c7e:	00db      	lsls	r3, r3, #3
 8002c80:	1a9b      	subs	r3, r3, r2
 8002c82:	009b      	lsls	r3, r3, #2
 8002c84:	3338      	adds	r3, #56	; 0x38
 8002c86:	68fa      	ldr	r2, [r7, #12]
 8002c88:	4413      	add	r3, r2
 8002c8a:	3304      	adds	r3, #4
 8002c8c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002c8e:	697b      	ldr	r3, [r7, #20]
 8002c90:	687a      	ldr	r2, [r7, #4]
 8002c92:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002c94:	697b      	ldr	r3, [r7, #20]
 8002c96:	683a      	ldr	r2, [r7, #0]
 8002c98:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8002c9a:	697b      	ldr	r3, [r7, #20]
 8002c9c:	2200      	movs	r2, #0
 8002c9e:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8002ca0:	697b      	ldr	r3, [r7, #20]
 8002ca2:	2201      	movs	r2, #1
 8002ca4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002ca6:	7afb      	ldrb	r3, [r7, #11]
 8002ca8:	f003 030f 	and.w	r3, r3, #15
 8002cac:	b2da      	uxtb	r2, r3
 8002cae:	697b      	ldr	r3, [r7, #20]
 8002cb0:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	691b      	ldr	r3, [r3, #16]
 8002cb6:	2b01      	cmp	r3, #1
 8002cb8:	d102      	bne.n	8002cc0 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002cba:	687a      	ldr	r2, [r7, #4]
 8002cbc:	697b      	ldr	r3, [r7, #20]
 8002cbe:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002cc0:	7afb      	ldrb	r3, [r7, #11]
 8002cc2:	f003 030f 	and.w	r3, r3, #15
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d109      	bne.n	8002cde <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	6818      	ldr	r0, [r3, #0]
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	691b      	ldr	r3, [r3, #16]
 8002cd2:	b2db      	uxtb	r3, r3
 8002cd4:	461a      	mov	r2, r3
 8002cd6:	6979      	ldr	r1, [r7, #20]
 8002cd8:	f003 f9c0 	bl	800605c <USB_EP0StartXfer>
 8002cdc:	e008      	b.n	8002cf0 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	6818      	ldr	r0, [r3, #0]
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	691b      	ldr	r3, [r3, #16]
 8002ce6:	b2db      	uxtb	r3, r3
 8002ce8:	461a      	mov	r2, r3
 8002cea:	6979      	ldr	r1, [r7, #20]
 8002cec:	f002 ff72 	bl	8005bd4 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002cf0:	2300      	movs	r3, #0
}
 8002cf2:	4618      	mov	r0, r3
 8002cf4:	3718      	adds	r7, #24
 8002cf6:	46bd      	mov	sp, r7
 8002cf8:	bd80      	pop	{r7, pc}

08002cfa <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002cfa:	b580      	push	{r7, lr}
 8002cfc:	b084      	sub	sp, #16
 8002cfe:	af00      	add	r7, sp, #0
 8002d00:	6078      	str	r0, [r7, #4]
 8002d02:	460b      	mov	r3, r1
 8002d04:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002d06:	78fb      	ldrb	r3, [r7, #3]
 8002d08:	f003 020f 	and.w	r2, r3, #15
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	685b      	ldr	r3, [r3, #4]
 8002d10:	429a      	cmp	r2, r3
 8002d12:	d901      	bls.n	8002d18 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002d14:	2301      	movs	r3, #1
 8002d16:	e050      	b.n	8002dba <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002d18:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	da0f      	bge.n	8002d40 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002d20:	78fb      	ldrb	r3, [r7, #3]
 8002d22:	f003 020f 	and.w	r2, r3, #15
 8002d26:	4613      	mov	r3, r2
 8002d28:	00db      	lsls	r3, r3, #3
 8002d2a:	1a9b      	subs	r3, r3, r2
 8002d2c:	009b      	lsls	r3, r3, #2
 8002d2e:	3338      	adds	r3, #56	; 0x38
 8002d30:	687a      	ldr	r2, [r7, #4]
 8002d32:	4413      	add	r3, r2
 8002d34:	3304      	adds	r3, #4
 8002d36:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	2201      	movs	r2, #1
 8002d3c:	705a      	strb	r2, [r3, #1]
 8002d3e:	e00d      	b.n	8002d5c <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002d40:	78fa      	ldrb	r2, [r7, #3]
 8002d42:	4613      	mov	r3, r2
 8002d44:	00db      	lsls	r3, r3, #3
 8002d46:	1a9b      	subs	r3, r3, r2
 8002d48:	009b      	lsls	r3, r3, #2
 8002d4a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002d4e:	687a      	ldr	r2, [r7, #4]
 8002d50:	4413      	add	r3, r2
 8002d52:	3304      	adds	r3, #4
 8002d54:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	2200      	movs	r2, #0
 8002d5a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	2201      	movs	r2, #1
 8002d60:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002d62:	78fb      	ldrb	r3, [r7, #3]
 8002d64:	f003 030f 	and.w	r3, r3, #15
 8002d68:	b2da      	uxtb	r2, r3
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002d74:	2b01      	cmp	r3, #1
 8002d76:	d101      	bne.n	8002d7c <HAL_PCD_EP_SetStall+0x82>
 8002d78:	2302      	movs	r3, #2
 8002d7a:	e01e      	b.n	8002dba <HAL_PCD_EP_SetStall+0xc0>
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	2201      	movs	r2, #1
 8002d80:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	68f9      	ldr	r1, [r7, #12]
 8002d8a:	4618      	mov	r0, r3
 8002d8c:	f003 fb4f 	bl	800642e <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002d90:	78fb      	ldrb	r3, [r7, #3]
 8002d92:	f003 030f 	and.w	r3, r3, #15
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d10a      	bne.n	8002db0 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	6818      	ldr	r0, [r3, #0]
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	691b      	ldr	r3, [r3, #16]
 8002da2:	b2d9      	uxtb	r1, r3
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002daa:	461a      	mov	r2, r3
 8002dac:	f003 fd40 	bl	8006830 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	2200      	movs	r2, #0
 8002db4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002db8:	2300      	movs	r3, #0
}
 8002dba:	4618      	mov	r0, r3
 8002dbc:	3710      	adds	r7, #16
 8002dbe:	46bd      	mov	sp, r7
 8002dc0:	bd80      	pop	{r7, pc}

08002dc2 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002dc2:	b580      	push	{r7, lr}
 8002dc4:	b084      	sub	sp, #16
 8002dc6:	af00      	add	r7, sp, #0
 8002dc8:	6078      	str	r0, [r7, #4]
 8002dca:	460b      	mov	r3, r1
 8002dcc:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002dce:	78fb      	ldrb	r3, [r7, #3]
 8002dd0:	f003 020f 	and.w	r2, r3, #15
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	685b      	ldr	r3, [r3, #4]
 8002dd8:	429a      	cmp	r2, r3
 8002dda:	d901      	bls.n	8002de0 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002ddc:	2301      	movs	r3, #1
 8002dde:	e042      	b.n	8002e66 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002de0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	da0f      	bge.n	8002e08 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002de8:	78fb      	ldrb	r3, [r7, #3]
 8002dea:	f003 020f 	and.w	r2, r3, #15
 8002dee:	4613      	mov	r3, r2
 8002df0:	00db      	lsls	r3, r3, #3
 8002df2:	1a9b      	subs	r3, r3, r2
 8002df4:	009b      	lsls	r3, r3, #2
 8002df6:	3338      	adds	r3, #56	; 0x38
 8002df8:	687a      	ldr	r2, [r7, #4]
 8002dfa:	4413      	add	r3, r2
 8002dfc:	3304      	adds	r3, #4
 8002dfe:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	2201      	movs	r2, #1
 8002e04:	705a      	strb	r2, [r3, #1]
 8002e06:	e00f      	b.n	8002e28 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002e08:	78fb      	ldrb	r3, [r7, #3]
 8002e0a:	f003 020f 	and.w	r2, r3, #15
 8002e0e:	4613      	mov	r3, r2
 8002e10:	00db      	lsls	r3, r3, #3
 8002e12:	1a9b      	subs	r3, r3, r2
 8002e14:	009b      	lsls	r3, r3, #2
 8002e16:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002e1a:	687a      	ldr	r2, [r7, #4]
 8002e1c:	4413      	add	r3, r2
 8002e1e:	3304      	adds	r3, #4
 8002e20:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	2200      	movs	r2, #0
 8002e26:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	2200      	movs	r2, #0
 8002e2c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002e2e:	78fb      	ldrb	r3, [r7, #3]
 8002e30:	f003 030f 	and.w	r3, r3, #15
 8002e34:	b2da      	uxtb	r2, r3
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002e40:	2b01      	cmp	r3, #1
 8002e42:	d101      	bne.n	8002e48 <HAL_PCD_EP_ClrStall+0x86>
 8002e44:	2302      	movs	r3, #2
 8002e46:	e00e      	b.n	8002e66 <HAL_PCD_EP_ClrStall+0xa4>
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	2201      	movs	r2, #1
 8002e4c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	68f9      	ldr	r1, [r7, #12]
 8002e56:	4618      	mov	r0, r3
 8002e58:	f003 fb57 	bl	800650a <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	2200      	movs	r2, #0
 8002e60:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002e64:	2300      	movs	r3, #0
}
 8002e66:	4618      	mov	r0, r3
 8002e68:	3710      	adds	r7, #16
 8002e6a:	46bd      	mov	sp, r7
 8002e6c:	bd80      	pop	{r7, pc}

08002e6e <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002e6e:	b580      	push	{r7, lr}
 8002e70:	b08a      	sub	sp, #40	; 0x28
 8002e72:	af02      	add	r7, sp, #8
 8002e74:	6078      	str	r0, [r7, #4]
 8002e76:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002e7e:	697b      	ldr	r3, [r7, #20]
 8002e80:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8002e82:	683a      	ldr	r2, [r7, #0]
 8002e84:	4613      	mov	r3, r2
 8002e86:	00db      	lsls	r3, r3, #3
 8002e88:	1a9b      	subs	r3, r3, r2
 8002e8a:	009b      	lsls	r3, r3, #2
 8002e8c:	3338      	adds	r3, #56	; 0x38
 8002e8e:	687a      	ldr	r2, [r7, #4]
 8002e90:	4413      	add	r3, r2
 8002e92:	3304      	adds	r3, #4
 8002e94:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	699a      	ldr	r2, [r3, #24]
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	695b      	ldr	r3, [r3, #20]
 8002e9e:	429a      	cmp	r2, r3
 8002ea0:	d901      	bls.n	8002ea6 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8002ea2:	2301      	movs	r3, #1
 8002ea4:	e06c      	b.n	8002f80 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	695a      	ldr	r2, [r3, #20]
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	699b      	ldr	r3, [r3, #24]
 8002eae:	1ad3      	subs	r3, r2, r3
 8002eb0:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	689b      	ldr	r3, [r3, #8]
 8002eb6:	69fa      	ldr	r2, [r7, #28]
 8002eb8:	429a      	cmp	r2, r3
 8002eba:	d902      	bls.n	8002ec2 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	689b      	ldr	r3, [r3, #8]
 8002ec0:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8002ec2:	69fb      	ldr	r3, [r7, #28]
 8002ec4:	3303      	adds	r3, #3
 8002ec6:	089b      	lsrs	r3, r3, #2
 8002ec8:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002eca:	e02b      	b.n	8002f24 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	695a      	ldr	r2, [r3, #20]
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	699b      	ldr	r3, [r3, #24]
 8002ed4:	1ad3      	subs	r3, r2, r3
 8002ed6:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	689b      	ldr	r3, [r3, #8]
 8002edc:	69fa      	ldr	r2, [r7, #28]
 8002ede:	429a      	cmp	r2, r3
 8002ee0:	d902      	bls.n	8002ee8 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	689b      	ldr	r3, [r3, #8]
 8002ee6:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8002ee8:	69fb      	ldr	r3, [r7, #28]
 8002eea:	3303      	adds	r3, #3
 8002eec:	089b      	lsrs	r3, r3, #2
 8002eee:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	68d9      	ldr	r1, [r3, #12]
 8002ef4:	683b      	ldr	r3, [r7, #0]
 8002ef6:	b2da      	uxtb	r2, r3
 8002ef8:	69fb      	ldr	r3, [r7, #28]
 8002efa:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002f00:	b2db      	uxtb	r3, r3
 8002f02:	9300      	str	r3, [sp, #0]
 8002f04:	4603      	mov	r3, r0
 8002f06:	6978      	ldr	r0, [r7, #20]
 8002f08:	f003 f9fb 	bl	8006302 <USB_WritePacket>

    ep->xfer_buff  += len;
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	68da      	ldr	r2, [r3, #12]
 8002f10:	69fb      	ldr	r3, [r7, #28]
 8002f12:	441a      	add	r2, r3
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	699a      	ldr	r2, [r3, #24]
 8002f1c:	69fb      	ldr	r3, [r7, #28]
 8002f1e:	441a      	add	r2, r3
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002f24:	683b      	ldr	r3, [r7, #0]
 8002f26:	015a      	lsls	r2, r3, #5
 8002f28:	693b      	ldr	r3, [r7, #16]
 8002f2a:	4413      	add	r3, r2
 8002f2c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002f30:	699b      	ldr	r3, [r3, #24]
 8002f32:	b29b      	uxth	r3, r3
 8002f34:	69ba      	ldr	r2, [r7, #24]
 8002f36:	429a      	cmp	r2, r3
 8002f38:	d809      	bhi.n	8002f4e <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	699a      	ldr	r2, [r3, #24]
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002f42:	429a      	cmp	r2, r3
 8002f44:	d203      	bcs.n	8002f4e <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	695b      	ldr	r3, [r3, #20]
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d1be      	bne.n	8002ecc <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	695a      	ldr	r2, [r3, #20]
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	699b      	ldr	r3, [r3, #24]
 8002f56:	429a      	cmp	r2, r3
 8002f58:	d811      	bhi.n	8002f7e <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002f5a:	683b      	ldr	r3, [r7, #0]
 8002f5c:	f003 030f 	and.w	r3, r3, #15
 8002f60:	2201      	movs	r2, #1
 8002f62:	fa02 f303 	lsl.w	r3, r2, r3
 8002f66:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002f68:	693b      	ldr	r3, [r7, #16]
 8002f6a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002f6e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002f70:	68bb      	ldr	r3, [r7, #8]
 8002f72:	43db      	mvns	r3, r3
 8002f74:	6939      	ldr	r1, [r7, #16]
 8002f76:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002f7a:	4013      	ands	r3, r2
 8002f7c:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8002f7e:	2300      	movs	r3, #0
}
 8002f80:	4618      	mov	r0, r3
 8002f82:	3720      	adds	r7, #32
 8002f84:	46bd      	mov	sp, r7
 8002f86:	bd80      	pop	{r7, pc}

08002f88 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002f88:	b580      	push	{r7, lr}
 8002f8a:	b086      	sub	sp, #24
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	6078      	str	r0, [r7, #4]
 8002f90:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002f98:	697b      	ldr	r3, [r7, #20]
 8002f9a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002f9c:	697b      	ldr	r3, [r7, #20]
 8002f9e:	333c      	adds	r3, #60	; 0x3c
 8002fa0:	3304      	adds	r3, #4
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002fa6:	683b      	ldr	r3, [r7, #0]
 8002fa8:	015a      	lsls	r2, r3, #5
 8002faa:	693b      	ldr	r3, [r7, #16]
 8002fac:	4413      	add	r3, r2
 8002fae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002fb2:	689b      	ldr	r3, [r3, #8]
 8002fb4:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	691b      	ldr	r3, [r3, #16]
 8002fba:	2b01      	cmp	r3, #1
 8002fbc:	f040 80a0 	bne.w	8003100 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8002fc0:	68bb      	ldr	r3, [r7, #8]
 8002fc2:	f003 0308 	and.w	r3, r3, #8
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d015      	beq.n	8002ff6 <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	4a72      	ldr	r2, [pc, #456]	; (8003198 <PCD_EP_OutXfrComplete_int+0x210>)
 8002fce:	4293      	cmp	r3, r2
 8002fd0:	f240 80dd 	bls.w	800318e <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002fd4:	68bb      	ldr	r3, [r7, #8]
 8002fd6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	f000 80d7 	beq.w	800318e <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002fe0:	683b      	ldr	r3, [r7, #0]
 8002fe2:	015a      	lsls	r2, r3, #5
 8002fe4:	693b      	ldr	r3, [r7, #16]
 8002fe6:	4413      	add	r3, r2
 8002fe8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002fec:	461a      	mov	r2, r3
 8002fee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002ff2:	6093      	str	r3, [r2, #8]
 8002ff4:	e0cb      	b.n	800318e <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8002ff6:	68bb      	ldr	r3, [r7, #8]
 8002ff8:	f003 0320 	and.w	r3, r3, #32
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d009      	beq.n	8003014 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003000:	683b      	ldr	r3, [r7, #0]
 8003002:	015a      	lsls	r2, r3, #5
 8003004:	693b      	ldr	r3, [r7, #16]
 8003006:	4413      	add	r3, r2
 8003008:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800300c:	461a      	mov	r2, r3
 800300e:	2320      	movs	r3, #32
 8003010:	6093      	str	r3, [r2, #8]
 8003012:	e0bc      	b.n	800318e <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8003014:	68bb      	ldr	r3, [r7, #8]
 8003016:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800301a:	2b00      	cmp	r3, #0
 800301c:	f040 80b7 	bne.w	800318e <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	4a5d      	ldr	r2, [pc, #372]	; (8003198 <PCD_EP_OutXfrComplete_int+0x210>)
 8003024:	4293      	cmp	r3, r2
 8003026:	d90f      	bls.n	8003048 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003028:	68bb      	ldr	r3, [r7, #8]
 800302a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800302e:	2b00      	cmp	r3, #0
 8003030:	d00a      	beq.n	8003048 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003032:	683b      	ldr	r3, [r7, #0]
 8003034:	015a      	lsls	r2, r3, #5
 8003036:	693b      	ldr	r3, [r7, #16]
 8003038:	4413      	add	r3, r2
 800303a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800303e:	461a      	mov	r2, r3
 8003040:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003044:	6093      	str	r3, [r2, #8]
 8003046:	e0a2      	b.n	800318e <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8003048:	6879      	ldr	r1, [r7, #4]
 800304a:	683a      	ldr	r2, [r7, #0]
 800304c:	4613      	mov	r3, r2
 800304e:	00db      	lsls	r3, r3, #3
 8003050:	1a9b      	subs	r3, r3, r2
 8003052:	009b      	lsls	r3, r3, #2
 8003054:	440b      	add	r3, r1
 8003056:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800305a:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800305c:	683b      	ldr	r3, [r7, #0]
 800305e:	0159      	lsls	r1, r3, #5
 8003060:	693b      	ldr	r3, [r7, #16]
 8003062:	440b      	add	r3, r1
 8003064:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003068:	691b      	ldr	r3, [r3, #16]
 800306a:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 800306e:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8003070:	6878      	ldr	r0, [r7, #4]
 8003072:	683a      	ldr	r2, [r7, #0]
 8003074:	4613      	mov	r3, r2
 8003076:	00db      	lsls	r3, r3, #3
 8003078:	1a9b      	subs	r3, r3, r2
 800307a:	009b      	lsls	r3, r3, #2
 800307c:	4403      	add	r3, r0
 800307e:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8003082:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8003084:	6879      	ldr	r1, [r7, #4]
 8003086:	683a      	ldr	r2, [r7, #0]
 8003088:	4613      	mov	r3, r2
 800308a:	00db      	lsls	r3, r3, #3
 800308c:	1a9b      	subs	r3, r3, r2
 800308e:	009b      	lsls	r3, r3, #2
 8003090:	440b      	add	r3, r1
 8003092:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003096:	6819      	ldr	r1, [r3, #0]
 8003098:	6878      	ldr	r0, [r7, #4]
 800309a:	683a      	ldr	r2, [r7, #0]
 800309c:	4613      	mov	r3, r2
 800309e:	00db      	lsls	r3, r3, #3
 80030a0:	1a9b      	subs	r3, r3, r2
 80030a2:	009b      	lsls	r3, r3, #2
 80030a4:	4403      	add	r3, r0
 80030a6:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	4419      	add	r1, r3
 80030ae:	6878      	ldr	r0, [r7, #4]
 80030b0:	683a      	ldr	r2, [r7, #0]
 80030b2:	4613      	mov	r3, r2
 80030b4:	00db      	lsls	r3, r3, #3
 80030b6:	1a9b      	subs	r3, r3, r2
 80030b8:	009b      	lsls	r3, r3, #2
 80030ba:	4403      	add	r3, r0
 80030bc:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80030c0:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80030c2:	683b      	ldr	r3, [r7, #0]
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d114      	bne.n	80030f2 <PCD_EP_OutXfrComplete_int+0x16a>
 80030c8:	6879      	ldr	r1, [r7, #4]
 80030ca:	683a      	ldr	r2, [r7, #0]
 80030cc:	4613      	mov	r3, r2
 80030ce:	00db      	lsls	r3, r3, #3
 80030d0:	1a9b      	subs	r3, r3, r2
 80030d2:	009b      	lsls	r3, r3, #2
 80030d4:	440b      	add	r3, r1
 80030d6:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d108      	bne.n	80030f2 <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	6818      	ldr	r0, [r3, #0]
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80030ea:	461a      	mov	r2, r3
 80030ec:	2101      	movs	r1, #1
 80030ee:	f003 fb9f 	bl	8006830 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80030f2:	683b      	ldr	r3, [r7, #0]
 80030f4:	b2db      	uxtb	r3, r3
 80030f6:	4619      	mov	r1, r3
 80030f8:	6878      	ldr	r0, [r7, #4]
 80030fa:	f005 fb7d 	bl	80087f8 <HAL_PCD_DataOutStageCallback>
 80030fe:	e046      	b.n	800318e <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	4a26      	ldr	r2, [pc, #152]	; (800319c <PCD_EP_OutXfrComplete_int+0x214>)
 8003104:	4293      	cmp	r3, r2
 8003106:	d124      	bne.n	8003152 <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8003108:	68bb      	ldr	r3, [r7, #8]
 800310a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800310e:	2b00      	cmp	r3, #0
 8003110:	d00a      	beq.n	8003128 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003112:	683b      	ldr	r3, [r7, #0]
 8003114:	015a      	lsls	r2, r3, #5
 8003116:	693b      	ldr	r3, [r7, #16]
 8003118:	4413      	add	r3, r2
 800311a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800311e:	461a      	mov	r2, r3
 8003120:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003124:	6093      	str	r3, [r2, #8]
 8003126:	e032      	b.n	800318e <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003128:	68bb      	ldr	r3, [r7, #8]
 800312a:	f003 0320 	and.w	r3, r3, #32
 800312e:	2b00      	cmp	r3, #0
 8003130:	d008      	beq.n	8003144 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003132:	683b      	ldr	r3, [r7, #0]
 8003134:	015a      	lsls	r2, r3, #5
 8003136:	693b      	ldr	r3, [r7, #16]
 8003138:	4413      	add	r3, r2
 800313a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800313e:	461a      	mov	r2, r3
 8003140:	2320      	movs	r3, #32
 8003142:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003144:	683b      	ldr	r3, [r7, #0]
 8003146:	b2db      	uxtb	r3, r3
 8003148:	4619      	mov	r1, r3
 800314a:	6878      	ldr	r0, [r7, #4]
 800314c:	f005 fb54 	bl	80087f8 <HAL_PCD_DataOutStageCallback>
 8003150:	e01d      	b.n	800318e <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003152:	683b      	ldr	r3, [r7, #0]
 8003154:	2b00      	cmp	r3, #0
 8003156:	d114      	bne.n	8003182 <PCD_EP_OutXfrComplete_int+0x1fa>
 8003158:	6879      	ldr	r1, [r7, #4]
 800315a:	683a      	ldr	r2, [r7, #0]
 800315c:	4613      	mov	r3, r2
 800315e:	00db      	lsls	r3, r3, #3
 8003160:	1a9b      	subs	r3, r3, r2
 8003162:	009b      	lsls	r3, r3, #2
 8003164:	440b      	add	r3, r1
 8003166:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	2b00      	cmp	r3, #0
 800316e:	d108      	bne.n	8003182 <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	6818      	ldr	r0, [r3, #0]
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800317a:	461a      	mov	r2, r3
 800317c:	2100      	movs	r1, #0
 800317e:	f003 fb57 	bl	8006830 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003182:	683b      	ldr	r3, [r7, #0]
 8003184:	b2db      	uxtb	r3, r3
 8003186:	4619      	mov	r1, r3
 8003188:	6878      	ldr	r0, [r7, #4]
 800318a:	f005 fb35 	bl	80087f8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800318e:	2300      	movs	r3, #0
}
 8003190:	4618      	mov	r0, r3
 8003192:	3718      	adds	r7, #24
 8003194:	46bd      	mov	sp, r7
 8003196:	bd80      	pop	{r7, pc}
 8003198:	4f54300a 	.word	0x4f54300a
 800319c:	4f54310a 	.word	0x4f54310a

080031a0 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80031a0:	b580      	push	{r7, lr}
 80031a2:	b086      	sub	sp, #24
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	6078      	str	r0, [r7, #4]
 80031a8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80031b0:	697b      	ldr	r3, [r7, #20]
 80031b2:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80031b4:	697b      	ldr	r3, [r7, #20]
 80031b6:	333c      	adds	r3, #60	; 0x3c
 80031b8:	3304      	adds	r3, #4
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80031be:	683b      	ldr	r3, [r7, #0]
 80031c0:	015a      	lsls	r2, r3, #5
 80031c2:	693b      	ldr	r3, [r7, #16]
 80031c4:	4413      	add	r3, r2
 80031c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80031ca:	689b      	ldr	r3, [r3, #8]
 80031cc:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	4a15      	ldr	r2, [pc, #84]	; (8003228 <PCD_EP_OutSetupPacket_int+0x88>)
 80031d2:	4293      	cmp	r3, r2
 80031d4:	d90e      	bls.n	80031f4 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80031d6:	68bb      	ldr	r3, [r7, #8]
 80031d8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d009      	beq.n	80031f4 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80031e0:	683b      	ldr	r3, [r7, #0]
 80031e2:	015a      	lsls	r2, r3, #5
 80031e4:	693b      	ldr	r3, [r7, #16]
 80031e6:	4413      	add	r3, r2
 80031e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80031ec:	461a      	mov	r2, r3
 80031ee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80031f2:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80031f4:	6878      	ldr	r0, [r7, #4]
 80031f6:	f005 faed 	bl	80087d4 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	4a0a      	ldr	r2, [pc, #40]	; (8003228 <PCD_EP_OutSetupPacket_int+0x88>)
 80031fe:	4293      	cmp	r3, r2
 8003200:	d90c      	bls.n	800321c <PCD_EP_OutSetupPacket_int+0x7c>
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	691b      	ldr	r3, [r3, #16]
 8003206:	2b01      	cmp	r3, #1
 8003208:	d108      	bne.n	800321c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	6818      	ldr	r0, [r3, #0]
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003214:	461a      	mov	r2, r3
 8003216:	2101      	movs	r1, #1
 8003218:	f003 fb0a 	bl	8006830 <USB_EP0_OutStart>
  }

  return HAL_OK;
 800321c:	2300      	movs	r3, #0
}
 800321e:	4618      	mov	r0, r3
 8003220:	3718      	adds	r7, #24
 8003222:	46bd      	mov	sp, r7
 8003224:	bd80      	pop	{r7, pc}
 8003226:	bf00      	nop
 8003228:	4f54300a 	.word	0x4f54300a

0800322c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800322c:	b480      	push	{r7}
 800322e:	b085      	sub	sp, #20
 8003230:	af00      	add	r7, sp, #0
 8003232:	6078      	str	r0, [r7, #4]
 8003234:	460b      	mov	r3, r1
 8003236:	70fb      	strb	r3, [r7, #3]
 8003238:	4613      	mov	r3, r2
 800323a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003242:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8003244:	78fb      	ldrb	r3, [r7, #3]
 8003246:	2b00      	cmp	r3, #0
 8003248:	d107      	bne.n	800325a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800324a:	883b      	ldrh	r3, [r7, #0]
 800324c:	0419      	lsls	r1, r3, #16
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	68ba      	ldr	r2, [r7, #8]
 8003254:	430a      	orrs	r2, r1
 8003256:	629a      	str	r2, [r3, #40]	; 0x28
 8003258:	e028      	b.n	80032ac <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003260:	0c1b      	lsrs	r3, r3, #16
 8003262:	68ba      	ldr	r2, [r7, #8]
 8003264:	4413      	add	r3, r2
 8003266:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003268:	2300      	movs	r3, #0
 800326a:	73fb      	strb	r3, [r7, #15]
 800326c:	e00d      	b.n	800328a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681a      	ldr	r2, [r3, #0]
 8003272:	7bfb      	ldrb	r3, [r7, #15]
 8003274:	3340      	adds	r3, #64	; 0x40
 8003276:	009b      	lsls	r3, r3, #2
 8003278:	4413      	add	r3, r2
 800327a:	685b      	ldr	r3, [r3, #4]
 800327c:	0c1b      	lsrs	r3, r3, #16
 800327e:	68ba      	ldr	r2, [r7, #8]
 8003280:	4413      	add	r3, r2
 8003282:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003284:	7bfb      	ldrb	r3, [r7, #15]
 8003286:	3301      	adds	r3, #1
 8003288:	73fb      	strb	r3, [r7, #15]
 800328a:	7bfa      	ldrb	r2, [r7, #15]
 800328c:	78fb      	ldrb	r3, [r7, #3]
 800328e:	3b01      	subs	r3, #1
 8003290:	429a      	cmp	r2, r3
 8003292:	d3ec      	bcc.n	800326e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003294:	883b      	ldrh	r3, [r7, #0]
 8003296:	0418      	lsls	r0, r3, #16
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	6819      	ldr	r1, [r3, #0]
 800329c:	78fb      	ldrb	r3, [r7, #3]
 800329e:	3b01      	subs	r3, #1
 80032a0:	68ba      	ldr	r2, [r7, #8]
 80032a2:	4302      	orrs	r2, r0
 80032a4:	3340      	adds	r3, #64	; 0x40
 80032a6:	009b      	lsls	r3, r3, #2
 80032a8:	440b      	add	r3, r1
 80032aa:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80032ac:	2300      	movs	r3, #0
}
 80032ae:	4618      	mov	r0, r3
 80032b0:	3714      	adds	r7, #20
 80032b2:	46bd      	mov	sp, r7
 80032b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b8:	4770      	bx	lr

080032ba <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80032ba:	b480      	push	{r7}
 80032bc:	b083      	sub	sp, #12
 80032be:	af00      	add	r7, sp, #0
 80032c0:	6078      	str	r0, [r7, #4]
 80032c2:	460b      	mov	r3, r1
 80032c4:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	887a      	ldrh	r2, [r7, #2]
 80032cc:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80032ce:	2300      	movs	r3, #0
}
 80032d0:	4618      	mov	r0, r3
 80032d2:	370c      	adds	r7, #12
 80032d4:	46bd      	mov	sp, r7
 80032d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032da:	4770      	bx	lr

080032dc <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80032dc:	b480      	push	{r7}
 80032de:	b085      	sub	sp, #20
 80032e0:	af00      	add	r7, sp, #0
 80032e2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	2201      	movs	r2, #1
 80032ee:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	2200      	movs	r2, #0
 80032f6:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	699b      	ldr	r3, [r3, #24]
 80032fe:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800330a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800330e:	f043 0303 	orr.w	r3, r3, #3
 8003312:	68fa      	ldr	r2, [r7, #12]
 8003314:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8003316:	2300      	movs	r3, #0
}
 8003318:	4618      	mov	r0, r3
 800331a:	3714      	adds	r7, #20
 800331c:	46bd      	mov	sp, r7
 800331e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003322:	4770      	bx	lr

08003324 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003324:	b580      	push	{r7, lr}
 8003326:	b084      	sub	sp, #16
 8003328:	af00      	add	r7, sp, #0
 800332a:	6078      	str	r0, [r7, #4]
 800332c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	2b00      	cmp	r3, #0
 8003332:	d101      	bne.n	8003338 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003334:	2301      	movs	r3, #1
 8003336:	e0cc      	b.n	80034d2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003338:	4b68      	ldr	r3, [pc, #416]	; (80034dc <HAL_RCC_ClockConfig+0x1b8>)
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	f003 030f 	and.w	r3, r3, #15
 8003340:	683a      	ldr	r2, [r7, #0]
 8003342:	429a      	cmp	r2, r3
 8003344:	d90c      	bls.n	8003360 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003346:	4b65      	ldr	r3, [pc, #404]	; (80034dc <HAL_RCC_ClockConfig+0x1b8>)
 8003348:	683a      	ldr	r2, [r7, #0]
 800334a:	b2d2      	uxtb	r2, r2
 800334c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800334e:	4b63      	ldr	r3, [pc, #396]	; (80034dc <HAL_RCC_ClockConfig+0x1b8>)
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	f003 030f 	and.w	r3, r3, #15
 8003356:	683a      	ldr	r2, [r7, #0]
 8003358:	429a      	cmp	r2, r3
 800335a:	d001      	beq.n	8003360 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800335c:	2301      	movs	r3, #1
 800335e:	e0b8      	b.n	80034d2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	f003 0302 	and.w	r3, r3, #2
 8003368:	2b00      	cmp	r3, #0
 800336a:	d020      	beq.n	80033ae <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f003 0304 	and.w	r3, r3, #4
 8003374:	2b00      	cmp	r3, #0
 8003376:	d005      	beq.n	8003384 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003378:	4b59      	ldr	r3, [pc, #356]	; (80034e0 <HAL_RCC_ClockConfig+0x1bc>)
 800337a:	689b      	ldr	r3, [r3, #8]
 800337c:	4a58      	ldr	r2, [pc, #352]	; (80034e0 <HAL_RCC_ClockConfig+0x1bc>)
 800337e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003382:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	f003 0308 	and.w	r3, r3, #8
 800338c:	2b00      	cmp	r3, #0
 800338e:	d005      	beq.n	800339c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003390:	4b53      	ldr	r3, [pc, #332]	; (80034e0 <HAL_RCC_ClockConfig+0x1bc>)
 8003392:	689b      	ldr	r3, [r3, #8]
 8003394:	4a52      	ldr	r2, [pc, #328]	; (80034e0 <HAL_RCC_ClockConfig+0x1bc>)
 8003396:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800339a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800339c:	4b50      	ldr	r3, [pc, #320]	; (80034e0 <HAL_RCC_ClockConfig+0x1bc>)
 800339e:	689b      	ldr	r3, [r3, #8]
 80033a0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	689b      	ldr	r3, [r3, #8]
 80033a8:	494d      	ldr	r1, [pc, #308]	; (80034e0 <HAL_RCC_ClockConfig+0x1bc>)
 80033aa:	4313      	orrs	r3, r2
 80033ac:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	f003 0301 	and.w	r3, r3, #1
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d044      	beq.n	8003444 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	685b      	ldr	r3, [r3, #4]
 80033be:	2b01      	cmp	r3, #1
 80033c0:	d107      	bne.n	80033d2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033c2:	4b47      	ldr	r3, [pc, #284]	; (80034e0 <HAL_RCC_ClockConfig+0x1bc>)
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d119      	bne.n	8003402 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80033ce:	2301      	movs	r3, #1
 80033d0:	e07f      	b.n	80034d2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	685b      	ldr	r3, [r3, #4]
 80033d6:	2b02      	cmp	r3, #2
 80033d8:	d003      	beq.n	80033e2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80033de:	2b03      	cmp	r3, #3
 80033e0:	d107      	bne.n	80033f2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80033e2:	4b3f      	ldr	r3, [pc, #252]	; (80034e0 <HAL_RCC_ClockConfig+0x1bc>)
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d109      	bne.n	8003402 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80033ee:	2301      	movs	r3, #1
 80033f0:	e06f      	b.n	80034d2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80033f2:	4b3b      	ldr	r3, [pc, #236]	; (80034e0 <HAL_RCC_ClockConfig+0x1bc>)
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f003 0302 	and.w	r3, r3, #2
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d101      	bne.n	8003402 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80033fe:	2301      	movs	r3, #1
 8003400:	e067      	b.n	80034d2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003402:	4b37      	ldr	r3, [pc, #220]	; (80034e0 <HAL_RCC_ClockConfig+0x1bc>)
 8003404:	689b      	ldr	r3, [r3, #8]
 8003406:	f023 0203 	bic.w	r2, r3, #3
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	685b      	ldr	r3, [r3, #4]
 800340e:	4934      	ldr	r1, [pc, #208]	; (80034e0 <HAL_RCC_ClockConfig+0x1bc>)
 8003410:	4313      	orrs	r3, r2
 8003412:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003414:	f7fd feb6 	bl	8001184 <HAL_GetTick>
 8003418:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800341a:	e00a      	b.n	8003432 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800341c:	f7fd feb2 	bl	8001184 <HAL_GetTick>
 8003420:	4602      	mov	r2, r0
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	1ad3      	subs	r3, r2, r3
 8003426:	f241 3288 	movw	r2, #5000	; 0x1388
 800342a:	4293      	cmp	r3, r2
 800342c:	d901      	bls.n	8003432 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800342e:	2303      	movs	r3, #3
 8003430:	e04f      	b.n	80034d2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003432:	4b2b      	ldr	r3, [pc, #172]	; (80034e0 <HAL_RCC_ClockConfig+0x1bc>)
 8003434:	689b      	ldr	r3, [r3, #8]
 8003436:	f003 020c 	and.w	r2, r3, #12
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	685b      	ldr	r3, [r3, #4]
 800343e:	009b      	lsls	r3, r3, #2
 8003440:	429a      	cmp	r2, r3
 8003442:	d1eb      	bne.n	800341c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003444:	4b25      	ldr	r3, [pc, #148]	; (80034dc <HAL_RCC_ClockConfig+0x1b8>)
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f003 030f 	and.w	r3, r3, #15
 800344c:	683a      	ldr	r2, [r7, #0]
 800344e:	429a      	cmp	r2, r3
 8003450:	d20c      	bcs.n	800346c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003452:	4b22      	ldr	r3, [pc, #136]	; (80034dc <HAL_RCC_ClockConfig+0x1b8>)
 8003454:	683a      	ldr	r2, [r7, #0]
 8003456:	b2d2      	uxtb	r2, r2
 8003458:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800345a:	4b20      	ldr	r3, [pc, #128]	; (80034dc <HAL_RCC_ClockConfig+0x1b8>)
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f003 030f 	and.w	r3, r3, #15
 8003462:	683a      	ldr	r2, [r7, #0]
 8003464:	429a      	cmp	r2, r3
 8003466:	d001      	beq.n	800346c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003468:	2301      	movs	r3, #1
 800346a:	e032      	b.n	80034d2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	f003 0304 	and.w	r3, r3, #4
 8003474:	2b00      	cmp	r3, #0
 8003476:	d008      	beq.n	800348a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003478:	4b19      	ldr	r3, [pc, #100]	; (80034e0 <HAL_RCC_ClockConfig+0x1bc>)
 800347a:	689b      	ldr	r3, [r3, #8]
 800347c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	68db      	ldr	r3, [r3, #12]
 8003484:	4916      	ldr	r1, [pc, #88]	; (80034e0 <HAL_RCC_ClockConfig+0x1bc>)
 8003486:	4313      	orrs	r3, r2
 8003488:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f003 0308 	and.w	r3, r3, #8
 8003492:	2b00      	cmp	r3, #0
 8003494:	d009      	beq.n	80034aa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003496:	4b12      	ldr	r3, [pc, #72]	; (80034e0 <HAL_RCC_ClockConfig+0x1bc>)
 8003498:	689b      	ldr	r3, [r3, #8]
 800349a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	691b      	ldr	r3, [r3, #16]
 80034a2:	00db      	lsls	r3, r3, #3
 80034a4:	490e      	ldr	r1, [pc, #56]	; (80034e0 <HAL_RCC_ClockConfig+0x1bc>)
 80034a6:	4313      	orrs	r3, r2
 80034a8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80034aa:	f000 f821 	bl	80034f0 <HAL_RCC_GetSysClockFreq>
 80034ae:	4602      	mov	r2, r0
 80034b0:	4b0b      	ldr	r3, [pc, #44]	; (80034e0 <HAL_RCC_ClockConfig+0x1bc>)
 80034b2:	689b      	ldr	r3, [r3, #8]
 80034b4:	091b      	lsrs	r3, r3, #4
 80034b6:	f003 030f 	and.w	r3, r3, #15
 80034ba:	490a      	ldr	r1, [pc, #40]	; (80034e4 <HAL_RCC_ClockConfig+0x1c0>)
 80034bc:	5ccb      	ldrb	r3, [r1, r3]
 80034be:	fa22 f303 	lsr.w	r3, r2, r3
 80034c2:	4a09      	ldr	r2, [pc, #36]	; (80034e8 <HAL_RCC_ClockConfig+0x1c4>)
 80034c4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80034c6:	4b09      	ldr	r3, [pc, #36]	; (80034ec <HAL_RCC_ClockConfig+0x1c8>)
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	4618      	mov	r0, r3
 80034cc:	f7fd fe16 	bl	80010fc <HAL_InitTick>

  return HAL_OK;
 80034d0:	2300      	movs	r3, #0
}
 80034d2:	4618      	mov	r0, r3
 80034d4:	3710      	adds	r7, #16
 80034d6:	46bd      	mov	sp, r7
 80034d8:	bd80      	pop	{r7, pc}
 80034da:	bf00      	nop
 80034dc:	40023c00 	.word	0x40023c00
 80034e0:	40023800 	.word	0x40023800
 80034e4:	08008ed4 	.word	0x08008ed4
 80034e8:	20000000 	.word	0x20000000
 80034ec:	20000004 	.word	0x20000004

080034f0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80034f0:	b5b0      	push	{r4, r5, r7, lr}
 80034f2:	b084      	sub	sp, #16
 80034f4:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80034f6:	2100      	movs	r1, #0
 80034f8:	6079      	str	r1, [r7, #4]
 80034fa:	2100      	movs	r1, #0
 80034fc:	60f9      	str	r1, [r7, #12]
 80034fe:	2100      	movs	r1, #0
 8003500:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8003502:	2100      	movs	r1, #0
 8003504:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003506:	4952      	ldr	r1, [pc, #328]	; (8003650 <HAL_RCC_GetSysClockFreq+0x160>)
 8003508:	6889      	ldr	r1, [r1, #8]
 800350a:	f001 010c 	and.w	r1, r1, #12
 800350e:	2908      	cmp	r1, #8
 8003510:	d00d      	beq.n	800352e <HAL_RCC_GetSysClockFreq+0x3e>
 8003512:	2908      	cmp	r1, #8
 8003514:	f200 8094 	bhi.w	8003640 <HAL_RCC_GetSysClockFreq+0x150>
 8003518:	2900      	cmp	r1, #0
 800351a:	d002      	beq.n	8003522 <HAL_RCC_GetSysClockFreq+0x32>
 800351c:	2904      	cmp	r1, #4
 800351e:	d003      	beq.n	8003528 <HAL_RCC_GetSysClockFreq+0x38>
 8003520:	e08e      	b.n	8003640 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003522:	4b4c      	ldr	r3, [pc, #304]	; (8003654 <HAL_RCC_GetSysClockFreq+0x164>)
 8003524:	60bb      	str	r3, [r7, #8]
       break;
 8003526:	e08e      	b.n	8003646 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003528:	4b4b      	ldr	r3, [pc, #300]	; (8003658 <HAL_RCC_GetSysClockFreq+0x168>)
 800352a:	60bb      	str	r3, [r7, #8]
      break;
 800352c:	e08b      	b.n	8003646 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800352e:	4948      	ldr	r1, [pc, #288]	; (8003650 <HAL_RCC_GetSysClockFreq+0x160>)
 8003530:	6849      	ldr	r1, [r1, #4]
 8003532:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8003536:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003538:	4945      	ldr	r1, [pc, #276]	; (8003650 <HAL_RCC_GetSysClockFreq+0x160>)
 800353a:	6849      	ldr	r1, [r1, #4]
 800353c:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8003540:	2900      	cmp	r1, #0
 8003542:	d024      	beq.n	800358e <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003544:	4942      	ldr	r1, [pc, #264]	; (8003650 <HAL_RCC_GetSysClockFreq+0x160>)
 8003546:	6849      	ldr	r1, [r1, #4]
 8003548:	0989      	lsrs	r1, r1, #6
 800354a:	4608      	mov	r0, r1
 800354c:	f04f 0100 	mov.w	r1, #0
 8003550:	f240 14ff 	movw	r4, #511	; 0x1ff
 8003554:	f04f 0500 	mov.w	r5, #0
 8003558:	ea00 0204 	and.w	r2, r0, r4
 800355c:	ea01 0305 	and.w	r3, r1, r5
 8003560:	493d      	ldr	r1, [pc, #244]	; (8003658 <HAL_RCC_GetSysClockFreq+0x168>)
 8003562:	fb01 f003 	mul.w	r0, r1, r3
 8003566:	2100      	movs	r1, #0
 8003568:	fb01 f102 	mul.w	r1, r1, r2
 800356c:	1844      	adds	r4, r0, r1
 800356e:	493a      	ldr	r1, [pc, #232]	; (8003658 <HAL_RCC_GetSysClockFreq+0x168>)
 8003570:	fba2 0101 	umull	r0, r1, r2, r1
 8003574:	1863      	adds	r3, r4, r1
 8003576:	4619      	mov	r1, r3
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	461a      	mov	r2, r3
 800357c:	f04f 0300 	mov.w	r3, #0
 8003580:	f7fc fe38 	bl	80001f4 <__aeabi_uldivmod>
 8003584:	4602      	mov	r2, r0
 8003586:	460b      	mov	r3, r1
 8003588:	4613      	mov	r3, r2
 800358a:	60fb      	str	r3, [r7, #12]
 800358c:	e04a      	b.n	8003624 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800358e:	4b30      	ldr	r3, [pc, #192]	; (8003650 <HAL_RCC_GetSysClockFreq+0x160>)
 8003590:	685b      	ldr	r3, [r3, #4]
 8003592:	099b      	lsrs	r3, r3, #6
 8003594:	461a      	mov	r2, r3
 8003596:	f04f 0300 	mov.w	r3, #0
 800359a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800359e:	f04f 0100 	mov.w	r1, #0
 80035a2:	ea02 0400 	and.w	r4, r2, r0
 80035a6:	ea03 0501 	and.w	r5, r3, r1
 80035aa:	4620      	mov	r0, r4
 80035ac:	4629      	mov	r1, r5
 80035ae:	f04f 0200 	mov.w	r2, #0
 80035b2:	f04f 0300 	mov.w	r3, #0
 80035b6:	014b      	lsls	r3, r1, #5
 80035b8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80035bc:	0142      	lsls	r2, r0, #5
 80035be:	4610      	mov	r0, r2
 80035c0:	4619      	mov	r1, r3
 80035c2:	1b00      	subs	r0, r0, r4
 80035c4:	eb61 0105 	sbc.w	r1, r1, r5
 80035c8:	f04f 0200 	mov.w	r2, #0
 80035cc:	f04f 0300 	mov.w	r3, #0
 80035d0:	018b      	lsls	r3, r1, #6
 80035d2:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80035d6:	0182      	lsls	r2, r0, #6
 80035d8:	1a12      	subs	r2, r2, r0
 80035da:	eb63 0301 	sbc.w	r3, r3, r1
 80035de:	f04f 0000 	mov.w	r0, #0
 80035e2:	f04f 0100 	mov.w	r1, #0
 80035e6:	00d9      	lsls	r1, r3, #3
 80035e8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80035ec:	00d0      	lsls	r0, r2, #3
 80035ee:	4602      	mov	r2, r0
 80035f0:	460b      	mov	r3, r1
 80035f2:	1912      	adds	r2, r2, r4
 80035f4:	eb45 0303 	adc.w	r3, r5, r3
 80035f8:	f04f 0000 	mov.w	r0, #0
 80035fc:	f04f 0100 	mov.w	r1, #0
 8003600:	0299      	lsls	r1, r3, #10
 8003602:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8003606:	0290      	lsls	r0, r2, #10
 8003608:	4602      	mov	r2, r0
 800360a:	460b      	mov	r3, r1
 800360c:	4610      	mov	r0, r2
 800360e:	4619      	mov	r1, r3
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	461a      	mov	r2, r3
 8003614:	f04f 0300 	mov.w	r3, #0
 8003618:	f7fc fdec 	bl	80001f4 <__aeabi_uldivmod>
 800361c:	4602      	mov	r2, r0
 800361e:	460b      	mov	r3, r1
 8003620:	4613      	mov	r3, r2
 8003622:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003624:	4b0a      	ldr	r3, [pc, #40]	; (8003650 <HAL_RCC_GetSysClockFreq+0x160>)
 8003626:	685b      	ldr	r3, [r3, #4]
 8003628:	0c1b      	lsrs	r3, r3, #16
 800362a:	f003 0303 	and.w	r3, r3, #3
 800362e:	3301      	adds	r3, #1
 8003630:	005b      	lsls	r3, r3, #1
 8003632:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003634:	68fa      	ldr	r2, [r7, #12]
 8003636:	683b      	ldr	r3, [r7, #0]
 8003638:	fbb2 f3f3 	udiv	r3, r2, r3
 800363c:	60bb      	str	r3, [r7, #8]
      break;
 800363e:	e002      	b.n	8003646 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003640:	4b04      	ldr	r3, [pc, #16]	; (8003654 <HAL_RCC_GetSysClockFreq+0x164>)
 8003642:	60bb      	str	r3, [r7, #8]
      break;
 8003644:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003646:	68bb      	ldr	r3, [r7, #8]
}
 8003648:	4618      	mov	r0, r3
 800364a:	3710      	adds	r7, #16
 800364c:	46bd      	mov	sp, r7
 800364e:	bdb0      	pop	{r4, r5, r7, pc}
 8003650:	40023800 	.word	0x40023800
 8003654:	00f42400 	.word	0x00f42400
 8003658:	017d7840 	.word	0x017d7840

0800365c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800365c:	b480      	push	{r7}
 800365e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003660:	4b03      	ldr	r3, [pc, #12]	; (8003670 <HAL_RCC_GetHCLKFreq+0x14>)
 8003662:	681b      	ldr	r3, [r3, #0]
}
 8003664:	4618      	mov	r0, r3
 8003666:	46bd      	mov	sp, r7
 8003668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800366c:	4770      	bx	lr
 800366e:	bf00      	nop
 8003670:	20000000 	.word	0x20000000

08003674 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003674:	b580      	push	{r7, lr}
 8003676:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003678:	f7ff fff0 	bl	800365c <HAL_RCC_GetHCLKFreq>
 800367c:	4602      	mov	r2, r0
 800367e:	4b05      	ldr	r3, [pc, #20]	; (8003694 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003680:	689b      	ldr	r3, [r3, #8]
 8003682:	0a9b      	lsrs	r3, r3, #10
 8003684:	f003 0307 	and.w	r3, r3, #7
 8003688:	4903      	ldr	r1, [pc, #12]	; (8003698 <HAL_RCC_GetPCLK1Freq+0x24>)
 800368a:	5ccb      	ldrb	r3, [r1, r3]
 800368c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003690:	4618      	mov	r0, r3
 8003692:	bd80      	pop	{r7, pc}
 8003694:	40023800 	.word	0x40023800
 8003698:	08008ee4 	.word	0x08008ee4

0800369c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800369c:	b580      	push	{r7, lr}
 800369e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80036a0:	f7ff ffdc 	bl	800365c <HAL_RCC_GetHCLKFreq>
 80036a4:	4602      	mov	r2, r0
 80036a6:	4b05      	ldr	r3, [pc, #20]	; (80036bc <HAL_RCC_GetPCLK2Freq+0x20>)
 80036a8:	689b      	ldr	r3, [r3, #8]
 80036aa:	0b5b      	lsrs	r3, r3, #13
 80036ac:	f003 0307 	and.w	r3, r3, #7
 80036b0:	4903      	ldr	r1, [pc, #12]	; (80036c0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80036b2:	5ccb      	ldrb	r3, [r1, r3]
 80036b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80036b8:	4618      	mov	r0, r3
 80036ba:	bd80      	pop	{r7, pc}
 80036bc:	40023800 	.word	0x40023800
 80036c0:	08008ee4 	.word	0x08008ee4

080036c4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80036c4:	b580      	push	{r7, lr}
 80036c6:	b088      	sub	sp, #32
 80036c8:	af00      	add	r7, sp, #0
 80036ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80036cc:	2300      	movs	r3, #0
 80036ce:	61fb      	str	r3, [r7, #28]
  uint32_t tmpreg1 = 0U;
 80036d0:	2300      	movs	r3, #0
 80036d2:	61bb      	str	r3, [r7, #24]
  uint32_t pllsaip = 0U;
 80036d4:	2300      	movs	r3, #0
 80036d6:	617b      	str	r3, [r7, #20]
  uint32_t pllsaiq = 0U;
 80036d8:	2300      	movs	r3, #0
 80036da:	613b      	str	r3, [r7, #16]
  uint32_t pllsair = 0U;
 80036dc:	2300      	movs	r3, #0
 80036de:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*--------------------------- CLK48 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d00a      	beq.n	8003702 <HAL_RCCEx_PeriphCLKConfig+0x3e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80036ec:	4b66      	ldr	r3, [pc, #408]	; (8003888 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80036ee:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80036f2:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80036fa:	4963      	ldr	r1, [pc, #396]	; (8003888 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80036fc:	4313      	orrs	r3, r2
 80036fe:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SDIO Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800370a:	2b00      	cmp	r3, #0
 800370c:	d00a      	beq.n	8003724 <HAL_RCCEx_PeriphCLKConfig+0x60>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 800370e:	4b5e      	ldr	r3, [pc, #376]	; (8003888 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8003710:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003714:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800371c:	495a      	ldr	r1, [pc, #360]	; (8003888 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800371e:	4313      	orrs	r3, r2
 8003720:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*------------------- Common configuration SAI/I2S -------------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	f003 0301 	and.w	r3, r3, #1
 800372c:	2b00      	cmp	r3, #0
 800372e:	d10b      	bne.n	8003748 <HAL_RCCEx_PeriphCLKConfig+0x84>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003738:	2b00      	cmp	r3, #0
 800373a:	d105      	bne.n	8003748 <HAL_RCCEx_PeriphCLKConfig+0x84>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8003744:	2b00      	cmp	r3, #0
 8003746:	d075      	beq.n	8003834 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003748:	4b50      	ldr	r3, [pc, #320]	; (800388c <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 800374a:	2200      	movs	r2, #0
 800374c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800374e:	f7fd fd19 	bl	8001184 <HAL_GetTick>
 8003752:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003754:	e008      	b.n	8003768 <HAL_RCCEx_PeriphCLKConfig+0xa4>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003756:	f7fd fd15 	bl	8001184 <HAL_GetTick>
 800375a:	4602      	mov	r2, r0
 800375c:	69fb      	ldr	r3, [r7, #28]
 800375e:	1ad3      	subs	r3, r2, r3
 8003760:	2b02      	cmp	r3, #2
 8003762:	d901      	bls.n	8003768 <HAL_RCCEx_PeriphCLKConfig+0xa4>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003764:	2303      	movs	r3, #3
 8003766:	e1dc      	b.n	8003b22 <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003768:	4b47      	ldr	r3, [pc, #284]	; (8003888 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003770:	2b00      	cmp	r3, #0
 8003772:	d1f0      	bne.n	8003756 <HAL_RCCEx_PeriphCLKConfig+0x92>
    }

    /*---------------------- I2S configuration -------------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	f003 0301 	and.w	r3, r3, #1
 800377c:	2b00      	cmp	r3, #0
 800377e:	d009      	beq.n	8003794 <HAL_RCCEx_PeriphCLKConfig+0xd0>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	685b      	ldr	r3, [r3, #4]
 8003784:	019a      	lsls	r2, r3, #6
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	689b      	ldr	r3, [r3, #8]
 800378a:	071b      	lsls	r3, r3, #28
 800378c:	493e      	ldr	r1, [pc, #248]	; (8003888 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800378e:	4313      	orrs	r3, r2
 8003790:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	f003 0302 	and.w	r3, r3, #2
 800379c:	2b00      	cmp	r3, #0
 800379e:	d01f      	beq.n	80037e0 <HAL_RCCEx_PeriphCLKConfig+0x11c>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80037a0:	4b39      	ldr	r3, [pc, #228]	; (8003888 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80037a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80037a6:	0f1b      	lsrs	r3, r3, #28
 80037a8:	f003 0307 	and.w	r3, r3, #7
 80037ac:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	685b      	ldr	r3, [r3, #4]
 80037b2:	019a      	lsls	r2, r3, #6
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	68db      	ldr	r3, [r3, #12]
 80037b8:	061b      	lsls	r3, r3, #24
 80037ba:	431a      	orrs	r2, r3
 80037bc:	69bb      	ldr	r3, [r7, #24]
 80037be:	071b      	lsls	r3, r3, #28
 80037c0:	4931      	ldr	r1, [pc, #196]	; (8003888 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80037c2:	4313      	orrs	r3, r2
 80037c4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80037c8:	4b2f      	ldr	r3, [pc, #188]	; (8003888 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80037ca:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80037ce:	f023 021f 	bic.w	r2, r3, #31
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	6a1b      	ldr	r3, [r3, #32]
 80037d6:	3b01      	subs	r3, #1
 80037d8:	492b      	ldr	r1, [pc, #172]	; (8003888 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80037da:	4313      	orrs	r3, r2
 80037dc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d00d      	beq.n	8003808 <HAL_RCCEx_PeriphCLKConfig+0x144>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	685b      	ldr	r3, [r3, #4]
 80037f0:	019a      	lsls	r2, r3, #6
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	68db      	ldr	r3, [r3, #12]
 80037f6:	061b      	lsls	r3, r3, #24
 80037f8:	431a      	orrs	r2, r3
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	689b      	ldr	r3, [r3, #8]
 80037fe:	071b      	lsls	r3, r3, #28
 8003800:	4921      	ldr	r1, [pc, #132]	; (8003888 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8003802:	4313      	orrs	r3, r2
 8003804:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003808:	4b20      	ldr	r3, [pc, #128]	; (800388c <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 800380a:	2201      	movs	r2, #1
 800380c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800380e:	f7fd fcb9 	bl	8001184 <HAL_GetTick>
 8003812:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003814:	e008      	b.n	8003828 <HAL_RCCEx_PeriphCLKConfig+0x164>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003816:	f7fd fcb5 	bl	8001184 <HAL_GetTick>
 800381a:	4602      	mov	r2, r0
 800381c:	69fb      	ldr	r3, [r7, #28]
 800381e:	1ad3      	subs	r3, r2, r3
 8003820:	2b02      	cmp	r3, #2
 8003822:	d901      	bls.n	8003828 <HAL_RCCEx_PeriphCLKConfig+0x164>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003824:	2303      	movs	r3, #3
 8003826:	e17c      	b.n	8003b22 <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003828:	4b17      	ldr	r3, [pc, #92]	; (8003888 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003830:	2b00      	cmp	r3, #0
 8003832:	d0f0      	beq.n	8003816 <HAL_RCCEx_PeriphCLKConfig+0x152>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI, LTDC or CLK48 Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for these peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f003 0304 	and.w	r3, r3, #4
 800383c:	2b00      	cmp	r3, #0
 800383e:	d112      	bne.n	8003866 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)             ||
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8003848:	2b00      	cmp	r3, #0
 800384a:	d10c      	bne.n	8003866 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
     ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)          &&
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	f003 0380 	and.w	r3, r3, #128	; 0x80
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)             ||
 8003854:	2b00      	cmp	r3, #0
 8003856:	f000 80ce 	beq.w	80039f6 <HAL_RCCEx_PeriphCLKConfig+0x332>
      (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)))
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
     ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)          &&
 800385e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003862:	f040 80c8 	bne.w	80039f6 <HAL_RCCEx_PeriphCLKConfig+0x332>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003866:	4b0a      	ldr	r3, [pc, #40]	; (8003890 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003868:	2200      	movs	r2, #0
 800386a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800386c:	f7fd fc8a 	bl	8001184 <HAL_GetTick>
 8003870:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003872:	e00f      	b.n	8003894 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8003874:	f7fd fc86 	bl	8001184 <HAL_GetTick>
 8003878:	4602      	mov	r2, r0
 800387a:	69fb      	ldr	r3, [r7, #28]
 800387c:	1ad3      	subs	r3, r2, r3
 800387e:	2b02      	cmp	r3, #2
 8003880:	d908      	bls.n	8003894 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003882:	2303      	movs	r3, #3
 8003884:	e14d      	b.n	8003b22 <HAL_RCCEx_PeriphCLKConfig+0x45e>
 8003886:	bf00      	nop
 8003888:	40023800 	.word	0x40023800
 800388c:	42470068 	.word	0x42470068
 8003890:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003894:	4ba5      	ldr	r3, [pc, #660]	; (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800389c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80038a0:	d0e8      	beq.n	8003874 <HAL_RCCEx_PeriphCLKConfig+0x1b0>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	f003 0304 	and.w	r3, r3, #4
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d02e      	beq.n	800390c <HAL_RCCEx_PeriphCLKConfig+0x248>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 80038ae:	4b9f      	ldr	r3, [pc, #636]	; (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80038b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038b4:	0c1b      	lsrs	r3, r3, #16
 80038b6:	f003 0303 	and.w	r3, r3, #3
 80038ba:	3301      	adds	r3, #1
 80038bc:	005b      	lsls	r3, r3, #1
 80038be:	617b      	str	r3, [r7, #20]
      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsair = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80038c0:	4b9a      	ldr	r3, [pc, #616]	; (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80038c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038c6:	0f1b      	lsrs	r3, r3, #28
 80038c8:	f003 0307 	and.w	r3, r3, #7
 80038cc:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, pllsair);
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	691b      	ldr	r3, [r3, #16]
 80038d2:	019a      	lsls	r2, r3, #6
 80038d4:	697b      	ldr	r3, [r7, #20]
 80038d6:	085b      	lsrs	r3, r3, #1
 80038d8:	3b01      	subs	r3, #1
 80038da:	041b      	lsls	r3, r3, #16
 80038dc:	431a      	orrs	r2, r3
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	699b      	ldr	r3, [r3, #24]
 80038e2:	061b      	lsls	r3, r3, #24
 80038e4:	431a      	orrs	r2, r3
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	071b      	lsls	r3, r3, #28
 80038ea:	4990      	ldr	r1, [pc, #576]	; (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80038ec:	4313      	orrs	r3, r2
 80038ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80038f2:	4b8e      	ldr	r3, [pc, #568]	; (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80038f4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80038f8:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003900:	3b01      	subs	r3, #1
 8003902:	021b      	lsls	r3, r3, #8
 8003904:	4989      	ldr	r1, [pc, #548]	; (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8003906:	4313      	orrs	r3, r2
 8003908:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	f003 0308 	and.w	r3, r3, #8
 8003914:	2b00      	cmp	r3, #0
 8003916:	d02c      	beq.n	8003972 <HAL_RCCEx_PeriphCLKConfig+0x2ae>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 8003918:	4b84      	ldr	r3, [pc, #528]	; (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800391a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800391e:	0c1b      	lsrs	r3, r3, #16
 8003920:	f003 0303 	and.w	r3, r3, #3
 8003924:	3301      	adds	r3, #1
 8003926:	005b      	lsls	r3, r3, #1
 8003928:	617b      	str	r3, [r7, #20]
      /* Read PLLSAIQ value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800392a:	4b80      	ldr	r3, [pc, #512]	; (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800392c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003930:	0e1b      	lsrs	r3, r3, #24
 8003932:	f003 030f 	and.w	r3, r3, #15
 8003936:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, pllsaip, pllsaiq, PeriphClkInit->PLLSAI.PLLSAIR);
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	691b      	ldr	r3, [r3, #16]
 800393c:	019a      	lsls	r2, r3, #6
 800393e:	697b      	ldr	r3, [r7, #20]
 8003940:	085b      	lsrs	r3, r3, #1
 8003942:	3b01      	subs	r3, #1
 8003944:	041b      	lsls	r3, r3, #16
 8003946:	431a      	orrs	r2, r3
 8003948:	693b      	ldr	r3, [r7, #16]
 800394a:	061b      	lsls	r3, r3, #24
 800394c:	431a      	orrs	r2, r3
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	69db      	ldr	r3, [r3, #28]
 8003952:	071b      	lsls	r3, r3, #28
 8003954:	4975      	ldr	r1, [pc, #468]	; (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8003956:	4313      	orrs	r3, r2
 8003958:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800395c:	4b73      	ldr	r3, [pc, #460]	; (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800395e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003962:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800396a:	4970      	ldr	r1, [pc, #448]	; (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800396c:	4313      	orrs	r3, r2
 800396e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- CLK48 configuration ------------------------*/
    /* Configure the PLLSAI when it is used as clock source for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == (RCC_PERIPHCLK_CLK48)) &&
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800397a:	2b00      	cmp	r3, #0
 800397c:	d024      	beq.n	80039c8 <HAL_RCCEx_PeriphCLKConfig+0x304>
       (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == (RCC_PERIPHCLK_CLK48)) &&
 8003982:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003986:	d11f      	bne.n	80039c8 <HAL_RCCEx_PeriphCLKConfig+0x304>
    {
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));

      /* Read PLLSAIQ value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003988:	4b68      	ldr	r3, [pc, #416]	; (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800398a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800398e:	0e1b      	lsrs	r3, r3, #24
 8003990:	f003 030f 	and.w	r3, r3, #15
 8003994:	613b      	str	r3, [r7, #16]
      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsair = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003996:	4b65      	ldr	r3, [pc, #404]	; (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8003998:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800399c:	0f1b      	lsrs	r3, r3, #28
 800399e:	f003 0307 	and.w	r3, r3, #7
 80039a2:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* CLK48_CLK(first level) = PLLSAI_VCO Output/PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, pllsair);
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	691b      	ldr	r3, [r3, #16]
 80039a8:	019a      	lsls	r2, r3, #6
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	695b      	ldr	r3, [r3, #20]
 80039ae:	085b      	lsrs	r3, r3, #1
 80039b0:	3b01      	subs	r3, #1
 80039b2:	041b      	lsls	r3, r3, #16
 80039b4:	431a      	orrs	r2, r3
 80039b6:	693b      	ldr	r3, [r7, #16]
 80039b8:	061b      	lsls	r3, r3, #24
 80039ba:	431a      	orrs	r2, r3
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	071b      	lsls	r3, r3, #28
 80039c0:	495a      	ldr	r1, [pc, #360]	; (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80039c2:	4313      	orrs	r3, r2
 80039c4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80039c8:	4b59      	ldr	r3, [pc, #356]	; (8003b30 <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 80039ca:	2201      	movs	r2, #1
 80039cc:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80039ce:	f7fd fbd9 	bl	8001184 <HAL_GetTick>
 80039d2:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80039d4:	e008      	b.n	80039e8 <HAL_RCCEx_PeriphCLKConfig+0x324>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 80039d6:	f7fd fbd5 	bl	8001184 <HAL_GetTick>
 80039da:	4602      	mov	r2, r0
 80039dc:	69fb      	ldr	r3, [r7, #28]
 80039de:	1ad3      	subs	r3, r2, r3
 80039e0:	2b02      	cmp	r3, #2
 80039e2:	d901      	bls.n	80039e8 <HAL_RCCEx_PeriphCLKConfig+0x324>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80039e4:	2303      	movs	r3, #3
 80039e6:	e09c      	b.n	8003b22 <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80039e8:	4b50      	ldr	r3, [pc, #320]	; (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80039f0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80039f4:	d1ef      	bne.n	80039d6 <HAL_RCCEx_PeriphCLKConfig+0x312>
  }

  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	f003 0320 	and.w	r3, r3, #32
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	f000 8083 	beq.w	8003b0a <HAL_RCCEx_PeriphCLKConfig+0x446>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003a04:	2300      	movs	r3, #0
 8003a06:	60bb      	str	r3, [r7, #8]
 8003a08:	4b48      	ldr	r3, [pc, #288]	; (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8003a0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a0c:	4a47      	ldr	r2, [pc, #284]	; (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8003a0e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a12:	6413      	str	r3, [r2, #64]	; 0x40
 8003a14:	4b45      	ldr	r3, [pc, #276]	; (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8003a16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a18:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a1c:	60bb      	str	r3, [r7, #8]
 8003a1e:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8003a20:	4b44      	ldr	r3, [pc, #272]	; (8003b34 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	4a43      	ldr	r2, [pc, #268]	; (8003b34 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8003a26:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a2a:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003a2c:	f7fd fbaa 	bl	8001184 <HAL_GetTick>
 8003a30:	61f8      	str	r0, [r7, #28]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003a32:	e008      	b.n	8003a46 <HAL_RCCEx_PeriphCLKConfig+0x382>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8003a34:	f7fd fba6 	bl	8001184 <HAL_GetTick>
 8003a38:	4602      	mov	r2, r0
 8003a3a:	69fb      	ldr	r3, [r7, #28]
 8003a3c:	1ad3      	subs	r3, r2, r3
 8003a3e:	2b02      	cmp	r3, #2
 8003a40:	d901      	bls.n	8003a46 <HAL_RCCEx_PeriphCLKConfig+0x382>
      {
        return HAL_TIMEOUT;
 8003a42:	2303      	movs	r3, #3
 8003a44:	e06d      	b.n	8003b22 <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003a46:	4b3b      	ldr	r3, [pc, #236]	; (8003b34 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d0f0      	beq.n	8003a34 <HAL_RCCEx_PeriphCLKConfig+0x370>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003a52:	4b36      	ldr	r3, [pc, #216]	; (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8003a54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a56:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a5a:	61bb      	str	r3, [r7, #24]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003a5c:	69bb      	ldr	r3, [r7, #24]
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d02f      	beq.n	8003ac2 <HAL_RCCEx_PeriphCLKConfig+0x3fe>
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a66:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a6a:	69ba      	ldr	r2, [r7, #24]
 8003a6c:	429a      	cmp	r2, r3
 8003a6e:	d028      	beq.n	8003ac2 <HAL_RCCEx_PeriphCLKConfig+0x3fe>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003a70:	4b2e      	ldr	r3, [pc, #184]	; (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8003a72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a74:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a78:	61bb      	str	r3, [r7, #24]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003a7a:	4b2f      	ldr	r3, [pc, #188]	; (8003b38 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8003a7c:	2201      	movs	r2, #1
 8003a7e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003a80:	4b2d      	ldr	r3, [pc, #180]	; (8003b38 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8003a82:	2200      	movs	r2, #0
 8003a84:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8003a86:	4a29      	ldr	r2, [pc, #164]	; (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8003a88:	69bb      	ldr	r3, [r7, #24]
 8003a8a:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003a8c:	4b27      	ldr	r3, [pc, #156]	; (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8003a8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a90:	f003 0301 	and.w	r3, r3, #1
 8003a94:	2b01      	cmp	r3, #1
 8003a96:	d114      	bne.n	8003ac2 <HAL_RCCEx_PeriphCLKConfig+0x3fe>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8003a98:	f7fd fb74 	bl	8001184 <HAL_GetTick>
 8003a9c:	61f8      	str	r0, [r7, #28]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a9e:	e00a      	b.n	8003ab6 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003aa0:	f7fd fb70 	bl	8001184 <HAL_GetTick>
 8003aa4:	4602      	mov	r2, r0
 8003aa6:	69fb      	ldr	r3, [r7, #28]
 8003aa8:	1ad3      	subs	r3, r2, r3
 8003aaa:	f241 3288 	movw	r2, #5000	; 0x1388
 8003aae:	4293      	cmp	r3, r2
 8003ab0:	d901      	bls.n	8003ab6 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
          {
            return HAL_TIMEOUT;
 8003ab2:	2303      	movs	r3, #3
 8003ab4:	e035      	b.n	8003b22 <HAL_RCCEx_PeriphCLKConfig+0x45e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ab6:	4b1d      	ldr	r3, [pc, #116]	; (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8003ab8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003aba:	f003 0302 	and.w	r3, r3, #2
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d0ee      	beq.n	8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ac6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003aca:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003ace:	d10d      	bne.n	8003aec <HAL_RCCEx_PeriphCLKConfig+0x428>
 8003ad0:	4b16      	ldr	r3, [pc, #88]	; (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8003ad2:	689b      	ldr	r3, [r3, #8]
 8003ad4:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003adc:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8003ae0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003ae4:	4911      	ldr	r1, [pc, #68]	; (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8003ae6:	4313      	orrs	r3, r2
 8003ae8:	608b      	str	r3, [r1, #8]
 8003aea:	e005      	b.n	8003af8 <HAL_RCCEx_PeriphCLKConfig+0x434>
 8003aec:	4b0f      	ldr	r3, [pc, #60]	; (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8003aee:	689b      	ldr	r3, [r3, #8]
 8003af0:	4a0e      	ldr	r2, [pc, #56]	; (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8003af2:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003af6:	6093      	str	r3, [r2, #8]
 8003af8:	4b0c      	ldr	r3, [pc, #48]	; (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8003afa:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b00:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b04:	4909      	ldr	r1, [pc, #36]	; (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8003b06:	4313      	orrs	r3, r2
 8003b08:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	f003 0310 	and.w	r3, r3, #16
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d004      	beq.n	8003b20 <HAL_RCCEx_PeriphCLKConfig+0x45c>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 8003b1c:	4b07      	ldr	r3, [pc, #28]	; (8003b3c <HAL_RCCEx_PeriphCLKConfig+0x478>)
 8003b1e:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 8003b20:	2300      	movs	r3, #0
}
 8003b22:	4618      	mov	r0, r3
 8003b24:	3720      	adds	r7, #32
 8003b26:	46bd      	mov	sp, r7
 8003b28:	bd80      	pop	{r7, pc}
 8003b2a:	bf00      	nop
 8003b2c:	40023800 	.word	0x40023800
 8003b30:	42470070 	.word	0x42470070
 8003b34:	40007000 	.word	0x40007000
 8003b38:	42470e40 	.word	0x42470e40
 8003b3c:	424711e0 	.word	0x424711e0

08003b40 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003b40:	b580      	push	{r7, lr}
 8003b42:	b086      	sub	sp, #24
 8003b44:	af00      	add	r7, sp, #0
 8003b46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d101      	bne.n	8003b52 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003b4e:	2301      	movs	r3, #1
 8003b50:	e270      	b.n	8004034 <HAL_RCC_OscConfig+0x4f4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	f003 0301 	and.w	r3, r3, #1
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d075      	beq.n	8003c4a <HAL_RCC_OscConfig+0x10a>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003b5e:	4ba3      	ldr	r3, [pc, #652]	; (8003dec <HAL_RCC_OscConfig+0x2ac>)
 8003b60:	689b      	ldr	r3, [r3, #8]
 8003b62:	f003 030c 	and.w	r3, r3, #12
 8003b66:	2b04      	cmp	r3, #4
 8003b68:	d00c      	beq.n	8003b84 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003b6a:	4ba0      	ldr	r3, [pc, #640]	; (8003dec <HAL_RCC_OscConfig+0x2ac>)
 8003b6c:	689b      	ldr	r3, [r3, #8]
 8003b6e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003b72:	2b08      	cmp	r3, #8
 8003b74:	d112      	bne.n	8003b9c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003b76:	4b9d      	ldr	r3, [pc, #628]	; (8003dec <HAL_RCC_OscConfig+0x2ac>)
 8003b78:	685b      	ldr	r3, [r3, #4]
 8003b7a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003b7e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003b82:	d10b      	bne.n	8003b9c <HAL_RCC_OscConfig+0x5c>
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b84:	4b99      	ldr	r3, [pc, #612]	; (8003dec <HAL_RCC_OscConfig+0x2ac>)
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d05b      	beq.n	8003c48 <HAL_RCC_OscConfig+0x108>
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	685b      	ldr	r3, [r3, #4]
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d157      	bne.n	8003c48 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003b98:	2301      	movs	r3, #1
 8003b9a:	e24b      	b.n	8004034 <HAL_RCC_OscConfig+0x4f4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	685b      	ldr	r3, [r3, #4]
 8003ba0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ba4:	d106      	bne.n	8003bb4 <HAL_RCC_OscConfig+0x74>
 8003ba6:	4b91      	ldr	r3, [pc, #580]	; (8003dec <HAL_RCC_OscConfig+0x2ac>)
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	4a90      	ldr	r2, [pc, #576]	; (8003dec <HAL_RCC_OscConfig+0x2ac>)
 8003bac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003bb0:	6013      	str	r3, [r2, #0]
 8003bb2:	e01d      	b.n	8003bf0 <HAL_RCC_OscConfig+0xb0>
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	685b      	ldr	r3, [r3, #4]
 8003bb8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003bbc:	d10c      	bne.n	8003bd8 <HAL_RCC_OscConfig+0x98>
 8003bbe:	4b8b      	ldr	r3, [pc, #556]	; (8003dec <HAL_RCC_OscConfig+0x2ac>)
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	4a8a      	ldr	r2, [pc, #552]	; (8003dec <HAL_RCC_OscConfig+0x2ac>)
 8003bc4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003bc8:	6013      	str	r3, [r2, #0]
 8003bca:	4b88      	ldr	r3, [pc, #544]	; (8003dec <HAL_RCC_OscConfig+0x2ac>)
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	4a87      	ldr	r2, [pc, #540]	; (8003dec <HAL_RCC_OscConfig+0x2ac>)
 8003bd0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003bd4:	6013      	str	r3, [r2, #0]
 8003bd6:	e00b      	b.n	8003bf0 <HAL_RCC_OscConfig+0xb0>
 8003bd8:	4b84      	ldr	r3, [pc, #528]	; (8003dec <HAL_RCC_OscConfig+0x2ac>)
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	4a83      	ldr	r2, [pc, #524]	; (8003dec <HAL_RCC_OscConfig+0x2ac>)
 8003bde:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003be2:	6013      	str	r3, [r2, #0]
 8003be4:	4b81      	ldr	r3, [pc, #516]	; (8003dec <HAL_RCC_OscConfig+0x2ac>)
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	4a80      	ldr	r2, [pc, #512]	; (8003dec <HAL_RCC_OscConfig+0x2ac>)
 8003bea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003bee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	685b      	ldr	r3, [r3, #4]
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d013      	beq.n	8003c20 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bf8:	f7fd fac4 	bl	8001184 <HAL_GetTick>
 8003bfc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003bfe:	e008      	b.n	8003c12 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003c00:	f7fd fac0 	bl	8001184 <HAL_GetTick>
 8003c04:	4602      	mov	r2, r0
 8003c06:	693b      	ldr	r3, [r7, #16]
 8003c08:	1ad3      	subs	r3, r2, r3
 8003c0a:	2b64      	cmp	r3, #100	; 0x64
 8003c0c:	d901      	bls.n	8003c12 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003c0e:	2303      	movs	r3, #3
 8003c10:	e210      	b.n	8004034 <HAL_RCC_OscConfig+0x4f4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c12:	4b76      	ldr	r3, [pc, #472]	; (8003dec <HAL_RCC_OscConfig+0x2ac>)
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d0f0      	beq.n	8003c00 <HAL_RCC_OscConfig+0xc0>
 8003c1e:	e014      	b.n	8003c4a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c20:	f7fd fab0 	bl	8001184 <HAL_GetTick>
 8003c24:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003c26:	e008      	b.n	8003c3a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003c28:	f7fd faac 	bl	8001184 <HAL_GetTick>
 8003c2c:	4602      	mov	r2, r0
 8003c2e:	693b      	ldr	r3, [r7, #16]
 8003c30:	1ad3      	subs	r3, r2, r3
 8003c32:	2b64      	cmp	r3, #100	; 0x64
 8003c34:	d901      	bls.n	8003c3a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003c36:	2303      	movs	r3, #3
 8003c38:	e1fc      	b.n	8004034 <HAL_RCC_OscConfig+0x4f4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003c3a:	4b6c      	ldr	r3, [pc, #432]	; (8003dec <HAL_RCC_OscConfig+0x2ac>)
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d1f0      	bne.n	8003c28 <HAL_RCC_OscConfig+0xe8>
 8003c46:	e000      	b.n	8003c4a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c48:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	f003 0302 	and.w	r3, r3, #2
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d063      	beq.n	8003d1e <HAL_RCC_OscConfig+0x1de>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003c56:	4b65      	ldr	r3, [pc, #404]	; (8003dec <HAL_RCC_OscConfig+0x2ac>)
 8003c58:	689b      	ldr	r3, [r3, #8]
 8003c5a:	f003 030c 	and.w	r3, r3, #12
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d00b      	beq.n	8003c7a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003c62:	4b62      	ldr	r3, [pc, #392]	; (8003dec <HAL_RCC_OscConfig+0x2ac>)
 8003c64:	689b      	ldr	r3, [r3, #8]
 8003c66:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003c6a:	2b08      	cmp	r3, #8
 8003c6c:	d11c      	bne.n	8003ca8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003c6e:	4b5f      	ldr	r3, [pc, #380]	; (8003dec <HAL_RCC_OscConfig+0x2ac>)
 8003c70:	685b      	ldr	r3, [r3, #4]
 8003c72:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d116      	bne.n	8003ca8 <HAL_RCC_OscConfig+0x168>
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003c7a:	4b5c      	ldr	r3, [pc, #368]	; (8003dec <HAL_RCC_OscConfig+0x2ac>)
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	f003 0302 	and.w	r3, r3, #2
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d005      	beq.n	8003c92 <HAL_RCC_OscConfig+0x152>
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	68db      	ldr	r3, [r3, #12]
 8003c8a:	2b01      	cmp	r3, #1
 8003c8c:	d001      	beq.n	8003c92 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003c8e:	2301      	movs	r3, #1
 8003c90:	e1d0      	b.n	8004034 <HAL_RCC_OscConfig+0x4f4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c92:	4b56      	ldr	r3, [pc, #344]	; (8003dec <HAL_RCC_OscConfig+0x2ac>)
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	691b      	ldr	r3, [r3, #16]
 8003c9e:	00db      	lsls	r3, r3, #3
 8003ca0:	4952      	ldr	r1, [pc, #328]	; (8003dec <HAL_RCC_OscConfig+0x2ac>)
 8003ca2:	4313      	orrs	r3, r2
 8003ca4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003ca6:	e03a      	b.n	8003d1e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	68db      	ldr	r3, [r3, #12]
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d020      	beq.n	8003cf2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003cb0:	4b4f      	ldr	r3, [pc, #316]	; (8003df0 <HAL_RCC_OscConfig+0x2b0>)
 8003cb2:	2201      	movs	r2, #1
 8003cb4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cb6:	f7fd fa65 	bl	8001184 <HAL_GetTick>
 8003cba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003cbc:	e008      	b.n	8003cd0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003cbe:	f7fd fa61 	bl	8001184 <HAL_GetTick>
 8003cc2:	4602      	mov	r2, r0
 8003cc4:	693b      	ldr	r3, [r7, #16]
 8003cc6:	1ad3      	subs	r3, r2, r3
 8003cc8:	2b02      	cmp	r3, #2
 8003cca:	d901      	bls.n	8003cd0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003ccc:	2303      	movs	r3, #3
 8003cce:	e1b1      	b.n	8004034 <HAL_RCC_OscConfig+0x4f4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003cd0:	4b46      	ldr	r3, [pc, #280]	; (8003dec <HAL_RCC_OscConfig+0x2ac>)
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	f003 0302 	and.w	r3, r3, #2
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d0f0      	beq.n	8003cbe <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003cdc:	4b43      	ldr	r3, [pc, #268]	; (8003dec <HAL_RCC_OscConfig+0x2ac>)
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	691b      	ldr	r3, [r3, #16]
 8003ce8:	00db      	lsls	r3, r3, #3
 8003cea:	4940      	ldr	r1, [pc, #256]	; (8003dec <HAL_RCC_OscConfig+0x2ac>)
 8003cec:	4313      	orrs	r3, r2
 8003cee:	600b      	str	r3, [r1, #0]
 8003cf0:	e015      	b.n	8003d1e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003cf2:	4b3f      	ldr	r3, [pc, #252]	; (8003df0 <HAL_RCC_OscConfig+0x2b0>)
 8003cf4:	2200      	movs	r2, #0
 8003cf6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cf8:	f7fd fa44 	bl	8001184 <HAL_GetTick>
 8003cfc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003cfe:	e008      	b.n	8003d12 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003d00:	f7fd fa40 	bl	8001184 <HAL_GetTick>
 8003d04:	4602      	mov	r2, r0
 8003d06:	693b      	ldr	r3, [r7, #16]
 8003d08:	1ad3      	subs	r3, r2, r3
 8003d0a:	2b02      	cmp	r3, #2
 8003d0c:	d901      	bls.n	8003d12 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003d0e:	2303      	movs	r3, #3
 8003d10:	e190      	b.n	8004034 <HAL_RCC_OscConfig+0x4f4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003d12:	4b36      	ldr	r3, [pc, #216]	; (8003dec <HAL_RCC_OscConfig+0x2ac>)
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	f003 0302 	and.w	r3, r3, #2
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d1f0      	bne.n	8003d00 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	f003 0308 	and.w	r3, r3, #8
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d030      	beq.n	8003d8c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	695b      	ldr	r3, [r3, #20]
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d016      	beq.n	8003d60 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003d32:	4b30      	ldr	r3, [pc, #192]	; (8003df4 <HAL_RCC_OscConfig+0x2b4>)
 8003d34:	2201      	movs	r2, #1
 8003d36:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d38:	f7fd fa24 	bl	8001184 <HAL_GetTick>
 8003d3c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003d3e:	e008      	b.n	8003d52 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003d40:	f7fd fa20 	bl	8001184 <HAL_GetTick>
 8003d44:	4602      	mov	r2, r0
 8003d46:	693b      	ldr	r3, [r7, #16]
 8003d48:	1ad3      	subs	r3, r2, r3
 8003d4a:	2b02      	cmp	r3, #2
 8003d4c:	d901      	bls.n	8003d52 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003d4e:	2303      	movs	r3, #3
 8003d50:	e170      	b.n	8004034 <HAL_RCC_OscConfig+0x4f4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003d52:	4b26      	ldr	r3, [pc, #152]	; (8003dec <HAL_RCC_OscConfig+0x2ac>)
 8003d54:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d56:	f003 0302 	and.w	r3, r3, #2
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d0f0      	beq.n	8003d40 <HAL_RCC_OscConfig+0x200>
 8003d5e:	e015      	b.n	8003d8c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003d60:	4b24      	ldr	r3, [pc, #144]	; (8003df4 <HAL_RCC_OscConfig+0x2b4>)
 8003d62:	2200      	movs	r2, #0
 8003d64:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d66:	f7fd fa0d 	bl	8001184 <HAL_GetTick>
 8003d6a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003d6c:	e008      	b.n	8003d80 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003d6e:	f7fd fa09 	bl	8001184 <HAL_GetTick>
 8003d72:	4602      	mov	r2, r0
 8003d74:	693b      	ldr	r3, [r7, #16]
 8003d76:	1ad3      	subs	r3, r2, r3
 8003d78:	2b02      	cmp	r3, #2
 8003d7a:	d901      	bls.n	8003d80 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003d7c:	2303      	movs	r3, #3
 8003d7e:	e159      	b.n	8004034 <HAL_RCC_OscConfig+0x4f4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003d80:	4b1a      	ldr	r3, [pc, #104]	; (8003dec <HAL_RCC_OscConfig+0x2ac>)
 8003d82:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d84:	f003 0302 	and.w	r3, r3, #2
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d1f0      	bne.n	8003d6e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	f003 0304 	and.w	r3, r3, #4
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	f000 80a0 	beq.w	8003eda <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003d9a:	2300      	movs	r3, #0
 8003d9c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003d9e:	4b13      	ldr	r3, [pc, #76]	; (8003dec <HAL_RCC_OscConfig+0x2ac>)
 8003da0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003da2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d10f      	bne.n	8003dca <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003daa:	2300      	movs	r3, #0
 8003dac:	60bb      	str	r3, [r7, #8]
 8003dae:	4b0f      	ldr	r3, [pc, #60]	; (8003dec <HAL_RCC_OscConfig+0x2ac>)
 8003db0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003db2:	4a0e      	ldr	r2, [pc, #56]	; (8003dec <HAL_RCC_OscConfig+0x2ac>)
 8003db4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003db8:	6413      	str	r3, [r2, #64]	; 0x40
 8003dba:	4b0c      	ldr	r3, [pc, #48]	; (8003dec <HAL_RCC_OscConfig+0x2ac>)
 8003dbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dbe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003dc2:	60bb      	str	r3, [r7, #8]
 8003dc4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003dc6:	2301      	movs	r3, #1
 8003dc8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003dca:	4b0b      	ldr	r3, [pc, #44]	; (8003df8 <HAL_RCC_OscConfig+0x2b8>)
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d121      	bne.n	8003e1a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003dd6:	4b08      	ldr	r3, [pc, #32]	; (8003df8 <HAL_RCC_OscConfig+0x2b8>)
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	4a07      	ldr	r2, [pc, #28]	; (8003df8 <HAL_RCC_OscConfig+0x2b8>)
 8003ddc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003de0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003de2:	f7fd f9cf 	bl	8001184 <HAL_GetTick>
 8003de6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003de8:	e011      	b.n	8003e0e <HAL_RCC_OscConfig+0x2ce>
 8003dea:	bf00      	nop
 8003dec:	40023800 	.word	0x40023800
 8003df0:	42470000 	.word	0x42470000
 8003df4:	42470e80 	.word	0x42470e80
 8003df8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003dfc:	f7fd f9c2 	bl	8001184 <HAL_GetTick>
 8003e00:	4602      	mov	r2, r0
 8003e02:	693b      	ldr	r3, [r7, #16]
 8003e04:	1ad3      	subs	r3, r2, r3
 8003e06:	2b02      	cmp	r3, #2
 8003e08:	d901      	bls.n	8003e0e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8003e0a:	2303      	movs	r3, #3
 8003e0c:	e112      	b.n	8004034 <HAL_RCC_OscConfig+0x4f4>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e0e:	4b8b      	ldr	r3, [pc, #556]	; (800403c <HAL_RCC_OscConfig+0x4fc>)
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d0f0      	beq.n	8003dfc <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	689b      	ldr	r3, [r3, #8]
 8003e1e:	2b01      	cmp	r3, #1
 8003e20:	d106      	bne.n	8003e30 <HAL_RCC_OscConfig+0x2f0>
 8003e22:	4b87      	ldr	r3, [pc, #540]	; (8004040 <HAL_RCC_OscConfig+0x500>)
 8003e24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e26:	4a86      	ldr	r2, [pc, #536]	; (8004040 <HAL_RCC_OscConfig+0x500>)
 8003e28:	f043 0301 	orr.w	r3, r3, #1
 8003e2c:	6713      	str	r3, [r2, #112]	; 0x70
 8003e2e:	e01c      	b.n	8003e6a <HAL_RCC_OscConfig+0x32a>
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	689b      	ldr	r3, [r3, #8]
 8003e34:	2b05      	cmp	r3, #5
 8003e36:	d10c      	bne.n	8003e52 <HAL_RCC_OscConfig+0x312>
 8003e38:	4b81      	ldr	r3, [pc, #516]	; (8004040 <HAL_RCC_OscConfig+0x500>)
 8003e3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e3c:	4a80      	ldr	r2, [pc, #512]	; (8004040 <HAL_RCC_OscConfig+0x500>)
 8003e3e:	f043 0304 	orr.w	r3, r3, #4
 8003e42:	6713      	str	r3, [r2, #112]	; 0x70
 8003e44:	4b7e      	ldr	r3, [pc, #504]	; (8004040 <HAL_RCC_OscConfig+0x500>)
 8003e46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e48:	4a7d      	ldr	r2, [pc, #500]	; (8004040 <HAL_RCC_OscConfig+0x500>)
 8003e4a:	f043 0301 	orr.w	r3, r3, #1
 8003e4e:	6713      	str	r3, [r2, #112]	; 0x70
 8003e50:	e00b      	b.n	8003e6a <HAL_RCC_OscConfig+0x32a>
 8003e52:	4b7b      	ldr	r3, [pc, #492]	; (8004040 <HAL_RCC_OscConfig+0x500>)
 8003e54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e56:	4a7a      	ldr	r2, [pc, #488]	; (8004040 <HAL_RCC_OscConfig+0x500>)
 8003e58:	f023 0301 	bic.w	r3, r3, #1
 8003e5c:	6713      	str	r3, [r2, #112]	; 0x70
 8003e5e:	4b78      	ldr	r3, [pc, #480]	; (8004040 <HAL_RCC_OscConfig+0x500>)
 8003e60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e62:	4a77      	ldr	r2, [pc, #476]	; (8004040 <HAL_RCC_OscConfig+0x500>)
 8003e64:	f023 0304 	bic.w	r3, r3, #4
 8003e68:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	689b      	ldr	r3, [r3, #8]
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d015      	beq.n	8003e9e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e72:	f7fd f987 	bl	8001184 <HAL_GetTick>
 8003e76:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e78:	e00a      	b.n	8003e90 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003e7a:	f7fd f983 	bl	8001184 <HAL_GetTick>
 8003e7e:	4602      	mov	r2, r0
 8003e80:	693b      	ldr	r3, [r7, #16]
 8003e82:	1ad3      	subs	r3, r2, r3
 8003e84:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e88:	4293      	cmp	r3, r2
 8003e8a:	d901      	bls.n	8003e90 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003e8c:	2303      	movs	r3, #3
 8003e8e:	e0d1      	b.n	8004034 <HAL_RCC_OscConfig+0x4f4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e90:	4b6b      	ldr	r3, [pc, #428]	; (8004040 <HAL_RCC_OscConfig+0x500>)
 8003e92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e94:	f003 0302 	and.w	r3, r3, #2
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d0ee      	beq.n	8003e7a <HAL_RCC_OscConfig+0x33a>
 8003e9c:	e014      	b.n	8003ec8 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e9e:	f7fd f971 	bl	8001184 <HAL_GetTick>
 8003ea2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003ea4:	e00a      	b.n	8003ebc <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003ea6:	f7fd f96d 	bl	8001184 <HAL_GetTick>
 8003eaa:	4602      	mov	r2, r0
 8003eac:	693b      	ldr	r3, [r7, #16]
 8003eae:	1ad3      	subs	r3, r2, r3
 8003eb0:	f241 3288 	movw	r2, #5000	; 0x1388
 8003eb4:	4293      	cmp	r3, r2
 8003eb6:	d901      	bls.n	8003ebc <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003eb8:	2303      	movs	r3, #3
 8003eba:	e0bb      	b.n	8004034 <HAL_RCC_OscConfig+0x4f4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003ebc:	4b60      	ldr	r3, [pc, #384]	; (8004040 <HAL_RCC_OscConfig+0x500>)
 8003ebe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ec0:	f003 0302 	and.w	r3, r3, #2
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d1ee      	bne.n	8003ea6 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003ec8:	7dfb      	ldrb	r3, [r7, #23]
 8003eca:	2b01      	cmp	r3, #1
 8003ecc:	d105      	bne.n	8003eda <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ece:	4b5c      	ldr	r3, [pc, #368]	; (8004040 <HAL_RCC_OscConfig+0x500>)
 8003ed0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ed2:	4a5b      	ldr	r2, [pc, #364]	; (8004040 <HAL_RCC_OscConfig+0x500>)
 8003ed4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003ed8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	699b      	ldr	r3, [r3, #24]
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	f000 80a7 	beq.w	8004032 <HAL_RCC_OscConfig+0x4f2>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003ee4:	4b56      	ldr	r3, [pc, #344]	; (8004040 <HAL_RCC_OscConfig+0x500>)
 8003ee6:	689b      	ldr	r3, [r3, #8]
 8003ee8:	f003 030c 	and.w	r3, r3, #12
 8003eec:	2b08      	cmp	r3, #8
 8003eee:	d060      	beq.n	8003fb2 <HAL_RCC_OscConfig+0x472>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	699b      	ldr	r3, [r3, #24]
 8003ef4:	2b02      	cmp	r3, #2
 8003ef6:	d145      	bne.n	8003f84 <HAL_RCC_OscConfig+0x444>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ef8:	4b52      	ldr	r3, [pc, #328]	; (8004044 <HAL_RCC_OscConfig+0x504>)
 8003efa:	2200      	movs	r2, #0
 8003efc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003efe:	f7fd f941 	bl	8001184 <HAL_GetTick>
 8003f02:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f04:	e008      	b.n	8003f18 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003f06:	f7fd f93d 	bl	8001184 <HAL_GetTick>
 8003f0a:	4602      	mov	r2, r0
 8003f0c:	693b      	ldr	r3, [r7, #16]
 8003f0e:	1ad3      	subs	r3, r2, r3
 8003f10:	2b02      	cmp	r3, #2
 8003f12:	d901      	bls.n	8003f18 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003f14:	2303      	movs	r3, #3
 8003f16:	e08d      	b.n	8004034 <HAL_RCC_OscConfig+0x4f4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f18:	4b49      	ldr	r3, [pc, #292]	; (8004040 <HAL_RCC_OscConfig+0x500>)
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d1f0      	bne.n	8003f06 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	69da      	ldr	r2, [r3, #28]
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	6a1b      	ldr	r3, [r3, #32]
 8003f2c:	431a      	orrs	r2, r3
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f32:	019b      	lsls	r3, r3, #6
 8003f34:	431a      	orrs	r2, r3
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f3a:	085b      	lsrs	r3, r3, #1
 8003f3c:	3b01      	subs	r3, #1
 8003f3e:	041b      	lsls	r3, r3, #16
 8003f40:	431a      	orrs	r2, r3
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f46:	061b      	lsls	r3, r3, #24
 8003f48:	431a      	orrs	r2, r3
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f4e:	071b      	lsls	r3, r3, #28
 8003f50:	493b      	ldr	r1, [pc, #236]	; (8004040 <HAL_RCC_OscConfig+0x500>)
 8003f52:	4313      	orrs	r3, r2
 8003f54:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003f56:	4b3b      	ldr	r3, [pc, #236]	; (8004044 <HAL_RCC_OscConfig+0x504>)
 8003f58:	2201      	movs	r2, #1
 8003f5a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f5c:	f7fd f912 	bl	8001184 <HAL_GetTick>
 8003f60:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f62:	e008      	b.n	8003f76 <HAL_RCC_OscConfig+0x436>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003f64:	f7fd f90e 	bl	8001184 <HAL_GetTick>
 8003f68:	4602      	mov	r2, r0
 8003f6a:	693b      	ldr	r3, [r7, #16]
 8003f6c:	1ad3      	subs	r3, r2, r3
 8003f6e:	2b02      	cmp	r3, #2
 8003f70:	d901      	bls.n	8003f76 <HAL_RCC_OscConfig+0x436>
          {
            return HAL_TIMEOUT;
 8003f72:	2303      	movs	r3, #3
 8003f74:	e05e      	b.n	8004034 <HAL_RCC_OscConfig+0x4f4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f76:	4b32      	ldr	r3, [pc, #200]	; (8004040 <HAL_RCC_OscConfig+0x500>)
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d0f0      	beq.n	8003f64 <HAL_RCC_OscConfig+0x424>
 8003f82:	e056      	b.n	8004032 <HAL_RCC_OscConfig+0x4f2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f84:	4b2f      	ldr	r3, [pc, #188]	; (8004044 <HAL_RCC_OscConfig+0x504>)
 8003f86:	2200      	movs	r2, #0
 8003f88:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f8a:	f7fd f8fb 	bl	8001184 <HAL_GetTick>
 8003f8e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f90:	e008      	b.n	8003fa4 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003f92:	f7fd f8f7 	bl	8001184 <HAL_GetTick>
 8003f96:	4602      	mov	r2, r0
 8003f98:	693b      	ldr	r3, [r7, #16]
 8003f9a:	1ad3      	subs	r3, r2, r3
 8003f9c:	2b02      	cmp	r3, #2
 8003f9e:	d901      	bls.n	8003fa4 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8003fa0:	2303      	movs	r3, #3
 8003fa2:	e047      	b.n	8004034 <HAL_RCC_OscConfig+0x4f4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003fa4:	4b26      	ldr	r3, [pc, #152]	; (8004040 <HAL_RCC_OscConfig+0x500>)
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d1f0      	bne.n	8003f92 <HAL_RCC_OscConfig+0x452>
 8003fb0:	e03f      	b.n	8004032 <HAL_RCC_OscConfig+0x4f2>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	699b      	ldr	r3, [r3, #24]
 8003fb6:	2b01      	cmp	r3, #1
 8003fb8:	d101      	bne.n	8003fbe <HAL_RCC_OscConfig+0x47e>
      {
        return HAL_ERROR;
 8003fba:	2301      	movs	r3, #1
 8003fbc:	e03a      	b.n	8004034 <HAL_RCC_OscConfig+0x4f4>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003fbe:	4b20      	ldr	r3, [pc, #128]	; (8004040 <HAL_RCC_OscConfig+0x500>)
 8003fc0:	685b      	ldr	r3, [r3, #4]
 8003fc2:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	699b      	ldr	r3, [r3, #24]
 8003fc8:	2b01      	cmp	r3, #1
 8003fca:	d030      	beq.n	800402e <HAL_RCC_OscConfig+0x4ee>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003fd6:	429a      	cmp	r2, r3
 8003fd8:	d129      	bne.n	800402e <HAL_RCC_OscConfig+0x4ee>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003fe4:	429a      	cmp	r2, r3
 8003fe6:	d122      	bne.n	800402e <HAL_RCC_OscConfig+0x4ee>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003fe8:	68fa      	ldr	r2, [r7, #12]
 8003fea:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003fee:	4013      	ands	r3, r2
 8003ff0:	687a      	ldr	r2, [r7, #4]
 8003ff2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003ff4:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003ff6:	4293      	cmp	r3, r2
 8003ff8:	d119      	bne.n	800402e <HAL_RCC_OscConfig+0x4ee>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004004:	085b      	lsrs	r3, r3, #1
 8004006:	3b01      	subs	r3, #1
 8004008:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800400a:	429a      	cmp	r2, r3
 800400c:	d10f      	bne.n	800402e <HAL_RCC_OscConfig+0x4ee>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004018:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800401a:	429a      	cmp	r2, r3
 800401c:	d107      	bne.n	800402e <HAL_RCC_OscConfig+0x4ee>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004028:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800402a:	429a      	cmp	r2, r3
 800402c:	d001      	beq.n	8004032 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 800402e:	2301      	movs	r3, #1
 8004030:	e000      	b.n	8004034 <HAL_RCC_OscConfig+0x4f4>
        }
      }
    }
  }
  return HAL_OK;
 8004032:	2300      	movs	r3, #0
}
 8004034:	4618      	mov	r0, r3
 8004036:	3718      	adds	r7, #24
 8004038:	46bd      	mov	sp, r7
 800403a:	bd80      	pop	{r7, pc}
 800403c:	40007000 	.word	0x40007000
 8004040:	40023800 	.word	0x40023800
 8004044:	42470060 	.word	0x42470060

08004048 <HAL_SRAM_Init>:
  * @param  Timing Pointer to SRAM control timing structure 
  * @param  ExtTiming Pointer to SRAM extended mode timing structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing, FMC_NORSRAM_TimingTypeDef *ExtTiming)
{ 
 8004048:	b580      	push	{r7, lr}
 800404a:	b084      	sub	sp, #16
 800404c:	af00      	add	r7, sp, #0
 800404e:	60f8      	str	r0, [r7, #12]
 8004050:	60b9      	str	r1, [r7, #8]
 8004052:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if(hsram == NULL)
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	2b00      	cmp	r3, #0
 8004058:	d101      	bne.n	800405e <HAL_SRAM_Init+0x16>
  {
     return HAL_ERROR;
 800405a:	2301      	movs	r3, #1
 800405c:	e034      	b.n	80040c8 <HAL_SRAM_Init+0x80>
  }
  
  if(hsram->State == HAL_SRAM_STATE_RESET)
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 8004064:	b2db      	uxtb	r3, r3
 8004066:	2b00      	cmp	r3, #0
 8004068:	d106      	bne.n	8004078 <HAL_SRAM_Init+0x30>
  {  
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	2200      	movs	r2, #0
 800406e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 8004072:	68f8      	ldr	r0, [r7, #12]
 8004074:	f7fc ff92 	bl	8000f9c <HAL_SRAM_MspInit>
#endif
  }
  
  /* Initialize SRAM control Interface */
  FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	681a      	ldr	r2, [r3, #0]
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	3308      	adds	r3, #8
 8004080:	4619      	mov	r1, r3
 8004082:	4610      	mov	r0, r2
 8004084:	f000 ffec 	bl	8005060 <FMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank); 
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	6818      	ldr	r0, [r3, #0]
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	689b      	ldr	r3, [r3, #8]
 8004090:	461a      	mov	r2, r3
 8004092:	68b9      	ldr	r1, [r7, #8]
 8004094:	f001 f854 	bl	8005140 <FMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,  hsram->Init.ExtendedMode);  
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	6858      	ldr	r0, [r3, #4]
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	689a      	ldr	r2, [r3, #8]
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040a4:	6879      	ldr	r1, [r7, #4]
 80040a6:	f001 f89f 	bl	80051e8 <FMC_NORSRAM_Extended_Timing_Init>
  
  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank); 
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	68fa      	ldr	r2, [r7, #12]
 80040b0:	6892      	ldr	r2, [r2, #8]
 80040b2:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	68fa      	ldr	r2, [r7, #12]
 80040bc:	6892      	ldr	r2, [r2, #8]
 80040be:	f041 0101 	orr.w	r1, r1, #1
 80040c2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  
  return HAL_OK;
 80040c6:	2300      	movs	r3, #0
}
 80040c8:	4618      	mov	r0, r3
 80040ca:	3710      	adds	r7, #16
 80040cc:	46bd      	mov	sp, r7
 80040ce:	bd80      	pop	{r7, pc}

080040d0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80040d0:	b580      	push	{r7, lr}
 80040d2:	b082      	sub	sp, #8
 80040d4:	af00      	add	r7, sp, #0
 80040d6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d101      	bne.n	80040e2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80040de:	2301      	movs	r3, #1
 80040e0:	e03f      	b.n	8004162 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80040e8:	b2db      	uxtb	r3, r3
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d106      	bne.n	80040fc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	2200      	movs	r2, #0
 80040f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80040f6:	6878      	ldr	r0, [r7, #4]
 80040f8:	f7fc fe90 	bl	8000e1c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	2224      	movs	r2, #36	; 0x24
 8004100:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	68da      	ldr	r2, [r3, #12]
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004112:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004114:	6878      	ldr	r0, [r7, #4]
 8004116:	f000 fddb 	bl	8004cd0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	691a      	ldr	r2, [r3, #16]
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004128:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	695a      	ldr	r2, [r3, #20]
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004138:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	68da      	ldr	r2, [r3, #12]
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004148:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	2200      	movs	r2, #0
 800414e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	2220      	movs	r2, #32
 8004154:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	2220      	movs	r2, #32
 800415c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004160:	2300      	movs	r3, #0
}
 8004162:	4618      	mov	r0, r3
 8004164:	3708      	adds	r7, #8
 8004166:	46bd      	mov	sp, r7
 8004168:	bd80      	pop	{r7, pc}

0800416a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800416a:	b580      	push	{r7, lr}
 800416c:	b08a      	sub	sp, #40	; 0x28
 800416e:	af02      	add	r7, sp, #8
 8004170:	60f8      	str	r0, [r7, #12]
 8004172:	60b9      	str	r1, [r7, #8]
 8004174:	603b      	str	r3, [r7, #0]
 8004176:	4613      	mov	r3, r2
 8004178:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800417a:	2300      	movs	r3, #0
 800417c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004184:	b2db      	uxtb	r3, r3
 8004186:	2b20      	cmp	r3, #32
 8004188:	d17c      	bne.n	8004284 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800418a:	68bb      	ldr	r3, [r7, #8]
 800418c:	2b00      	cmp	r3, #0
 800418e:	d002      	beq.n	8004196 <HAL_UART_Transmit+0x2c>
 8004190:	88fb      	ldrh	r3, [r7, #6]
 8004192:	2b00      	cmp	r3, #0
 8004194:	d101      	bne.n	800419a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004196:	2301      	movs	r3, #1
 8004198:	e075      	b.n	8004286 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80041a0:	2b01      	cmp	r3, #1
 80041a2:	d101      	bne.n	80041a8 <HAL_UART_Transmit+0x3e>
 80041a4:	2302      	movs	r3, #2
 80041a6:	e06e      	b.n	8004286 <HAL_UART_Transmit+0x11c>
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	2201      	movs	r2, #1
 80041ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	2200      	movs	r2, #0
 80041b4:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	2221      	movs	r2, #33	; 0x21
 80041ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80041be:	f7fc ffe1 	bl	8001184 <HAL_GetTick>
 80041c2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	88fa      	ldrh	r2, [r7, #6]
 80041c8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	88fa      	ldrh	r2, [r7, #6]
 80041ce:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	689b      	ldr	r3, [r3, #8]
 80041d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80041d8:	d108      	bne.n	80041ec <HAL_UART_Transmit+0x82>
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	691b      	ldr	r3, [r3, #16]
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d104      	bne.n	80041ec <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80041e2:	2300      	movs	r3, #0
 80041e4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80041e6:	68bb      	ldr	r3, [r7, #8]
 80041e8:	61bb      	str	r3, [r7, #24]
 80041ea:	e003      	b.n	80041f4 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80041ec:	68bb      	ldr	r3, [r7, #8]
 80041ee:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80041f0:	2300      	movs	r3, #0
 80041f2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	2200      	movs	r2, #0
 80041f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80041fc:	e02a      	b.n	8004254 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80041fe:	683b      	ldr	r3, [r7, #0]
 8004200:	9300      	str	r3, [sp, #0]
 8004202:	697b      	ldr	r3, [r7, #20]
 8004204:	2200      	movs	r2, #0
 8004206:	2180      	movs	r1, #128	; 0x80
 8004208:	68f8      	ldr	r0, [r7, #12]
 800420a:	f000 fb1f 	bl	800484c <UART_WaitOnFlagUntilTimeout>
 800420e:	4603      	mov	r3, r0
 8004210:	2b00      	cmp	r3, #0
 8004212:	d001      	beq.n	8004218 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004214:	2303      	movs	r3, #3
 8004216:	e036      	b.n	8004286 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004218:	69fb      	ldr	r3, [r7, #28]
 800421a:	2b00      	cmp	r3, #0
 800421c:	d10b      	bne.n	8004236 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800421e:	69bb      	ldr	r3, [r7, #24]
 8004220:	881b      	ldrh	r3, [r3, #0]
 8004222:	461a      	mov	r2, r3
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800422c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800422e:	69bb      	ldr	r3, [r7, #24]
 8004230:	3302      	adds	r3, #2
 8004232:	61bb      	str	r3, [r7, #24]
 8004234:	e007      	b.n	8004246 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004236:	69fb      	ldr	r3, [r7, #28]
 8004238:	781a      	ldrb	r2, [r3, #0]
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004240:	69fb      	ldr	r3, [r7, #28]
 8004242:	3301      	adds	r3, #1
 8004244:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800424a:	b29b      	uxth	r3, r3
 800424c:	3b01      	subs	r3, #1
 800424e:	b29a      	uxth	r2, r3
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004258:	b29b      	uxth	r3, r3
 800425a:	2b00      	cmp	r3, #0
 800425c:	d1cf      	bne.n	80041fe <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800425e:	683b      	ldr	r3, [r7, #0]
 8004260:	9300      	str	r3, [sp, #0]
 8004262:	697b      	ldr	r3, [r7, #20]
 8004264:	2200      	movs	r2, #0
 8004266:	2140      	movs	r1, #64	; 0x40
 8004268:	68f8      	ldr	r0, [r7, #12]
 800426a:	f000 faef 	bl	800484c <UART_WaitOnFlagUntilTimeout>
 800426e:	4603      	mov	r3, r0
 8004270:	2b00      	cmp	r3, #0
 8004272:	d001      	beq.n	8004278 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004274:	2303      	movs	r3, #3
 8004276:	e006      	b.n	8004286 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	2220      	movs	r2, #32
 800427c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004280:	2300      	movs	r3, #0
 8004282:	e000      	b.n	8004286 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004284:	2302      	movs	r3, #2
  }
}
 8004286:	4618      	mov	r0, r3
 8004288:	3720      	adds	r7, #32
 800428a:	46bd      	mov	sp, r7
 800428c:	bd80      	pop	{r7, pc}

0800428e <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800428e:	b580      	push	{r7, lr}
 8004290:	b084      	sub	sp, #16
 8004292:	af00      	add	r7, sp, #0
 8004294:	60f8      	str	r0, [r7, #12]
 8004296:	60b9      	str	r1, [r7, #8]
 8004298:	4613      	mov	r3, r2
 800429a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80042a2:	b2db      	uxtb	r3, r3
 80042a4:	2b20      	cmp	r3, #32
 80042a6:	d11d      	bne.n	80042e4 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80042a8:	68bb      	ldr	r3, [r7, #8]
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d002      	beq.n	80042b4 <HAL_UART_Receive_IT+0x26>
 80042ae:	88fb      	ldrh	r3, [r7, #6]
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d101      	bne.n	80042b8 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80042b4:	2301      	movs	r3, #1
 80042b6:	e016      	b.n	80042e6 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80042be:	2b01      	cmp	r3, #1
 80042c0:	d101      	bne.n	80042c6 <HAL_UART_Receive_IT+0x38>
 80042c2:	2302      	movs	r3, #2
 80042c4:	e00f      	b.n	80042e6 <HAL_UART_Receive_IT+0x58>
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	2201      	movs	r2, #1
 80042ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	2200      	movs	r2, #0
 80042d2:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80042d4:	88fb      	ldrh	r3, [r7, #6]
 80042d6:	461a      	mov	r2, r3
 80042d8:	68b9      	ldr	r1, [r7, #8]
 80042da:	68f8      	ldr	r0, [r7, #12]
 80042dc:	f000 fb24 	bl	8004928 <UART_Start_Receive_IT>
 80042e0:	4603      	mov	r3, r0
 80042e2:	e000      	b.n	80042e6 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 80042e4:	2302      	movs	r3, #2
  }
}
 80042e6:	4618      	mov	r0, r3
 80042e8:	3710      	adds	r7, #16
 80042ea:	46bd      	mov	sp, r7
 80042ec:	bd80      	pop	{r7, pc}
	...

080042f0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80042f0:	b580      	push	{r7, lr}
 80042f2:	b0ba      	sub	sp, #232	; 0xe8
 80042f4:	af00      	add	r7, sp, #0
 80042f6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	68db      	ldr	r3, [r3, #12]
 8004308:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	695b      	ldr	r3, [r3, #20]
 8004312:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8004316:	2300      	movs	r3, #0
 8004318:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800431c:	2300      	movs	r3, #0
 800431e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004322:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004326:	f003 030f 	and.w	r3, r3, #15
 800432a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800432e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004332:	2b00      	cmp	r3, #0
 8004334:	d10f      	bne.n	8004356 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004336:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800433a:	f003 0320 	and.w	r3, r3, #32
 800433e:	2b00      	cmp	r3, #0
 8004340:	d009      	beq.n	8004356 <HAL_UART_IRQHandler+0x66>
 8004342:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004346:	f003 0320 	and.w	r3, r3, #32
 800434a:	2b00      	cmp	r3, #0
 800434c:	d003      	beq.n	8004356 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800434e:	6878      	ldr	r0, [r7, #4]
 8004350:	f000 fc03 	bl	8004b5a <UART_Receive_IT>
      return;
 8004354:	e256      	b.n	8004804 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004356:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800435a:	2b00      	cmp	r3, #0
 800435c:	f000 80de 	beq.w	800451c <HAL_UART_IRQHandler+0x22c>
 8004360:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004364:	f003 0301 	and.w	r3, r3, #1
 8004368:	2b00      	cmp	r3, #0
 800436a:	d106      	bne.n	800437a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800436c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004370:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004374:	2b00      	cmp	r3, #0
 8004376:	f000 80d1 	beq.w	800451c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800437a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800437e:	f003 0301 	and.w	r3, r3, #1
 8004382:	2b00      	cmp	r3, #0
 8004384:	d00b      	beq.n	800439e <HAL_UART_IRQHandler+0xae>
 8004386:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800438a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800438e:	2b00      	cmp	r3, #0
 8004390:	d005      	beq.n	800439e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004396:	f043 0201 	orr.w	r2, r3, #1
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800439e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80043a2:	f003 0304 	and.w	r3, r3, #4
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d00b      	beq.n	80043c2 <HAL_UART_IRQHandler+0xd2>
 80043aa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80043ae:	f003 0301 	and.w	r3, r3, #1
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d005      	beq.n	80043c2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043ba:	f043 0202 	orr.w	r2, r3, #2
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80043c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80043c6:	f003 0302 	and.w	r3, r3, #2
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d00b      	beq.n	80043e6 <HAL_UART_IRQHandler+0xf6>
 80043ce:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80043d2:	f003 0301 	and.w	r3, r3, #1
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d005      	beq.n	80043e6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043de:	f043 0204 	orr.w	r2, r3, #4
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80043e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80043ea:	f003 0308 	and.w	r3, r3, #8
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d011      	beq.n	8004416 <HAL_UART_IRQHandler+0x126>
 80043f2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80043f6:	f003 0320 	and.w	r3, r3, #32
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d105      	bne.n	800440a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80043fe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004402:	f003 0301 	and.w	r3, r3, #1
 8004406:	2b00      	cmp	r3, #0
 8004408:	d005      	beq.n	8004416 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800440e:	f043 0208 	orr.w	r2, r3, #8
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800441a:	2b00      	cmp	r3, #0
 800441c:	f000 81ed 	beq.w	80047fa <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004420:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004424:	f003 0320 	and.w	r3, r3, #32
 8004428:	2b00      	cmp	r3, #0
 800442a:	d008      	beq.n	800443e <HAL_UART_IRQHandler+0x14e>
 800442c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004430:	f003 0320 	and.w	r3, r3, #32
 8004434:	2b00      	cmp	r3, #0
 8004436:	d002      	beq.n	800443e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004438:	6878      	ldr	r0, [r7, #4]
 800443a:	f000 fb8e 	bl	8004b5a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	695b      	ldr	r3, [r3, #20]
 8004444:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004448:	2b40      	cmp	r3, #64	; 0x40
 800444a:	bf0c      	ite	eq
 800444c:	2301      	moveq	r3, #1
 800444e:	2300      	movne	r3, #0
 8004450:	b2db      	uxtb	r3, r3
 8004452:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800445a:	f003 0308 	and.w	r3, r3, #8
 800445e:	2b00      	cmp	r3, #0
 8004460:	d103      	bne.n	800446a <HAL_UART_IRQHandler+0x17a>
 8004462:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004466:	2b00      	cmp	r3, #0
 8004468:	d04f      	beq.n	800450a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800446a:	6878      	ldr	r0, [r7, #4]
 800446c:	f000 fa96 	bl	800499c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	695b      	ldr	r3, [r3, #20]
 8004476:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800447a:	2b40      	cmp	r3, #64	; 0x40
 800447c:	d141      	bne.n	8004502 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	3314      	adds	r3, #20
 8004484:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004488:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800448c:	e853 3f00 	ldrex	r3, [r3]
 8004490:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004494:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004498:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800449c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	3314      	adds	r3, #20
 80044a6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80044aa:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80044ae:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044b2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80044b6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80044ba:	e841 2300 	strex	r3, r2, [r1]
 80044be:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80044c2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d1d9      	bne.n	800447e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d013      	beq.n	80044fa <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044d6:	4a7d      	ldr	r2, [pc, #500]	; (80046cc <HAL_UART_IRQHandler+0x3dc>)
 80044d8:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044de:	4618      	mov	r0, r3
 80044e0:	f7fd f801 	bl	80014e6 <HAL_DMA_Abort_IT>
 80044e4:	4603      	mov	r3, r0
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d016      	beq.n	8004518 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80044f0:	687a      	ldr	r2, [r7, #4]
 80044f2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80044f4:	4610      	mov	r0, r2
 80044f6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80044f8:	e00e      	b.n	8004518 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80044fa:	6878      	ldr	r0, [r7, #4]
 80044fc:	f000 f990 	bl	8004820 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004500:	e00a      	b.n	8004518 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004502:	6878      	ldr	r0, [r7, #4]
 8004504:	f000 f98c 	bl	8004820 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004508:	e006      	b.n	8004518 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800450a:	6878      	ldr	r0, [r7, #4]
 800450c:	f000 f988 	bl	8004820 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	2200      	movs	r2, #0
 8004514:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8004516:	e170      	b.n	80047fa <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004518:	bf00      	nop
    return;
 800451a:	e16e      	b.n	80047fa <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004520:	2b01      	cmp	r3, #1
 8004522:	f040 814a 	bne.w	80047ba <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004526:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800452a:	f003 0310 	and.w	r3, r3, #16
 800452e:	2b00      	cmp	r3, #0
 8004530:	f000 8143 	beq.w	80047ba <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004534:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004538:	f003 0310 	and.w	r3, r3, #16
 800453c:	2b00      	cmp	r3, #0
 800453e:	f000 813c 	beq.w	80047ba <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004542:	2300      	movs	r3, #0
 8004544:	60bb      	str	r3, [r7, #8]
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	60bb      	str	r3, [r7, #8]
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	685b      	ldr	r3, [r3, #4]
 8004554:	60bb      	str	r3, [r7, #8]
 8004556:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	695b      	ldr	r3, [r3, #20]
 800455e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004562:	2b40      	cmp	r3, #64	; 0x40
 8004564:	f040 80b4 	bne.w	80046d0 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	685b      	ldr	r3, [r3, #4]
 8004570:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004574:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004578:	2b00      	cmp	r3, #0
 800457a:	f000 8140 	beq.w	80047fe <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004582:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004586:	429a      	cmp	r2, r3
 8004588:	f080 8139 	bcs.w	80047fe <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004592:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004598:	69db      	ldr	r3, [r3, #28]
 800459a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800459e:	f000 8088 	beq.w	80046b2 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	330c      	adds	r3, #12
 80045a8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045ac:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80045b0:	e853 3f00 	ldrex	r3, [r3]
 80045b4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80045b8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80045bc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80045c0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	330c      	adds	r3, #12
 80045ca:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80045ce:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80045d2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045d6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80045da:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80045de:	e841 2300 	strex	r3, r2, [r1]
 80045e2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80045e6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d1d9      	bne.n	80045a2 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	3314      	adds	r3, #20
 80045f4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045f6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80045f8:	e853 3f00 	ldrex	r3, [r3]
 80045fc:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80045fe:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004600:	f023 0301 	bic.w	r3, r3, #1
 8004604:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	3314      	adds	r3, #20
 800460e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004612:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004616:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004618:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800461a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800461e:	e841 2300 	strex	r3, r2, [r1]
 8004622:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004624:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004626:	2b00      	cmp	r3, #0
 8004628:	d1e1      	bne.n	80045ee <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	3314      	adds	r3, #20
 8004630:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004632:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004634:	e853 3f00 	ldrex	r3, [r3]
 8004638:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800463a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800463c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004640:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	3314      	adds	r3, #20
 800464a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800464e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004650:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004652:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004654:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004656:	e841 2300 	strex	r3, r2, [r1]
 800465a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800465c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800465e:	2b00      	cmp	r3, #0
 8004660:	d1e3      	bne.n	800462a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	2220      	movs	r2, #32
 8004666:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	2200      	movs	r2, #0
 800466e:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	330c      	adds	r3, #12
 8004676:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004678:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800467a:	e853 3f00 	ldrex	r3, [r3]
 800467e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004680:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004682:	f023 0310 	bic.w	r3, r3, #16
 8004686:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	330c      	adds	r3, #12
 8004690:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8004694:	65ba      	str	r2, [r7, #88]	; 0x58
 8004696:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004698:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800469a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800469c:	e841 2300 	strex	r3, r2, [r1]
 80046a0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80046a2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d1e3      	bne.n	8004670 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046ac:	4618      	mov	r0, r3
 80046ae:	f7fc feaa 	bl	8001406 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80046ba:	b29b      	uxth	r3, r3
 80046bc:	1ad3      	subs	r3, r2, r3
 80046be:	b29b      	uxth	r3, r3
 80046c0:	4619      	mov	r1, r3
 80046c2:	6878      	ldr	r0, [r7, #4]
 80046c4:	f000 f8b6 	bl	8004834 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80046c8:	e099      	b.n	80047fe <HAL_UART_IRQHandler+0x50e>
 80046ca:	bf00      	nop
 80046cc:	08004a63 	.word	0x08004a63
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80046d8:	b29b      	uxth	r3, r3
 80046da:	1ad3      	subs	r3, r2, r3
 80046dc:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80046e4:	b29b      	uxth	r3, r3
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	f000 808b 	beq.w	8004802 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80046ec:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	f000 8086 	beq.w	8004802 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	330c      	adds	r3, #12
 80046fc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004700:	e853 3f00 	ldrex	r3, [r3]
 8004704:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004706:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004708:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800470c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	330c      	adds	r3, #12
 8004716:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800471a:	647a      	str	r2, [r7, #68]	; 0x44
 800471c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800471e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004720:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004722:	e841 2300 	strex	r3, r2, [r1]
 8004726:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004728:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800472a:	2b00      	cmp	r3, #0
 800472c:	d1e3      	bne.n	80046f6 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	3314      	adds	r3, #20
 8004734:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004736:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004738:	e853 3f00 	ldrex	r3, [r3]
 800473c:	623b      	str	r3, [r7, #32]
   return(result);
 800473e:	6a3b      	ldr	r3, [r7, #32]
 8004740:	f023 0301 	bic.w	r3, r3, #1
 8004744:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	3314      	adds	r3, #20
 800474e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004752:	633a      	str	r2, [r7, #48]	; 0x30
 8004754:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004756:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004758:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800475a:	e841 2300 	strex	r3, r2, [r1]
 800475e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004760:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004762:	2b00      	cmp	r3, #0
 8004764:	d1e3      	bne.n	800472e <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	2220      	movs	r2, #32
 800476a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	2200      	movs	r2, #0
 8004772:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	330c      	adds	r3, #12
 800477a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800477c:	693b      	ldr	r3, [r7, #16]
 800477e:	e853 3f00 	ldrex	r3, [r3]
 8004782:	60fb      	str	r3, [r7, #12]
   return(result);
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	f023 0310 	bic.w	r3, r3, #16
 800478a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	330c      	adds	r3, #12
 8004794:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8004798:	61fa      	str	r2, [r7, #28]
 800479a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800479c:	69b9      	ldr	r1, [r7, #24]
 800479e:	69fa      	ldr	r2, [r7, #28]
 80047a0:	e841 2300 	strex	r3, r2, [r1]
 80047a4:	617b      	str	r3, [r7, #20]
   return(result);
 80047a6:	697b      	ldr	r3, [r7, #20]
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d1e3      	bne.n	8004774 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80047ac:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80047b0:	4619      	mov	r1, r3
 80047b2:	6878      	ldr	r0, [r7, #4]
 80047b4:	f000 f83e 	bl	8004834 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80047b8:	e023      	b.n	8004802 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80047ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80047be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d009      	beq.n	80047da <HAL_UART_IRQHandler+0x4ea>
 80047c6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80047ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d003      	beq.n	80047da <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80047d2:	6878      	ldr	r0, [r7, #4]
 80047d4:	f000 f959 	bl	8004a8a <UART_Transmit_IT>
    return;
 80047d8:	e014      	b.n	8004804 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80047da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80047de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d00e      	beq.n	8004804 <HAL_UART_IRQHandler+0x514>
 80047e6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80047ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d008      	beq.n	8004804 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80047f2:	6878      	ldr	r0, [r7, #4]
 80047f4:	f000 f999 	bl	8004b2a <UART_EndTransmit_IT>
    return;
 80047f8:	e004      	b.n	8004804 <HAL_UART_IRQHandler+0x514>
    return;
 80047fa:	bf00      	nop
 80047fc:	e002      	b.n	8004804 <HAL_UART_IRQHandler+0x514>
      return;
 80047fe:	bf00      	nop
 8004800:	e000      	b.n	8004804 <HAL_UART_IRQHandler+0x514>
      return;
 8004802:	bf00      	nop
  }
}
 8004804:	37e8      	adds	r7, #232	; 0xe8
 8004806:	46bd      	mov	sp, r7
 8004808:	bd80      	pop	{r7, pc}
 800480a:	bf00      	nop

0800480c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800480c:	b480      	push	{r7}
 800480e:	b083      	sub	sp, #12
 8004810:	af00      	add	r7, sp, #0
 8004812:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004814:	bf00      	nop
 8004816:	370c      	adds	r7, #12
 8004818:	46bd      	mov	sp, r7
 800481a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800481e:	4770      	bx	lr

08004820 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004820:	b480      	push	{r7}
 8004822:	b083      	sub	sp, #12
 8004824:	af00      	add	r7, sp, #0
 8004826:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004828:	bf00      	nop
 800482a:	370c      	adds	r7, #12
 800482c:	46bd      	mov	sp, r7
 800482e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004832:	4770      	bx	lr

08004834 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004834:	b480      	push	{r7}
 8004836:	b083      	sub	sp, #12
 8004838:	af00      	add	r7, sp, #0
 800483a:	6078      	str	r0, [r7, #4]
 800483c:	460b      	mov	r3, r1
 800483e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004840:	bf00      	nop
 8004842:	370c      	adds	r7, #12
 8004844:	46bd      	mov	sp, r7
 8004846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800484a:	4770      	bx	lr

0800484c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800484c:	b580      	push	{r7, lr}
 800484e:	b090      	sub	sp, #64	; 0x40
 8004850:	af00      	add	r7, sp, #0
 8004852:	60f8      	str	r0, [r7, #12]
 8004854:	60b9      	str	r1, [r7, #8]
 8004856:	603b      	str	r3, [r7, #0]
 8004858:	4613      	mov	r3, r2
 800485a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800485c:	e050      	b.n	8004900 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800485e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004860:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004864:	d04c      	beq.n	8004900 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004866:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004868:	2b00      	cmp	r3, #0
 800486a:	d007      	beq.n	800487c <UART_WaitOnFlagUntilTimeout+0x30>
 800486c:	f7fc fc8a 	bl	8001184 <HAL_GetTick>
 8004870:	4602      	mov	r2, r0
 8004872:	683b      	ldr	r3, [r7, #0]
 8004874:	1ad3      	subs	r3, r2, r3
 8004876:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004878:	429a      	cmp	r2, r3
 800487a:	d241      	bcs.n	8004900 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	330c      	adds	r3, #12
 8004882:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004884:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004886:	e853 3f00 	ldrex	r3, [r3]
 800488a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800488c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800488e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004892:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	330c      	adds	r3, #12
 800489a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800489c:	637a      	str	r2, [r7, #52]	; 0x34
 800489e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048a0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80048a2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80048a4:	e841 2300 	strex	r3, r2, [r1]
 80048a8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80048aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d1e5      	bne.n	800487c <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	3314      	adds	r3, #20
 80048b6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048b8:	697b      	ldr	r3, [r7, #20]
 80048ba:	e853 3f00 	ldrex	r3, [r3]
 80048be:	613b      	str	r3, [r7, #16]
   return(result);
 80048c0:	693b      	ldr	r3, [r7, #16]
 80048c2:	f023 0301 	bic.w	r3, r3, #1
 80048c6:	63bb      	str	r3, [r7, #56]	; 0x38
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	3314      	adds	r3, #20
 80048ce:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80048d0:	623a      	str	r2, [r7, #32]
 80048d2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048d4:	69f9      	ldr	r1, [r7, #28]
 80048d6:	6a3a      	ldr	r2, [r7, #32]
 80048d8:	e841 2300 	strex	r3, r2, [r1]
 80048dc:	61bb      	str	r3, [r7, #24]
   return(result);
 80048de:	69bb      	ldr	r3, [r7, #24]
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d1e5      	bne.n	80048b0 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	2220      	movs	r2, #32
 80048e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	2220      	movs	r2, #32
 80048f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	2200      	movs	r2, #0
 80048f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80048fc:	2303      	movs	r3, #3
 80048fe:	e00f      	b.n	8004920 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	681a      	ldr	r2, [r3, #0]
 8004906:	68bb      	ldr	r3, [r7, #8]
 8004908:	4013      	ands	r3, r2
 800490a:	68ba      	ldr	r2, [r7, #8]
 800490c:	429a      	cmp	r2, r3
 800490e:	bf0c      	ite	eq
 8004910:	2301      	moveq	r3, #1
 8004912:	2300      	movne	r3, #0
 8004914:	b2db      	uxtb	r3, r3
 8004916:	461a      	mov	r2, r3
 8004918:	79fb      	ldrb	r3, [r7, #7]
 800491a:	429a      	cmp	r2, r3
 800491c:	d09f      	beq.n	800485e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800491e:	2300      	movs	r3, #0
}
 8004920:	4618      	mov	r0, r3
 8004922:	3740      	adds	r7, #64	; 0x40
 8004924:	46bd      	mov	sp, r7
 8004926:	bd80      	pop	{r7, pc}

08004928 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004928:	b480      	push	{r7}
 800492a:	b085      	sub	sp, #20
 800492c:	af00      	add	r7, sp, #0
 800492e:	60f8      	str	r0, [r7, #12]
 8004930:	60b9      	str	r1, [r7, #8]
 8004932:	4613      	mov	r3, r2
 8004934:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	68ba      	ldr	r2, [r7, #8]
 800493a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	88fa      	ldrh	r2, [r7, #6]
 8004940:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	88fa      	ldrh	r2, [r7, #6]
 8004946:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	2200      	movs	r2, #0
 800494c:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	2222      	movs	r2, #34	; 0x22
 8004952:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	2200      	movs	r2, #0
 800495a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	68da      	ldr	r2, [r3, #12]
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800496c:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	695a      	ldr	r2, [r3, #20]
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	f042 0201 	orr.w	r2, r2, #1
 800497c:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	68da      	ldr	r2, [r3, #12]
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	f042 0220 	orr.w	r2, r2, #32
 800498c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800498e:	2300      	movs	r3, #0
}
 8004990:	4618      	mov	r0, r3
 8004992:	3714      	adds	r7, #20
 8004994:	46bd      	mov	sp, r7
 8004996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800499a:	4770      	bx	lr

0800499c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800499c:	b480      	push	{r7}
 800499e:	b095      	sub	sp, #84	; 0x54
 80049a0:	af00      	add	r7, sp, #0
 80049a2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	330c      	adds	r3, #12
 80049aa:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80049ae:	e853 3f00 	ldrex	r3, [r3]
 80049b2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80049b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049b6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80049ba:	64fb      	str	r3, [r7, #76]	; 0x4c
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	330c      	adds	r3, #12
 80049c2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80049c4:	643a      	str	r2, [r7, #64]	; 0x40
 80049c6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049c8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80049ca:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80049cc:	e841 2300 	strex	r3, r2, [r1]
 80049d0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80049d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d1e5      	bne.n	80049a4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	3314      	adds	r3, #20
 80049de:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049e0:	6a3b      	ldr	r3, [r7, #32]
 80049e2:	e853 3f00 	ldrex	r3, [r3]
 80049e6:	61fb      	str	r3, [r7, #28]
   return(result);
 80049e8:	69fb      	ldr	r3, [r7, #28]
 80049ea:	f023 0301 	bic.w	r3, r3, #1
 80049ee:	64bb      	str	r3, [r7, #72]	; 0x48
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	3314      	adds	r3, #20
 80049f6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80049f8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80049fa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049fc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80049fe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004a00:	e841 2300 	strex	r3, r2, [r1]
 8004a04:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004a06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d1e5      	bne.n	80049d8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a10:	2b01      	cmp	r3, #1
 8004a12:	d119      	bne.n	8004a48 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	330c      	adds	r3, #12
 8004a1a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	e853 3f00 	ldrex	r3, [r3]
 8004a22:	60bb      	str	r3, [r7, #8]
   return(result);
 8004a24:	68bb      	ldr	r3, [r7, #8]
 8004a26:	f023 0310 	bic.w	r3, r3, #16
 8004a2a:	647b      	str	r3, [r7, #68]	; 0x44
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	330c      	adds	r3, #12
 8004a32:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004a34:	61ba      	str	r2, [r7, #24]
 8004a36:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a38:	6979      	ldr	r1, [r7, #20]
 8004a3a:	69ba      	ldr	r2, [r7, #24]
 8004a3c:	e841 2300 	strex	r3, r2, [r1]
 8004a40:	613b      	str	r3, [r7, #16]
   return(result);
 8004a42:	693b      	ldr	r3, [r7, #16]
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d1e5      	bne.n	8004a14 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	2220      	movs	r2, #32
 8004a4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	2200      	movs	r2, #0
 8004a54:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004a56:	bf00      	nop
 8004a58:	3754      	adds	r7, #84	; 0x54
 8004a5a:	46bd      	mov	sp, r7
 8004a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a60:	4770      	bx	lr

08004a62 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004a62:	b580      	push	{r7, lr}
 8004a64:	b084      	sub	sp, #16
 8004a66:	af00      	add	r7, sp, #0
 8004a68:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a6e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	2200      	movs	r2, #0
 8004a74:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	2200      	movs	r2, #0
 8004a7a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004a7c:	68f8      	ldr	r0, [r7, #12]
 8004a7e:	f7ff fecf 	bl	8004820 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004a82:	bf00      	nop
 8004a84:	3710      	adds	r7, #16
 8004a86:	46bd      	mov	sp, r7
 8004a88:	bd80      	pop	{r7, pc}

08004a8a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004a8a:	b480      	push	{r7}
 8004a8c:	b085      	sub	sp, #20
 8004a8e:	af00      	add	r7, sp, #0
 8004a90:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a98:	b2db      	uxtb	r3, r3
 8004a9a:	2b21      	cmp	r3, #33	; 0x21
 8004a9c:	d13e      	bne.n	8004b1c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	689b      	ldr	r3, [r3, #8]
 8004aa2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004aa6:	d114      	bne.n	8004ad2 <UART_Transmit_IT+0x48>
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	691b      	ldr	r3, [r3, #16]
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d110      	bne.n	8004ad2 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	6a1b      	ldr	r3, [r3, #32]
 8004ab4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	881b      	ldrh	r3, [r3, #0]
 8004aba:	461a      	mov	r2, r3
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004ac4:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	6a1b      	ldr	r3, [r3, #32]
 8004aca:	1c9a      	adds	r2, r3, #2
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	621a      	str	r2, [r3, #32]
 8004ad0:	e008      	b.n	8004ae4 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	6a1b      	ldr	r3, [r3, #32]
 8004ad6:	1c59      	adds	r1, r3, #1
 8004ad8:	687a      	ldr	r2, [r7, #4]
 8004ada:	6211      	str	r1, [r2, #32]
 8004adc:	781a      	ldrb	r2, [r3, #0]
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004ae8:	b29b      	uxth	r3, r3
 8004aea:	3b01      	subs	r3, #1
 8004aec:	b29b      	uxth	r3, r3
 8004aee:	687a      	ldr	r2, [r7, #4]
 8004af0:	4619      	mov	r1, r3
 8004af2:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d10f      	bne.n	8004b18 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	68da      	ldr	r2, [r3, #12]
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004b06:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	68da      	ldr	r2, [r3, #12]
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004b16:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004b18:	2300      	movs	r3, #0
 8004b1a:	e000      	b.n	8004b1e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004b1c:	2302      	movs	r3, #2
  }
}
 8004b1e:	4618      	mov	r0, r3
 8004b20:	3714      	adds	r7, #20
 8004b22:	46bd      	mov	sp, r7
 8004b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b28:	4770      	bx	lr

08004b2a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004b2a:	b580      	push	{r7, lr}
 8004b2c:	b082      	sub	sp, #8
 8004b2e:	af00      	add	r7, sp, #0
 8004b30:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	68da      	ldr	r2, [r3, #12]
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004b40:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	2220      	movs	r2, #32
 8004b46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004b4a:	6878      	ldr	r0, [r7, #4]
 8004b4c:	f7ff fe5e 	bl	800480c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004b50:	2300      	movs	r3, #0
}
 8004b52:	4618      	mov	r0, r3
 8004b54:	3708      	adds	r7, #8
 8004b56:	46bd      	mov	sp, r7
 8004b58:	bd80      	pop	{r7, pc}

08004b5a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004b5a:	b580      	push	{r7, lr}
 8004b5c:	b08c      	sub	sp, #48	; 0x30
 8004b5e:	af00      	add	r7, sp, #0
 8004b60:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004b68:	b2db      	uxtb	r3, r3
 8004b6a:	2b22      	cmp	r3, #34	; 0x22
 8004b6c:	f040 80ab 	bne.w	8004cc6 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	689b      	ldr	r3, [r3, #8]
 8004b74:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b78:	d117      	bne.n	8004baa <UART_Receive_IT+0x50>
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	691b      	ldr	r3, [r3, #16]
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d113      	bne.n	8004baa <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004b82:	2300      	movs	r3, #0
 8004b84:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b8a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	685b      	ldr	r3, [r3, #4]
 8004b92:	b29b      	uxth	r3, r3
 8004b94:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b98:	b29a      	uxth	r2, r3
 8004b9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b9c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ba2:	1c9a      	adds	r2, r3, #2
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	629a      	str	r2, [r3, #40]	; 0x28
 8004ba8:	e026      	b.n	8004bf8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bae:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8004bb0:	2300      	movs	r3, #0
 8004bb2:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	689b      	ldr	r3, [r3, #8]
 8004bb8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004bbc:	d007      	beq.n	8004bce <UART_Receive_IT+0x74>
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	689b      	ldr	r3, [r3, #8]
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d10a      	bne.n	8004bdc <UART_Receive_IT+0x82>
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	691b      	ldr	r3, [r3, #16]
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d106      	bne.n	8004bdc <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	685b      	ldr	r3, [r3, #4]
 8004bd4:	b2da      	uxtb	r2, r3
 8004bd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bd8:	701a      	strb	r2, [r3, #0]
 8004bda:	e008      	b.n	8004bee <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	685b      	ldr	r3, [r3, #4]
 8004be2:	b2db      	uxtb	r3, r3
 8004be4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004be8:	b2da      	uxtb	r2, r3
 8004bea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bec:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bf2:	1c5a      	adds	r2, r3, #1
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004bfc:	b29b      	uxth	r3, r3
 8004bfe:	3b01      	subs	r3, #1
 8004c00:	b29b      	uxth	r3, r3
 8004c02:	687a      	ldr	r2, [r7, #4]
 8004c04:	4619      	mov	r1, r3
 8004c06:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d15a      	bne.n	8004cc2 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	68da      	ldr	r2, [r3, #12]
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	f022 0220 	bic.w	r2, r2, #32
 8004c1a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	68da      	ldr	r2, [r3, #12]
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004c2a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	695a      	ldr	r2, [r3, #20]
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	f022 0201 	bic.w	r2, r2, #1
 8004c3a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	2220      	movs	r2, #32
 8004c40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c48:	2b01      	cmp	r3, #1
 8004c4a:	d135      	bne.n	8004cb8 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	2200      	movs	r2, #0
 8004c50:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	330c      	adds	r3, #12
 8004c58:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c5a:	697b      	ldr	r3, [r7, #20]
 8004c5c:	e853 3f00 	ldrex	r3, [r3]
 8004c60:	613b      	str	r3, [r7, #16]
   return(result);
 8004c62:	693b      	ldr	r3, [r7, #16]
 8004c64:	f023 0310 	bic.w	r3, r3, #16
 8004c68:	627b      	str	r3, [r7, #36]	; 0x24
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	330c      	adds	r3, #12
 8004c70:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c72:	623a      	str	r2, [r7, #32]
 8004c74:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c76:	69f9      	ldr	r1, [r7, #28]
 8004c78:	6a3a      	ldr	r2, [r7, #32]
 8004c7a:	e841 2300 	strex	r3, r2, [r1]
 8004c7e:	61bb      	str	r3, [r7, #24]
   return(result);
 8004c80:	69bb      	ldr	r3, [r7, #24]
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d1e5      	bne.n	8004c52 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	f003 0310 	and.w	r3, r3, #16
 8004c90:	2b10      	cmp	r3, #16
 8004c92:	d10a      	bne.n	8004caa <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004c94:	2300      	movs	r3, #0
 8004c96:	60fb      	str	r3, [r7, #12]
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	60fb      	str	r3, [r7, #12]
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	685b      	ldr	r3, [r3, #4]
 8004ca6:	60fb      	str	r3, [r7, #12]
 8004ca8:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004cae:	4619      	mov	r1, r3
 8004cb0:	6878      	ldr	r0, [r7, #4]
 8004cb2:	f7ff fdbf 	bl	8004834 <HAL_UARTEx_RxEventCallback>
 8004cb6:	e002      	b.n	8004cbe <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004cb8:	6878      	ldr	r0, [r7, #4]
 8004cba:	f7fb fe9f 	bl	80009fc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004cbe:	2300      	movs	r3, #0
 8004cc0:	e002      	b.n	8004cc8 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8004cc2:	2300      	movs	r3, #0
 8004cc4:	e000      	b.n	8004cc8 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8004cc6:	2302      	movs	r3, #2
  }
}
 8004cc8:	4618      	mov	r0, r3
 8004cca:	3730      	adds	r7, #48	; 0x30
 8004ccc:	46bd      	mov	sp, r7
 8004cce:	bd80      	pop	{r7, pc}

08004cd0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004cd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004cd4:	b09f      	sub	sp, #124	; 0x7c
 8004cd6:	af00      	add	r7, sp, #0
 8004cd8:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004cda:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	691b      	ldr	r3, [r3, #16]
 8004ce0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004ce4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ce6:	68d9      	ldr	r1, [r3, #12]
 8004ce8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004cea:	681a      	ldr	r2, [r3, #0]
 8004cec:	ea40 0301 	orr.w	r3, r0, r1
 8004cf0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004cf2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004cf4:	689a      	ldr	r2, [r3, #8]
 8004cf6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004cf8:	691b      	ldr	r3, [r3, #16]
 8004cfa:	431a      	orrs	r2, r3
 8004cfc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004cfe:	695b      	ldr	r3, [r3, #20]
 8004d00:	431a      	orrs	r2, r3
 8004d02:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d04:	69db      	ldr	r3, [r3, #28]
 8004d06:	4313      	orrs	r3, r2
 8004d08:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8004d0a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	68db      	ldr	r3, [r3, #12]
 8004d10:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004d14:	f021 010c 	bic.w	r1, r1, #12
 8004d18:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d1a:	681a      	ldr	r2, [r3, #0]
 8004d1c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004d1e:	430b      	orrs	r3, r1
 8004d20:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004d22:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	695b      	ldr	r3, [r3, #20]
 8004d28:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004d2c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d2e:	6999      	ldr	r1, [r3, #24]
 8004d30:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d32:	681a      	ldr	r2, [r3, #0]
 8004d34:	ea40 0301 	orr.w	r3, r0, r1
 8004d38:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004d3a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d3c:	681a      	ldr	r2, [r3, #0]
 8004d3e:	4bc5      	ldr	r3, [pc, #788]	; (8005054 <UART_SetConfig+0x384>)
 8004d40:	429a      	cmp	r2, r3
 8004d42:	d004      	beq.n	8004d4e <UART_SetConfig+0x7e>
 8004d44:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d46:	681a      	ldr	r2, [r3, #0]
 8004d48:	4bc3      	ldr	r3, [pc, #780]	; (8005058 <UART_SetConfig+0x388>)
 8004d4a:	429a      	cmp	r2, r3
 8004d4c:	d103      	bne.n	8004d56 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004d4e:	f7fe fca5 	bl	800369c <HAL_RCC_GetPCLK2Freq>
 8004d52:	6778      	str	r0, [r7, #116]	; 0x74
 8004d54:	e002      	b.n	8004d5c <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004d56:	f7fe fc8d 	bl	8003674 <HAL_RCC_GetPCLK1Freq>
 8004d5a:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004d5c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d5e:	69db      	ldr	r3, [r3, #28]
 8004d60:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004d64:	f040 80b6 	bne.w	8004ed4 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004d68:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004d6a:	461c      	mov	r4, r3
 8004d6c:	f04f 0500 	mov.w	r5, #0
 8004d70:	4622      	mov	r2, r4
 8004d72:	462b      	mov	r3, r5
 8004d74:	1891      	adds	r1, r2, r2
 8004d76:	6439      	str	r1, [r7, #64]	; 0x40
 8004d78:	415b      	adcs	r3, r3
 8004d7a:	647b      	str	r3, [r7, #68]	; 0x44
 8004d7c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004d80:	1912      	adds	r2, r2, r4
 8004d82:	eb45 0303 	adc.w	r3, r5, r3
 8004d86:	f04f 0000 	mov.w	r0, #0
 8004d8a:	f04f 0100 	mov.w	r1, #0
 8004d8e:	00d9      	lsls	r1, r3, #3
 8004d90:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004d94:	00d0      	lsls	r0, r2, #3
 8004d96:	4602      	mov	r2, r0
 8004d98:	460b      	mov	r3, r1
 8004d9a:	1911      	adds	r1, r2, r4
 8004d9c:	6639      	str	r1, [r7, #96]	; 0x60
 8004d9e:	416b      	adcs	r3, r5
 8004da0:	667b      	str	r3, [r7, #100]	; 0x64
 8004da2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004da4:	685b      	ldr	r3, [r3, #4]
 8004da6:	461a      	mov	r2, r3
 8004da8:	f04f 0300 	mov.w	r3, #0
 8004dac:	1891      	adds	r1, r2, r2
 8004dae:	63b9      	str	r1, [r7, #56]	; 0x38
 8004db0:	415b      	adcs	r3, r3
 8004db2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004db4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004db8:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8004dbc:	f7fb fa1a 	bl	80001f4 <__aeabi_uldivmod>
 8004dc0:	4602      	mov	r2, r0
 8004dc2:	460b      	mov	r3, r1
 8004dc4:	4ba5      	ldr	r3, [pc, #660]	; (800505c <UART_SetConfig+0x38c>)
 8004dc6:	fba3 2302 	umull	r2, r3, r3, r2
 8004dca:	095b      	lsrs	r3, r3, #5
 8004dcc:	011e      	lsls	r6, r3, #4
 8004dce:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004dd0:	461c      	mov	r4, r3
 8004dd2:	f04f 0500 	mov.w	r5, #0
 8004dd6:	4622      	mov	r2, r4
 8004dd8:	462b      	mov	r3, r5
 8004dda:	1891      	adds	r1, r2, r2
 8004ddc:	6339      	str	r1, [r7, #48]	; 0x30
 8004dde:	415b      	adcs	r3, r3
 8004de0:	637b      	str	r3, [r7, #52]	; 0x34
 8004de2:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8004de6:	1912      	adds	r2, r2, r4
 8004de8:	eb45 0303 	adc.w	r3, r5, r3
 8004dec:	f04f 0000 	mov.w	r0, #0
 8004df0:	f04f 0100 	mov.w	r1, #0
 8004df4:	00d9      	lsls	r1, r3, #3
 8004df6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004dfa:	00d0      	lsls	r0, r2, #3
 8004dfc:	4602      	mov	r2, r0
 8004dfe:	460b      	mov	r3, r1
 8004e00:	1911      	adds	r1, r2, r4
 8004e02:	65b9      	str	r1, [r7, #88]	; 0x58
 8004e04:	416b      	adcs	r3, r5
 8004e06:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004e08:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004e0a:	685b      	ldr	r3, [r3, #4]
 8004e0c:	461a      	mov	r2, r3
 8004e0e:	f04f 0300 	mov.w	r3, #0
 8004e12:	1891      	adds	r1, r2, r2
 8004e14:	62b9      	str	r1, [r7, #40]	; 0x28
 8004e16:	415b      	adcs	r3, r3
 8004e18:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004e1a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004e1e:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8004e22:	f7fb f9e7 	bl	80001f4 <__aeabi_uldivmod>
 8004e26:	4602      	mov	r2, r0
 8004e28:	460b      	mov	r3, r1
 8004e2a:	4b8c      	ldr	r3, [pc, #560]	; (800505c <UART_SetConfig+0x38c>)
 8004e2c:	fba3 1302 	umull	r1, r3, r3, r2
 8004e30:	095b      	lsrs	r3, r3, #5
 8004e32:	2164      	movs	r1, #100	; 0x64
 8004e34:	fb01 f303 	mul.w	r3, r1, r3
 8004e38:	1ad3      	subs	r3, r2, r3
 8004e3a:	00db      	lsls	r3, r3, #3
 8004e3c:	3332      	adds	r3, #50	; 0x32
 8004e3e:	4a87      	ldr	r2, [pc, #540]	; (800505c <UART_SetConfig+0x38c>)
 8004e40:	fba2 2303 	umull	r2, r3, r2, r3
 8004e44:	095b      	lsrs	r3, r3, #5
 8004e46:	005b      	lsls	r3, r3, #1
 8004e48:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004e4c:	441e      	add	r6, r3
 8004e4e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004e50:	4618      	mov	r0, r3
 8004e52:	f04f 0100 	mov.w	r1, #0
 8004e56:	4602      	mov	r2, r0
 8004e58:	460b      	mov	r3, r1
 8004e5a:	1894      	adds	r4, r2, r2
 8004e5c:	623c      	str	r4, [r7, #32]
 8004e5e:	415b      	adcs	r3, r3
 8004e60:	627b      	str	r3, [r7, #36]	; 0x24
 8004e62:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004e66:	1812      	adds	r2, r2, r0
 8004e68:	eb41 0303 	adc.w	r3, r1, r3
 8004e6c:	f04f 0400 	mov.w	r4, #0
 8004e70:	f04f 0500 	mov.w	r5, #0
 8004e74:	00dd      	lsls	r5, r3, #3
 8004e76:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004e7a:	00d4      	lsls	r4, r2, #3
 8004e7c:	4622      	mov	r2, r4
 8004e7e:	462b      	mov	r3, r5
 8004e80:	1814      	adds	r4, r2, r0
 8004e82:	653c      	str	r4, [r7, #80]	; 0x50
 8004e84:	414b      	adcs	r3, r1
 8004e86:	657b      	str	r3, [r7, #84]	; 0x54
 8004e88:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004e8a:	685b      	ldr	r3, [r3, #4]
 8004e8c:	461a      	mov	r2, r3
 8004e8e:	f04f 0300 	mov.w	r3, #0
 8004e92:	1891      	adds	r1, r2, r2
 8004e94:	61b9      	str	r1, [r7, #24]
 8004e96:	415b      	adcs	r3, r3
 8004e98:	61fb      	str	r3, [r7, #28]
 8004e9a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004e9e:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8004ea2:	f7fb f9a7 	bl	80001f4 <__aeabi_uldivmod>
 8004ea6:	4602      	mov	r2, r0
 8004ea8:	460b      	mov	r3, r1
 8004eaa:	4b6c      	ldr	r3, [pc, #432]	; (800505c <UART_SetConfig+0x38c>)
 8004eac:	fba3 1302 	umull	r1, r3, r3, r2
 8004eb0:	095b      	lsrs	r3, r3, #5
 8004eb2:	2164      	movs	r1, #100	; 0x64
 8004eb4:	fb01 f303 	mul.w	r3, r1, r3
 8004eb8:	1ad3      	subs	r3, r2, r3
 8004eba:	00db      	lsls	r3, r3, #3
 8004ebc:	3332      	adds	r3, #50	; 0x32
 8004ebe:	4a67      	ldr	r2, [pc, #412]	; (800505c <UART_SetConfig+0x38c>)
 8004ec0:	fba2 2303 	umull	r2, r3, r2, r3
 8004ec4:	095b      	lsrs	r3, r3, #5
 8004ec6:	f003 0207 	and.w	r2, r3, #7
 8004eca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	4432      	add	r2, r6
 8004ed0:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004ed2:	e0b9      	b.n	8005048 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004ed4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004ed6:	461c      	mov	r4, r3
 8004ed8:	f04f 0500 	mov.w	r5, #0
 8004edc:	4622      	mov	r2, r4
 8004ede:	462b      	mov	r3, r5
 8004ee0:	1891      	adds	r1, r2, r2
 8004ee2:	6139      	str	r1, [r7, #16]
 8004ee4:	415b      	adcs	r3, r3
 8004ee6:	617b      	str	r3, [r7, #20]
 8004ee8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004eec:	1912      	adds	r2, r2, r4
 8004eee:	eb45 0303 	adc.w	r3, r5, r3
 8004ef2:	f04f 0000 	mov.w	r0, #0
 8004ef6:	f04f 0100 	mov.w	r1, #0
 8004efa:	00d9      	lsls	r1, r3, #3
 8004efc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004f00:	00d0      	lsls	r0, r2, #3
 8004f02:	4602      	mov	r2, r0
 8004f04:	460b      	mov	r3, r1
 8004f06:	eb12 0804 	adds.w	r8, r2, r4
 8004f0a:	eb43 0905 	adc.w	r9, r3, r5
 8004f0e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f10:	685b      	ldr	r3, [r3, #4]
 8004f12:	4618      	mov	r0, r3
 8004f14:	f04f 0100 	mov.w	r1, #0
 8004f18:	f04f 0200 	mov.w	r2, #0
 8004f1c:	f04f 0300 	mov.w	r3, #0
 8004f20:	008b      	lsls	r3, r1, #2
 8004f22:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004f26:	0082      	lsls	r2, r0, #2
 8004f28:	4640      	mov	r0, r8
 8004f2a:	4649      	mov	r1, r9
 8004f2c:	f7fb f962 	bl	80001f4 <__aeabi_uldivmod>
 8004f30:	4602      	mov	r2, r0
 8004f32:	460b      	mov	r3, r1
 8004f34:	4b49      	ldr	r3, [pc, #292]	; (800505c <UART_SetConfig+0x38c>)
 8004f36:	fba3 2302 	umull	r2, r3, r3, r2
 8004f3a:	095b      	lsrs	r3, r3, #5
 8004f3c:	011e      	lsls	r6, r3, #4
 8004f3e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004f40:	4618      	mov	r0, r3
 8004f42:	f04f 0100 	mov.w	r1, #0
 8004f46:	4602      	mov	r2, r0
 8004f48:	460b      	mov	r3, r1
 8004f4a:	1894      	adds	r4, r2, r2
 8004f4c:	60bc      	str	r4, [r7, #8]
 8004f4e:	415b      	adcs	r3, r3
 8004f50:	60fb      	str	r3, [r7, #12]
 8004f52:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004f56:	1812      	adds	r2, r2, r0
 8004f58:	eb41 0303 	adc.w	r3, r1, r3
 8004f5c:	f04f 0400 	mov.w	r4, #0
 8004f60:	f04f 0500 	mov.w	r5, #0
 8004f64:	00dd      	lsls	r5, r3, #3
 8004f66:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004f6a:	00d4      	lsls	r4, r2, #3
 8004f6c:	4622      	mov	r2, r4
 8004f6e:	462b      	mov	r3, r5
 8004f70:	1814      	adds	r4, r2, r0
 8004f72:	64bc      	str	r4, [r7, #72]	; 0x48
 8004f74:	414b      	adcs	r3, r1
 8004f76:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004f78:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f7a:	685b      	ldr	r3, [r3, #4]
 8004f7c:	4618      	mov	r0, r3
 8004f7e:	f04f 0100 	mov.w	r1, #0
 8004f82:	f04f 0200 	mov.w	r2, #0
 8004f86:	f04f 0300 	mov.w	r3, #0
 8004f8a:	008b      	lsls	r3, r1, #2
 8004f8c:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004f90:	0082      	lsls	r2, r0, #2
 8004f92:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8004f96:	f7fb f92d 	bl	80001f4 <__aeabi_uldivmod>
 8004f9a:	4602      	mov	r2, r0
 8004f9c:	460b      	mov	r3, r1
 8004f9e:	4b2f      	ldr	r3, [pc, #188]	; (800505c <UART_SetConfig+0x38c>)
 8004fa0:	fba3 1302 	umull	r1, r3, r3, r2
 8004fa4:	095b      	lsrs	r3, r3, #5
 8004fa6:	2164      	movs	r1, #100	; 0x64
 8004fa8:	fb01 f303 	mul.w	r3, r1, r3
 8004fac:	1ad3      	subs	r3, r2, r3
 8004fae:	011b      	lsls	r3, r3, #4
 8004fb0:	3332      	adds	r3, #50	; 0x32
 8004fb2:	4a2a      	ldr	r2, [pc, #168]	; (800505c <UART_SetConfig+0x38c>)
 8004fb4:	fba2 2303 	umull	r2, r3, r2, r3
 8004fb8:	095b      	lsrs	r3, r3, #5
 8004fba:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004fbe:	441e      	add	r6, r3
 8004fc0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004fc2:	4618      	mov	r0, r3
 8004fc4:	f04f 0100 	mov.w	r1, #0
 8004fc8:	4602      	mov	r2, r0
 8004fca:	460b      	mov	r3, r1
 8004fcc:	1894      	adds	r4, r2, r2
 8004fce:	603c      	str	r4, [r7, #0]
 8004fd0:	415b      	adcs	r3, r3
 8004fd2:	607b      	str	r3, [r7, #4]
 8004fd4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004fd8:	1812      	adds	r2, r2, r0
 8004fda:	eb41 0303 	adc.w	r3, r1, r3
 8004fde:	f04f 0400 	mov.w	r4, #0
 8004fe2:	f04f 0500 	mov.w	r5, #0
 8004fe6:	00dd      	lsls	r5, r3, #3
 8004fe8:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004fec:	00d4      	lsls	r4, r2, #3
 8004fee:	4622      	mov	r2, r4
 8004ff0:	462b      	mov	r3, r5
 8004ff2:	eb12 0a00 	adds.w	sl, r2, r0
 8004ff6:	eb43 0b01 	adc.w	fp, r3, r1
 8004ffa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ffc:	685b      	ldr	r3, [r3, #4]
 8004ffe:	4618      	mov	r0, r3
 8005000:	f04f 0100 	mov.w	r1, #0
 8005004:	f04f 0200 	mov.w	r2, #0
 8005008:	f04f 0300 	mov.w	r3, #0
 800500c:	008b      	lsls	r3, r1, #2
 800500e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005012:	0082      	lsls	r2, r0, #2
 8005014:	4650      	mov	r0, sl
 8005016:	4659      	mov	r1, fp
 8005018:	f7fb f8ec 	bl	80001f4 <__aeabi_uldivmod>
 800501c:	4602      	mov	r2, r0
 800501e:	460b      	mov	r3, r1
 8005020:	4b0e      	ldr	r3, [pc, #56]	; (800505c <UART_SetConfig+0x38c>)
 8005022:	fba3 1302 	umull	r1, r3, r3, r2
 8005026:	095b      	lsrs	r3, r3, #5
 8005028:	2164      	movs	r1, #100	; 0x64
 800502a:	fb01 f303 	mul.w	r3, r1, r3
 800502e:	1ad3      	subs	r3, r2, r3
 8005030:	011b      	lsls	r3, r3, #4
 8005032:	3332      	adds	r3, #50	; 0x32
 8005034:	4a09      	ldr	r2, [pc, #36]	; (800505c <UART_SetConfig+0x38c>)
 8005036:	fba2 2303 	umull	r2, r3, r2, r3
 800503a:	095b      	lsrs	r3, r3, #5
 800503c:	f003 020f 	and.w	r2, r3, #15
 8005040:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	4432      	add	r2, r6
 8005046:	609a      	str	r2, [r3, #8]
}
 8005048:	bf00      	nop
 800504a:	377c      	adds	r7, #124	; 0x7c
 800504c:	46bd      	mov	sp, r7
 800504e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005052:	bf00      	nop
 8005054:	40011000 	.word	0x40011000
 8005058:	40011400 	.word	0x40011400
 800505c:	51eb851f 	.word	0x51eb851f

08005060 <FMC_NORSRAM_Init>:
  * @param  Device Pointer to NORSRAM device instance
  * @param  Init Pointer to NORSRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef  FMC_NORSRAM_Init(FMC_NORSRAM_TypeDef *Device, FMC_NORSRAM_InitTypeDef* Init)
{ 
 8005060:	b480      	push	{r7}
 8005062:	b085      	sub	sp, #20
 8005064:	af00      	add	r7, sp, #0
 8005066:	6078      	str	r0, [r7, #4]
 8005068:	6039      	str	r1, [r7, #0]
  uint32_t tmpr = 0U;
 800506a:	2300      	movs	r3, #0
 800506c:	60fb      	str	r3, [r7, #12]
#if defined (STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx)
  assert_param(IS_FMC_WRITE_FIFO(Init->WriteFifo));
#endif /* STM32F446xx || STM32F469xx || STM32F479xx */

  /* Get the BTCR register value */
  tmpr = Device->BTCR[Init->NSBank];
 800506e:	683b      	ldr	r3, [r7, #0]
 8005070:	681a      	ldr	r2, [r3, #0]
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005078:	60fb      	str	r3, [r7, #12]
                    Init->WriteBurst           |\
                    Init->ContinuousClock);
#else /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) */
  /* Clear MBKEN, MUXEN, MTYP, MWID, FACCEN, BURSTEN, WAITPOL, CPSIZE, WAITCFG, WREN,
           WAITEN, EXTMOD, ASYNCWAIT, CBURSTRW, CCLKEN and WFDIS bits */
  tmpr &= ((uint32_t)~(FMC_BCR1_MBKEN     | FMC_BCR1_MUXEN    | FMC_BCR1_MTYP     | \
 800507a:	68fa      	ldr	r2, [r7, #12]
 800507c:	4b2f      	ldr	r3, [pc, #188]	; (800513c <FMC_NORSRAM_Init+0xdc>)
 800507e:	4013      	ands	r3, r2
 8005080:	60fb      	str	r3, [r7, #12]
                       FMC_BCR1_WREN      | FMC_BCR1_WAITEN   | FMC_BCR1_EXTMOD   | \
                       FMC_BCR1_ASYNCWAIT | FMC_BCR1_CBURSTRW | FMC_BCR1_CCLKEN   | \
                       FMC_BCR1_WFDIS));
  
  /* Set NORSRAM device control parameters */
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 8005082:	683b      	ldr	r3, [r7, #0]
 8005084:	685a      	ldr	r2, [r3, #4]
                    Init->MemoryType           |\
 8005086:	683b      	ldr	r3, [r7, #0]
 8005088:	689b      	ldr	r3, [r3, #8]
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 800508a:	431a      	orrs	r2, r3
                    Init->MemoryDataWidth      |\
 800508c:	683b      	ldr	r3, [r7, #0]
 800508e:	68db      	ldr	r3, [r3, #12]
                    Init->MemoryType           |\
 8005090:	431a      	orrs	r2, r3
                    Init->BurstAccessMode      |\
 8005092:	683b      	ldr	r3, [r7, #0]
 8005094:	691b      	ldr	r3, [r3, #16]
                    Init->MemoryDataWidth      |\
 8005096:	431a      	orrs	r2, r3
                    Init->WaitSignalPolarity   |\
 8005098:	683b      	ldr	r3, [r7, #0]
 800509a:	695b      	ldr	r3, [r3, #20]
                    Init->BurstAccessMode      |\
 800509c:	431a      	orrs	r2, r3
                    Init->WaitSignalActive     |\
 800509e:	683b      	ldr	r3, [r7, #0]
 80050a0:	69db      	ldr	r3, [r3, #28]
                    Init->WaitSignalPolarity   |\
 80050a2:	431a      	orrs	r2, r3
                    Init->WriteOperation       |\
 80050a4:	683b      	ldr	r3, [r7, #0]
 80050a6:	6a1b      	ldr	r3, [r3, #32]
                    Init->WaitSignalActive     |\
 80050a8:	431a      	orrs	r2, r3
                    Init->WaitSignal           |\
 80050aa:	683b      	ldr	r3, [r7, #0]
 80050ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                    Init->WriteOperation       |\
 80050ae:	431a      	orrs	r2, r3
                    Init->ExtendedMode         |\
 80050b0:	683b      	ldr	r3, [r7, #0]
 80050b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                    Init->WaitSignal           |\
 80050b4:	431a      	orrs	r2, r3
                    Init->AsynchronousWait     |\
 80050b6:	683b      	ldr	r3, [r7, #0]
 80050b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                    Init->ExtendedMode         |\
 80050ba:	431a      	orrs	r2, r3
                    Init->WriteBurst           |\
 80050bc:	683b      	ldr	r3, [r7, #0]
 80050be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                    Init->AsynchronousWait     |\
 80050c0:	431a      	orrs	r2, r3
                    Init->ContinuousClock      |\
 80050c2:	683b      	ldr	r3, [r7, #0]
 80050c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
                    Init->WriteBurst           |\
 80050c6:	431a      	orrs	r2, r3
                    Init->PageSize             |\
 80050c8:	683b      	ldr	r3, [r7, #0]
 80050ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                    Init->ContinuousClock      |\
 80050cc:	431a      	orrs	r2, r3
                    Init->WriteFifo);
 80050ce:	683b      	ldr	r3, [r7, #0]
 80050d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                    Init->PageSize             |\
 80050d2:	4313      	orrs	r3, r2
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 80050d4:	68fa      	ldr	r2, [r7, #12]
 80050d6:	4313      	orrs	r3, r2
 80050d8:	60fb      	str	r3, [r7, #12]
#endif /*  defined(STM32F427xx) || defined(STM32F437xx) || defined(STM32F429xx) || defined(STM32F439xx) */
                    
  if(Init->MemoryType == FMC_MEMORY_TYPE_NOR)
 80050da:	683b      	ldr	r3, [r7, #0]
 80050dc:	689b      	ldr	r3, [r3, #8]
 80050de:	2b08      	cmp	r3, #8
 80050e0:	d103      	bne.n	80050ea <FMC_NORSRAM_Init+0x8a>
  {
    tmpr |= (uint32_t)FMC_NORSRAM_FLASH_ACCESS_ENABLE;
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80050e8:	60fb      	str	r3, [r7, #12]
  }
  
  Device->BTCR[Init->NSBank] = tmpr;
 80050ea:	683b      	ldr	r3, [r7, #0]
 80050ec:	681a      	ldr	r2, [r3, #0]
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	68f9      	ldr	r1, [r7, #12]
 80050f2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Configure synchronous mode when Continuous clock is enabled for bank2..4 */
  if((Init->ContinuousClock == FMC_CONTINUOUS_CLOCK_SYNC_ASYNC) && (Init->NSBank != FMC_NORSRAM_BANK1))
 80050f6:	683b      	ldr	r3, [r7, #0]
 80050f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80050fa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80050fe:	d10a      	bne.n	8005116 <FMC_NORSRAM_Init+0xb6>
 8005100:	683b      	ldr	r3, [r7, #0]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	2b00      	cmp	r3, #0
 8005106:	d006      	beq.n	8005116 <FMC_NORSRAM_Init+0xb6>
  { 
    Device->BTCR[FMC_NORSRAM_BANK1] |= (uint32_t)(Init->ContinuousClock);
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681a      	ldr	r2, [r3, #0]
 800510c:	683b      	ldr	r3, [r7, #0]
 800510e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005110:	431a      	orrs	r2, r3
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	601a      	str	r2, [r3, #0]
  }

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx)
  if(Init->NSBank != FMC_NORSRAM_BANK1)
 8005116:	683b      	ldr	r3, [r7, #0]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	2b00      	cmp	r3, #0
 800511c:	d006      	beq.n	800512c <FMC_NORSRAM_Init+0xcc>
  {
    Device->BTCR[FMC_NORSRAM_BANK1] |= (uint32_t)(Init->WriteFifo);              
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681a      	ldr	r2, [r3, #0]
 8005122:	683b      	ldr	r3, [r7, #0]
 8005124:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005126:	431a      	orrs	r2, r3
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F446xx || STM32F469xx || STM32F479xx */
  
  return HAL_OK;
 800512c:	2300      	movs	r3, #0
}
 800512e:	4618      	mov	r0, r3
 8005130:	3714      	adds	r7, #20
 8005132:	46bd      	mov	sp, r7
 8005134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005138:	4770      	bx	lr
 800513a:	bf00      	nop
 800513c:	ffc00480 	.word	0xffc00480

08005140 <FMC_NORSRAM_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NORSRAM_Timing_Init(FMC_NORSRAM_TypeDef *Device, FMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8005140:	b480      	push	{r7}
 8005142:	b087      	sub	sp, #28
 8005144:	af00      	add	r7, sp, #0
 8005146:	60f8      	str	r0, [r7, #12]
 8005148:	60b9      	str	r1, [r7, #8]
 800514a:	607a      	str	r2, [r7, #4]
  uint32_t tmpr = 0U;
 800514c:	2300      	movs	r3, #0
 800514e:	617b      	str	r3, [r7, #20]
  assert_param(IS_FMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FMC_NORSRAM_BANK(Bank));
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Bank + 1U];
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	1c5a      	adds	r2, r3, #1
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800515a:	617b      	str	r3, [r7, #20]

  /* Clear ADDSET, ADDHLD, DATAST, BUSTURN, CLKDIV, DATLAT and ACCMOD bits */
  tmpr &= ((uint32_t)~(FMC_BTR1_ADDSET  | FMC_BTR1_ADDHLD | FMC_BTR1_DATAST | \
 800515c:	697b      	ldr	r3, [r7, #20]
 800515e:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8005162:	617b      	str	r3, [r7, #20]
                       FMC_BTR1_BUSTURN | FMC_BTR1_CLKDIV | FMC_BTR1_DATLAT | \
                       FMC_BTR1_ACCMOD));
  
  /* Set FMC_NORSRAM device timing parameters */  
  tmpr |= (uint32_t)(Timing->AddressSetupTime                   |\
 8005164:	68bb      	ldr	r3, [r7, #8]
 8005166:	681a      	ldr	r2, [r3, #0]
                    ((Timing->AddressHoldTime) << 4U)           |\
 8005168:	68bb      	ldr	r3, [r7, #8]
 800516a:	685b      	ldr	r3, [r3, #4]
 800516c:	011b      	lsls	r3, r3, #4
  tmpr |= (uint32_t)(Timing->AddressSetupTime                   |\
 800516e:	431a      	orrs	r2, r3
                    ((Timing->DataSetupTime) << 8U)             |\
 8005170:	68bb      	ldr	r3, [r7, #8]
 8005172:	689b      	ldr	r3, [r3, #8]
 8005174:	021b      	lsls	r3, r3, #8
                    ((Timing->AddressHoldTime) << 4U)           |\
 8005176:	431a      	orrs	r2, r3
                    ((Timing->BusTurnAroundDuration) << 16U)    |\
 8005178:	68bb      	ldr	r3, [r7, #8]
 800517a:	68db      	ldr	r3, [r3, #12]
 800517c:	041b      	lsls	r3, r3, #16
                    ((Timing->DataSetupTime) << 8U)             |\
 800517e:	431a      	orrs	r2, r3
                    (((Timing->CLKDivision) - 1U) << 20U)         |\
 8005180:	68bb      	ldr	r3, [r7, #8]
 8005182:	691b      	ldr	r3, [r3, #16]
 8005184:	3b01      	subs	r3, #1
 8005186:	051b      	lsls	r3, r3, #20
                    ((Timing->BusTurnAroundDuration) << 16U)    |\
 8005188:	431a      	orrs	r2, r3
                    (((Timing->DataLatency) - 2U) << 24U)         |\
 800518a:	68bb      	ldr	r3, [r7, #8]
 800518c:	695b      	ldr	r3, [r3, #20]
 800518e:	3b02      	subs	r3, #2
 8005190:	061b      	lsls	r3, r3, #24
                    (((Timing->CLKDivision) - 1U) << 20U)         |\
 8005192:	431a      	orrs	r2, r3
                    (Timing->AccessMode));
 8005194:	68bb      	ldr	r3, [r7, #8]
 8005196:	699b      	ldr	r3, [r3, #24]
  tmpr |= (uint32_t)(Timing->AddressSetupTime                   |\
 8005198:	4313      	orrs	r3, r2
 800519a:	697a      	ldr	r2, [r7, #20]
 800519c:	4313      	orrs	r3, r2
 800519e:	617b      	str	r3, [r7, #20]
  
  Device->BTCR[Bank + 1U] = tmpr;
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	1c5a      	adds	r2, r3, #1
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	6979      	ldr	r1, [r7, #20]
 80051a8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  
  /* Configure Clock division value (in NORSRAM bank 1) when continuous clock is enabled */
  if(HAL_IS_BIT_SET(Device->BTCR[FMC_NORSRAM_BANK1], FMC_BCR1_CCLKEN))
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80051b4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80051b8:	d10e      	bne.n	80051d8 <FMC_NORSRAM_Timing_Init+0x98>
  {
    tmpr = (uint32_t)(Device->BTCR[FMC_NORSRAM_BANK1 + 1U] & ~(0x0FU << 20U)); 
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	685b      	ldr	r3, [r3, #4]
 80051be:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80051c2:	617b      	str	r3, [r7, #20]
    tmpr |= (uint32_t)(((Timing->CLKDivision) - 1U) << 20U);
 80051c4:	68bb      	ldr	r3, [r7, #8]
 80051c6:	691b      	ldr	r3, [r3, #16]
 80051c8:	3b01      	subs	r3, #1
 80051ca:	051b      	lsls	r3, r3, #20
 80051cc:	697a      	ldr	r2, [r7, #20]
 80051ce:	4313      	orrs	r3, r2
 80051d0:	617b      	str	r3, [r7, #20]
    Device->BTCR[FMC_NORSRAM_BANK1 + 1U] = tmpr;
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	697a      	ldr	r2, [r7, #20]
 80051d6:	605a      	str	r2, [r3, #4]
  }  
  
  return HAL_OK;   
 80051d8:	2300      	movs	r3, #0
}
 80051da:	4618      	mov	r0, r3
 80051dc:	371c      	adds	r7, #28
 80051de:	46bd      	mov	sp, r7
 80051e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e4:	4770      	bx	lr
	...

080051e8 <FMC_NORSRAM_Extended_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef  FMC_NORSRAM_Extended_Timing_Init(FMC_NORSRAM_EXTENDED_TypeDef *Device, FMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank, uint32_t ExtendedMode)
{  
 80051e8:	b480      	push	{r7}
 80051ea:	b087      	sub	sp, #28
 80051ec:	af00      	add	r7, sp, #0
 80051ee:	60f8      	str	r0, [r7, #12]
 80051f0:	60b9      	str	r1, [r7, #8]
 80051f2:	607a      	str	r2, [r7, #4]
 80051f4:	603b      	str	r3, [r7, #0]
  uint32_t tmpr = 0U;
 80051f6:	2300      	movs	r3, #0
 80051f8:	617b      	str	r3, [r7, #20]
 
  /* Check the parameters */
  assert_param(IS_FMC_EXTENDED_MODE(ExtendedMode));
  
  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if(ExtendedMode == FMC_EXTENDED_MODE_ENABLE)
 80051fa:	683b      	ldr	r3, [r7, #0]
 80051fc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005200:	d122      	bne.n	8005248 <FMC_NORSRAM_Extended_Timing_Init+0x60>
    assert_param(IS_FMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FMC_NORSRAM_BANK(Bank));  
    
    /* Get the BWTR register value */
    tmpr = Device->BWTR[Bank];
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	687a      	ldr	r2, [r7, #4]
 8005206:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800520a:	617b      	str	r3, [r7, #20]

    /* Clear ADDSET, ADDHLD, DATAST, BUSTURN and ACCMOD bits */
    tmpr &= ((uint32_t)~(FMC_BWTR1_ADDSET  | FMC_BWTR1_ADDHLD | FMC_BWTR1_DATAST | \
 800520c:	697a      	ldr	r2, [r7, #20]
 800520e:	4b15      	ldr	r3, [pc, #84]	; (8005264 <FMC_NORSRAM_Extended_Timing_Init+0x7c>)
 8005210:	4013      	ands	r3, r2
 8005212:	617b      	str	r3, [r7, #20]
                         FMC_BWTR1_BUSTURN | FMC_BWTR1_ACCMOD));
    
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8005214:	68bb      	ldr	r3, [r7, #8]
 8005216:	681a      	ldr	r2, [r3, #0]
                      ((Timing->AddressHoldTime) << 4U)          |\
 8005218:	68bb      	ldr	r3, [r7, #8]
 800521a:	685b      	ldr	r3, [r3, #4]
 800521c:	011b      	lsls	r3, r3, #4
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800521e:	431a      	orrs	r2, r3
                      ((Timing->DataSetupTime) << 8U)            |\
 8005220:	68bb      	ldr	r3, [r7, #8]
 8005222:	689b      	ldr	r3, [r3, #8]
 8005224:	021b      	lsls	r3, r3, #8
                      ((Timing->AddressHoldTime) << 4U)          |\
 8005226:	431a      	orrs	r2, r3
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 8005228:	68bb      	ldr	r3, [r7, #8]
 800522a:	68db      	ldr	r3, [r3, #12]
 800522c:	041b      	lsls	r3, r3, #16
                      ((Timing->DataSetupTime) << 8U)            |\
 800522e:	431a      	orrs	r2, r3
                      (Timing->AccessMode));
 8005230:	68bb      	ldr	r3, [r7, #8]
 8005232:	699b      	ldr	r3, [r3, #24]
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 8005234:	4313      	orrs	r3, r2
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8005236:	697a      	ldr	r2, [r7, #20]
 8005238:	4313      	orrs	r3, r2
 800523a:	617b      	str	r3, [r7, #20]

    Device->BWTR[Bank] = tmpr;
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	687a      	ldr	r2, [r7, #4]
 8005240:	6979      	ldr	r1, [r7, #20]
 8005242:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8005246:	e005      	b.n	8005254 <FMC_NORSRAM_Extended_Timing_Init+0x6c>
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	687a      	ldr	r2, [r7, #4]
 800524c:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 8005250:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }   
  
  return HAL_OK;  
 8005254:	2300      	movs	r3, #0
}
 8005256:	4618      	mov	r0, r3
 8005258:	371c      	adds	r7, #28
 800525a:	46bd      	mov	sp, r7
 800525c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005260:	4770      	bx	lr
 8005262:	bf00      	nop
 8005264:	cff00000 	.word	0xcff00000

08005268 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005268:	b084      	sub	sp, #16
 800526a:	b580      	push	{r7, lr}
 800526c:	b084      	sub	sp, #16
 800526e:	af00      	add	r7, sp, #0
 8005270:	6078      	str	r0, [r7, #4]
 8005272:	f107 001c 	add.w	r0, r7, #28
 8005276:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800527a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800527c:	2b01      	cmp	r3, #1
 800527e:	d122      	bne.n	80052c6 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005284:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	68db      	ldr	r3, [r3, #12]
 8005290:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8005294:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005298:	687a      	ldr	r2, [r7, #4]
 800529a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	68db      	ldr	r3, [r3, #12]
 80052a0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80052a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80052aa:	2b01      	cmp	r3, #1
 80052ac:	d105      	bne.n	80052ba <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	68db      	ldr	r3, [r3, #12]
 80052b2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80052ba:	6878      	ldr	r0, [r7, #4]
 80052bc:	f001 fb16 	bl	80068ec <USB_CoreReset>
 80052c0:	4603      	mov	r3, r0
 80052c2:	73fb      	strb	r3, [r7, #15]
 80052c4:	e01a      	b.n	80052fc <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	68db      	ldr	r3, [r3, #12]
 80052ca:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80052d2:	6878      	ldr	r0, [r7, #4]
 80052d4:	f001 fb0a 	bl	80068ec <USB_CoreReset>
 80052d8:	4603      	mov	r3, r0
 80052da:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80052dc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d106      	bne.n	80052f0 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052e6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	639a      	str	r2, [r3, #56]	; 0x38
 80052ee:	e005      	b.n	80052fc <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052f4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80052fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052fe:	2b01      	cmp	r3, #1
 8005300:	d10b      	bne.n	800531a <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	689b      	ldr	r3, [r3, #8]
 8005306:	f043 0206 	orr.w	r2, r3, #6
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	689b      	ldr	r3, [r3, #8]
 8005312:	f043 0220 	orr.w	r2, r3, #32
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800531a:	7bfb      	ldrb	r3, [r7, #15]
}
 800531c:	4618      	mov	r0, r3
 800531e:	3710      	adds	r7, #16
 8005320:	46bd      	mov	sp, r7
 8005322:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005326:	b004      	add	sp, #16
 8005328:	4770      	bx	lr
	...

0800532c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800532c:	b480      	push	{r7}
 800532e:	b087      	sub	sp, #28
 8005330:	af00      	add	r7, sp, #0
 8005332:	60f8      	str	r0, [r7, #12]
 8005334:	60b9      	str	r1, [r7, #8]
 8005336:	4613      	mov	r3, r2
 8005338:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800533a:	79fb      	ldrb	r3, [r7, #7]
 800533c:	2b02      	cmp	r3, #2
 800533e:	d165      	bne.n	800540c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8005340:	68bb      	ldr	r3, [r7, #8]
 8005342:	4a41      	ldr	r2, [pc, #260]	; (8005448 <USB_SetTurnaroundTime+0x11c>)
 8005344:	4293      	cmp	r3, r2
 8005346:	d906      	bls.n	8005356 <USB_SetTurnaroundTime+0x2a>
 8005348:	68bb      	ldr	r3, [r7, #8]
 800534a:	4a40      	ldr	r2, [pc, #256]	; (800544c <USB_SetTurnaroundTime+0x120>)
 800534c:	4293      	cmp	r3, r2
 800534e:	d202      	bcs.n	8005356 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8005350:	230f      	movs	r3, #15
 8005352:	617b      	str	r3, [r7, #20]
 8005354:	e062      	b.n	800541c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8005356:	68bb      	ldr	r3, [r7, #8]
 8005358:	4a3c      	ldr	r2, [pc, #240]	; (800544c <USB_SetTurnaroundTime+0x120>)
 800535a:	4293      	cmp	r3, r2
 800535c:	d306      	bcc.n	800536c <USB_SetTurnaroundTime+0x40>
 800535e:	68bb      	ldr	r3, [r7, #8]
 8005360:	4a3b      	ldr	r2, [pc, #236]	; (8005450 <USB_SetTurnaroundTime+0x124>)
 8005362:	4293      	cmp	r3, r2
 8005364:	d202      	bcs.n	800536c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8005366:	230e      	movs	r3, #14
 8005368:	617b      	str	r3, [r7, #20]
 800536a:	e057      	b.n	800541c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800536c:	68bb      	ldr	r3, [r7, #8]
 800536e:	4a38      	ldr	r2, [pc, #224]	; (8005450 <USB_SetTurnaroundTime+0x124>)
 8005370:	4293      	cmp	r3, r2
 8005372:	d306      	bcc.n	8005382 <USB_SetTurnaroundTime+0x56>
 8005374:	68bb      	ldr	r3, [r7, #8]
 8005376:	4a37      	ldr	r2, [pc, #220]	; (8005454 <USB_SetTurnaroundTime+0x128>)
 8005378:	4293      	cmp	r3, r2
 800537a:	d202      	bcs.n	8005382 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800537c:	230d      	movs	r3, #13
 800537e:	617b      	str	r3, [r7, #20]
 8005380:	e04c      	b.n	800541c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8005382:	68bb      	ldr	r3, [r7, #8]
 8005384:	4a33      	ldr	r2, [pc, #204]	; (8005454 <USB_SetTurnaroundTime+0x128>)
 8005386:	4293      	cmp	r3, r2
 8005388:	d306      	bcc.n	8005398 <USB_SetTurnaroundTime+0x6c>
 800538a:	68bb      	ldr	r3, [r7, #8]
 800538c:	4a32      	ldr	r2, [pc, #200]	; (8005458 <USB_SetTurnaroundTime+0x12c>)
 800538e:	4293      	cmp	r3, r2
 8005390:	d802      	bhi.n	8005398 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8005392:	230c      	movs	r3, #12
 8005394:	617b      	str	r3, [r7, #20]
 8005396:	e041      	b.n	800541c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8005398:	68bb      	ldr	r3, [r7, #8]
 800539a:	4a2f      	ldr	r2, [pc, #188]	; (8005458 <USB_SetTurnaroundTime+0x12c>)
 800539c:	4293      	cmp	r3, r2
 800539e:	d906      	bls.n	80053ae <USB_SetTurnaroundTime+0x82>
 80053a0:	68bb      	ldr	r3, [r7, #8]
 80053a2:	4a2e      	ldr	r2, [pc, #184]	; (800545c <USB_SetTurnaroundTime+0x130>)
 80053a4:	4293      	cmp	r3, r2
 80053a6:	d802      	bhi.n	80053ae <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80053a8:	230b      	movs	r3, #11
 80053aa:	617b      	str	r3, [r7, #20]
 80053ac:	e036      	b.n	800541c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80053ae:	68bb      	ldr	r3, [r7, #8]
 80053b0:	4a2a      	ldr	r2, [pc, #168]	; (800545c <USB_SetTurnaroundTime+0x130>)
 80053b2:	4293      	cmp	r3, r2
 80053b4:	d906      	bls.n	80053c4 <USB_SetTurnaroundTime+0x98>
 80053b6:	68bb      	ldr	r3, [r7, #8]
 80053b8:	4a29      	ldr	r2, [pc, #164]	; (8005460 <USB_SetTurnaroundTime+0x134>)
 80053ba:	4293      	cmp	r3, r2
 80053bc:	d802      	bhi.n	80053c4 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80053be:	230a      	movs	r3, #10
 80053c0:	617b      	str	r3, [r7, #20]
 80053c2:	e02b      	b.n	800541c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80053c4:	68bb      	ldr	r3, [r7, #8]
 80053c6:	4a26      	ldr	r2, [pc, #152]	; (8005460 <USB_SetTurnaroundTime+0x134>)
 80053c8:	4293      	cmp	r3, r2
 80053ca:	d906      	bls.n	80053da <USB_SetTurnaroundTime+0xae>
 80053cc:	68bb      	ldr	r3, [r7, #8]
 80053ce:	4a25      	ldr	r2, [pc, #148]	; (8005464 <USB_SetTurnaroundTime+0x138>)
 80053d0:	4293      	cmp	r3, r2
 80053d2:	d202      	bcs.n	80053da <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80053d4:	2309      	movs	r3, #9
 80053d6:	617b      	str	r3, [r7, #20]
 80053d8:	e020      	b.n	800541c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80053da:	68bb      	ldr	r3, [r7, #8]
 80053dc:	4a21      	ldr	r2, [pc, #132]	; (8005464 <USB_SetTurnaroundTime+0x138>)
 80053de:	4293      	cmp	r3, r2
 80053e0:	d306      	bcc.n	80053f0 <USB_SetTurnaroundTime+0xc4>
 80053e2:	68bb      	ldr	r3, [r7, #8]
 80053e4:	4a20      	ldr	r2, [pc, #128]	; (8005468 <USB_SetTurnaroundTime+0x13c>)
 80053e6:	4293      	cmp	r3, r2
 80053e8:	d802      	bhi.n	80053f0 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80053ea:	2308      	movs	r3, #8
 80053ec:	617b      	str	r3, [r7, #20]
 80053ee:	e015      	b.n	800541c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80053f0:	68bb      	ldr	r3, [r7, #8]
 80053f2:	4a1d      	ldr	r2, [pc, #116]	; (8005468 <USB_SetTurnaroundTime+0x13c>)
 80053f4:	4293      	cmp	r3, r2
 80053f6:	d906      	bls.n	8005406 <USB_SetTurnaroundTime+0xda>
 80053f8:	68bb      	ldr	r3, [r7, #8]
 80053fa:	4a1c      	ldr	r2, [pc, #112]	; (800546c <USB_SetTurnaroundTime+0x140>)
 80053fc:	4293      	cmp	r3, r2
 80053fe:	d202      	bcs.n	8005406 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8005400:	2307      	movs	r3, #7
 8005402:	617b      	str	r3, [r7, #20]
 8005404:	e00a      	b.n	800541c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8005406:	2306      	movs	r3, #6
 8005408:	617b      	str	r3, [r7, #20]
 800540a:	e007      	b.n	800541c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800540c:	79fb      	ldrb	r3, [r7, #7]
 800540e:	2b00      	cmp	r3, #0
 8005410:	d102      	bne.n	8005418 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8005412:	2309      	movs	r3, #9
 8005414:	617b      	str	r3, [r7, #20]
 8005416:	e001      	b.n	800541c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8005418:	2309      	movs	r3, #9
 800541a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	68db      	ldr	r3, [r3, #12]
 8005420:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	68da      	ldr	r2, [r3, #12]
 800542c:	697b      	ldr	r3, [r7, #20]
 800542e:	029b      	lsls	r3, r3, #10
 8005430:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8005434:	431a      	orrs	r2, r3
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800543a:	2300      	movs	r3, #0
}
 800543c:	4618      	mov	r0, r3
 800543e:	371c      	adds	r7, #28
 8005440:	46bd      	mov	sp, r7
 8005442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005446:	4770      	bx	lr
 8005448:	00d8acbf 	.word	0x00d8acbf
 800544c:	00e4e1c0 	.word	0x00e4e1c0
 8005450:	00f42400 	.word	0x00f42400
 8005454:	01067380 	.word	0x01067380
 8005458:	011a499f 	.word	0x011a499f
 800545c:	01312cff 	.word	0x01312cff
 8005460:	014ca43f 	.word	0x014ca43f
 8005464:	016e3600 	.word	0x016e3600
 8005468:	01a6ab1f 	.word	0x01a6ab1f
 800546c:	01e84800 	.word	0x01e84800

08005470 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005470:	b480      	push	{r7}
 8005472:	b083      	sub	sp, #12
 8005474:	af00      	add	r7, sp, #0
 8005476:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	689b      	ldr	r3, [r3, #8]
 800547c:	f043 0201 	orr.w	r2, r3, #1
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005484:	2300      	movs	r3, #0
}
 8005486:	4618      	mov	r0, r3
 8005488:	370c      	adds	r7, #12
 800548a:	46bd      	mov	sp, r7
 800548c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005490:	4770      	bx	lr

08005492 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005492:	b480      	push	{r7}
 8005494:	b083      	sub	sp, #12
 8005496:	af00      	add	r7, sp, #0
 8005498:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	689b      	ldr	r3, [r3, #8]
 800549e:	f023 0201 	bic.w	r2, r3, #1
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80054a6:	2300      	movs	r3, #0
}
 80054a8:	4618      	mov	r0, r3
 80054aa:	370c      	adds	r7, #12
 80054ac:	46bd      	mov	sp, r7
 80054ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b2:	4770      	bx	lr

080054b4 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80054b4:	b580      	push	{r7, lr}
 80054b6:	b084      	sub	sp, #16
 80054b8:	af00      	add	r7, sp, #0
 80054ba:	6078      	str	r0, [r7, #4]
 80054bc:	460b      	mov	r3, r1
 80054be:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80054c0:	2300      	movs	r3, #0
 80054c2:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	68db      	ldr	r3, [r3, #12]
 80054c8:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80054d0:	78fb      	ldrb	r3, [r7, #3]
 80054d2:	2b01      	cmp	r3, #1
 80054d4:	d115      	bne.n	8005502 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	68db      	ldr	r3, [r3, #12]
 80054da:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80054e2:	2001      	movs	r0, #1
 80054e4:	f7fb fe5a 	bl	800119c <HAL_Delay>
      ms++;
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	3301      	adds	r3, #1
 80054ec:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80054ee:	6878      	ldr	r0, [r7, #4]
 80054f0:	f001 f96c 	bl	80067cc <USB_GetMode>
 80054f4:	4603      	mov	r3, r0
 80054f6:	2b01      	cmp	r3, #1
 80054f8:	d01e      	beq.n	8005538 <USB_SetCurrentMode+0x84>
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	2b31      	cmp	r3, #49	; 0x31
 80054fe:	d9f0      	bls.n	80054e2 <USB_SetCurrentMode+0x2e>
 8005500:	e01a      	b.n	8005538 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005502:	78fb      	ldrb	r3, [r7, #3]
 8005504:	2b00      	cmp	r3, #0
 8005506:	d115      	bne.n	8005534 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	68db      	ldr	r3, [r3, #12]
 800550c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005514:	2001      	movs	r0, #1
 8005516:	f7fb fe41 	bl	800119c <HAL_Delay>
      ms++;
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	3301      	adds	r3, #1
 800551e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8005520:	6878      	ldr	r0, [r7, #4]
 8005522:	f001 f953 	bl	80067cc <USB_GetMode>
 8005526:	4603      	mov	r3, r0
 8005528:	2b00      	cmp	r3, #0
 800552a:	d005      	beq.n	8005538 <USB_SetCurrentMode+0x84>
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	2b31      	cmp	r3, #49	; 0x31
 8005530:	d9f0      	bls.n	8005514 <USB_SetCurrentMode+0x60>
 8005532:	e001      	b.n	8005538 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005534:	2301      	movs	r3, #1
 8005536:	e005      	b.n	8005544 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	2b32      	cmp	r3, #50	; 0x32
 800553c:	d101      	bne.n	8005542 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800553e:	2301      	movs	r3, #1
 8005540:	e000      	b.n	8005544 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005542:	2300      	movs	r3, #0
}
 8005544:	4618      	mov	r0, r3
 8005546:	3710      	adds	r7, #16
 8005548:	46bd      	mov	sp, r7
 800554a:	bd80      	pop	{r7, pc}

0800554c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800554c:	b084      	sub	sp, #16
 800554e:	b580      	push	{r7, lr}
 8005550:	b086      	sub	sp, #24
 8005552:	af00      	add	r7, sp, #0
 8005554:	6078      	str	r0, [r7, #4]
 8005556:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800555a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800555e:	2300      	movs	r3, #0
 8005560:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8005566:	2300      	movs	r3, #0
 8005568:	613b      	str	r3, [r7, #16]
 800556a:	e009      	b.n	8005580 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800556c:	687a      	ldr	r2, [r7, #4]
 800556e:	693b      	ldr	r3, [r7, #16]
 8005570:	3340      	adds	r3, #64	; 0x40
 8005572:	009b      	lsls	r3, r3, #2
 8005574:	4413      	add	r3, r2
 8005576:	2200      	movs	r2, #0
 8005578:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800557a:	693b      	ldr	r3, [r7, #16]
 800557c:	3301      	adds	r3, #1
 800557e:	613b      	str	r3, [r7, #16]
 8005580:	693b      	ldr	r3, [r7, #16]
 8005582:	2b0e      	cmp	r3, #14
 8005584:	d9f2      	bls.n	800556c <USB_DevInit+0x20>
  }

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8005586:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005588:	2b00      	cmp	r3, #0
 800558a:	d11c      	bne.n	80055c6 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005592:	685b      	ldr	r3, [r3, #4]
 8005594:	68fa      	ldr	r2, [r7, #12]
 8005596:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800559a:	f043 0302 	orr.w	r3, r3, #2
 800559e:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055a4:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	601a      	str	r2, [r3, #0]
 80055c4:	e005      	b.n	80055d2 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055ca:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80055d8:	461a      	mov	r2, r3
 80055da:	2300      	movs	r3, #0
 80055dc:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80055e4:	4619      	mov	r1, r3
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80055ec:	461a      	mov	r2, r3
 80055ee:	680b      	ldr	r3, [r1, #0]
 80055f0:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80055f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055f4:	2b01      	cmp	r3, #1
 80055f6:	d10c      	bne.n	8005612 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80055f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d104      	bne.n	8005608 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80055fe:	2100      	movs	r1, #0
 8005600:	6878      	ldr	r0, [r7, #4]
 8005602:	f000 f945 	bl	8005890 <USB_SetDevSpeed>
 8005606:	e008      	b.n	800561a <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005608:	2101      	movs	r1, #1
 800560a:	6878      	ldr	r0, [r7, #4]
 800560c:	f000 f940 	bl	8005890 <USB_SetDevSpeed>
 8005610:	e003      	b.n	800561a <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005612:	2103      	movs	r1, #3
 8005614:	6878      	ldr	r0, [r7, #4]
 8005616:	f000 f93b 	bl	8005890 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800561a:	2110      	movs	r1, #16
 800561c:	6878      	ldr	r0, [r7, #4]
 800561e:	f000 f8f3 	bl	8005808 <USB_FlushTxFifo>
 8005622:	4603      	mov	r3, r0
 8005624:	2b00      	cmp	r3, #0
 8005626:	d001      	beq.n	800562c <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8005628:	2301      	movs	r3, #1
 800562a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800562c:	6878      	ldr	r0, [r7, #4]
 800562e:	f000 f90f 	bl	8005850 <USB_FlushRxFifo>
 8005632:	4603      	mov	r3, r0
 8005634:	2b00      	cmp	r3, #0
 8005636:	d001      	beq.n	800563c <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8005638:	2301      	movs	r3, #1
 800563a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005642:	461a      	mov	r2, r3
 8005644:	2300      	movs	r3, #0
 8005646:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800564e:	461a      	mov	r2, r3
 8005650:	2300      	movs	r3, #0
 8005652:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800565a:	461a      	mov	r2, r3
 800565c:	2300      	movs	r3, #0
 800565e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005660:	2300      	movs	r3, #0
 8005662:	613b      	str	r3, [r7, #16]
 8005664:	e043      	b.n	80056ee <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005666:	693b      	ldr	r3, [r7, #16]
 8005668:	015a      	lsls	r2, r3, #5
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	4413      	add	r3, r2
 800566e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005678:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800567c:	d118      	bne.n	80056b0 <USB_DevInit+0x164>
    {
      if (i == 0U)
 800567e:	693b      	ldr	r3, [r7, #16]
 8005680:	2b00      	cmp	r3, #0
 8005682:	d10a      	bne.n	800569a <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005684:	693b      	ldr	r3, [r7, #16]
 8005686:	015a      	lsls	r2, r3, #5
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	4413      	add	r3, r2
 800568c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005690:	461a      	mov	r2, r3
 8005692:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005696:	6013      	str	r3, [r2, #0]
 8005698:	e013      	b.n	80056c2 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800569a:	693b      	ldr	r3, [r7, #16]
 800569c:	015a      	lsls	r2, r3, #5
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	4413      	add	r3, r2
 80056a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056a6:	461a      	mov	r2, r3
 80056a8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80056ac:	6013      	str	r3, [r2, #0]
 80056ae:	e008      	b.n	80056c2 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80056b0:	693b      	ldr	r3, [r7, #16]
 80056b2:	015a      	lsls	r2, r3, #5
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	4413      	add	r3, r2
 80056b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056bc:	461a      	mov	r2, r3
 80056be:	2300      	movs	r3, #0
 80056c0:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80056c2:	693b      	ldr	r3, [r7, #16]
 80056c4:	015a      	lsls	r2, r3, #5
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	4413      	add	r3, r2
 80056ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056ce:	461a      	mov	r2, r3
 80056d0:	2300      	movs	r3, #0
 80056d2:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80056d4:	693b      	ldr	r3, [r7, #16]
 80056d6:	015a      	lsls	r2, r3, #5
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	4413      	add	r3, r2
 80056dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056e0:	461a      	mov	r2, r3
 80056e2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80056e6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80056e8:	693b      	ldr	r3, [r7, #16]
 80056ea:	3301      	adds	r3, #1
 80056ec:	613b      	str	r3, [r7, #16]
 80056ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056f0:	693a      	ldr	r2, [r7, #16]
 80056f2:	429a      	cmp	r2, r3
 80056f4:	d3b7      	bcc.n	8005666 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80056f6:	2300      	movs	r3, #0
 80056f8:	613b      	str	r3, [r7, #16]
 80056fa:	e043      	b.n	8005784 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80056fc:	693b      	ldr	r3, [r7, #16]
 80056fe:	015a      	lsls	r2, r3, #5
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	4413      	add	r3, r2
 8005704:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800570e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005712:	d118      	bne.n	8005746 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8005714:	693b      	ldr	r3, [r7, #16]
 8005716:	2b00      	cmp	r3, #0
 8005718:	d10a      	bne.n	8005730 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800571a:	693b      	ldr	r3, [r7, #16]
 800571c:	015a      	lsls	r2, r3, #5
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	4413      	add	r3, r2
 8005722:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005726:	461a      	mov	r2, r3
 8005728:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800572c:	6013      	str	r3, [r2, #0]
 800572e:	e013      	b.n	8005758 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005730:	693b      	ldr	r3, [r7, #16]
 8005732:	015a      	lsls	r2, r3, #5
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	4413      	add	r3, r2
 8005738:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800573c:	461a      	mov	r2, r3
 800573e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005742:	6013      	str	r3, [r2, #0]
 8005744:	e008      	b.n	8005758 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005746:	693b      	ldr	r3, [r7, #16]
 8005748:	015a      	lsls	r2, r3, #5
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	4413      	add	r3, r2
 800574e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005752:	461a      	mov	r2, r3
 8005754:	2300      	movs	r3, #0
 8005756:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005758:	693b      	ldr	r3, [r7, #16]
 800575a:	015a      	lsls	r2, r3, #5
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	4413      	add	r3, r2
 8005760:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005764:	461a      	mov	r2, r3
 8005766:	2300      	movs	r3, #0
 8005768:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800576a:	693b      	ldr	r3, [r7, #16]
 800576c:	015a      	lsls	r2, r3, #5
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	4413      	add	r3, r2
 8005772:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005776:	461a      	mov	r2, r3
 8005778:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800577c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800577e:	693b      	ldr	r3, [r7, #16]
 8005780:	3301      	adds	r3, #1
 8005782:	613b      	str	r3, [r7, #16]
 8005784:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005786:	693a      	ldr	r2, [r7, #16]
 8005788:	429a      	cmp	r2, r3
 800578a:	d3b7      	bcc.n	80056fc <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005792:	691b      	ldr	r3, [r3, #16]
 8005794:	68fa      	ldr	r2, [r7, #12]
 8005796:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800579a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800579e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	2200      	movs	r2, #0
 80057a4:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80057ac:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80057ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d105      	bne.n	80057c0 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	699b      	ldr	r3, [r3, #24]
 80057b8:	f043 0210 	orr.w	r2, r3, #16
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	699a      	ldr	r2, [r3, #24]
 80057c4:	4b0f      	ldr	r3, [pc, #60]	; (8005804 <USB_DevInit+0x2b8>)
 80057c6:	4313      	orrs	r3, r2
 80057c8:	687a      	ldr	r2, [r7, #4]
 80057ca:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80057cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d005      	beq.n	80057de <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	699b      	ldr	r3, [r3, #24]
 80057d6:	f043 0208 	orr.w	r2, r3, #8
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80057de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80057e0:	2b01      	cmp	r3, #1
 80057e2:	d107      	bne.n	80057f4 <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	699b      	ldr	r3, [r3, #24]
 80057e8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80057ec:	f043 0304 	orr.w	r3, r3, #4
 80057f0:	687a      	ldr	r2, [r7, #4]
 80057f2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80057f4:	7dfb      	ldrb	r3, [r7, #23]
}
 80057f6:	4618      	mov	r0, r3
 80057f8:	3718      	adds	r7, #24
 80057fa:	46bd      	mov	sp, r7
 80057fc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005800:	b004      	add	sp, #16
 8005802:	4770      	bx	lr
 8005804:	803c3800 	.word	0x803c3800

08005808 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005808:	b480      	push	{r7}
 800580a:	b085      	sub	sp, #20
 800580c:	af00      	add	r7, sp, #0
 800580e:	6078      	str	r0, [r7, #4]
 8005810:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005812:	2300      	movs	r3, #0
 8005814:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005816:	683b      	ldr	r3, [r7, #0]
 8005818:	019b      	lsls	r3, r3, #6
 800581a:	f043 0220 	orr.w	r2, r3, #32
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	3301      	adds	r3, #1
 8005826:	60fb      	str	r3, [r7, #12]
 8005828:	4a08      	ldr	r2, [pc, #32]	; (800584c <USB_FlushTxFifo+0x44>)
 800582a:	4293      	cmp	r3, r2
 800582c:	d901      	bls.n	8005832 <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 800582e:	2303      	movs	r3, #3
 8005830:	e006      	b.n	8005840 <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	691b      	ldr	r3, [r3, #16]
 8005836:	f003 0320 	and.w	r3, r3, #32
 800583a:	2b20      	cmp	r3, #32
 800583c:	d0f1      	beq.n	8005822 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800583e:	2300      	movs	r3, #0
}
 8005840:	4618      	mov	r0, r3
 8005842:	3714      	adds	r7, #20
 8005844:	46bd      	mov	sp, r7
 8005846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800584a:	4770      	bx	lr
 800584c:	00030d40 	.word	0x00030d40

08005850 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005850:	b480      	push	{r7}
 8005852:	b085      	sub	sp, #20
 8005854:	af00      	add	r7, sp, #0
 8005856:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005858:	2300      	movs	r3, #0
 800585a:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	2210      	movs	r2, #16
 8005860:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	3301      	adds	r3, #1
 8005866:	60fb      	str	r3, [r7, #12]
 8005868:	4a08      	ldr	r2, [pc, #32]	; (800588c <USB_FlushRxFifo+0x3c>)
 800586a:	4293      	cmp	r3, r2
 800586c:	d901      	bls.n	8005872 <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 800586e:	2303      	movs	r3, #3
 8005870:	e006      	b.n	8005880 <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	691b      	ldr	r3, [r3, #16]
 8005876:	f003 0310 	and.w	r3, r3, #16
 800587a:	2b10      	cmp	r3, #16
 800587c:	d0f1      	beq.n	8005862 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800587e:	2300      	movs	r3, #0
}
 8005880:	4618      	mov	r0, r3
 8005882:	3714      	adds	r7, #20
 8005884:	46bd      	mov	sp, r7
 8005886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800588a:	4770      	bx	lr
 800588c:	00030d40 	.word	0x00030d40

08005890 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005890:	b480      	push	{r7}
 8005892:	b085      	sub	sp, #20
 8005894:	af00      	add	r7, sp, #0
 8005896:	6078      	str	r0, [r7, #4]
 8005898:	460b      	mov	r3, r1
 800589a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80058a6:	681a      	ldr	r2, [r3, #0]
 80058a8:	78fb      	ldrb	r3, [r7, #3]
 80058aa:	68f9      	ldr	r1, [r7, #12]
 80058ac:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80058b0:	4313      	orrs	r3, r2
 80058b2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80058b4:	2300      	movs	r3, #0
}
 80058b6:	4618      	mov	r0, r3
 80058b8:	3714      	adds	r7, #20
 80058ba:	46bd      	mov	sp, r7
 80058bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058c0:	4770      	bx	lr

080058c2 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80058c2:	b480      	push	{r7}
 80058c4:	b087      	sub	sp, #28
 80058c6:	af00      	add	r7, sp, #0
 80058c8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80058ce:	693b      	ldr	r3, [r7, #16]
 80058d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80058d4:	689b      	ldr	r3, [r3, #8]
 80058d6:	f003 0306 	and.w	r3, r3, #6
 80058da:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d102      	bne.n	80058e8 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80058e2:	2300      	movs	r3, #0
 80058e4:	75fb      	strb	r3, [r7, #23]
 80058e6:	e00a      	b.n	80058fe <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	2b02      	cmp	r3, #2
 80058ec:	d002      	beq.n	80058f4 <USB_GetDevSpeed+0x32>
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	2b06      	cmp	r3, #6
 80058f2:	d102      	bne.n	80058fa <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80058f4:	2302      	movs	r3, #2
 80058f6:	75fb      	strb	r3, [r7, #23]
 80058f8:	e001      	b.n	80058fe <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80058fa:	230f      	movs	r3, #15
 80058fc:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80058fe:	7dfb      	ldrb	r3, [r7, #23]
}
 8005900:	4618      	mov	r0, r3
 8005902:	371c      	adds	r7, #28
 8005904:	46bd      	mov	sp, r7
 8005906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800590a:	4770      	bx	lr

0800590c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800590c:	b480      	push	{r7}
 800590e:	b085      	sub	sp, #20
 8005910:	af00      	add	r7, sp, #0
 8005912:	6078      	str	r0, [r7, #4]
 8005914:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800591a:	683b      	ldr	r3, [r7, #0]
 800591c:	781b      	ldrb	r3, [r3, #0]
 800591e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005920:	683b      	ldr	r3, [r7, #0]
 8005922:	785b      	ldrb	r3, [r3, #1]
 8005924:	2b01      	cmp	r3, #1
 8005926:	d13a      	bne.n	800599e <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800592e:	69da      	ldr	r2, [r3, #28]
 8005930:	683b      	ldr	r3, [r7, #0]
 8005932:	781b      	ldrb	r3, [r3, #0]
 8005934:	f003 030f 	and.w	r3, r3, #15
 8005938:	2101      	movs	r1, #1
 800593a:	fa01 f303 	lsl.w	r3, r1, r3
 800593e:	b29b      	uxth	r3, r3
 8005940:	68f9      	ldr	r1, [r7, #12]
 8005942:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005946:	4313      	orrs	r3, r2
 8005948:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800594a:	68bb      	ldr	r3, [r7, #8]
 800594c:	015a      	lsls	r2, r3, #5
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	4413      	add	r3, r2
 8005952:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800595c:	2b00      	cmp	r3, #0
 800595e:	d155      	bne.n	8005a0c <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005960:	68bb      	ldr	r3, [r7, #8]
 8005962:	015a      	lsls	r2, r3, #5
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	4413      	add	r3, r2
 8005968:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800596c:	681a      	ldr	r2, [r3, #0]
 800596e:	683b      	ldr	r3, [r7, #0]
 8005970:	689b      	ldr	r3, [r3, #8]
 8005972:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005976:	683b      	ldr	r3, [r7, #0]
 8005978:	78db      	ldrb	r3, [r3, #3]
 800597a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800597c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800597e:	68bb      	ldr	r3, [r7, #8]
 8005980:	059b      	lsls	r3, r3, #22
 8005982:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005984:	4313      	orrs	r3, r2
 8005986:	68ba      	ldr	r2, [r7, #8]
 8005988:	0151      	lsls	r1, r2, #5
 800598a:	68fa      	ldr	r2, [r7, #12]
 800598c:	440a      	add	r2, r1
 800598e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005992:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005996:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800599a:	6013      	str	r3, [r2, #0]
 800599c:	e036      	b.n	8005a0c <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80059a4:	69da      	ldr	r2, [r3, #28]
 80059a6:	683b      	ldr	r3, [r7, #0]
 80059a8:	781b      	ldrb	r3, [r3, #0]
 80059aa:	f003 030f 	and.w	r3, r3, #15
 80059ae:	2101      	movs	r1, #1
 80059b0:	fa01 f303 	lsl.w	r3, r1, r3
 80059b4:	041b      	lsls	r3, r3, #16
 80059b6:	68f9      	ldr	r1, [r7, #12]
 80059b8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80059bc:	4313      	orrs	r3, r2
 80059be:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80059c0:	68bb      	ldr	r3, [r7, #8]
 80059c2:	015a      	lsls	r2, r3, #5
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	4413      	add	r3, r2
 80059c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d11a      	bne.n	8005a0c <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80059d6:	68bb      	ldr	r3, [r7, #8]
 80059d8:	015a      	lsls	r2, r3, #5
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	4413      	add	r3, r2
 80059de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059e2:	681a      	ldr	r2, [r3, #0]
 80059e4:	683b      	ldr	r3, [r7, #0]
 80059e6:	689b      	ldr	r3, [r3, #8]
 80059e8:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80059ec:	683b      	ldr	r3, [r7, #0]
 80059ee:	78db      	ldrb	r3, [r3, #3]
 80059f0:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80059f2:	430b      	orrs	r3, r1
 80059f4:	4313      	orrs	r3, r2
 80059f6:	68ba      	ldr	r2, [r7, #8]
 80059f8:	0151      	lsls	r1, r2, #5
 80059fa:	68fa      	ldr	r2, [r7, #12]
 80059fc:	440a      	add	r2, r1
 80059fe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005a02:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005a06:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005a0a:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8005a0c:	2300      	movs	r3, #0
}
 8005a0e:	4618      	mov	r0, r3
 8005a10:	3714      	adds	r7, #20
 8005a12:	46bd      	mov	sp, r7
 8005a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a18:	4770      	bx	lr
	...

08005a1c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005a1c:	b480      	push	{r7}
 8005a1e:	b085      	sub	sp, #20
 8005a20:	af00      	add	r7, sp, #0
 8005a22:	6078      	str	r0, [r7, #4]
 8005a24:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005a2a:	683b      	ldr	r3, [r7, #0]
 8005a2c:	781b      	ldrb	r3, [r3, #0]
 8005a2e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8005a30:	683b      	ldr	r3, [r7, #0]
 8005a32:	785b      	ldrb	r3, [r3, #1]
 8005a34:	2b01      	cmp	r3, #1
 8005a36:	d161      	bne.n	8005afc <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005a38:	68bb      	ldr	r3, [r7, #8]
 8005a3a:	015a      	lsls	r2, r3, #5
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	4413      	add	r3, r2
 8005a40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005a4a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005a4e:	d11f      	bne.n	8005a90 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8005a50:	68bb      	ldr	r3, [r7, #8]
 8005a52:	015a      	lsls	r2, r3, #5
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	4413      	add	r3, r2
 8005a58:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	68ba      	ldr	r2, [r7, #8]
 8005a60:	0151      	lsls	r1, r2, #5
 8005a62:	68fa      	ldr	r2, [r7, #12]
 8005a64:	440a      	add	r2, r1
 8005a66:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005a6a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005a6e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8005a70:	68bb      	ldr	r3, [r7, #8]
 8005a72:	015a      	lsls	r2, r3, #5
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	4413      	add	r3, r2
 8005a78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	68ba      	ldr	r2, [r7, #8]
 8005a80:	0151      	lsls	r1, r2, #5
 8005a82:	68fa      	ldr	r2, [r7, #12]
 8005a84:	440a      	add	r2, r1
 8005a86:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005a8a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005a8e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a96:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005a98:	683b      	ldr	r3, [r7, #0]
 8005a9a:	781b      	ldrb	r3, [r3, #0]
 8005a9c:	f003 030f 	and.w	r3, r3, #15
 8005aa0:	2101      	movs	r1, #1
 8005aa2:	fa01 f303 	lsl.w	r3, r1, r3
 8005aa6:	b29b      	uxth	r3, r3
 8005aa8:	43db      	mvns	r3, r3
 8005aaa:	68f9      	ldr	r1, [r7, #12]
 8005aac:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005ab0:	4013      	ands	r3, r2
 8005ab2:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005aba:	69da      	ldr	r2, [r3, #28]
 8005abc:	683b      	ldr	r3, [r7, #0]
 8005abe:	781b      	ldrb	r3, [r3, #0]
 8005ac0:	f003 030f 	and.w	r3, r3, #15
 8005ac4:	2101      	movs	r1, #1
 8005ac6:	fa01 f303 	lsl.w	r3, r1, r3
 8005aca:	b29b      	uxth	r3, r3
 8005acc:	43db      	mvns	r3, r3
 8005ace:	68f9      	ldr	r1, [r7, #12]
 8005ad0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005ad4:	4013      	ands	r3, r2
 8005ad6:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8005ad8:	68bb      	ldr	r3, [r7, #8]
 8005ada:	015a      	lsls	r2, r3, #5
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	4413      	add	r3, r2
 8005ae0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ae4:	681a      	ldr	r2, [r3, #0]
 8005ae6:	68bb      	ldr	r3, [r7, #8]
 8005ae8:	0159      	lsls	r1, r3, #5
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	440b      	add	r3, r1
 8005aee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005af2:	4619      	mov	r1, r3
 8005af4:	4b35      	ldr	r3, [pc, #212]	; (8005bcc <USB_DeactivateEndpoint+0x1b0>)
 8005af6:	4013      	ands	r3, r2
 8005af8:	600b      	str	r3, [r1, #0]
 8005afa:	e060      	b.n	8005bbe <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005afc:	68bb      	ldr	r3, [r7, #8]
 8005afe:	015a      	lsls	r2, r3, #5
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	4413      	add	r3, r2
 8005b04:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005b0e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005b12:	d11f      	bne.n	8005b54 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005b14:	68bb      	ldr	r3, [r7, #8]
 8005b16:	015a      	lsls	r2, r3, #5
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	4413      	add	r3, r2
 8005b1c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	68ba      	ldr	r2, [r7, #8]
 8005b24:	0151      	lsls	r1, r2, #5
 8005b26:	68fa      	ldr	r2, [r7, #12]
 8005b28:	440a      	add	r2, r1
 8005b2a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005b2e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005b32:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8005b34:	68bb      	ldr	r3, [r7, #8]
 8005b36:	015a      	lsls	r2, r3, #5
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	4413      	add	r3, r2
 8005b3c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	68ba      	ldr	r2, [r7, #8]
 8005b44:	0151      	lsls	r1, r2, #5
 8005b46:	68fa      	ldr	r2, [r7, #12]
 8005b48:	440a      	add	r2, r1
 8005b4a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005b4e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005b52:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b5a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005b5c:	683b      	ldr	r3, [r7, #0]
 8005b5e:	781b      	ldrb	r3, [r3, #0]
 8005b60:	f003 030f 	and.w	r3, r3, #15
 8005b64:	2101      	movs	r1, #1
 8005b66:	fa01 f303 	lsl.w	r3, r1, r3
 8005b6a:	041b      	lsls	r3, r3, #16
 8005b6c:	43db      	mvns	r3, r3
 8005b6e:	68f9      	ldr	r1, [r7, #12]
 8005b70:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005b74:	4013      	ands	r3, r2
 8005b76:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b7e:	69da      	ldr	r2, [r3, #28]
 8005b80:	683b      	ldr	r3, [r7, #0]
 8005b82:	781b      	ldrb	r3, [r3, #0]
 8005b84:	f003 030f 	and.w	r3, r3, #15
 8005b88:	2101      	movs	r1, #1
 8005b8a:	fa01 f303 	lsl.w	r3, r1, r3
 8005b8e:	041b      	lsls	r3, r3, #16
 8005b90:	43db      	mvns	r3, r3
 8005b92:	68f9      	ldr	r1, [r7, #12]
 8005b94:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005b98:	4013      	ands	r3, r2
 8005b9a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8005b9c:	68bb      	ldr	r3, [r7, #8]
 8005b9e:	015a      	lsls	r2, r3, #5
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	4413      	add	r3, r2
 8005ba4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ba8:	681a      	ldr	r2, [r3, #0]
 8005baa:	68bb      	ldr	r3, [r7, #8]
 8005bac:	0159      	lsls	r1, r3, #5
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	440b      	add	r3, r1
 8005bb2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005bb6:	4619      	mov	r1, r3
 8005bb8:	4b05      	ldr	r3, [pc, #20]	; (8005bd0 <USB_DeactivateEndpoint+0x1b4>)
 8005bba:	4013      	ands	r3, r2
 8005bbc:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8005bbe:	2300      	movs	r3, #0
}
 8005bc0:	4618      	mov	r0, r3
 8005bc2:	3714      	adds	r7, #20
 8005bc4:	46bd      	mov	sp, r7
 8005bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bca:	4770      	bx	lr
 8005bcc:	ec337800 	.word	0xec337800
 8005bd0:	eff37800 	.word	0xeff37800

08005bd4 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005bd4:	b580      	push	{r7, lr}
 8005bd6:	b08a      	sub	sp, #40	; 0x28
 8005bd8:	af02      	add	r7, sp, #8
 8005bda:	60f8      	str	r0, [r7, #12]
 8005bdc:	60b9      	str	r1, [r7, #8]
 8005bde:	4613      	mov	r3, r2
 8005be0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8005be6:	68bb      	ldr	r3, [r7, #8]
 8005be8:	781b      	ldrb	r3, [r3, #0]
 8005bea:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005bec:	68bb      	ldr	r3, [r7, #8]
 8005bee:	785b      	ldrb	r3, [r3, #1]
 8005bf0:	2b01      	cmp	r3, #1
 8005bf2:	f040 815c 	bne.w	8005eae <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005bf6:	68bb      	ldr	r3, [r7, #8]
 8005bf8:	695b      	ldr	r3, [r3, #20]
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d132      	bne.n	8005c64 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005bfe:	69bb      	ldr	r3, [r7, #24]
 8005c00:	015a      	lsls	r2, r3, #5
 8005c02:	69fb      	ldr	r3, [r7, #28]
 8005c04:	4413      	add	r3, r2
 8005c06:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c0a:	691b      	ldr	r3, [r3, #16]
 8005c0c:	69ba      	ldr	r2, [r7, #24]
 8005c0e:	0151      	lsls	r1, r2, #5
 8005c10:	69fa      	ldr	r2, [r7, #28]
 8005c12:	440a      	add	r2, r1
 8005c14:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005c18:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005c1c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005c20:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005c22:	69bb      	ldr	r3, [r7, #24]
 8005c24:	015a      	lsls	r2, r3, #5
 8005c26:	69fb      	ldr	r3, [r7, #28]
 8005c28:	4413      	add	r3, r2
 8005c2a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c2e:	691b      	ldr	r3, [r3, #16]
 8005c30:	69ba      	ldr	r2, [r7, #24]
 8005c32:	0151      	lsls	r1, r2, #5
 8005c34:	69fa      	ldr	r2, [r7, #28]
 8005c36:	440a      	add	r2, r1
 8005c38:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005c3c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005c40:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005c42:	69bb      	ldr	r3, [r7, #24]
 8005c44:	015a      	lsls	r2, r3, #5
 8005c46:	69fb      	ldr	r3, [r7, #28]
 8005c48:	4413      	add	r3, r2
 8005c4a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c4e:	691b      	ldr	r3, [r3, #16]
 8005c50:	69ba      	ldr	r2, [r7, #24]
 8005c52:	0151      	lsls	r1, r2, #5
 8005c54:	69fa      	ldr	r2, [r7, #28]
 8005c56:	440a      	add	r2, r1
 8005c58:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005c5c:	0cdb      	lsrs	r3, r3, #19
 8005c5e:	04db      	lsls	r3, r3, #19
 8005c60:	6113      	str	r3, [r2, #16]
 8005c62:	e074      	b.n	8005d4e <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005c64:	69bb      	ldr	r3, [r7, #24]
 8005c66:	015a      	lsls	r2, r3, #5
 8005c68:	69fb      	ldr	r3, [r7, #28]
 8005c6a:	4413      	add	r3, r2
 8005c6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c70:	691b      	ldr	r3, [r3, #16]
 8005c72:	69ba      	ldr	r2, [r7, #24]
 8005c74:	0151      	lsls	r1, r2, #5
 8005c76:	69fa      	ldr	r2, [r7, #28]
 8005c78:	440a      	add	r2, r1
 8005c7a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005c7e:	0cdb      	lsrs	r3, r3, #19
 8005c80:	04db      	lsls	r3, r3, #19
 8005c82:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005c84:	69bb      	ldr	r3, [r7, #24]
 8005c86:	015a      	lsls	r2, r3, #5
 8005c88:	69fb      	ldr	r3, [r7, #28]
 8005c8a:	4413      	add	r3, r2
 8005c8c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c90:	691b      	ldr	r3, [r3, #16]
 8005c92:	69ba      	ldr	r2, [r7, #24]
 8005c94:	0151      	lsls	r1, r2, #5
 8005c96:	69fa      	ldr	r2, [r7, #28]
 8005c98:	440a      	add	r2, r1
 8005c9a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005c9e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005ca2:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005ca6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8005ca8:	69bb      	ldr	r3, [r7, #24]
 8005caa:	015a      	lsls	r2, r3, #5
 8005cac:	69fb      	ldr	r3, [r7, #28]
 8005cae:	4413      	add	r3, r2
 8005cb0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005cb4:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8005cb6:	68bb      	ldr	r3, [r7, #8]
 8005cb8:	6959      	ldr	r1, [r3, #20]
 8005cba:	68bb      	ldr	r3, [r7, #8]
 8005cbc:	689b      	ldr	r3, [r3, #8]
 8005cbe:	440b      	add	r3, r1
 8005cc0:	1e59      	subs	r1, r3, #1
 8005cc2:	68bb      	ldr	r3, [r7, #8]
 8005cc4:	689b      	ldr	r3, [r3, #8]
 8005cc6:	fbb1 f3f3 	udiv	r3, r1, r3
 8005cca:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8005ccc:	4b9d      	ldr	r3, [pc, #628]	; (8005f44 <USB_EPStartXfer+0x370>)
 8005cce:	400b      	ands	r3, r1
 8005cd0:	69b9      	ldr	r1, [r7, #24]
 8005cd2:	0148      	lsls	r0, r1, #5
 8005cd4:	69f9      	ldr	r1, [r7, #28]
 8005cd6:	4401      	add	r1, r0
 8005cd8:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005cdc:	4313      	orrs	r3, r2
 8005cde:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005ce0:	69bb      	ldr	r3, [r7, #24]
 8005ce2:	015a      	lsls	r2, r3, #5
 8005ce4:	69fb      	ldr	r3, [r7, #28]
 8005ce6:	4413      	add	r3, r2
 8005ce8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005cec:	691a      	ldr	r2, [r3, #16]
 8005cee:	68bb      	ldr	r3, [r7, #8]
 8005cf0:	695b      	ldr	r3, [r3, #20]
 8005cf2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005cf6:	69b9      	ldr	r1, [r7, #24]
 8005cf8:	0148      	lsls	r0, r1, #5
 8005cfa:	69f9      	ldr	r1, [r7, #28]
 8005cfc:	4401      	add	r1, r0
 8005cfe:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005d02:	4313      	orrs	r3, r2
 8005d04:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8005d06:	68bb      	ldr	r3, [r7, #8]
 8005d08:	78db      	ldrb	r3, [r3, #3]
 8005d0a:	2b01      	cmp	r3, #1
 8005d0c:	d11f      	bne.n	8005d4e <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8005d0e:	69bb      	ldr	r3, [r7, #24]
 8005d10:	015a      	lsls	r2, r3, #5
 8005d12:	69fb      	ldr	r3, [r7, #28]
 8005d14:	4413      	add	r3, r2
 8005d16:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d1a:	691b      	ldr	r3, [r3, #16]
 8005d1c:	69ba      	ldr	r2, [r7, #24]
 8005d1e:	0151      	lsls	r1, r2, #5
 8005d20:	69fa      	ldr	r2, [r7, #28]
 8005d22:	440a      	add	r2, r1
 8005d24:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005d28:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8005d2c:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8005d2e:	69bb      	ldr	r3, [r7, #24]
 8005d30:	015a      	lsls	r2, r3, #5
 8005d32:	69fb      	ldr	r3, [r7, #28]
 8005d34:	4413      	add	r3, r2
 8005d36:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d3a:	691b      	ldr	r3, [r3, #16]
 8005d3c:	69ba      	ldr	r2, [r7, #24]
 8005d3e:	0151      	lsls	r1, r2, #5
 8005d40:	69fa      	ldr	r2, [r7, #28]
 8005d42:	440a      	add	r2, r1
 8005d44:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005d48:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005d4c:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8005d4e:	79fb      	ldrb	r3, [r7, #7]
 8005d50:	2b01      	cmp	r3, #1
 8005d52:	d14b      	bne.n	8005dec <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005d54:	68bb      	ldr	r3, [r7, #8]
 8005d56:	691b      	ldr	r3, [r3, #16]
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d009      	beq.n	8005d70 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005d5c:	69bb      	ldr	r3, [r7, #24]
 8005d5e:	015a      	lsls	r2, r3, #5
 8005d60:	69fb      	ldr	r3, [r7, #28]
 8005d62:	4413      	add	r3, r2
 8005d64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d68:	461a      	mov	r2, r3
 8005d6a:	68bb      	ldr	r3, [r7, #8]
 8005d6c:	691b      	ldr	r3, [r3, #16]
 8005d6e:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8005d70:	68bb      	ldr	r3, [r7, #8]
 8005d72:	78db      	ldrb	r3, [r3, #3]
 8005d74:	2b01      	cmp	r3, #1
 8005d76:	d128      	bne.n	8005dca <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005d78:	69fb      	ldr	r3, [r7, #28]
 8005d7a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d7e:	689b      	ldr	r3, [r3, #8]
 8005d80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d110      	bne.n	8005daa <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005d88:	69bb      	ldr	r3, [r7, #24]
 8005d8a:	015a      	lsls	r2, r3, #5
 8005d8c:	69fb      	ldr	r3, [r7, #28]
 8005d8e:	4413      	add	r3, r2
 8005d90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	69ba      	ldr	r2, [r7, #24]
 8005d98:	0151      	lsls	r1, r2, #5
 8005d9a:	69fa      	ldr	r2, [r7, #28]
 8005d9c:	440a      	add	r2, r1
 8005d9e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005da2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005da6:	6013      	str	r3, [r2, #0]
 8005da8:	e00f      	b.n	8005dca <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005daa:	69bb      	ldr	r3, [r7, #24]
 8005dac:	015a      	lsls	r2, r3, #5
 8005dae:	69fb      	ldr	r3, [r7, #28]
 8005db0:	4413      	add	r3, r2
 8005db2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	69ba      	ldr	r2, [r7, #24]
 8005dba:	0151      	lsls	r1, r2, #5
 8005dbc:	69fa      	ldr	r2, [r7, #28]
 8005dbe:	440a      	add	r2, r1
 8005dc0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005dc4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005dc8:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005dca:	69bb      	ldr	r3, [r7, #24]
 8005dcc:	015a      	lsls	r2, r3, #5
 8005dce:	69fb      	ldr	r3, [r7, #28]
 8005dd0:	4413      	add	r3, r2
 8005dd2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	69ba      	ldr	r2, [r7, #24]
 8005dda:	0151      	lsls	r1, r2, #5
 8005ddc:	69fa      	ldr	r2, [r7, #28]
 8005dde:	440a      	add	r2, r1
 8005de0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005de4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005de8:	6013      	str	r3, [r2, #0]
 8005dea:	e12f      	b.n	800604c <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005dec:	69bb      	ldr	r3, [r7, #24]
 8005dee:	015a      	lsls	r2, r3, #5
 8005df0:	69fb      	ldr	r3, [r7, #28]
 8005df2:	4413      	add	r3, r2
 8005df4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	69ba      	ldr	r2, [r7, #24]
 8005dfc:	0151      	lsls	r1, r2, #5
 8005dfe:	69fa      	ldr	r2, [r7, #28]
 8005e00:	440a      	add	r2, r1
 8005e02:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005e06:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005e0a:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005e0c:	68bb      	ldr	r3, [r7, #8]
 8005e0e:	78db      	ldrb	r3, [r3, #3]
 8005e10:	2b01      	cmp	r3, #1
 8005e12:	d015      	beq.n	8005e40 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8005e14:	68bb      	ldr	r3, [r7, #8]
 8005e16:	695b      	ldr	r3, [r3, #20]
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	f000 8117 	beq.w	800604c <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005e1e:	69fb      	ldr	r3, [r7, #28]
 8005e20:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e24:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005e26:	68bb      	ldr	r3, [r7, #8]
 8005e28:	781b      	ldrb	r3, [r3, #0]
 8005e2a:	f003 030f 	and.w	r3, r3, #15
 8005e2e:	2101      	movs	r1, #1
 8005e30:	fa01 f303 	lsl.w	r3, r1, r3
 8005e34:	69f9      	ldr	r1, [r7, #28]
 8005e36:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005e3a:	4313      	orrs	r3, r2
 8005e3c:	634b      	str	r3, [r1, #52]	; 0x34
 8005e3e:	e105      	b.n	800604c <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005e40:	69fb      	ldr	r3, [r7, #28]
 8005e42:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e46:	689b      	ldr	r3, [r3, #8]
 8005e48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d110      	bne.n	8005e72 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005e50:	69bb      	ldr	r3, [r7, #24]
 8005e52:	015a      	lsls	r2, r3, #5
 8005e54:	69fb      	ldr	r3, [r7, #28]
 8005e56:	4413      	add	r3, r2
 8005e58:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	69ba      	ldr	r2, [r7, #24]
 8005e60:	0151      	lsls	r1, r2, #5
 8005e62:	69fa      	ldr	r2, [r7, #28]
 8005e64:	440a      	add	r2, r1
 8005e66:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005e6a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005e6e:	6013      	str	r3, [r2, #0]
 8005e70:	e00f      	b.n	8005e92 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005e72:	69bb      	ldr	r3, [r7, #24]
 8005e74:	015a      	lsls	r2, r3, #5
 8005e76:	69fb      	ldr	r3, [r7, #28]
 8005e78:	4413      	add	r3, r2
 8005e7a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	69ba      	ldr	r2, [r7, #24]
 8005e82:	0151      	lsls	r1, r2, #5
 8005e84:	69fa      	ldr	r2, [r7, #28]
 8005e86:	440a      	add	r2, r1
 8005e88:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005e8c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005e90:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8005e92:	68bb      	ldr	r3, [r7, #8]
 8005e94:	68d9      	ldr	r1, [r3, #12]
 8005e96:	68bb      	ldr	r3, [r7, #8]
 8005e98:	781a      	ldrb	r2, [r3, #0]
 8005e9a:	68bb      	ldr	r3, [r7, #8]
 8005e9c:	695b      	ldr	r3, [r3, #20]
 8005e9e:	b298      	uxth	r0, r3
 8005ea0:	79fb      	ldrb	r3, [r7, #7]
 8005ea2:	9300      	str	r3, [sp, #0]
 8005ea4:	4603      	mov	r3, r0
 8005ea6:	68f8      	ldr	r0, [r7, #12]
 8005ea8:	f000 fa2b 	bl	8006302 <USB_WritePacket>
 8005eac:	e0ce      	b.n	800604c <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005eae:	69bb      	ldr	r3, [r7, #24]
 8005eb0:	015a      	lsls	r2, r3, #5
 8005eb2:	69fb      	ldr	r3, [r7, #28]
 8005eb4:	4413      	add	r3, r2
 8005eb6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005eba:	691b      	ldr	r3, [r3, #16]
 8005ebc:	69ba      	ldr	r2, [r7, #24]
 8005ebe:	0151      	lsls	r1, r2, #5
 8005ec0:	69fa      	ldr	r2, [r7, #28]
 8005ec2:	440a      	add	r2, r1
 8005ec4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005ec8:	0cdb      	lsrs	r3, r3, #19
 8005eca:	04db      	lsls	r3, r3, #19
 8005ecc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005ece:	69bb      	ldr	r3, [r7, #24]
 8005ed0:	015a      	lsls	r2, r3, #5
 8005ed2:	69fb      	ldr	r3, [r7, #28]
 8005ed4:	4413      	add	r3, r2
 8005ed6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005eda:	691b      	ldr	r3, [r3, #16]
 8005edc:	69ba      	ldr	r2, [r7, #24]
 8005ede:	0151      	lsls	r1, r2, #5
 8005ee0:	69fa      	ldr	r2, [r7, #28]
 8005ee2:	440a      	add	r2, r1
 8005ee4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005ee8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005eec:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005ef0:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8005ef2:	68bb      	ldr	r3, [r7, #8]
 8005ef4:	695b      	ldr	r3, [r3, #20]
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d126      	bne.n	8005f48 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8005efa:	69bb      	ldr	r3, [r7, #24]
 8005efc:	015a      	lsls	r2, r3, #5
 8005efe:	69fb      	ldr	r3, [r7, #28]
 8005f00:	4413      	add	r3, r2
 8005f02:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f06:	691a      	ldr	r2, [r3, #16]
 8005f08:	68bb      	ldr	r3, [r7, #8]
 8005f0a:	689b      	ldr	r3, [r3, #8]
 8005f0c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005f10:	69b9      	ldr	r1, [r7, #24]
 8005f12:	0148      	lsls	r0, r1, #5
 8005f14:	69f9      	ldr	r1, [r7, #28]
 8005f16:	4401      	add	r1, r0
 8005f18:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005f1c:	4313      	orrs	r3, r2
 8005f1e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005f20:	69bb      	ldr	r3, [r7, #24]
 8005f22:	015a      	lsls	r2, r3, #5
 8005f24:	69fb      	ldr	r3, [r7, #28]
 8005f26:	4413      	add	r3, r2
 8005f28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f2c:	691b      	ldr	r3, [r3, #16]
 8005f2e:	69ba      	ldr	r2, [r7, #24]
 8005f30:	0151      	lsls	r1, r2, #5
 8005f32:	69fa      	ldr	r2, [r7, #28]
 8005f34:	440a      	add	r2, r1
 8005f36:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005f3a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005f3e:	6113      	str	r3, [r2, #16]
 8005f40:	e036      	b.n	8005fb0 <USB_EPStartXfer+0x3dc>
 8005f42:	bf00      	nop
 8005f44:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8005f48:	68bb      	ldr	r3, [r7, #8]
 8005f4a:	695a      	ldr	r2, [r3, #20]
 8005f4c:	68bb      	ldr	r3, [r7, #8]
 8005f4e:	689b      	ldr	r3, [r3, #8]
 8005f50:	4413      	add	r3, r2
 8005f52:	1e5a      	subs	r2, r3, #1
 8005f54:	68bb      	ldr	r3, [r7, #8]
 8005f56:	689b      	ldr	r3, [r3, #8]
 8005f58:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f5c:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8005f5e:	69bb      	ldr	r3, [r7, #24]
 8005f60:	015a      	lsls	r2, r3, #5
 8005f62:	69fb      	ldr	r3, [r7, #28]
 8005f64:	4413      	add	r3, r2
 8005f66:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f6a:	691a      	ldr	r2, [r3, #16]
 8005f6c:	8afb      	ldrh	r3, [r7, #22]
 8005f6e:	04d9      	lsls	r1, r3, #19
 8005f70:	4b39      	ldr	r3, [pc, #228]	; (8006058 <USB_EPStartXfer+0x484>)
 8005f72:	400b      	ands	r3, r1
 8005f74:	69b9      	ldr	r1, [r7, #24]
 8005f76:	0148      	lsls	r0, r1, #5
 8005f78:	69f9      	ldr	r1, [r7, #28]
 8005f7a:	4401      	add	r1, r0
 8005f7c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005f80:	4313      	orrs	r3, r2
 8005f82:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8005f84:	69bb      	ldr	r3, [r7, #24]
 8005f86:	015a      	lsls	r2, r3, #5
 8005f88:	69fb      	ldr	r3, [r7, #28]
 8005f8a:	4413      	add	r3, r2
 8005f8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f90:	691a      	ldr	r2, [r3, #16]
 8005f92:	68bb      	ldr	r3, [r7, #8]
 8005f94:	689b      	ldr	r3, [r3, #8]
 8005f96:	8af9      	ldrh	r1, [r7, #22]
 8005f98:	fb01 f303 	mul.w	r3, r1, r3
 8005f9c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005fa0:	69b9      	ldr	r1, [r7, #24]
 8005fa2:	0148      	lsls	r0, r1, #5
 8005fa4:	69f9      	ldr	r1, [r7, #28]
 8005fa6:	4401      	add	r1, r0
 8005fa8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005fac:	4313      	orrs	r3, r2
 8005fae:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005fb0:	79fb      	ldrb	r3, [r7, #7]
 8005fb2:	2b01      	cmp	r3, #1
 8005fb4:	d10d      	bne.n	8005fd2 <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8005fb6:	68bb      	ldr	r3, [r7, #8]
 8005fb8:	68db      	ldr	r3, [r3, #12]
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d009      	beq.n	8005fd2 <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005fbe:	68bb      	ldr	r3, [r7, #8]
 8005fc0:	68d9      	ldr	r1, [r3, #12]
 8005fc2:	69bb      	ldr	r3, [r7, #24]
 8005fc4:	015a      	lsls	r2, r3, #5
 8005fc6:	69fb      	ldr	r3, [r7, #28]
 8005fc8:	4413      	add	r3, r2
 8005fca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005fce:	460a      	mov	r2, r1
 8005fd0:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8005fd2:	68bb      	ldr	r3, [r7, #8]
 8005fd4:	78db      	ldrb	r3, [r3, #3]
 8005fd6:	2b01      	cmp	r3, #1
 8005fd8:	d128      	bne.n	800602c <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005fda:	69fb      	ldr	r3, [r7, #28]
 8005fdc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005fe0:	689b      	ldr	r3, [r3, #8]
 8005fe2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d110      	bne.n	800600c <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8005fea:	69bb      	ldr	r3, [r7, #24]
 8005fec:	015a      	lsls	r2, r3, #5
 8005fee:	69fb      	ldr	r3, [r7, #28]
 8005ff0:	4413      	add	r3, r2
 8005ff2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	69ba      	ldr	r2, [r7, #24]
 8005ffa:	0151      	lsls	r1, r2, #5
 8005ffc:	69fa      	ldr	r2, [r7, #28]
 8005ffe:	440a      	add	r2, r1
 8006000:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006004:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006008:	6013      	str	r3, [r2, #0]
 800600a:	e00f      	b.n	800602c <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800600c:	69bb      	ldr	r3, [r7, #24]
 800600e:	015a      	lsls	r2, r3, #5
 8006010:	69fb      	ldr	r3, [r7, #28]
 8006012:	4413      	add	r3, r2
 8006014:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	69ba      	ldr	r2, [r7, #24]
 800601c:	0151      	lsls	r1, r2, #5
 800601e:	69fa      	ldr	r2, [r7, #28]
 8006020:	440a      	add	r2, r1
 8006022:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006026:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800602a:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800602c:	69bb      	ldr	r3, [r7, #24]
 800602e:	015a      	lsls	r2, r3, #5
 8006030:	69fb      	ldr	r3, [r7, #28]
 8006032:	4413      	add	r3, r2
 8006034:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	69ba      	ldr	r2, [r7, #24]
 800603c:	0151      	lsls	r1, r2, #5
 800603e:	69fa      	ldr	r2, [r7, #28]
 8006040:	440a      	add	r2, r1
 8006042:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006046:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800604a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800604c:	2300      	movs	r3, #0
}
 800604e:	4618      	mov	r0, r3
 8006050:	3720      	adds	r7, #32
 8006052:	46bd      	mov	sp, r7
 8006054:	bd80      	pop	{r7, pc}
 8006056:	bf00      	nop
 8006058:	1ff80000 	.word	0x1ff80000

0800605c <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800605c:	b480      	push	{r7}
 800605e:	b087      	sub	sp, #28
 8006060:	af00      	add	r7, sp, #0
 8006062:	60f8      	str	r0, [r7, #12]
 8006064:	60b9      	str	r1, [r7, #8]
 8006066:	4613      	mov	r3, r2
 8006068:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800606e:	68bb      	ldr	r3, [r7, #8]
 8006070:	781b      	ldrb	r3, [r3, #0]
 8006072:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006074:	68bb      	ldr	r3, [r7, #8]
 8006076:	785b      	ldrb	r3, [r3, #1]
 8006078:	2b01      	cmp	r3, #1
 800607a:	f040 80cd 	bne.w	8006218 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800607e:	68bb      	ldr	r3, [r7, #8]
 8006080:	695b      	ldr	r3, [r3, #20]
 8006082:	2b00      	cmp	r3, #0
 8006084:	d132      	bne.n	80060ec <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006086:	693b      	ldr	r3, [r7, #16]
 8006088:	015a      	lsls	r2, r3, #5
 800608a:	697b      	ldr	r3, [r7, #20]
 800608c:	4413      	add	r3, r2
 800608e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006092:	691b      	ldr	r3, [r3, #16]
 8006094:	693a      	ldr	r2, [r7, #16]
 8006096:	0151      	lsls	r1, r2, #5
 8006098:	697a      	ldr	r2, [r7, #20]
 800609a:	440a      	add	r2, r1
 800609c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80060a0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80060a4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80060a8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80060aa:	693b      	ldr	r3, [r7, #16]
 80060ac:	015a      	lsls	r2, r3, #5
 80060ae:	697b      	ldr	r3, [r7, #20]
 80060b0:	4413      	add	r3, r2
 80060b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80060b6:	691b      	ldr	r3, [r3, #16]
 80060b8:	693a      	ldr	r2, [r7, #16]
 80060ba:	0151      	lsls	r1, r2, #5
 80060bc:	697a      	ldr	r2, [r7, #20]
 80060be:	440a      	add	r2, r1
 80060c0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80060c4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80060c8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80060ca:	693b      	ldr	r3, [r7, #16]
 80060cc:	015a      	lsls	r2, r3, #5
 80060ce:	697b      	ldr	r3, [r7, #20]
 80060d0:	4413      	add	r3, r2
 80060d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80060d6:	691b      	ldr	r3, [r3, #16]
 80060d8:	693a      	ldr	r2, [r7, #16]
 80060da:	0151      	lsls	r1, r2, #5
 80060dc:	697a      	ldr	r2, [r7, #20]
 80060de:	440a      	add	r2, r1
 80060e0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80060e4:	0cdb      	lsrs	r3, r3, #19
 80060e6:	04db      	lsls	r3, r3, #19
 80060e8:	6113      	str	r3, [r2, #16]
 80060ea:	e04e      	b.n	800618a <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80060ec:	693b      	ldr	r3, [r7, #16]
 80060ee:	015a      	lsls	r2, r3, #5
 80060f0:	697b      	ldr	r3, [r7, #20]
 80060f2:	4413      	add	r3, r2
 80060f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80060f8:	691b      	ldr	r3, [r3, #16]
 80060fa:	693a      	ldr	r2, [r7, #16]
 80060fc:	0151      	lsls	r1, r2, #5
 80060fe:	697a      	ldr	r2, [r7, #20]
 8006100:	440a      	add	r2, r1
 8006102:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006106:	0cdb      	lsrs	r3, r3, #19
 8006108:	04db      	lsls	r3, r3, #19
 800610a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800610c:	693b      	ldr	r3, [r7, #16]
 800610e:	015a      	lsls	r2, r3, #5
 8006110:	697b      	ldr	r3, [r7, #20]
 8006112:	4413      	add	r3, r2
 8006114:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006118:	691b      	ldr	r3, [r3, #16]
 800611a:	693a      	ldr	r2, [r7, #16]
 800611c:	0151      	lsls	r1, r2, #5
 800611e:	697a      	ldr	r2, [r7, #20]
 8006120:	440a      	add	r2, r1
 8006122:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006126:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800612a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800612e:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8006130:	68bb      	ldr	r3, [r7, #8]
 8006132:	695a      	ldr	r2, [r3, #20]
 8006134:	68bb      	ldr	r3, [r7, #8]
 8006136:	689b      	ldr	r3, [r3, #8]
 8006138:	429a      	cmp	r2, r3
 800613a:	d903      	bls.n	8006144 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800613c:	68bb      	ldr	r3, [r7, #8]
 800613e:	689a      	ldr	r2, [r3, #8]
 8006140:	68bb      	ldr	r3, [r7, #8]
 8006142:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006144:	693b      	ldr	r3, [r7, #16]
 8006146:	015a      	lsls	r2, r3, #5
 8006148:	697b      	ldr	r3, [r7, #20]
 800614a:	4413      	add	r3, r2
 800614c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006150:	691b      	ldr	r3, [r3, #16]
 8006152:	693a      	ldr	r2, [r7, #16]
 8006154:	0151      	lsls	r1, r2, #5
 8006156:	697a      	ldr	r2, [r7, #20]
 8006158:	440a      	add	r2, r1
 800615a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800615e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006162:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8006164:	693b      	ldr	r3, [r7, #16]
 8006166:	015a      	lsls	r2, r3, #5
 8006168:	697b      	ldr	r3, [r7, #20]
 800616a:	4413      	add	r3, r2
 800616c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006170:	691a      	ldr	r2, [r3, #16]
 8006172:	68bb      	ldr	r3, [r7, #8]
 8006174:	695b      	ldr	r3, [r3, #20]
 8006176:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800617a:	6939      	ldr	r1, [r7, #16]
 800617c:	0148      	lsls	r0, r1, #5
 800617e:	6979      	ldr	r1, [r7, #20]
 8006180:	4401      	add	r1, r0
 8006182:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006186:	4313      	orrs	r3, r2
 8006188:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800618a:	79fb      	ldrb	r3, [r7, #7]
 800618c:	2b01      	cmp	r3, #1
 800618e:	d11e      	bne.n	80061ce <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8006190:	68bb      	ldr	r3, [r7, #8]
 8006192:	691b      	ldr	r3, [r3, #16]
 8006194:	2b00      	cmp	r3, #0
 8006196:	d009      	beq.n	80061ac <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8006198:	693b      	ldr	r3, [r7, #16]
 800619a:	015a      	lsls	r2, r3, #5
 800619c:	697b      	ldr	r3, [r7, #20]
 800619e:	4413      	add	r3, r2
 80061a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80061a4:	461a      	mov	r2, r3
 80061a6:	68bb      	ldr	r3, [r7, #8]
 80061a8:	691b      	ldr	r3, [r3, #16]
 80061aa:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80061ac:	693b      	ldr	r3, [r7, #16]
 80061ae:	015a      	lsls	r2, r3, #5
 80061b0:	697b      	ldr	r3, [r7, #20]
 80061b2:	4413      	add	r3, r2
 80061b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	693a      	ldr	r2, [r7, #16]
 80061bc:	0151      	lsls	r1, r2, #5
 80061be:	697a      	ldr	r2, [r7, #20]
 80061c0:	440a      	add	r2, r1
 80061c2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80061c6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80061ca:	6013      	str	r3, [r2, #0]
 80061cc:	e092      	b.n	80062f4 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80061ce:	693b      	ldr	r3, [r7, #16]
 80061d0:	015a      	lsls	r2, r3, #5
 80061d2:	697b      	ldr	r3, [r7, #20]
 80061d4:	4413      	add	r3, r2
 80061d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	693a      	ldr	r2, [r7, #16]
 80061de:	0151      	lsls	r1, r2, #5
 80061e0:	697a      	ldr	r2, [r7, #20]
 80061e2:	440a      	add	r2, r1
 80061e4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80061e8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80061ec:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 80061ee:	68bb      	ldr	r3, [r7, #8]
 80061f0:	695b      	ldr	r3, [r3, #20]
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d07e      	beq.n	80062f4 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80061f6:	697b      	ldr	r3, [r7, #20]
 80061f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80061fc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80061fe:	68bb      	ldr	r3, [r7, #8]
 8006200:	781b      	ldrb	r3, [r3, #0]
 8006202:	f003 030f 	and.w	r3, r3, #15
 8006206:	2101      	movs	r1, #1
 8006208:	fa01 f303 	lsl.w	r3, r1, r3
 800620c:	6979      	ldr	r1, [r7, #20]
 800620e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006212:	4313      	orrs	r3, r2
 8006214:	634b      	str	r3, [r1, #52]	; 0x34
 8006216:	e06d      	b.n	80062f4 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8006218:	693b      	ldr	r3, [r7, #16]
 800621a:	015a      	lsls	r2, r3, #5
 800621c:	697b      	ldr	r3, [r7, #20]
 800621e:	4413      	add	r3, r2
 8006220:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006224:	691b      	ldr	r3, [r3, #16]
 8006226:	693a      	ldr	r2, [r7, #16]
 8006228:	0151      	lsls	r1, r2, #5
 800622a:	697a      	ldr	r2, [r7, #20]
 800622c:	440a      	add	r2, r1
 800622e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006232:	0cdb      	lsrs	r3, r3, #19
 8006234:	04db      	lsls	r3, r3, #19
 8006236:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8006238:	693b      	ldr	r3, [r7, #16]
 800623a:	015a      	lsls	r2, r3, #5
 800623c:	697b      	ldr	r3, [r7, #20]
 800623e:	4413      	add	r3, r2
 8006240:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006244:	691b      	ldr	r3, [r3, #16]
 8006246:	693a      	ldr	r2, [r7, #16]
 8006248:	0151      	lsls	r1, r2, #5
 800624a:	697a      	ldr	r2, [r7, #20]
 800624c:	440a      	add	r2, r1
 800624e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006252:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006256:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800625a:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800625c:	68bb      	ldr	r3, [r7, #8]
 800625e:	695b      	ldr	r3, [r3, #20]
 8006260:	2b00      	cmp	r3, #0
 8006262:	d003      	beq.n	800626c <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8006264:	68bb      	ldr	r3, [r7, #8]
 8006266:	689a      	ldr	r2, [r3, #8]
 8006268:	68bb      	ldr	r3, [r7, #8]
 800626a:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800626c:	693b      	ldr	r3, [r7, #16]
 800626e:	015a      	lsls	r2, r3, #5
 8006270:	697b      	ldr	r3, [r7, #20]
 8006272:	4413      	add	r3, r2
 8006274:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006278:	691b      	ldr	r3, [r3, #16]
 800627a:	693a      	ldr	r2, [r7, #16]
 800627c:	0151      	lsls	r1, r2, #5
 800627e:	697a      	ldr	r2, [r7, #20]
 8006280:	440a      	add	r2, r1
 8006282:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006286:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800628a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 800628c:	693b      	ldr	r3, [r7, #16]
 800628e:	015a      	lsls	r2, r3, #5
 8006290:	697b      	ldr	r3, [r7, #20]
 8006292:	4413      	add	r3, r2
 8006294:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006298:	691a      	ldr	r2, [r3, #16]
 800629a:	68bb      	ldr	r3, [r7, #8]
 800629c:	689b      	ldr	r3, [r3, #8]
 800629e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80062a2:	6939      	ldr	r1, [r7, #16]
 80062a4:	0148      	lsls	r0, r1, #5
 80062a6:	6979      	ldr	r1, [r7, #20]
 80062a8:	4401      	add	r1, r0
 80062aa:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80062ae:	4313      	orrs	r3, r2
 80062b0:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 80062b2:	79fb      	ldrb	r3, [r7, #7]
 80062b4:	2b01      	cmp	r3, #1
 80062b6:	d10d      	bne.n	80062d4 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80062b8:	68bb      	ldr	r3, [r7, #8]
 80062ba:	68db      	ldr	r3, [r3, #12]
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d009      	beq.n	80062d4 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80062c0:	68bb      	ldr	r3, [r7, #8]
 80062c2:	68d9      	ldr	r1, [r3, #12]
 80062c4:	693b      	ldr	r3, [r7, #16]
 80062c6:	015a      	lsls	r2, r3, #5
 80062c8:	697b      	ldr	r3, [r7, #20]
 80062ca:	4413      	add	r3, r2
 80062cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80062d0:	460a      	mov	r2, r1
 80062d2:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80062d4:	693b      	ldr	r3, [r7, #16]
 80062d6:	015a      	lsls	r2, r3, #5
 80062d8:	697b      	ldr	r3, [r7, #20]
 80062da:	4413      	add	r3, r2
 80062dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	693a      	ldr	r2, [r7, #16]
 80062e4:	0151      	lsls	r1, r2, #5
 80062e6:	697a      	ldr	r2, [r7, #20]
 80062e8:	440a      	add	r2, r1
 80062ea:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80062ee:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80062f2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80062f4:	2300      	movs	r3, #0
}
 80062f6:	4618      	mov	r0, r3
 80062f8:	371c      	adds	r7, #28
 80062fa:	46bd      	mov	sp, r7
 80062fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006300:	4770      	bx	lr

08006302 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8006302:	b480      	push	{r7}
 8006304:	b089      	sub	sp, #36	; 0x24
 8006306:	af00      	add	r7, sp, #0
 8006308:	60f8      	str	r0, [r7, #12]
 800630a:	60b9      	str	r1, [r7, #8]
 800630c:	4611      	mov	r1, r2
 800630e:	461a      	mov	r2, r3
 8006310:	460b      	mov	r3, r1
 8006312:	71fb      	strb	r3, [r7, #7]
 8006314:	4613      	mov	r3, r2
 8006316:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800631c:	68bb      	ldr	r3, [r7, #8]
 800631e:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8006320:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8006324:	2b00      	cmp	r3, #0
 8006326:	d123      	bne.n	8006370 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8006328:	88bb      	ldrh	r3, [r7, #4]
 800632a:	3303      	adds	r3, #3
 800632c:	089b      	lsrs	r3, r3, #2
 800632e:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8006330:	2300      	movs	r3, #0
 8006332:	61bb      	str	r3, [r7, #24]
 8006334:	e018      	b.n	8006368 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8006336:	79fb      	ldrb	r3, [r7, #7]
 8006338:	031a      	lsls	r2, r3, #12
 800633a:	697b      	ldr	r3, [r7, #20]
 800633c:	4413      	add	r3, r2
 800633e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006342:	461a      	mov	r2, r3
 8006344:	69fb      	ldr	r3, [r7, #28]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	6013      	str	r3, [r2, #0]
      pSrc++;
 800634a:	69fb      	ldr	r3, [r7, #28]
 800634c:	3301      	adds	r3, #1
 800634e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006350:	69fb      	ldr	r3, [r7, #28]
 8006352:	3301      	adds	r3, #1
 8006354:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006356:	69fb      	ldr	r3, [r7, #28]
 8006358:	3301      	adds	r3, #1
 800635a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800635c:	69fb      	ldr	r3, [r7, #28]
 800635e:	3301      	adds	r3, #1
 8006360:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8006362:	69bb      	ldr	r3, [r7, #24]
 8006364:	3301      	adds	r3, #1
 8006366:	61bb      	str	r3, [r7, #24]
 8006368:	69ba      	ldr	r2, [r7, #24]
 800636a:	693b      	ldr	r3, [r7, #16]
 800636c:	429a      	cmp	r2, r3
 800636e:	d3e2      	bcc.n	8006336 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8006370:	2300      	movs	r3, #0
}
 8006372:	4618      	mov	r0, r3
 8006374:	3724      	adds	r7, #36	; 0x24
 8006376:	46bd      	mov	sp, r7
 8006378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800637c:	4770      	bx	lr

0800637e <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800637e:	b480      	push	{r7}
 8006380:	b08b      	sub	sp, #44	; 0x2c
 8006382:	af00      	add	r7, sp, #0
 8006384:	60f8      	str	r0, [r7, #12]
 8006386:	60b9      	str	r1, [r7, #8]
 8006388:	4613      	mov	r3, r2
 800638a:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8006390:	68bb      	ldr	r3, [r7, #8]
 8006392:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8006394:	88fb      	ldrh	r3, [r7, #6]
 8006396:	089b      	lsrs	r3, r3, #2
 8006398:	b29b      	uxth	r3, r3
 800639a:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800639c:	88fb      	ldrh	r3, [r7, #6]
 800639e:	f003 0303 	and.w	r3, r3, #3
 80063a2:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80063a4:	2300      	movs	r3, #0
 80063a6:	623b      	str	r3, [r7, #32]
 80063a8:	e014      	b.n	80063d4 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80063aa:	69bb      	ldr	r3, [r7, #24]
 80063ac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80063b0:	681a      	ldr	r2, [r3, #0]
 80063b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063b4:	601a      	str	r2, [r3, #0]
    pDest++;
 80063b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063b8:	3301      	adds	r3, #1
 80063ba:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80063bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063be:	3301      	adds	r3, #1
 80063c0:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80063c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063c4:	3301      	adds	r3, #1
 80063c6:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80063c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063ca:	3301      	adds	r3, #1
 80063cc:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 80063ce:	6a3b      	ldr	r3, [r7, #32]
 80063d0:	3301      	adds	r3, #1
 80063d2:	623b      	str	r3, [r7, #32]
 80063d4:	6a3a      	ldr	r2, [r7, #32]
 80063d6:	697b      	ldr	r3, [r7, #20]
 80063d8:	429a      	cmp	r2, r3
 80063da:	d3e6      	bcc.n	80063aa <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80063dc:	8bfb      	ldrh	r3, [r7, #30]
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d01e      	beq.n	8006420 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80063e2:	2300      	movs	r3, #0
 80063e4:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80063e6:	69bb      	ldr	r3, [r7, #24]
 80063e8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80063ec:	461a      	mov	r2, r3
 80063ee:	f107 0310 	add.w	r3, r7, #16
 80063f2:	6812      	ldr	r2, [r2, #0]
 80063f4:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80063f6:	693a      	ldr	r2, [r7, #16]
 80063f8:	6a3b      	ldr	r3, [r7, #32]
 80063fa:	b2db      	uxtb	r3, r3
 80063fc:	00db      	lsls	r3, r3, #3
 80063fe:	fa22 f303 	lsr.w	r3, r2, r3
 8006402:	b2da      	uxtb	r2, r3
 8006404:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006406:	701a      	strb	r2, [r3, #0]
      i++;
 8006408:	6a3b      	ldr	r3, [r7, #32]
 800640a:	3301      	adds	r3, #1
 800640c:	623b      	str	r3, [r7, #32]
      pDest++;
 800640e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006410:	3301      	adds	r3, #1
 8006412:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8006414:	8bfb      	ldrh	r3, [r7, #30]
 8006416:	3b01      	subs	r3, #1
 8006418:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800641a:	8bfb      	ldrh	r3, [r7, #30]
 800641c:	2b00      	cmp	r3, #0
 800641e:	d1ea      	bne.n	80063f6 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8006420:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006422:	4618      	mov	r0, r3
 8006424:	372c      	adds	r7, #44	; 0x2c
 8006426:	46bd      	mov	sp, r7
 8006428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800642c:	4770      	bx	lr

0800642e <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800642e:	b480      	push	{r7}
 8006430:	b085      	sub	sp, #20
 8006432:	af00      	add	r7, sp, #0
 8006434:	6078      	str	r0, [r7, #4]
 8006436:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800643c:	683b      	ldr	r3, [r7, #0]
 800643e:	781b      	ldrb	r3, [r3, #0]
 8006440:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006442:	683b      	ldr	r3, [r7, #0]
 8006444:	785b      	ldrb	r3, [r3, #1]
 8006446:	2b01      	cmp	r3, #1
 8006448:	d12c      	bne.n	80064a4 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800644a:	68bb      	ldr	r3, [r7, #8]
 800644c:	015a      	lsls	r2, r3, #5
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	4413      	add	r3, r2
 8006452:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	2b00      	cmp	r3, #0
 800645a:	db12      	blt.n	8006482 <USB_EPSetStall+0x54>
 800645c:	68bb      	ldr	r3, [r7, #8]
 800645e:	2b00      	cmp	r3, #0
 8006460:	d00f      	beq.n	8006482 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8006462:	68bb      	ldr	r3, [r7, #8]
 8006464:	015a      	lsls	r2, r3, #5
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	4413      	add	r3, r2
 800646a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	68ba      	ldr	r2, [r7, #8]
 8006472:	0151      	lsls	r1, r2, #5
 8006474:	68fa      	ldr	r2, [r7, #12]
 8006476:	440a      	add	r2, r1
 8006478:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800647c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006480:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8006482:	68bb      	ldr	r3, [r7, #8]
 8006484:	015a      	lsls	r2, r3, #5
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	4413      	add	r3, r2
 800648a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	68ba      	ldr	r2, [r7, #8]
 8006492:	0151      	lsls	r1, r2, #5
 8006494:	68fa      	ldr	r2, [r7, #12]
 8006496:	440a      	add	r2, r1
 8006498:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800649c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80064a0:	6013      	str	r3, [r2, #0]
 80064a2:	e02b      	b.n	80064fc <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80064a4:	68bb      	ldr	r3, [r7, #8]
 80064a6:	015a      	lsls	r2, r3, #5
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	4413      	add	r3, r2
 80064ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	db12      	blt.n	80064dc <USB_EPSetStall+0xae>
 80064b6:	68bb      	ldr	r3, [r7, #8]
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d00f      	beq.n	80064dc <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80064bc:	68bb      	ldr	r3, [r7, #8]
 80064be:	015a      	lsls	r2, r3, #5
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	4413      	add	r3, r2
 80064c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	68ba      	ldr	r2, [r7, #8]
 80064cc:	0151      	lsls	r1, r2, #5
 80064ce:	68fa      	ldr	r2, [r7, #12]
 80064d0:	440a      	add	r2, r1
 80064d2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80064d6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80064da:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80064dc:	68bb      	ldr	r3, [r7, #8]
 80064de:	015a      	lsls	r2, r3, #5
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	4413      	add	r3, r2
 80064e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	68ba      	ldr	r2, [r7, #8]
 80064ec:	0151      	lsls	r1, r2, #5
 80064ee:	68fa      	ldr	r2, [r7, #12]
 80064f0:	440a      	add	r2, r1
 80064f2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80064f6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80064fa:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80064fc:	2300      	movs	r3, #0
}
 80064fe:	4618      	mov	r0, r3
 8006500:	3714      	adds	r7, #20
 8006502:	46bd      	mov	sp, r7
 8006504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006508:	4770      	bx	lr

0800650a <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800650a:	b480      	push	{r7}
 800650c:	b085      	sub	sp, #20
 800650e:	af00      	add	r7, sp, #0
 8006510:	6078      	str	r0, [r7, #4]
 8006512:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006518:	683b      	ldr	r3, [r7, #0]
 800651a:	781b      	ldrb	r3, [r3, #0]
 800651c:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800651e:	683b      	ldr	r3, [r7, #0]
 8006520:	785b      	ldrb	r3, [r3, #1]
 8006522:	2b01      	cmp	r3, #1
 8006524:	d128      	bne.n	8006578 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8006526:	68bb      	ldr	r3, [r7, #8]
 8006528:	015a      	lsls	r2, r3, #5
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	4413      	add	r3, r2
 800652e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	68ba      	ldr	r2, [r7, #8]
 8006536:	0151      	lsls	r1, r2, #5
 8006538:	68fa      	ldr	r2, [r7, #12]
 800653a:	440a      	add	r2, r1
 800653c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006540:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006544:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006546:	683b      	ldr	r3, [r7, #0]
 8006548:	78db      	ldrb	r3, [r3, #3]
 800654a:	2b03      	cmp	r3, #3
 800654c:	d003      	beq.n	8006556 <USB_EPClearStall+0x4c>
 800654e:	683b      	ldr	r3, [r7, #0]
 8006550:	78db      	ldrb	r3, [r3, #3]
 8006552:	2b02      	cmp	r3, #2
 8006554:	d138      	bne.n	80065c8 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006556:	68bb      	ldr	r3, [r7, #8]
 8006558:	015a      	lsls	r2, r3, #5
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	4413      	add	r3, r2
 800655e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	68ba      	ldr	r2, [r7, #8]
 8006566:	0151      	lsls	r1, r2, #5
 8006568:	68fa      	ldr	r2, [r7, #12]
 800656a:	440a      	add	r2, r1
 800656c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006570:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006574:	6013      	str	r3, [r2, #0]
 8006576:	e027      	b.n	80065c8 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8006578:	68bb      	ldr	r3, [r7, #8]
 800657a:	015a      	lsls	r2, r3, #5
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	4413      	add	r3, r2
 8006580:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	68ba      	ldr	r2, [r7, #8]
 8006588:	0151      	lsls	r1, r2, #5
 800658a:	68fa      	ldr	r2, [r7, #12]
 800658c:	440a      	add	r2, r1
 800658e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006592:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006596:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006598:	683b      	ldr	r3, [r7, #0]
 800659a:	78db      	ldrb	r3, [r3, #3]
 800659c:	2b03      	cmp	r3, #3
 800659e:	d003      	beq.n	80065a8 <USB_EPClearStall+0x9e>
 80065a0:	683b      	ldr	r3, [r7, #0]
 80065a2:	78db      	ldrb	r3, [r3, #3]
 80065a4:	2b02      	cmp	r3, #2
 80065a6:	d10f      	bne.n	80065c8 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80065a8:	68bb      	ldr	r3, [r7, #8]
 80065aa:	015a      	lsls	r2, r3, #5
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	4413      	add	r3, r2
 80065b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	68ba      	ldr	r2, [r7, #8]
 80065b8:	0151      	lsls	r1, r2, #5
 80065ba:	68fa      	ldr	r2, [r7, #12]
 80065bc:	440a      	add	r2, r1
 80065be:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80065c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80065c6:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80065c8:	2300      	movs	r3, #0
}
 80065ca:	4618      	mov	r0, r3
 80065cc:	3714      	adds	r7, #20
 80065ce:	46bd      	mov	sp, r7
 80065d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065d4:	4770      	bx	lr

080065d6 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80065d6:	b480      	push	{r7}
 80065d8:	b085      	sub	sp, #20
 80065da:	af00      	add	r7, sp, #0
 80065dc:	6078      	str	r0, [r7, #4]
 80065de:	460b      	mov	r3, r1
 80065e0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	68fa      	ldr	r2, [r7, #12]
 80065f0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80065f4:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80065f8:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006600:	681a      	ldr	r2, [r3, #0]
 8006602:	78fb      	ldrb	r3, [r7, #3]
 8006604:	011b      	lsls	r3, r3, #4
 8006606:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800660a:	68f9      	ldr	r1, [r7, #12]
 800660c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006610:	4313      	orrs	r3, r2
 8006612:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8006614:	2300      	movs	r3, #0
}
 8006616:	4618      	mov	r0, r3
 8006618:	3714      	adds	r7, #20
 800661a:	46bd      	mov	sp, r7
 800661c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006620:	4770      	bx	lr

08006622 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006622:	b480      	push	{r7}
 8006624:	b085      	sub	sp, #20
 8006626:	af00      	add	r7, sp, #0
 8006628:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	68fa      	ldr	r2, [r7, #12]
 8006638:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800663c:	f023 0303 	bic.w	r3, r3, #3
 8006640:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006648:	685b      	ldr	r3, [r3, #4]
 800664a:	68fa      	ldr	r2, [r7, #12]
 800664c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006650:	f023 0302 	bic.w	r3, r3, #2
 8006654:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006656:	2300      	movs	r3, #0
}
 8006658:	4618      	mov	r0, r3
 800665a:	3714      	adds	r7, #20
 800665c:	46bd      	mov	sp, r7
 800665e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006662:	4770      	bx	lr

08006664 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006664:	b480      	push	{r7}
 8006666:	b085      	sub	sp, #20
 8006668:	af00      	add	r7, sp, #0
 800666a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	68fa      	ldr	r2, [r7, #12]
 800667a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800667e:	f023 0303 	bic.w	r3, r3, #3
 8006682:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800668a:	685b      	ldr	r3, [r3, #4]
 800668c:	68fa      	ldr	r2, [r7, #12]
 800668e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006692:	f043 0302 	orr.w	r3, r3, #2
 8006696:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006698:	2300      	movs	r3, #0
}
 800669a:	4618      	mov	r0, r3
 800669c:	3714      	adds	r7, #20
 800669e:	46bd      	mov	sp, r7
 80066a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066a4:	4770      	bx	lr

080066a6 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80066a6:	b480      	push	{r7}
 80066a8:	b085      	sub	sp, #20
 80066aa:	af00      	add	r7, sp, #0
 80066ac:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	695b      	ldr	r3, [r3, #20]
 80066b2:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	699b      	ldr	r3, [r3, #24]
 80066b8:	68fa      	ldr	r2, [r7, #12]
 80066ba:	4013      	ands	r3, r2
 80066bc:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80066be:	68fb      	ldr	r3, [r7, #12]
}
 80066c0:	4618      	mov	r0, r3
 80066c2:	3714      	adds	r7, #20
 80066c4:	46bd      	mov	sp, r7
 80066c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ca:	4770      	bx	lr

080066cc <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80066cc:	b480      	push	{r7}
 80066ce:	b085      	sub	sp, #20
 80066d0:	af00      	add	r7, sp, #0
 80066d2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80066de:	699b      	ldr	r3, [r3, #24]
 80066e0:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80066e8:	69db      	ldr	r3, [r3, #28]
 80066ea:	68ba      	ldr	r2, [r7, #8]
 80066ec:	4013      	ands	r3, r2
 80066ee:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80066f0:	68bb      	ldr	r3, [r7, #8]
 80066f2:	0c1b      	lsrs	r3, r3, #16
}
 80066f4:	4618      	mov	r0, r3
 80066f6:	3714      	adds	r7, #20
 80066f8:	46bd      	mov	sp, r7
 80066fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066fe:	4770      	bx	lr

08006700 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006700:	b480      	push	{r7}
 8006702:	b085      	sub	sp, #20
 8006704:	af00      	add	r7, sp, #0
 8006706:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006712:	699b      	ldr	r3, [r3, #24]
 8006714:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800671c:	69db      	ldr	r3, [r3, #28]
 800671e:	68ba      	ldr	r2, [r7, #8]
 8006720:	4013      	ands	r3, r2
 8006722:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8006724:	68bb      	ldr	r3, [r7, #8]
 8006726:	b29b      	uxth	r3, r3
}
 8006728:	4618      	mov	r0, r3
 800672a:	3714      	adds	r7, #20
 800672c:	46bd      	mov	sp, r7
 800672e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006732:	4770      	bx	lr

08006734 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006734:	b480      	push	{r7}
 8006736:	b085      	sub	sp, #20
 8006738:	af00      	add	r7, sp, #0
 800673a:	6078      	str	r0, [r7, #4]
 800673c:	460b      	mov	r3, r1
 800673e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8006744:	78fb      	ldrb	r3, [r7, #3]
 8006746:	015a      	lsls	r2, r3, #5
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	4413      	add	r3, r2
 800674c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006750:	689b      	ldr	r3, [r3, #8]
 8006752:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800675a:	695b      	ldr	r3, [r3, #20]
 800675c:	68ba      	ldr	r2, [r7, #8]
 800675e:	4013      	ands	r3, r2
 8006760:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006762:	68bb      	ldr	r3, [r7, #8]
}
 8006764:	4618      	mov	r0, r3
 8006766:	3714      	adds	r7, #20
 8006768:	46bd      	mov	sp, r7
 800676a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800676e:	4770      	bx	lr

08006770 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006770:	b480      	push	{r7}
 8006772:	b087      	sub	sp, #28
 8006774:	af00      	add	r7, sp, #0
 8006776:	6078      	str	r0, [r7, #4]
 8006778:	460b      	mov	r3, r1
 800677a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8006780:	697b      	ldr	r3, [r7, #20]
 8006782:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006786:	691b      	ldr	r3, [r3, #16]
 8006788:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800678a:	697b      	ldr	r3, [r7, #20]
 800678c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006790:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006792:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8006794:	78fb      	ldrb	r3, [r7, #3]
 8006796:	f003 030f 	and.w	r3, r3, #15
 800679a:	68fa      	ldr	r2, [r7, #12]
 800679c:	fa22 f303 	lsr.w	r3, r2, r3
 80067a0:	01db      	lsls	r3, r3, #7
 80067a2:	b2db      	uxtb	r3, r3
 80067a4:	693a      	ldr	r2, [r7, #16]
 80067a6:	4313      	orrs	r3, r2
 80067a8:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80067aa:	78fb      	ldrb	r3, [r7, #3]
 80067ac:	015a      	lsls	r2, r3, #5
 80067ae:	697b      	ldr	r3, [r7, #20]
 80067b0:	4413      	add	r3, r2
 80067b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80067b6:	689b      	ldr	r3, [r3, #8]
 80067b8:	693a      	ldr	r2, [r7, #16]
 80067ba:	4013      	ands	r3, r2
 80067bc:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80067be:	68bb      	ldr	r3, [r7, #8]
}
 80067c0:	4618      	mov	r0, r3
 80067c2:	371c      	adds	r7, #28
 80067c4:	46bd      	mov	sp, r7
 80067c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ca:	4770      	bx	lr

080067cc <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80067cc:	b480      	push	{r7}
 80067ce:	b083      	sub	sp, #12
 80067d0:	af00      	add	r7, sp, #0
 80067d2:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	695b      	ldr	r3, [r3, #20]
 80067d8:	f003 0301 	and.w	r3, r3, #1
}
 80067dc:	4618      	mov	r0, r3
 80067de:	370c      	adds	r7, #12
 80067e0:	46bd      	mov	sp, r7
 80067e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067e6:	4770      	bx	lr

080067e8 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 80067e8:	b480      	push	{r7}
 80067ea:	b085      	sub	sp, #20
 80067ec:	af00      	add	r7, sp, #0
 80067ee:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	68fa      	ldr	r2, [r7, #12]
 80067fe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006802:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8006806:	f023 0307 	bic.w	r3, r3, #7
 800680a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006812:	685b      	ldr	r3, [r3, #4]
 8006814:	68fa      	ldr	r2, [r7, #12]
 8006816:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800681a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800681e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006820:	2300      	movs	r3, #0
}
 8006822:	4618      	mov	r0, r3
 8006824:	3714      	adds	r7, #20
 8006826:	46bd      	mov	sp, r7
 8006828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800682c:	4770      	bx	lr
	...

08006830 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8006830:	b480      	push	{r7}
 8006832:	b087      	sub	sp, #28
 8006834:	af00      	add	r7, sp, #0
 8006836:	60f8      	str	r0, [r7, #12]
 8006838:	460b      	mov	r3, r1
 800683a:	607a      	str	r2, [r7, #4]
 800683c:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	333c      	adds	r3, #60	; 0x3c
 8006846:	3304      	adds	r3, #4
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800684c:	693b      	ldr	r3, [r7, #16]
 800684e:	4a26      	ldr	r2, [pc, #152]	; (80068e8 <USB_EP0_OutStart+0xb8>)
 8006850:	4293      	cmp	r3, r2
 8006852:	d90a      	bls.n	800686a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006854:	697b      	ldr	r3, [r7, #20]
 8006856:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006860:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006864:	d101      	bne.n	800686a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8006866:	2300      	movs	r3, #0
 8006868:	e037      	b.n	80068da <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800686a:	697b      	ldr	r3, [r7, #20]
 800686c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006870:	461a      	mov	r2, r3
 8006872:	2300      	movs	r3, #0
 8006874:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006876:	697b      	ldr	r3, [r7, #20]
 8006878:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800687c:	691b      	ldr	r3, [r3, #16]
 800687e:	697a      	ldr	r2, [r7, #20]
 8006880:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006884:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006888:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800688a:	697b      	ldr	r3, [r7, #20]
 800688c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006890:	691b      	ldr	r3, [r3, #16]
 8006892:	697a      	ldr	r2, [r7, #20]
 8006894:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006898:	f043 0318 	orr.w	r3, r3, #24
 800689c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800689e:	697b      	ldr	r3, [r7, #20]
 80068a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80068a4:	691b      	ldr	r3, [r3, #16]
 80068a6:	697a      	ldr	r2, [r7, #20]
 80068a8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80068ac:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 80068b0:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80068b2:	7afb      	ldrb	r3, [r7, #11]
 80068b4:	2b01      	cmp	r3, #1
 80068b6:	d10f      	bne.n	80068d8 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80068b8:	697b      	ldr	r3, [r7, #20]
 80068ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80068be:	461a      	mov	r2, r3
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80068c4:	697b      	ldr	r3, [r7, #20]
 80068c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	697a      	ldr	r2, [r7, #20]
 80068ce:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80068d2:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 80068d6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80068d8:	2300      	movs	r3, #0
}
 80068da:	4618      	mov	r0, r3
 80068dc:	371c      	adds	r7, #28
 80068de:	46bd      	mov	sp, r7
 80068e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068e4:	4770      	bx	lr
 80068e6:	bf00      	nop
 80068e8:	4f54300a 	.word	0x4f54300a

080068ec <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80068ec:	b480      	push	{r7}
 80068ee:	b085      	sub	sp, #20
 80068f0:	af00      	add	r7, sp, #0
 80068f2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80068f4:	2300      	movs	r3, #0
 80068f6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	3301      	adds	r3, #1
 80068fc:	60fb      	str	r3, [r7, #12]
 80068fe:	4a13      	ldr	r2, [pc, #76]	; (800694c <USB_CoreReset+0x60>)
 8006900:	4293      	cmp	r3, r2
 8006902:	d901      	bls.n	8006908 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 8006904:	2303      	movs	r3, #3
 8006906:	e01a      	b.n	800693e <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	691b      	ldr	r3, [r3, #16]
 800690c:	2b00      	cmp	r3, #0
 800690e:	daf3      	bge.n	80068f8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006910:	2300      	movs	r3, #0
 8006912:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	691b      	ldr	r3, [r3, #16]
 8006918:	f043 0201 	orr.w	r2, r3, #1
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	3301      	adds	r3, #1
 8006924:	60fb      	str	r3, [r7, #12]
 8006926:	4a09      	ldr	r2, [pc, #36]	; (800694c <USB_CoreReset+0x60>)
 8006928:	4293      	cmp	r3, r2
 800692a:	d901      	bls.n	8006930 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 800692c:	2303      	movs	r3, #3
 800692e:	e006      	b.n	800693e <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	691b      	ldr	r3, [r3, #16]
 8006934:	f003 0301 	and.w	r3, r3, #1
 8006938:	2b01      	cmp	r3, #1
 800693a:	d0f1      	beq.n	8006920 <USB_CoreReset+0x34>

  return HAL_OK;
 800693c:	2300      	movs	r3, #0
}
 800693e:	4618      	mov	r0, r3
 8006940:	3714      	adds	r7, #20
 8006942:	46bd      	mov	sp, r7
 8006944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006948:	4770      	bx	lr
 800694a:	bf00      	nop
 800694c:	00030d40 	.word	0x00030d40

08006950 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006950:	b580      	push	{r7, lr}
 8006952:	b084      	sub	sp, #16
 8006954:	af00      	add	r7, sp, #0
 8006956:	6078      	str	r0, [r7, #4]
 8006958:	460b      	mov	r3, r1
 800695a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800695c:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8006960:	f002 fa02 	bl	8008d68 <USBD_static_malloc>
 8006964:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	2b00      	cmp	r3, #0
 800696a:	d105      	bne.n	8006978 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	2200      	movs	r2, #0
 8006970:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8006974:	2302      	movs	r3, #2
 8006976:	e066      	b.n	8006a46 <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	68fa      	ldr	r2, [r7, #12]
 800697c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	7c1b      	ldrb	r3, [r3, #16]
 8006984:	2b00      	cmp	r3, #0
 8006986:	d119      	bne.n	80069bc <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8006988:	f44f 7300 	mov.w	r3, #512	; 0x200
 800698c:	2202      	movs	r2, #2
 800698e:	2181      	movs	r1, #129	; 0x81
 8006990:	6878      	ldr	r0, [r7, #4]
 8006992:	f002 f878 	bl	8008a86 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	2201      	movs	r2, #1
 800699a:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800699c:	f44f 7300 	mov.w	r3, #512	; 0x200
 80069a0:	2202      	movs	r2, #2
 80069a2:	2101      	movs	r1, #1
 80069a4:	6878      	ldr	r0, [r7, #4]
 80069a6:	f002 f86e 	bl	8008a86 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	2201      	movs	r2, #1
 80069ae:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	2210      	movs	r2, #16
 80069b6:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 80069ba:	e016      	b.n	80069ea <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80069bc:	2340      	movs	r3, #64	; 0x40
 80069be:	2202      	movs	r2, #2
 80069c0:	2181      	movs	r1, #129	; 0x81
 80069c2:	6878      	ldr	r0, [r7, #4]
 80069c4:	f002 f85f 	bl	8008a86 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	2201      	movs	r2, #1
 80069cc:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80069ce:	2340      	movs	r3, #64	; 0x40
 80069d0:	2202      	movs	r2, #2
 80069d2:	2101      	movs	r1, #1
 80069d4:	6878      	ldr	r0, [r7, #4]
 80069d6:	f002 f856 	bl	8008a86 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	2201      	movs	r2, #1
 80069de:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	2210      	movs	r2, #16
 80069e6:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80069ea:	2308      	movs	r3, #8
 80069ec:	2203      	movs	r2, #3
 80069ee:	2182      	movs	r1, #130	; 0x82
 80069f0:	6878      	ldr	r0, [r7, #4]
 80069f2:	f002 f848 	bl	8008a86 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	2201      	movs	r2, #1
 80069fa:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	2200      	movs	r2, #0
 8006a0c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	2200      	movs	r2, #0
 8006a14:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	7c1b      	ldrb	r3, [r3, #16]
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d109      	bne.n	8006a34 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006a26:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006a2a:	2101      	movs	r1, #1
 8006a2c:	6878      	ldr	r0, [r7, #4]
 8006a2e:	f002 f919 	bl	8008c64 <USBD_LL_PrepareReceive>
 8006a32:	e007      	b.n	8006a44 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006a3a:	2340      	movs	r3, #64	; 0x40
 8006a3c:	2101      	movs	r1, #1
 8006a3e:	6878      	ldr	r0, [r7, #4]
 8006a40:	f002 f910 	bl	8008c64 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006a44:	2300      	movs	r3, #0
}
 8006a46:	4618      	mov	r0, r3
 8006a48:	3710      	adds	r7, #16
 8006a4a:	46bd      	mov	sp, r7
 8006a4c:	bd80      	pop	{r7, pc}

08006a4e <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006a4e:	b580      	push	{r7, lr}
 8006a50:	b082      	sub	sp, #8
 8006a52:	af00      	add	r7, sp, #0
 8006a54:	6078      	str	r0, [r7, #4]
 8006a56:	460b      	mov	r3, r1
 8006a58:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8006a5a:	2181      	movs	r1, #129	; 0x81
 8006a5c:	6878      	ldr	r0, [r7, #4]
 8006a5e:	f002 f838 	bl	8008ad2 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	2200      	movs	r2, #0
 8006a66:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8006a68:	2101      	movs	r1, #1
 8006a6a:	6878      	ldr	r0, [r7, #4]
 8006a6c:	f002 f831 	bl	8008ad2 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	2200      	movs	r2, #0
 8006a74:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8006a78:	2182      	movs	r1, #130	; 0x82
 8006a7a:	6878      	ldr	r0, [r7, #4]
 8006a7c:	f002 f829 	bl	8008ad2 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	2200      	movs	r2, #0
 8006a84:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	2200      	movs	r2, #0
 8006a8c:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d00e      	beq.n	8006ab8 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006aa0:	685b      	ldr	r3, [r3, #4]
 8006aa2:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006aaa:	4618      	mov	r0, r3
 8006aac:	f002 f96a 	bl	8008d84 <USBD_static_free>
    pdev->pClassData = NULL;
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	2200      	movs	r2, #0
 8006ab4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8006ab8:	2300      	movs	r3, #0
}
 8006aba:	4618      	mov	r0, r3
 8006abc:	3708      	adds	r7, #8
 8006abe:	46bd      	mov	sp, r7
 8006ac0:	bd80      	pop	{r7, pc}
	...

08006ac4 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8006ac4:	b580      	push	{r7, lr}
 8006ac6:	b086      	sub	sp, #24
 8006ac8:	af00      	add	r7, sp, #0
 8006aca:	6078      	str	r0, [r7, #4]
 8006acc:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006ad4:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8006ad6:	2300      	movs	r3, #0
 8006ad8:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8006ada:	2300      	movs	r3, #0
 8006adc:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8006ade:	2300      	movs	r3, #0
 8006ae0:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8006ae2:	693b      	ldr	r3, [r7, #16]
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d101      	bne.n	8006aec <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 8006ae8:	2303      	movs	r3, #3
 8006aea:	e0af      	b.n	8006c4c <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006aec:	683b      	ldr	r3, [r7, #0]
 8006aee:	781b      	ldrb	r3, [r3, #0]
 8006af0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d03f      	beq.n	8006b78 <USBD_CDC_Setup+0xb4>
 8006af8:	2b20      	cmp	r3, #32
 8006afa:	f040 809f 	bne.w	8006c3c <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8006afe:	683b      	ldr	r3, [r7, #0]
 8006b00:	88db      	ldrh	r3, [r3, #6]
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d02e      	beq.n	8006b64 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8006b06:	683b      	ldr	r3, [r7, #0]
 8006b08:	781b      	ldrb	r3, [r3, #0]
 8006b0a:	b25b      	sxtb	r3, r3
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	da16      	bge.n	8006b3e <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006b16:	689b      	ldr	r3, [r3, #8]
 8006b18:	683a      	ldr	r2, [r7, #0]
 8006b1a:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 8006b1c:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006b1e:	683a      	ldr	r2, [r7, #0]
 8006b20:	88d2      	ldrh	r2, [r2, #6]
 8006b22:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8006b24:	683b      	ldr	r3, [r7, #0]
 8006b26:	88db      	ldrh	r3, [r3, #6]
 8006b28:	2b07      	cmp	r3, #7
 8006b2a:	bf28      	it	cs
 8006b2c:	2307      	movcs	r3, #7
 8006b2e:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8006b30:	693b      	ldr	r3, [r7, #16]
 8006b32:	89fa      	ldrh	r2, [r7, #14]
 8006b34:	4619      	mov	r1, r3
 8006b36:	6878      	ldr	r0, [r7, #4]
 8006b38:	f001 fb43 	bl	80081c2 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 8006b3c:	e085      	b.n	8006c4a <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 8006b3e:	683b      	ldr	r3, [r7, #0]
 8006b40:	785a      	ldrb	r2, [r3, #1]
 8006b42:	693b      	ldr	r3, [r7, #16]
 8006b44:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8006b48:	683b      	ldr	r3, [r7, #0]
 8006b4a:	88db      	ldrh	r3, [r3, #6]
 8006b4c:	b2da      	uxtb	r2, r3
 8006b4e:	693b      	ldr	r3, [r7, #16]
 8006b50:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8006b54:	6939      	ldr	r1, [r7, #16]
 8006b56:	683b      	ldr	r3, [r7, #0]
 8006b58:	88db      	ldrh	r3, [r3, #6]
 8006b5a:	461a      	mov	r2, r3
 8006b5c:	6878      	ldr	r0, [r7, #4]
 8006b5e:	f001 fb5c 	bl	800821a <USBD_CtlPrepareRx>
      break;
 8006b62:	e072      	b.n	8006c4a <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006b6a:	689b      	ldr	r3, [r3, #8]
 8006b6c:	683a      	ldr	r2, [r7, #0]
 8006b6e:	7850      	ldrb	r0, [r2, #1]
 8006b70:	2200      	movs	r2, #0
 8006b72:	6839      	ldr	r1, [r7, #0]
 8006b74:	4798      	blx	r3
      break;
 8006b76:	e068      	b.n	8006c4a <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006b78:	683b      	ldr	r3, [r7, #0]
 8006b7a:	785b      	ldrb	r3, [r3, #1]
 8006b7c:	2b0b      	cmp	r3, #11
 8006b7e:	d852      	bhi.n	8006c26 <USBD_CDC_Setup+0x162>
 8006b80:	a201      	add	r2, pc, #4	; (adr r2, 8006b88 <USBD_CDC_Setup+0xc4>)
 8006b82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b86:	bf00      	nop
 8006b88:	08006bb9 	.word	0x08006bb9
 8006b8c:	08006c35 	.word	0x08006c35
 8006b90:	08006c27 	.word	0x08006c27
 8006b94:	08006c27 	.word	0x08006c27
 8006b98:	08006c27 	.word	0x08006c27
 8006b9c:	08006c27 	.word	0x08006c27
 8006ba0:	08006c27 	.word	0x08006c27
 8006ba4:	08006c27 	.word	0x08006c27
 8006ba8:	08006c27 	.word	0x08006c27
 8006bac:	08006c27 	.word	0x08006c27
 8006bb0:	08006be3 	.word	0x08006be3
 8006bb4:	08006c0d 	.word	0x08006c0d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006bbe:	b2db      	uxtb	r3, r3
 8006bc0:	2b03      	cmp	r3, #3
 8006bc2:	d107      	bne.n	8006bd4 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8006bc4:	f107 030a 	add.w	r3, r7, #10
 8006bc8:	2202      	movs	r2, #2
 8006bca:	4619      	mov	r1, r3
 8006bcc:	6878      	ldr	r0, [r7, #4]
 8006bce:	f001 faf8 	bl	80081c2 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006bd2:	e032      	b.n	8006c3a <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8006bd4:	6839      	ldr	r1, [r7, #0]
 8006bd6:	6878      	ldr	r0, [r7, #4]
 8006bd8:	f001 fa82 	bl	80080e0 <USBD_CtlError>
            ret = USBD_FAIL;
 8006bdc:	2303      	movs	r3, #3
 8006bde:	75fb      	strb	r3, [r7, #23]
          break;
 8006be0:	e02b      	b.n	8006c3a <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006be8:	b2db      	uxtb	r3, r3
 8006bea:	2b03      	cmp	r3, #3
 8006bec:	d107      	bne.n	8006bfe <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8006bee:	f107 030d 	add.w	r3, r7, #13
 8006bf2:	2201      	movs	r2, #1
 8006bf4:	4619      	mov	r1, r3
 8006bf6:	6878      	ldr	r0, [r7, #4]
 8006bf8:	f001 fae3 	bl	80081c2 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006bfc:	e01d      	b.n	8006c3a <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8006bfe:	6839      	ldr	r1, [r7, #0]
 8006c00:	6878      	ldr	r0, [r7, #4]
 8006c02:	f001 fa6d 	bl	80080e0 <USBD_CtlError>
            ret = USBD_FAIL;
 8006c06:	2303      	movs	r3, #3
 8006c08:	75fb      	strb	r3, [r7, #23]
          break;
 8006c0a:	e016      	b.n	8006c3a <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006c12:	b2db      	uxtb	r3, r3
 8006c14:	2b03      	cmp	r3, #3
 8006c16:	d00f      	beq.n	8006c38 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 8006c18:	6839      	ldr	r1, [r7, #0]
 8006c1a:	6878      	ldr	r0, [r7, #4]
 8006c1c:	f001 fa60 	bl	80080e0 <USBD_CtlError>
            ret = USBD_FAIL;
 8006c20:	2303      	movs	r3, #3
 8006c22:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8006c24:	e008      	b.n	8006c38 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8006c26:	6839      	ldr	r1, [r7, #0]
 8006c28:	6878      	ldr	r0, [r7, #4]
 8006c2a:	f001 fa59 	bl	80080e0 <USBD_CtlError>
          ret = USBD_FAIL;
 8006c2e:	2303      	movs	r3, #3
 8006c30:	75fb      	strb	r3, [r7, #23]
          break;
 8006c32:	e002      	b.n	8006c3a <USBD_CDC_Setup+0x176>
          break;
 8006c34:	bf00      	nop
 8006c36:	e008      	b.n	8006c4a <USBD_CDC_Setup+0x186>
          break;
 8006c38:	bf00      	nop
      }
      break;
 8006c3a:	e006      	b.n	8006c4a <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 8006c3c:	6839      	ldr	r1, [r7, #0]
 8006c3e:	6878      	ldr	r0, [r7, #4]
 8006c40:	f001 fa4e 	bl	80080e0 <USBD_CtlError>
      ret = USBD_FAIL;
 8006c44:	2303      	movs	r3, #3
 8006c46:	75fb      	strb	r3, [r7, #23]
      break;
 8006c48:	bf00      	nop
  }

  return (uint8_t)ret;
 8006c4a:	7dfb      	ldrb	r3, [r7, #23]
}
 8006c4c:	4618      	mov	r0, r3
 8006c4e:	3718      	adds	r7, #24
 8006c50:	46bd      	mov	sp, r7
 8006c52:	bd80      	pop	{r7, pc}

08006c54 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006c54:	b580      	push	{r7, lr}
 8006c56:	b084      	sub	sp, #16
 8006c58:	af00      	add	r7, sp, #0
 8006c5a:	6078      	str	r0, [r7, #4]
 8006c5c:	460b      	mov	r3, r1
 8006c5e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8006c66:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d101      	bne.n	8006c76 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8006c72:	2303      	movs	r3, #3
 8006c74:	e04f      	b.n	8006d16 <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006c7c:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8006c7e:	78fa      	ldrb	r2, [r7, #3]
 8006c80:	6879      	ldr	r1, [r7, #4]
 8006c82:	4613      	mov	r3, r2
 8006c84:	009b      	lsls	r3, r3, #2
 8006c86:	4413      	add	r3, r2
 8006c88:	009b      	lsls	r3, r3, #2
 8006c8a:	440b      	add	r3, r1
 8006c8c:	3318      	adds	r3, #24
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d029      	beq.n	8006ce8 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8006c94:	78fa      	ldrb	r2, [r7, #3]
 8006c96:	6879      	ldr	r1, [r7, #4]
 8006c98:	4613      	mov	r3, r2
 8006c9a:	009b      	lsls	r3, r3, #2
 8006c9c:	4413      	add	r3, r2
 8006c9e:	009b      	lsls	r3, r3, #2
 8006ca0:	440b      	add	r3, r1
 8006ca2:	3318      	adds	r3, #24
 8006ca4:	681a      	ldr	r2, [r3, #0]
 8006ca6:	78f9      	ldrb	r1, [r7, #3]
 8006ca8:	68f8      	ldr	r0, [r7, #12]
 8006caa:	460b      	mov	r3, r1
 8006cac:	00db      	lsls	r3, r3, #3
 8006cae:	1a5b      	subs	r3, r3, r1
 8006cb0:	009b      	lsls	r3, r3, #2
 8006cb2:	4403      	add	r3, r0
 8006cb4:	3344      	adds	r3, #68	; 0x44
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	fbb2 f1f3 	udiv	r1, r2, r3
 8006cbc:	fb03 f301 	mul.w	r3, r3, r1
 8006cc0:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d110      	bne.n	8006ce8 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8006cc6:	78fa      	ldrb	r2, [r7, #3]
 8006cc8:	6879      	ldr	r1, [r7, #4]
 8006cca:	4613      	mov	r3, r2
 8006ccc:	009b      	lsls	r3, r3, #2
 8006cce:	4413      	add	r3, r2
 8006cd0:	009b      	lsls	r3, r3, #2
 8006cd2:	440b      	add	r3, r1
 8006cd4:	3318      	adds	r3, #24
 8006cd6:	2200      	movs	r2, #0
 8006cd8:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8006cda:	78f9      	ldrb	r1, [r7, #3]
 8006cdc:	2300      	movs	r3, #0
 8006cde:	2200      	movs	r2, #0
 8006ce0:	6878      	ldr	r0, [r7, #4]
 8006ce2:	f001 ff9e 	bl	8008c22 <USBD_LL_Transmit>
 8006ce6:	e015      	b.n	8006d14 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 8006ce8:	68bb      	ldr	r3, [r7, #8]
 8006cea:	2200      	movs	r2, #0
 8006cec:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006cf6:	691b      	ldr	r3, [r3, #16]
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	d00b      	beq.n	8006d14 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006d02:	691b      	ldr	r3, [r3, #16]
 8006d04:	68ba      	ldr	r2, [r7, #8]
 8006d06:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8006d0a:	68ba      	ldr	r2, [r7, #8]
 8006d0c:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8006d10:	78fa      	ldrb	r2, [r7, #3]
 8006d12:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8006d14:	2300      	movs	r3, #0
}
 8006d16:	4618      	mov	r0, r3
 8006d18:	3710      	adds	r7, #16
 8006d1a:	46bd      	mov	sp, r7
 8006d1c:	bd80      	pop	{r7, pc}

08006d1e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006d1e:	b580      	push	{r7, lr}
 8006d20:	b084      	sub	sp, #16
 8006d22:	af00      	add	r7, sp, #0
 8006d24:	6078      	str	r0, [r7, #4]
 8006d26:	460b      	mov	r3, r1
 8006d28:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006d30:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d101      	bne.n	8006d40 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8006d3c:	2303      	movs	r3, #3
 8006d3e:	e015      	b.n	8006d6c <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8006d40:	78fb      	ldrb	r3, [r7, #3]
 8006d42:	4619      	mov	r1, r3
 8006d44:	6878      	ldr	r0, [r7, #4]
 8006d46:	f001 ffae 	bl	8008ca6 <USBD_LL_GetRxDataSize>
 8006d4a:	4602      	mov	r2, r0
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006d58:	68db      	ldr	r3, [r3, #12]
 8006d5a:	68fa      	ldr	r2, [r7, #12]
 8006d5c:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8006d60:	68fa      	ldr	r2, [r7, #12]
 8006d62:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8006d66:	4611      	mov	r1, r2
 8006d68:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8006d6a:	2300      	movs	r3, #0
}
 8006d6c:	4618      	mov	r0, r3
 8006d6e:	3710      	adds	r7, #16
 8006d70:	46bd      	mov	sp, r7
 8006d72:	bd80      	pop	{r7, pc}

08006d74 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8006d74:	b580      	push	{r7, lr}
 8006d76:	b084      	sub	sp, #16
 8006d78:	af00      	add	r7, sp, #0
 8006d7a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006d82:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d101      	bne.n	8006d8e <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 8006d8a:	2303      	movs	r3, #3
 8006d8c:	e01b      	b.n	8006dc6 <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	d015      	beq.n	8006dc4 <USBD_CDC_EP0_RxReady+0x50>
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8006d9e:	2bff      	cmp	r3, #255	; 0xff
 8006da0:	d010      	beq.n	8006dc4 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006da8:	689b      	ldr	r3, [r3, #8]
 8006daa:	68fa      	ldr	r2, [r7, #12]
 8006dac:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 8006db0:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8006db2:	68fa      	ldr	r2, [r7, #12]
 8006db4:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8006db8:	b292      	uxth	r2, r2
 8006dba:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	22ff      	movs	r2, #255	; 0xff
 8006dc0:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8006dc4:	2300      	movs	r3, #0
}
 8006dc6:	4618      	mov	r0, r3
 8006dc8:	3710      	adds	r7, #16
 8006dca:	46bd      	mov	sp, r7
 8006dcc:	bd80      	pop	{r7, pc}
	...

08006dd0 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8006dd0:	b480      	push	{r7}
 8006dd2:	b083      	sub	sp, #12
 8006dd4:	af00      	add	r7, sp, #0
 8006dd6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	2243      	movs	r2, #67	; 0x43
 8006ddc:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 8006dde:	4b03      	ldr	r3, [pc, #12]	; (8006dec <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8006de0:	4618      	mov	r0, r3
 8006de2:	370c      	adds	r7, #12
 8006de4:	46bd      	mov	sp, r7
 8006de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dea:	4770      	bx	lr
 8006dec:	20000094 	.word	0x20000094

08006df0 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8006df0:	b480      	push	{r7}
 8006df2:	b083      	sub	sp, #12
 8006df4:	af00      	add	r7, sp, #0
 8006df6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	2243      	movs	r2, #67	; 0x43
 8006dfc:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 8006dfe:	4b03      	ldr	r3, [pc, #12]	; (8006e0c <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8006e00:	4618      	mov	r0, r3
 8006e02:	370c      	adds	r7, #12
 8006e04:	46bd      	mov	sp, r7
 8006e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e0a:	4770      	bx	lr
 8006e0c:	20000050 	.word	0x20000050

08006e10 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8006e10:	b480      	push	{r7}
 8006e12:	b083      	sub	sp, #12
 8006e14:	af00      	add	r7, sp, #0
 8006e16:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	2243      	movs	r2, #67	; 0x43
 8006e1c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 8006e1e:	4b03      	ldr	r3, [pc, #12]	; (8006e2c <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8006e20:	4618      	mov	r0, r3
 8006e22:	370c      	adds	r7, #12
 8006e24:	46bd      	mov	sp, r7
 8006e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e2a:	4770      	bx	lr
 8006e2c:	200000d8 	.word	0x200000d8

08006e30 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8006e30:	b480      	push	{r7}
 8006e32:	b083      	sub	sp, #12
 8006e34:	af00      	add	r7, sp, #0
 8006e36:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	220a      	movs	r2, #10
 8006e3c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8006e3e:	4b03      	ldr	r3, [pc, #12]	; (8006e4c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8006e40:	4618      	mov	r0, r3
 8006e42:	370c      	adds	r7, #12
 8006e44:	46bd      	mov	sp, r7
 8006e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e4a:	4770      	bx	lr
 8006e4c:	2000000c 	.word	0x2000000c

08006e50 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8006e50:	b480      	push	{r7}
 8006e52:	b083      	sub	sp, #12
 8006e54:	af00      	add	r7, sp, #0
 8006e56:	6078      	str	r0, [r7, #4]
 8006e58:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8006e5a:	683b      	ldr	r3, [r7, #0]
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	d101      	bne.n	8006e64 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8006e60:	2303      	movs	r3, #3
 8006e62:	e004      	b.n	8006e6e <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	683a      	ldr	r2, [r7, #0]
 8006e68:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8006e6c:	2300      	movs	r3, #0
}
 8006e6e:	4618      	mov	r0, r3
 8006e70:	370c      	adds	r7, #12
 8006e72:	46bd      	mov	sp, r7
 8006e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e78:	4770      	bx	lr

08006e7a <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8006e7a:	b480      	push	{r7}
 8006e7c:	b087      	sub	sp, #28
 8006e7e:	af00      	add	r7, sp, #0
 8006e80:	60f8      	str	r0, [r7, #12]
 8006e82:	60b9      	str	r1, [r7, #8]
 8006e84:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006e8c:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8006e8e:	697b      	ldr	r3, [r7, #20]
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d101      	bne.n	8006e98 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8006e94:	2303      	movs	r3, #3
 8006e96:	e008      	b.n	8006eaa <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 8006e98:	697b      	ldr	r3, [r7, #20]
 8006e9a:	68ba      	ldr	r2, [r7, #8]
 8006e9c:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8006ea0:	697b      	ldr	r3, [r7, #20]
 8006ea2:	687a      	ldr	r2, [r7, #4]
 8006ea4:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8006ea8:	2300      	movs	r3, #0
}
 8006eaa:	4618      	mov	r0, r3
 8006eac:	371c      	adds	r7, #28
 8006eae:	46bd      	mov	sp, r7
 8006eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eb4:	4770      	bx	lr

08006eb6 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8006eb6:	b480      	push	{r7}
 8006eb8:	b085      	sub	sp, #20
 8006eba:	af00      	add	r7, sp, #0
 8006ebc:	6078      	str	r0, [r7, #4]
 8006ebe:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006ec6:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d101      	bne.n	8006ed2 <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 8006ece:	2303      	movs	r3, #3
 8006ed0:	e004      	b.n	8006edc <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	683a      	ldr	r2, [r7, #0]
 8006ed6:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8006eda:	2300      	movs	r3, #0
}
 8006edc:	4618      	mov	r0, r3
 8006ede:	3714      	adds	r7, #20
 8006ee0:	46bd      	mov	sp, r7
 8006ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ee6:	4770      	bx	lr

08006ee8 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8006ee8:	b580      	push	{r7, lr}
 8006eea:	b084      	sub	sp, #16
 8006eec:	af00      	add	r7, sp, #0
 8006eee:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006ef6:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8006ef8:	2301      	movs	r3, #1
 8006efa:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d101      	bne.n	8006f0a <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8006f06:	2303      	movs	r3, #3
 8006f08:	e01a      	b.n	8006f40 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 8006f0a:	68bb      	ldr	r3, [r7, #8]
 8006f0c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d114      	bne.n	8006f3e <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8006f14:	68bb      	ldr	r3, [r7, #8]
 8006f16:	2201      	movs	r2, #1
 8006f18:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8006f1c:	68bb      	ldr	r3, [r7, #8]
 8006f1e:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 8006f26:	68bb      	ldr	r3, [r7, #8]
 8006f28:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8006f2c:	68bb      	ldr	r3, [r7, #8]
 8006f2e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8006f32:	2181      	movs	r1, #129	; 0x81
 8006f34:	6878      	ldr	r0, [r7, #4]
 8006f36:	f001 fe74 	bl	8008c22 <USBD_LL_Transmit>

    ret = USBD_OK;
 8006f3a:	2300      	movs	r3, #0
 8006f3c:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8006f3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f40:	4618      	mov	r0, r3
 8006f42:	3710      	adds	r7, #16
 8006f44:	46bd      	mov	sp, r7
 8006f46:	bd80      	pop	{r7, pc}

08006f48 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8006f48:	b580      	push	{r7, lr}
 8006f4a:	b084      	sub	sp, #16
 8006f4c:	af00      	add	r7, sp, #0
 8006f4e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006f56:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d101      	bne.n	8006f66 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8006f62:	2303      	movs	r3, #3
 8006f64:	e016      	b.n	8006f94 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	7c1b      	ldrb	r3, [r3, #16]
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d109      	bne.n	8006f82 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006f74:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006f78:	2101      	movs	r1, #1
 8006f7a:	6878      	ldr	r0, [r7, #4]
 8006f7c:	f001 fe72 	bl	8008c64 <USBD_LL_PrepareReceive>
 8006f80:	e007      	b.n	8006f92 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006f88:	2340      	movs	r3, #64	; 0x40
 8006f8a:	2101      	movs	r1, #1
 8006f8c:	6878      	ldr	r0, [r7, #4]
 8006f8e:	f001 fe69 	bl	8008c64 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006f92:	2300      	movs	r3, #0
}
 8006f94:	4618      	mov	r0, r3
 8006f96:	3710      	adds	r7, #16
 8006f98:	46bd      	mov	sp, r7
 8006f9a:	bd80      	pop	{r7, pc}

08006f9c <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006f9c:	b580      	push	{r7, lr}
 8006f9e:	b086      	sub	sp, #24
 8006fa0:	af00      	add	r7, sp, #0
 8006fa2:	60f8      	str	r0, [r7, #12]
 8006fa4:	60b9      	str	r1, [r7, #8]
 8006fa6:	4613      	mov	r3, r2
 8006fa8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d101      	bne.n	8006fb4 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8006fb0:	2303      	movs	r3, #3
 8006fb2:	e01f      	b.n	8006ff4 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	2200      	movs	r2, #0
 8006fb8:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	2200      	movs	r2, #0
 8006fc0:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	2200      	movs	r2, #0
 8006fc8:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8006fcc:	68bb      	ldr	r3, [r7, #8]
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d003      	beq.n	8006fda <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	68ba      	ldr	r2, [r7, #8]
 8006fd6:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	2201      	movs	r2, #1
 8006fde:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	79fa      	ldrb	r2, [r7, #7]
 8006fe6:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8006fe8:	68f8      	ldr	r0, [r7, #12]
 8006fea:	f001 fce5 	bl	80089b8 <USBD_LL_Init>
 8006fee:	4603      	mov	r3, r0
 8006ff0:	75fb      	strb	r3, [r7, #23]

  return ret;
 8006ff2:	7dfb      	ldrb	r3, [r7, #23]
}
 8006ff4:	4618      	mov	r0, r3
 8006ff6:	3718      	adds	r7, #24
 8006ff8:	46bd      	mov	sp, r7
 8006ffa:	bd80      	pop	{r7, pc}

08006ffc <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8006ffc:	b580      	push	{r7, lr}
 8006ffe:	b084      	sub	sp, #16
 8007000:	af00      	add	r7, sp, #0
 8007002:	6078      	str	r0, [r7, #4]
 8007004:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007006:	2300      	movs	r3, #0
 8007008:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800700a:	683b      	ldr	r3, [r7, #0]
 800700c:	2b00      	cmp	r3, #0
 800700e:	d101      	bne.n	8007014 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8007010:	2303      	movs	r3, #3
 8007012:	e016      	b.n	8007042 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	683a      	ldr	r2, [r7, #0]
 8007018:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007022:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007024:	2b00      	cmp	r3, #0
 8007026:	d00b      	beq.n	8007040 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800702e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007030:	f107 020e 	add.w	r2, r7, #14
 8007034:	4610      	mov	r0, r2
 8007036:	4798      	blx	r3
 8007038:	4602      	mov	r2, r0
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8007040:	2300      	movs	r3, #0
}
 8007042:	4618      	mov	r0, r3
 8007044:	3710      	adds	r7, #16
 8007046:	46bd      	mov	sp, r7
 8007048:	bd80      	pop	{r7, pc}

0800704a <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800704a:	b580      	push	{r7, lr}
 800704c:	b082      	sub	sp, #8
 800704e:	af00      	add	r7, sp, #0
 8007050:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8007052:	6878      	ldr	r0, [r7, #4]
 8007054:	f001 fcfc 	bl	8008a50 <USBD_LL_Start>
 8007058:	4603      	mov	r3, r0
}
 800705a:	4618      	mov	r0, r3
 800705c:	3708      	adds	r7, #8
 800705e:	46bd      	mov	sp, r7
 8007060:	bd80      	pop	{r7, pc}

08007062 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8007062:	b480      	push	{r7}
 8007064:	b083      	sub	sp, #12
 8007066:	af00      	add	r7, sp, #0
 8007068:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800706a:	2300      	movs	r3, #0
}
 800706c:	4618      	mov	r0, r3
 800706e:	370c      	adds	r7, #12
 8007070:	46bd      	mov	sp, r7
 8007072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007076:	4770      	bx	lr

08007078 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007078:	b580      	push	{r7, lr}
 800707a:	b084      	sub	sp, #16
 800707c:	af00      	add	r7, sp, #0
 800707e:	6078      	str	r0, [r7, #4]
 8007080:	460b      	mov	r3, r1
 8007082:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8007084:	2303      	movs	r3, #3
 8007086:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800708e:	2b00      	cmp	r3, #0
 8007090:	d009      	beq.n	80070a6 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	78fa      	ldrb	r2, [r7, #3]
 800709c:	4611      	mov	r1, r2
 800709e:	6878      	ldr	r0, [r7, #4]
 80070a0:	4798      	blx	r3
 80070a2:	4603      	mov	r3, r0
 80070a4:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80070a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80070a8:	4618      	mov	r0, r3
 80070aa:	3710      	adds	r7, #16
 80070ac:	46bd      	mov	sp, r7
 80070ae:	bd80      	pop	{r7, pc}

080070b0 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80070b0:	b580      	push	{r7, lr}
 80070b2:	b082      	sub	sp, #8
 80070b4:	af00      	add	r7, sp, #0
 80070b6:	6078      	str	r0, [r7, #4]
 80070b8:	460b      	mov	r3, r1
 80070ba:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d007      	beq.n	80070d6 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80070cc:	685b      	ldr	r3, [r3, #4]
 80070ce:	78fa      	ldrb	r2, [r7, #3]
 80070d0:	4611      	mov	r1, r2
 80070d2:	6878      	ldr	r0, [r7, #4]
 80070d4:	4798      	blx	r3
  }

  return USBD_OK;
 80070d6:	2300      	movs	r3, #0
}
 80070d8:	4618      	mov	r0, r3
 80070da:	3708      	adds	r7, #8
 80070dc:	46bd      	mov	sp, r7
 80070de:	bd80      	pop	{r7, pc}

080070e0 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80070e0:	b580      	push	{r7, lr}
 80070e2:	b084      	sub	sp, #16
 80070e4:	af00      	add	r7, sp, #0
 80070e6:	6078      	str	r0, [r7, #4]
 80070e8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80070f0:	6839      	ldr	r1, [r7, #0]
 80070f2:	4618      	mov	r0, r3
 80070f4:	f000 ffba 	bl	800806c <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	2201      	movs	r2, #1
 80070fc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8007106:	461a      	mov	r2, r3
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007114:	f003 031f 	and.w	r3, r3, #31
 8007118:	2b02      	cmp	r3, #2
 800711a:	d01a      	beq.n	8007152 <USBD_LL_SetupStage+0x72>
 800711c:	2b02      	cmp	r3, #2
 800711e:	d822      	bhi.n	8007166 <USBD_LL_SetupStage+0x86>
 8007120:	2b00      	cmp	r3, #0
 8007122:	d002      	beq.n	800712a <USBD_LL_SetupStage+0x4a>
 8007124:	2b01      	cmp	r3, #1
 8007126:	d00a      	beq.n	800713e <USBD_LL_SetupStage+0x5e>
 8007128:	e01d      	b.n	8007166 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007130:	4619      	mov	r1, r3
 8007132:	6878      	ldr	r0, [r7, #4]
 8007134:	f000 fa62 	bl	80075fc <USBD_StdDevReq>
 8007138:	4603      	mov	r3, r0
 800713a:	73fb      	strb	r3, [r7, #15]
      break;
 800713c:	e020      	b.n	8007180 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007144:	4619      	mov	r1, r3
 8007146:	6878      	ldr	r0, [r7, #4]
 8007148:	f000 fac6 	bl	80076d8 <USBD_StdItfReq>
 800714c:	4603      	mov	r3, r0
 800714e:	73fb      	strb	r3, [r7, #15]
      break;
 8007150:	e016      	b.n	8007180 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007158:	4619      	mov	r1, r3
 800715a:	6878      	ldr	r0, [r7, #4]
 800715c:	f000 fb05 	bl	800776a <USBD_StdEPReq>
 8007160:	4603      	mov	r3, r0
 8007162:	73fb      	strb	r3, [r7, #15]
      break;
 8007164:	e00c      	b.n	8007180 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800716c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007170:	b2db      	uxtb	r3, r3
 8007172:	4619      	mov	r1, r3
 8007174:	6878      	ldr	r0, [r7, #4]
 8007176:	f001 fccb 	bl	8008b10 <USBD_LL_StallEP>
 800717a:	4603      	mov	r3, r0
 800717c:	73fb      	strb	r3, [r7, #15]
      break;
 800717e:	bf00      	nop
  }

  return ret;
 8007180:	7bfb      	ldrb	r3, [r7, #15]
}
 8007182:	4618      	mov	r0, r3
 8007184:	3710      	adds	r7, #16
 8007186:	46bd      	mov	sp, r7
 8007188:	bd80      	pop	{r7, pc}

0800718a <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800718a:	b580      	push	{r7, lr}
 800718c:	b086      	sub	sp, #24
 800718e:	af00      	add	r7, sp, #0
 8007190:	60f8      	str	r0, [r7, #12]
 8007192:	460b      	mov	r3, r1
 8007194:	607a      	str	r2, [r7, #4]
 8007196:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8007198:	7afb      	ldrb	r3, [r7, #11]
 800719a:	2b00      	cmp	r3, #0
 800719c:	d138      	bne.n	8007210 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80071a4:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80071ac:	2b03      	cmp	r3, #3
 80071ae:	d14a      	bne.n	8007246 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 80071b0:	693b      	ldr	r3, [r7, #16]
 80071b2:	689a      	ldr	r2, [r3, #8]
 80071b4:	693b      	ldr	r3, [r7, #16]
 80071b6:	68db      	ldr	r3, [r3, #12]
 80071b8:	429a      	cmp	r2, r3
 80071ba:	d913      	bls.n	80071e4 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80071bc:	693b      	ldr	r3, [r7, #16]
 80071be:	689a      	ldr	r2, [r3, #8]
 80071c0:	693b      	ldr	r3, [r7, #16]
 80071c2:	68db      	ldr	r3, [r3, #12]
 80071c4:	1ad2      	subs	r2, r2, r3
 80071c6:	693b      	ldr	r3, [r7, #16]
 80071c8:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80071ca:	693b      	ldr	r3, [r7, #16]
 80071cc:	68da      	ldr	r2, [r3, #12]
 80071ce:	693b      	ldr	r3, [r7, #16]
 80071d0:	689b      	ldr	r3, [r3, #8]
 80071d2:	4293      	cmp	r3, r2
 80071d4:	bf28      	it	cs
 80071d6:	4613      	movcs	r3, r2
 80071d8:	461a      	mov	r2, r3
 80071da:	6879      	ldr	r1, [r7, #4]
 80071dc:	68f8      	ldr	r0, [r7, #12]
 80071de:	f001 f839 	bl	8008254 <USBD_CtlContinueRx>
 80071e2:	e030      	b.n	8007246 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80071ea:	b2db      	uxtb	r3, r3
 80071ec:	2b03      	cmp	r3, #3
 80071ee:	d10b      	bne.n	8007208 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80071f6:	691b      	ldr	r3, [r3, #16]
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d005      	beq.n	8007208 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007202:	691b      	ldr	r3, [r3, #16]
 8007204:	68f8      	ldr	r0, [r7, #12]
 8007206:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8007208:	68f8      	ldr	r0, [r7, #12]
 800720a:	f001 f834 	bl	8008276 <USBD_CtlSendStatus>
 800720e:	e01a      	b.n	8007246 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007216:	b2db      	uxtb	r3, r3
 8007218:	2b03      	cmp	r3, #3
 800721a:	d114      	bne.n	8007246 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007222:	699b      	ldr	r3, [r3, #24]
 8007224:	2b00      	cmp	r3, #0
 8007226:	d00e      	beq.n	8007246 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800722e:	699b      	ldr	r3, [r3, #24]
 8007230:	7afa      	ldrb	r2, [r7, #11]
 8007232:	4611      	mov	r1, r2
 8007234:	68f8      	ldr	r0, [r7, #12]
 8007236:	4798      	blx	r3
 8007238:	4603      	mov	r3, r0
 800723a:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800723c:	7dfb      	ldrb	r3, [r7, #23]
 800723e:	2b00      	cmp	r3, #0
 8007240:	d001      	beq.n	8007246 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 8007242:	7dfb      	ldrb	r3, [r7, #23]
 8007244:	e000      	b.n	8007248 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 8007246:	2300      	movs	r3, #0
}
 8007248:	4618      	mov	r0, r3
 800724a:	3718      	adds	r7, #24
 800724c:	46bd      	mov	sp, r7
 800724e:	bd80      	pop	{r7, pc}

08007250 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8007250:	b580      	push	{r7, lr}
 8007252:	b086      	sub	sp, #24
 8007254:	af00      	add	r7, sp, #0
 8007256:	60f8      	str	r0, [r7, #12]
 8007258:	460b      	mov	r3, r1
 800725a:	607a      	str	r2, [r7, #4]
 800725c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800725e:	7afb      	ldrb	r3, [r7, #11]
 8007260:	2b00      	cmp	r3, #0
 8007262:	d16b      	bne.n	800733c <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	3314      	adds	r3, #20
 8007268:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007270:	2b02      	cmp	r3, #2
 8007272:	d156      	bne.n	8007322 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 8007274:	693b      	ldr	r3, [r7, #16]
 8007276:	689a      	ldr	r2, [r3, #8]
 8007278:	693b      	ldr	r3, [r7, #16]
 800727a:	68db      	ldr	r3, [r3, #12]
 800727c:	429a      	cmp	r2, r3
 800727e:	d914      	bls.n	80072aa <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8007280:	693b      	ldr	r3, [r7, #16]
 8007282:	689a      	ldr	r2, [r3, #8]
 8007284:	693b      	ldr	r3, [r7, #16]
 8007286:	68db      	ldr	r3, [r3, #12]
 8007288:	1ad2      	subs	r2, r2, r3
 800728a:	693b      	ldr	r3, [r7, #16]
 800728c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800728e:	693b      	ldr	r3, [r7, #16]
 8007290:	689b      	ldr	r3, [r3, #8]
 8007292:	461a      	mov	r2, r3
 8007294:	6879      	ldr	r1, [r7, #4]
 8007296:	68f8      	ldr	r0, [r7, #12]
 8007298:	f000 ffae 	bl	80081f8 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800729c:	2300      	movs	r3, #0
 800729e:	2200      	movs	r2, #0
 80072a0:	2100      	movs	r1, #0
 80072a2:	68f8      	ldr	r0, [r7, #12]
 80072a4:	f001 fcde 	bl	8008c64 <USBD_LL_PrepareReceive>
 80072a8:	e03b      	b.n	8007322 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80072aa:	693b      	ldr	r3, [r7, #16]
 80072ac:	68da      	ldr	r2, [r3, #12]
 80072ae:	693b      	ldr	r3, [r7, #16]
 80072b0:	689b      	ldr	r3, [r3, #8]
 80072b2:	429a      	cmp	r2, r3
 80072b4:	d11c      	bne.n	80072f0 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80072b6:	693b      	ldr	r3, [r7, #16]
 80072b8:	685a      	ldr	r2, [r3, #4]
 80072ba:	693b      	ldr	r3, [r7, #16]
 80072bc:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80072be:	429a      	cmp	r2, r3
 80072c0:	d316      	bcc.n	80072f0 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80072c2:	693b      	ldr	r3, [r7, #16]
 80072c4:	685a      	ldr	r2, [r3, #4]
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80072cc:	429a      	cmp	r2, r3
 80072ce:	d20f      	bcs.n	80072f0 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80072d0:	2200      	movs	r2, #0
 80072d2:	2100      	movs	r1, #0
 80072d4:	68f8      	ldr	r0, [r7, #12]
 80072d6:	f000 ff8f 	bl	80081f8 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	2200      	movs	r2, #0
 80072de:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80072e2:	2300      	movs	r3, #0
 80072e4:	2200      	movs	r2, #0
 80072e6:	2100      	movs	r1, #0
 80072e8:	68f8      	ldr	r0, [r7, #12]
 80072ea:	f001 fcbb 	bl	8008c64 <USBD_LL_PrepareReceive>
 80072ee:	e018      	b.n	8007322 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80072f6:	b2db      	uxtb	r3, r3
 80072f8:	2b03      	cmp	r3, #3
 80072fa:	d10b      	bne.n	8007314 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007302:	68db      	ldr	r3, [r3, #12]
 8007304:	2b00      	cmp	r3, #0
 8007306:	d005      	beq.n	8007314 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800730e:	68db      	ldr	r3, [r3, #12]
 8007310:	68f8      	ldr	r0, [r7, #12]
 8007312:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8007314:	2180      	movs	r1, #128	; 0x80
 8007316:	68f8      	ldr	r0, [r7, #12]
 8007318:	f001 fbfa 	bl	8008b10 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800731c:	68f8      	ldr	r0, [r7, #12]
 800731e:	f000 ffbd 	bl	800829c <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8007328:	2b01      	cmp	r3, #1
 800732a:	d122      	bne.n	8007372 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800732c:	68f8      	ldr	r0, [r7, #12]
 800732e:	f7ff fe98 	bl	8007062 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	2200      	movs	r2, #0
 8007336:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800733a:	e01a      	b.n	8007372 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007342:	b2db      	uxtb	r3, r3
 8007344:	2b03      	cmp	r3, #3
 8007346:	d114      	bne.n	8007372 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800734e:	695b      	ldr	r3, [r3, #20]
 8007350:	2b00      	cmp	r3, #0
 8007352:	d00e      	beq.n	8007372 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800735a:	695b      	ldr	r3, [r3, #20]
 800735c:	7afa      	ldrb	r2, [r7, #11]
 800735e:	4611      	mov	r1, r2
 8007360:	68f8      	ldr	r0, [r7, #12]
 8007362:	4798      	blx	r3
 8007364:	4603      	mov	r3, r0
 8007366:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8007368:	7dfb      	ldrb	r3, [r7, #23]
 800736a:	2b00      	cmp	r3, #0
 800736c:	d001      	beq.n	8007372 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 800736e:	7dfb      	ldrb	r3, [r7, #23]
 8007370:	e000      	b.n	8007374 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 8007372:	2300      	movs	r3, #0
}
 8007374:	4618      	mov	r0, r3
 8007376:	3718      	adds	r7, #24
 8007378:	46bd      	mov	sp, r7
 800737a:	bd80      	pop	{r7, pc}

0800737c <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800737c:	b580      	push	{r7, lr}
 800737e:	b082      	sub	sp, #8
 8007380:	af00      	add	r7, sp, #0
 8007382:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	2201      	movs	r2, #1
 8007388:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	2200      	movs	r2, #0
 8007390:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	2200      	movs	r2, #0
 8007398:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	2200      	movs	r2, #0
 800739e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	d101      	bne.n	80073b0 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 80073ac:	2303      	movs	r3, #3
 80073ae:	e02f      	b.n	8007410 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	d00f      	beq.n	80073da <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80073c0:	685b      	ldr	r3, [r3, #4]
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	d009      	beq.n	80073da <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80073cc:	685b      	ldr	r3, [r3, #4]
 80073ce:	687a      	ldr	r2, [r7, #4]
 80073d0:	6852      	ldr	r2, [r2, #4]
 80073d2:	b2d2      	uxtb	r2, r2
 80073d4:	4611      	mov	r1, r2
 80073d6:	6878      	ldr	r0, [r7, #4]
 80073d8:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80073da:	2340      	movs	r3, #64	; 0x40
 80073dc:	2200      	movs	r2, #0
 80073de:	2100      	movs	r1, #0
 80073e0:	6878      	ldr	r0, [r7, #4]
 80073e2:	f001 fb50 	bl	8008a86 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	2201      	movs	r2, #1
 80073ea:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	2240      	movs	r2, #64	; 0x40
 80073f2:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80073f6:	2340      	movs	r3, #64	; 0x40
 80073f8:	2200      	movs	r2, #0
 80073fa:	2180      	movs	r1, #128	; 0x80
 80073fc:	6878      	ldr	r0, [r7, #4]
 80073fe:	f001 fb42 	bl	8008a86 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	2201      	movs	r2, #1
 8007406:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	2240      	movs	r2, #64	; 0x40
 800740c:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800740e:	2300      	movs	r3, #0
}
 8007410:	4618      	mov	r0, r3
 8007412:	3708      	adds	r7, #8
 8007414:	46bd      	mov	sp, r7
 8007416:	bd80      	pop	{r7, pc}

08007418 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8007418:	b480      	push	{r7}
 800741a:	b083      	sub	sp, #12
 800741c:	af00      	add	r7, sp, #0
 800741e:	6078      	str	r0, [r7, #4]
 8007420:	460b      	mov	r3, r1
 8007422:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	78fa      	ldrb	r2, [r7, #3]
 8007428:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800742a:	2300      	movs	r3, #0
}
 800742c:	4618      	mov	r0, r3
 800742e:	370c      	adds	r7, #12
 8007430:	46bd      	mov	sp, r7
 8007432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007436:	4770      	bx	lr

08007438 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8007438:	b480      	push	{r7}
 800743a:	b083      	sub	sp, #12
 800743c:	af00      	add	r7, sp, #0
 800743e:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007446:	b2da      	uxtb	r2, r3
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	2204      	movs	r2, #4
 8007452:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8007456:	2300      	movs	r3, #0
}
 8007458:	4618      	mov	r0, r3
 800745a:	370c      	adds	r7, #12
 800745c:	46bd      	mov	sp, r7
 800745e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007462:	4770      	bx	lr

08007464 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8007464:	b480      	push	{r7}
 8007466:	b083      	sub	sp, #12
 8007468:	af00      	add	r7, sp, #0
 800746a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007472:	b2db      	uxtb	r3, r3
 8007474:	2b04      	cmp	r3, #4
 8007476:	d106      	bne.n	8007486 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800747e:	b2da      	uxtb	r2, r3
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8007486:	2300      	movs	r3, #0
}
 8007488:	4618      	mov	r0, r3
 800748a:	370c      	adds	r7, #12
 800748c:	46bd      	mov	sp, r7
 800748e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007492:	4770      	bx	lr

08007494 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8007494:	b580      	push	{r7, lr}
 8007496:	b082      	sub	sp, #8
 8007498:	af00      	add	r7, sp, #0
 800749a:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d101      	bne.n	80074aa <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 80074a6:	2303      	movs	r3, #3
 80074a8:	e012      	b.n	80074d0 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80074b0:	b2db      	uxtb	r3, r3
 80074b2:	2b03      	cmp	r3, #3
 80074b4:	d10b      	bne.n	80074ce <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80074bc:	69db      	ldr	r3, [r3, #28]
 80074be:	2b00      	cmp	r3, #0
 80074c0:	d005      	beq.n	80074ce <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80074c8:	69db      	ldr	r3, [r3, #28]
 80074ca:	6878      	ldr	r0, [r7, #4]
 80074cc:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80074ce:	2300      	movs	r3, #0
}
 80074d0:	4618      	mov	r0, r3
 80074d2:	3708      	adds	r7, #8
 80074d4:	46bd      	mov	sp, r7
 80074d6:	bd80      	pop	{r7, pc}

080074d8 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80074d8:	b580      	push	{r7, lr}
 80074da:	b082      	sub	sp, #8
 80074dc:	af00      	add	r7, sp, #0
 80074de:	6078      	str	r0, [r7, #4]
 80074e0:	460b      	mov	r3, r1
 80074e2:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	d101      	bne.n	80074f2 <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 80074ee:	2303      	movs	r3, #3
 80074f0:	e014      	b.n	800751c <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80074f8:	b2db      	uxtb	r3, r3
 80074fa:	2b03      	cmp	r3, #3
 80074fc:	d10d      	bne.n	800751a <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007504:	6a1b      	ldr	r3, [r3, #32]
 8007506:	2b00      	cmp	r3, #0
 8007508:	d007      	beq.n	800751a <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007510:	6a1b      	ldr	r3, [r3, #32]
 8007512:	78fa      	ldrb	r2, [r7, #3]
 8007514:	4611      	mov	r1, r2
 8007516:	6878      	ldr	r0, [r7, #4]
 8007518:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800751a:	2300      	movs	r3, #0
}
 800751c:	4618      	mov	r0, r3
 800751e:	3708      	adds	r7, #8
 8007520:	46bd      	mov	sp, r7
 8007522:	bd80      	pop	{r7, pc}

08007524 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8007524:	b580      	push	{r7, lr}
 8007526:	b082      	sub	sp, #8
 8007528:	af00      	add	r7, sp, #0
 800752a:	6078      	str	r0, [r7, #4]
 800752c:	460b      	mov	r3, r1
 800752e:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007536:	2b00      	cmp	r3, #0
 8007538:	d101      	bne.n	800753e <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 800753a:	2303      	movs	r3, #3
 800753c:	e014      	b.n	8007568 <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007544:	b2db      	uxtb	r3, r3
 8007546:	2b03      	cmp	r3, #3
 8007548:	d10d      	bne.n	8007566 <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007550:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007552:	2b00      	cmp	r3, #0
 8007554:	d007      	beq.n	8007566 <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800755c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800755e:	78fa      	ldrb	r2, [r7, #3]
 8007560:	4611      	mov	r1, r2
 8007562:	6878      	ldr	r0, [r7, #4]
 8007564:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007566:	2300      	movs	r3, #0
}
 8007568:	4618      	mov	r0, r3
 800756a:	3708      	adds	r7, #8
 800756c:	46bd      	mov	sp, r7
 800756e:	bd80      	pop	{r7, pc}

08007570 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8007570:	b480      	push	{r7}
 8007572:	b083      	sub	sp, #12
 8007574:	af00      	add	r7, sp, #0
 8007576:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007578:	2300      	movs	r3, #0
}
 800757a:	4618      	mov	r0, r3
 800757c:	370c      	adds	r7, #12
 800757e:	46bd      	mov	sp, r7
 8007580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007584:	4770      	bx	lr

08007586 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8007586:	b580      	push	{r7, lr}
 8007588:	b082      	sub	sp, #8
 800758a:	af00      	add	r7, sp, #0
 800758c:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	2201      	movs	r2, #1
 8007592:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800759c:	2b00      	cmp	r3, #0
 800759e:	d009      	beq.n	80075b4 <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80075a6:	685b      	ldr	r3, [r3, #4]
 80075a8:	687a      	ldr	r2, [r7, #4]
 80075aa:	6852      	ldr	r2, [r2, #4]
 80075ac:	b2d2      	uxtb	r2, r2
 80075ae:	4611      	mov	r1, r2
 80075b0:	6878      	ldr	r0, [r7, #4]
 80075b2:	4798      	blx	r3
  }

  return USBD_OK;
 80075b4:	2300      	movs	r3, #0
}
 80075b6:	4618      	mov	r0, r3
 80075b8:	3708      	adds	r7, #8
 80075ba:	46bd      	mov	sp, r7
 80075bc:	bd80      	pop	{r7, pc}

080075be <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80075be:	b480      	push	{r7}
 80075c0:	b087      	sub	sp, #28
 80075c2:	af00      	add	r7, sp, #0
 80075c4:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80075ca:	697b      	ldr	r3, [r7, #20]
 80075cc:	781b      	ldrb	r3, [r3, #0]
 80075ce:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80075d0:	697b      	ldr	r3, [r7, #20]
 80075d2:	3301      	adds	r3, #1
 80075d4:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80075d6:	697b      	ldr	r3, [r7, #20]
 80075d8:	781b      	ldrb	r3, [r3, #0]
 80075da:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80075dc:	8a3b      	ldrh	r3, [r7, #16]
 80075de:	021b      	lsls	r3, r3, #8
 80075e0:	b21a      	sxth	r2, r3
 80075e2:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80075e6:	4313      	orrs	r3, r2
 80075e8:	b21b      	sxth	r3, r3
 80075ea:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80075ec:	89fb      	ldrh	r3, [r7, #14]
}
 80075ee:	4618      	mov	r0, r3
 80075f0:	371c      	adds	r7, #28
 80075f2:	46bd      	mov	sp, r7
 80075f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075f8:	4770      	bx	lr
	...

080075fc <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80075fc:	b580      	push	{r7, lr}
 80075fe:	b084      	sub	sp, #16
 8007600:	af00      	add	r7, sp, #0
 8007602:	6078      	str	r0, [r7, #4]
 8007604:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007606:	2300      	movs	r3, #0
 8007608:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800760a:	683b      	ldr	r3, [r7, #0]
 800760c:	781b      	ldrb	r3, [r3, #0]
 800760e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007612:	2b40      	cmp	r3, #64	; 0x40
 8007614:	d005      	beq.n	8007622 <USBD_StdDevReq+0x26>
 8007616:	2b40      	cmp	r3, #64	; 0x40
 8007618:	d853      	bhi.n	80076c2 <USBD_StdDevReq+0xc6>
 800761a:	2b00      	cmp	r3, #0
 800761c:	d00b      	beq.n	8007636 <USBD_StdDevReq+0x3a>
 800761e:	2b20      	cmp	r3, #32
 8007620:	d14f      	bne.n	80076c2 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007628:	689b      	ldr	r3, [r3, #8]
 800762a:	6839      	ldr	r1, [r7, #0]
 800762c:	6878      	ldr	r0, [r7, #4]
 800762e:	4798      	blx	r3
 8007630:	4603      	mov	r3, r0
 8007632:	73fb      	strb	r3, [r7, #15]
      break;
 8007634:	e04a      	b.n	80076cc <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007636:	683b      	ldr	r3, [r7, #0]
 8007638:	785b      	ldrb	r3, [r3, #1]
 800763a:	2b09      	cmp	r3, #9
 800763c:	d83b      	bhi.n	80076b6 <USBD_StdDevReq+0xba>
 800763e:	a201      	add	r2, pc, #4	; (adr r2, 8007644 <USBD_StdDevReq+0x48>)
 8007640:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007644:	08007699 	.word	0x08007699
 8007648:	080076ad 	.word	0x080076ad
 800764c:	080076b7 	.word	0x080076b7
 8007650:	080076a3 	.word	0x080076a3
 8007654:	080076b7 	.word	0x080076b7
 8007658:	08007677 	.word	0x08007677
 800765c:	0800766d 	.word	0x0800766d
 8007660:	080076b7 	.word	0x080076b7
 8007664:	0800768f 	.word	0x0800768f
 8007668:	08007681 	.word	0x08007681
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800766c:	6839      	ldr	r1, [r7, #0]
 800766e:	6878      	ldr	r0, [r7, #4]
 8007670:	f000 f9de 	bl	8007a30 <USBD_GetDescriptor>
          break;
 8007674:	e024      	b.n	80076c0 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8007676:	6839      	ldr	r1, [r7, #0]
 8007678:	6878      	ldr	r0, [r7, #4]
 800767a:	f000 fb6d 	bl	8007d58 <USBD_SetAddress>
          break;
 800767e:	e01f      	b.n	80076c0 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8007680:	6839      	ldr	r1, [r7, #0]
 8007682:	6878      	ldr	r0, [r7, #4]
 8007684:	f000 fbac 	bl	8007de0 <USBD_SetConfig>
 8007688:	4603      	mov	r3, r0
 800768a:	73fb      	strb	r3, [r7, #15]
          break;
 800768c:	e018      	b.n	80076c0 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800768e:	6839      	ldr	r1, [r7, #0]
 8007690:	6878      	ldr	r0, [r7, #4]
 8007692:	f000 fc4b 	bl	8007f2c <USBD_GetConfig>
          break;
 8007696:	e013      	b.n	80076c0 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8007698:	6839      	ldr	r1, [r7, #0]
 800769a:	6878      	ldr	r0, [r7, #4]
 800769c:	f000 fc7c 	bl	8007f98 <USBD_GetStatus>
          break;
 80076a0:	e00e      	b.n	80076c0 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80076a2:	6839      	ldr	r1, [r7, #0]
 80076a4:	6878      	ldr	r0, [r7, #4]
 80076a6:	f000 fcab 	bl	8008000 <USBD_SetFeature>
          break;
 80076aa:	e009      	b.n	80076c0 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80076ac:	6839      	ldr	r1, [r7, #0]
 80076ae:	6878      	ldr	r0, [r7, #4]
 80076b0:	f000 fcba 	bl	8008028 <USBD_ClrFeature>
          break;
 80076b4:	e004      	b.n	80076c0 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 80076b6:	6839      	ldr	r1, [r7, #0]
 80076b8:	6878      	ldr	r0, [r7, #4]
 80076ba:	f000 fd11 	bl	80080e0 <USBD_CtlError>
          break;
 80076be:	bf00      	nop
      }
      break;
 80076c0:	e004      	b.n	80076cc <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 80076c2:	6839      	ldr	r1, [r7, #0]
 80076c4:	6878      	ldr	r0, [r7, #4]
 80076c6:	f000 fd0b 	bl	80080e0 <USBD_CtlError>
      break;
 80076ca:	bf00      	nop
  }

  return ret;
 80076cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80076ce:	4618      	mov	r0, r3
 80076d0:	3710      	adds	r7, #16
 80076d2:	46bd      	mov	sp, r7
 80076d4:	bd80      	pop	{r7, pc}
 80076d6:	bf00      	nop

080076d8 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80076d8:	b580      	push	{r7, lr}
 80076da:	b084      	sub	sp, #16
 80076dc:	af00      	add	r7, sp, #0
 80076de:	6078      	str	r0, [r7, #4]
 80076e0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80076e2:	2300      	movs	r3, #0
 80076e4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80076e6:	683b      	ldr	r3, [r7, #0]
 80076e8:	781b      	ldrb	r3, [r3, #0]
 80076ea:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80076ee:	2b40      	cmp	r3, #64	; 0x40
 80076f0:	d005      	beq.n	80076fe <USBD_StdItfReq+0x26>
 80076f2:	2b40      	cmp	r3, #64	; 0x40
 80076f4:	d82f      	bhi.n	8007756 <USBD_StdItfReq+0x7e>
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	d001      	beq.n	80076fe <USBD_StdItfReq+0x26>
 80076fa:	2b20      	cmp	r3, #32
 80076fc:	d12b      	bne.n	8007756 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007704:	b2db      	uxtb	r3, r3
 8007706:	3b01      	subs	r3, #1
 8007708:	2b02      	cmp	r3, #2
 800770a:	d81d      	bhi.n	8007748 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800770c:	683b      	ldr	r3, [r7, #0]
 800770e:	889b      	ldrh	r3, [r3, #4]
 8007710:	b2db      	uxtb	r3, r3
 8007712:	2b01      	cmp	r3, #1
 8007714:	d813      	bhi.n	800773e <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800771c:	689b      	ldr	r3, [r3, #8]
 800771e:	6839      	ldr	r1, [r7, #0]
 8007720:	6878      	ldr	r0, [r7, #4]
 8007722:	4798      	blx	r3
 8007724:	4603      	mov	r3, r0
 8007726:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8007728:	683b      	ldr	r3, [r7, #0]
 800772a:	88db      	ldrh	r3, [r3, #6]
 800772c:	2b00      	cmp	r3, #0
 800772e:	d110      	bne.n	8007752 <USBD_StdItfReq+0x7a>
 8007730:	7bfb      	ldrb	r3, [r7, #15]
 8007732:	2b00      	cmp	r3, #0
 8007734:	d10d      	bne.n	8007752 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 8007736:	6878      	ldr	r0, [r7, #4]
 8007738:	f000 fd9d 	bl	8008276 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800773c:	e009      	b.n	8007752 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 800773e:	6839      	ldr	r1, [r7, #0]
 8007740:	6878      	ldr	r0, [r7, #4]
 8007742:	f000 fccd 	bl	80080e0 <USBD_CtlError>
          break;
 8007746:	e004      	b.n	8007752 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 8007748:	6839      	ldr	r1, [r7, #0]
 800774a:	6878      	ldr	r0, [r7, #4]
 800774c:	f000 fcc8 	bl	80080e0 <USBD_CtlError>
          break;
 8007750:	e000      	b.n	8007754 <USBD_StdItfReq+0x7c>
          break;
 8007752:	bf00      	nop
      }
      break;
 8007754:	e004      	b.n	8007760 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 8007756:	6839      	ldr	r1, [r7, #0]
 8007758:	6878      	ldr	r0, [r7, #4]
 800775a:	f000 fcc1 	bl	80080e0 <USBD_CtlError>
      break;
 800775e:	bf00      	nop
  }

  return ret;
 8007760:	7bfb      	ldrb	r3, [r7, #15]
}
 8007762:	4618      	mov	r0, r3
 8007764:	3710      	adds	r7, #16
 8007766:	46bd      	mov	sp, r7
 8007768:	bd80      	pop	{r7, pc}

0800776a <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800776a:	b580      	push	{r7, lr}
 800776c:	b084      	sub	sp, #16
 800776e:	af00      	add	r7, sp, #0
 8007770:	6078      	str	r0, [r7, #4]
 8007772:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8007774:	2300      	movs	r3, #0
 8007776:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8007778:	683b      	ldr	r3, [r7, #0]
 800777a:	889b      	ldrh	r3, [r3, #4]
 800777c:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800777e:	683b      	ldr	r3, [r7, #0]
 8007780:	781b      	ldrb	r3, [r3, #0]
 8007782:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007786:	2b40      	cmp	r3, #64	; 0x40
 8007788:	d007      	beq.n	800779a <USBD_StdEPReq+0x30>
 800778a:	2b40      	cmp	r3, #64	; 0x40
 800778c:	f200 8145 	bhi.w	8007a1a <USBD_StdEPReq+0x2b0>
 8007790:	2b00      	cmp	r3, #0
 8007792:	d00c      	beq.n	80077ae <USBD_StdEPReq+0x44>
 8007794:	2b20      	cmp	r3, #32
 8007796:	f040 8140 	bne.w	8007a1a <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80077a0:	689b      	ldr	r3, [r3, #8]
 80077a2:	6839      	ldr	r1, [r7, #0]
 80077a4:	6878      	ldr	r0, [r7, #4]
 80077a6:	4798      	blx	r3
 80077a8:	4603      	mov	r3, r0
 80077aa:	73fb      	strb	r3, [r7, #15]
      break;
 80077ac:	e13a      	b.n	8007a24 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80077ae:	683b      	ldr	r3, [r7, #0]
 80077b0:	785b      	ldrb	r3, [r3, #1]
 80077b2:	2b03      	cmp	r3, #3
 80077b4:	d007      	beq.n	80077c6 <USBD_StdEPReq+0x5c>
 80077b6:	2b03      	cmp	r3, #3
 80077b8:	f300 8129 	bgt.w	8007a0e <USBD_StdEPReq+0x2a4>
 80077bc:	2b00      	cmp	r3, #0
 80077be:	d07f      	beq.n	80078c0 <USBD_StdEPReq+0x156>
 80077c0:	2b01      	cmp	r3, #1
 80077c2:	d03c      	beq.n	800783e <USBD_StdEPReq+0xd4>
 80077c4:	e123      	b.n	8007a0e <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80077cc:	b2db      	uxtb	r3, r3
 80077ce:	2b02      	cmp	r3, #2
 80077d0:	d002      	beq.n	80077d8 <USBD_StdEPReq+0x6e>
 80077d2:	2b03      	cmp	r3, #3
 80077d4:	d016      	beq.n	8007804 <USBD_StdEPReq+0x9a>
 80077d6:	e02c      	b.n	8007832 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80077d8:	7bbb      	ldrb	r3, [r7, #14]
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d00d      	beq.n	80077fa <USBD_StdEPReq+0x90>
 80077de:	7bbb      	ldrb	r3, [r7, #14]
 80077e0:	2b80      	cmp	r3, #128	; 0x80
 80077e2:	d00a      	beq.n	80077fa <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80077e4:	7bbb      	ldrb	r3, [r7, #14]
 80077e6:	4619      	mov	r1, r3
 80077e8:	6878      	ldr	r0, [r7, #4]
 80077ea:	f001 f991 	bl	8008b10 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80077ee:	2180      	movs	r1, #128	; 0x80
 80077f0:	6878      	ldr	r0, [r7, #4]
 80077f2:	f001 f98d 	bl	8008b10 <USBD_LL_StallEP>
 80077f6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80077f8:	e020      	b.n	800783c <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 80077fa:	6839      	ldr	r1, [r7, #0]
 80077fc:	6878      	ldr	r0, [r7, #4]
 80077fe:	f000 fc6f 	bl	80080e0 <USBD_CtlError>
              break;
 8007802:	e01b      	b.n	800783c <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007804:	683b      	ldr	r3, [r7, #0]
 8007806:	885b      	ldrh	r3, [r3, #2]
 8007808:	2b00      	cmp	r3, #0
 800780a:	d10e      	bne.n	800782a <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800780c:	7bbb      	ldrb	r3, [r7, #14]
 800780e:	2b00      	cmp	r3, #0
 8007810:	d00b      	beq.n	800782a <USBD_StdEPReq+0xc0>
 8007812:	7bbb      	ldrb	r3, [r7, #14]
 8007814:	2b80      	cmp	r3, #128	; 0x80
 8007816:	d008      	beq.n	800782a <USBD_StdEPReq+0xc0>
 8007818:	683b      	ldr	r3, [r7, #0]
 800781a:	88db      	ldrh	r3, [r3, #6]
 800781c:	2b00      	cmp	r3, #0
 800781e:	d104      	bne.n	800782a <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8007820:	7bbb      	ldrb	r3, [r7, #14]
 8007822:	4619      	mov	r1, r3
 8007824:	6878      	ldr	r0, [r7, #4]
 8007826:	f001 f973 	bl	8008b10 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800782a:	6878      	ldr	r0, [r7, #4]
 800782c:	f000 fd23 	bl	8008276 <USBD_CtlSendStatus>

              break;
 8007830:	e004      	b.n	800783c <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 8007832:	6839      	ldr	r1, [r7, #0]
 8007834:	6878      	ldr	r0, [r7, #4]
 8007836:	f000 fc53 	bl	80080e0 <USBD_CtlError>
              break;
 800783a:	bf00      	nop
          }
          break;
 800783c:	e0ec      	b.n	8007a18 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007844:	b2db      	uxtb	r3, r3
 8007846:	2b02      	cmp	r3, #2
 8007848:	d002      	beq.n	8007850 <USBD_StdEPReq+0xe6>
 800784a:	2b03      	cmp	r3, #3
 800784c:	d016      	beq.n	800787c <USBD_StdEPReq+0x112>
 800784e:	e030      	b.n	80078b2 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007850:	7bbb      	ldrb	r3, [r7, #14]
 8007852:	2b00      	cmp	r3, #0
 8007854:	d00d      	beq.n	8007872 <USBD_StdEPReq+0x108>
 8007856:	7bbb      	ldrb	r3, [r7, #14]
 8007858:	2b80      	cmp	r3, #128	; 0x80
 800785a:	d00a      	beq.n	8007872 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800785c:	7bbb      	ldrb	r3, [r7, #14]
 800785e:	4619      	mov	r1, r3
 8007860:	6878      	ldr	r0, [r7, #4]
 8007862:	f001 f955 	bl	8008b10 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007866:	2180      	movs	r1, #128	; 0x80
 8007868:	6878      	ldr	r0, [r7, #4]
 800786a:	f001 f951 	bl	8008b10 <USBD_LL_StallEP>
 800786e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007870:	e025      	b.n	80078be <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 8007872:	6839      	ldr	r1, [r7, #0]
 8007874:	6878      	ldr	r0, [r7, #4]
 8007876:	f000 fc33 	bl	80080e0 <USBD_CtlError>
              break;
 800787a:	e020      	b.n	80078be <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800787c:	683b      	ldr	r3, [r7, #0]
 800787e:	885b      	ldrh	r3, [r3, #2]
 8007880:	2b00      	cmp	r3, #0
 8007882:	d11b      	bne.n	80078bc <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8007884:	7bbb      	ldrb	r3, [r7, #14]
 8007886:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800788a:	2b00      	cmp	r3, #0
 800788c:	d004      	beq.n	8007898 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800788e:	7bbb      	ldrb	r3, [r7, #14]
 8007890:	4619      	mov	r1, r3
 8007892:	6878      	ldr	r0, [r7, #4]
 8007894:	f001 f95b 	bl	8008b4e <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8007898:	6878      	ldr	r0, [r7, #4]
 800789a:	f000 fcec 	bl	8008276 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80078a4:	689b      	ldr	r3, [r3, #8]
 80078a6:	6839      	ldr	r1, [r7, #0]
 80078a8:	6878      	ldr	r0, [r7, #4]
 80078aa:	4798      	blx	r3
 80078ac:	4603      	mov	r3, r0
 80078ae:	73fb      	strb	r3, [r7, #15]
              }
              break;
 80078b0:	e004      	b.n	80078bc <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 80078b2:	6839      	ldr	r1, [r7, #0]
 80078b4:	6878      	ldr	r0, [r7, #4]
 80078b6:	f000 fc13 	bl	80080e0 <USBD_CtlError>
              break;
 80078ba:	e000      	b.n	80078be <USBD_StdEPReq+0x154>
              break;
 80078bc:	bf00      	nop
          }
          break;
 80078be:	e0ab      	b.n	8007a18 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80078c6:	b2db      	uxtb	r3, r3
 80078c8:	2b02      	cmp	r3, #2
 80078ca:	d002      	beq.n	80078d2 <USBD_StdEPReq+0x168>
 80078cc:	2b03      	cmp	r3, #3
 80078ce:	d032      	beq.n	8007936 <USBD_StdEPReq+0x1cc>
 80078d0:	e097      	b.n	8007a02 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80078d2:	7bbb      	ldrb	r3, [r7, #14]
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	d007      	beq.n	80078e8 <USBD_StdEPReq+0x17e>
 80078d8:	7bbb      	ldrb	r3, [r7, #14]
 80078da:	2b80      	cmp	r3, #128	; 0x80
 80078dc:	d004      	beq.n	80078e8 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 80078de:	6839      	ldr	r1, [r7, #0]
 80078e0:	6878      	ldr	r0, [r7, #4]
 80078e2:	f000 fbfd 	bl	80080e0 <USBD_CtlError>
                break;
 80078e6:	e091      	b.n	8007a0c <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80078e8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	da0b      	bge.n	8007908 <USBD_StdEPReq+0x19e>
 80078f0:	7bbb      	ldrb	r3, [r7, #14]
 80078f2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80078f6:	4613      	mov	r3, r2
 80078f8:	009b      	lsls	r3, r3, #2
 80078fa:	4413      	add	r3, r2
 80078fc:	009b      	lsls	r3, r3, #2
 80078fe:	3310      	adds	r3, #16
 8007900:	687a      	ldr	r2, [r7, #4]
 8007902:	4413      	add	r3, r2
 8007904:	3304      	adds	r3, #4
 8007906:	e00b      	b.n	8007920 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007908:	7bbb      	ldrb	r3, [r7, #14]
 800790a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800790e:	4613      	mov	r3, r2
 8007910:	009b      	lsls	r3, r3, #2
 8007912:	4413      	add	r3, r2
 8007914:	009b      	lsls	r3, r3, #2
 8007916:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800791a:	687a      	ldr	r2, [r7, #4]
 800791c:	4413      	add	r3, r2
 800791e:	3304      	adds	r3, #4
 8007920:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8007922:	68bb      	ldr	r3, [r7, #8]
 8007924:	2200      	movs	r2, #0
 8007926:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007928:	68bb      	ldr	r3, [r7, #8]
 800792a:	2202      	movs	r2, #2
 800792c:	4619      	mov	r1, r3
 800792e:	6878      	ldr	r0, [r7, #4]
 8007930:	f000 fc47 	bl	80081c2 <USBD_CtlSendData>
              break;
 8007934:	e06a      	b.n	8007a0c <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8007936:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800793a:	2b00      	cmp	r3, #0
 800793c:	da11      	bge.n	8007962 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800793e:	7bbb      	ldrb	r3, [r7, #14]
 8007940:	f003 020f 	and.w	r2, r3, #15
 8007944:	6879      	ldr	r1, [r7, #4]
 8007946:	4613      	mov	r3, r2
 8007948:	009b      	lsls	r3, r3, #2
 800794a:	4413      	add	r3, r2
 800794c:	009b      	lsls	r3, r3, #2
 800794e:	440b      	add	r3, r1
 8007950:	3324      	adds	r3, #36	; 0x24
 8007952:	881b      	ldrh	r3, [r3, #0]
 8007954:	2b00      	cmp	r3, #0
 8007956:	d117      	bne.n	8007988 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8007958:	6839      	ldr	r1, [r7, #0]
 800795a:	6878      	ldr	r0, [r7, #4]
 800795c:	f000 fbc0 	bl	80080e0 <USBD_CtlError>
                  break;
 8007960:	e054      	b.n	8007a0c <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8007962:	7bbb      	ldrb	r3, [r7, #14]
 8007964:	f003 020f 	and.w	r2, r3, #15
 8007968:	6879      	ldr	r1, [r7, #4]
 800796a:	4613      	mov	r3, r2
 800796c:	009b      	lsls	r3, r3, #2
 800796e:	4413      	add	r3, r2
 8007970:	009b      	lsls	r3, r3, #2
 8007972:	440b      	add	r3, r1
 8007974:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8007978:	881b      	ldrh	r3, [r3, #0]
 800797a:	2b00      	cmp	r3, #0
 800797c:	d104      	bne.n	8007988 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800797e:	6839      	ldr	r1, [r7, #0]
 8007980:	6878      	ldr	r0, [r7, #4]
 8007982:	f000 fbad 	bl	80080e0 <USBD_CtlError>
                  break;
 8007986:	e041      	b.n	8007a0c <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007988:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800798c:	2b00      	cmp	r3, #0
 800798e:	da0b      	bge.n	80079a8 <USBD_StdEPReq+0x23e>
 8007990:	7bbb      	ldrb	r3, [r7, #14]
 8007992:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007996:	4613      	mov	r3, r2
 8007998:	009b      	lsls	r3, r3, #2
 800799a:	4413      	add	r3, r2
 800799c:	009b      	lsls	r3, r3, #2
 800799e:	3310      	adds	r3, #16
 80079a0:	687a      	ldr	r2, [r7, #4]
 80079a2:	4413      	add	r3, r2
 80079a4:	3304      	adds	r3, #4
 80079a6:	e00b      	b.n	80079c0 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80079a8:	7bbb      	ldrb	r3, [r7, #14]
 80079aa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80079ae:	4613      	mov	r3, r2
 80079b0:	009b      	lsls	r3, r3, #2
 80079b2:	4413      	add	r3, r2
 80079b4:	009b      	lsls	r3, r3, #2
 80079b6:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80079ba:	687a      	ldr	r2, [r7, #4]
 80079bc:	4413      	add	r3, r2
 80079be:	3304      	adds	r3, #4
 80079c0:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80079c2:	7bbb      	ldrb	r3, [r7, #14]
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	d002      	beq.n	80079ce <USBD_StdEPReq+0x264>
 80079c8:	7bbb      	ldrb	r3, [r7, #14]
 80079ca:	2b80      	cmp	r3, #128	; 0x80
 80079cc:	d103      	bne.n	80079d6 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 80079ce:	68bb      	ldr	r3, [r7, #8]
 80079d0:	2200      	movs	r2, #0
 80079d2:	601a      	str	r2, [r3, #0]
 80079d4:	e00e      	b.n	80079f4 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80079d6:	7bbb      	ldrb	r3, [r7, #14]
 80079d8:	4619      	mov	r1, r3
 80079da:	6878      	ldr	r0, [r7, #4]
 80079dc:	f001 f8d6 	bl	8008b8c <USBD_LL_IsStallEP>
 80079e0:	4603      	mov	r3, r0
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	d003      	beq.n	80079ee <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 80079e6:	68bb      	ldr	r3, [r7, #8]
 80079e8:	2201      	movs	r2, #1
 80079ea:	601a      	str	r2, [r3, #0]
 80079ec:	e002      	b.n	80079f4 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 80079ee:	68bb      	ldr	r3, [r7, #8]
 80079f0:	2200      	movs	r2, #0
 80079f2:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80079f4:	68bb      	ldr	r3, [r7, #8]
 80079f6:	2202      	movs	r2, #2
 80079f8:	4619      	mov	r1, r3
 80079fa:	6878      	ldr	r0, [r7, #4]
 80079fc:	f000 fbe1 	bl	80081c2 <USBD_CtlSendData>
              break;
 8007a00:	e004      	b.n	8007a0c <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 8007a02:	6839      	ldr	r1, [r7, #0]
 8007a04:	6878      	ldr	r0, [r7, #4]
 8007a06:	f000 fb6b 	bl	80080e0 <USBD_CtlError>
              break;
 8007a0a:	bf00      	nop
          }
          break;
 8007a0c:	e004      	b.n	8007a18 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 8007a0e:	6839      	ldr	r1, [r7, #0]
 8007a10:	6878      	ldr	r0, [r7, #4]
 8007a12:	f000 fb65 	bl	80080e0 <USBD_CtlError>
          break;
 8007a16:	bf00      	nop
      }
      break;
 8007a18:	e004      	b.n	8007a24 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 8007a1a:	6839      	ldr	r1, [r7, #0]
 8007a1c:	6878      	ldr	r0, [r7, #4]
 8007a1e:	f000 fb5f 	bl	80080e0 <USBD_CtlError>
      break;
 8007a22:	bf00      	nop
  }

  return ret;
 8007a24:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a26:	4618      	mov	r0, r3
 8007a28:	3710      	adds	r7, #16
 8007a2a:	46bd      	mov	sp, r7
 8007a2c:	bd80      	pop	{r7, pc}
	...

08007a30 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007a30:	b580      	push	{r7, lr}
 8007a32:	b084      	sub	sp, #16
 8007a34:	af00      	add	r7, sp, #0
 8007a36:	6078      	str	r0, [r7, #4]
 8007a38:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007a3a:	2300      	movs	r3, #0
 8007a3c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8007a3e:	2300      	movs	r3, #0
 8007a40:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8007a42:	2300      	movs	r3, #0
 8007a44:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8007a46:	683b      	ldr	r3, [r7, #0]
 8007a48:	885b      	ldrh	r3, [r3, #2]
 8007a4a:	0a1b      	lsrs	r3, r3, #8
 8007a4c:	b29b      	uxth	r3, r3
 8007a4e:	3b01      	subs	r3, #1
 8007a50:	2b0e      	cmp	r3, #14
 8007a52:	f200 8152 	bhi.w	8007cfa <USBD_GetDescriptor+0x2ca>
 8007a56:	a201      	add	r2, pc, #4	; (adr r2, 8007a5c <USBD_GetDescriptor+0x2c>)
 8007a58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a5c:	08007acd 	.word	0x08007acd
 8007a60:	08007ae5 	.word	0x08007ae5
 8007a64:	08007b25 	.word	0x08007b25
 8007a68:	08007cfb 	.word	0x08007cfb
 8007a6c:	08007cfb 	.word	0x08007cfb
 8007a70:	08007c9b 	.word	0x08007c9b
 8007a74:	08007cc7 	.word	0x08007cc7
 8007a78:	08007cfb 	.word	0x08007cfb
 8007a7c:	08007cfb 	.word	0x08007cfb
 8007a80:	08007cfb 	.word	0x08007cfb
 8007a84:	08007cfb 	.word	0x08007cfb
 8007a88:	08007cfb 	.word	0x08007cfb
 8007a8c:	08007cfb 	.word	0x08007cfb
 8007a90:	08007cfb 	.word	0x08007cfb
 8007a94:	08007a99 	.word	0x08007a99
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007a9e:	69db      	ldr	r3, [r3, #28]
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	d00b      	beq.n	8007abc <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007aaa:	69db      	ldr	r3, [r3, #28]
 8007aac:	687a      	ldr	r2, [r7, #4]
 8007aae:	7c12      	ldrb	r2, [r2, #16]
 8007ab0:	f107 0108 	add.w	r1, r7, #8
 8007ab4:	4610      	mov	r0, r2
 8007ab6:	4798      	blx	r3
 8007ab8:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007aba:	e126      	b.n	8007d0a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8007abc:	6839      	ldr	r1, [r7, #0]
 8007abe:	6878      	ldr	r0, [r7, #4]
 8007ac0:	f000 fb0e 	bl	80080e0 <USBD_CtlError>
        err++;
 8007ac4:	7afb      	ldrb	r3, [r7, #11]
 8007ac6:	3301      	adds	r3, #1
 8007ac8:	72fb      	strb	r3, [r7, #11]
      break;
 8007aca:	e11e      	b.n	8007d0a <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	687a      	ldr	r2, [r7, #4]
 8007ad6:	7c12      	ldrb	r2, [r2, #16]
 8007ad8:	f107 0108 	add.w	r1, r7, #8
 8007adc:	4610      	mov	r0, r2
 8007ade:	4798      	blx	r3
 8007ae0:	60f8      	str	r0, [r7, #12]
      break;
 8007ae2:	e112      	b.n	8007d0a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	7c1b      	ldrb	r3, [r3, #16]
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	d10d      	bne.n	8007b08 <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007af2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007af4:	f107 0208 	add.w	r2, r7, #8
 8007af8:	4610      	mov	r0, r2
 8007afa:	4798      	blx	r3
 8007afc:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	3301      	adds	r3, #1
 8007b02:	2202      	movs	r2, #2
 8007b04:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8007b06:	e100      	b.n	8007d0a <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b10:	f107 0208 	add.w	r2, r7, #8
 8007b14:	4610      	mov	r0, r2
 8007b16:	4798      	blx	r3
 8007b18:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007b1a:	68fb      	ldr	r3, [r7, #12]
 8007b1c:	3301      	adds	r3, #1
 8007b1e:	2202      	movs	r2, #2
 8007b20:	701a      	strb	r2, [r3, #0]
      break;
 8007b22:	e0f2      	b.n	8007d0a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8007b24:	683b      	ldr	r3, [r7, #0]
 8007b26:	885b      	ldrh	r3, [r3, #2]
 8007b28:	b2db      	uxtb	r3, r3
 8007b2a:	2b05      	cmp	r3, #5
 8007b2c:	f200 80ac 	bhi.w	8007c88 <USBD_GetDescriptor+0x258>
 8007b30:	a201      	add	r2, pc, #4	; (adr r2, 8007b38 <USBD_GetDescriptor+0x108>)
 8007b32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b36:	bf00      	nop
 8007b38:	08007b51 	.word	0x08007b51
 8007b3c:	08007b85 	.word	0x08007b85
 8007b40:	08007bb9 	.word	0x08007bb9
 8007b44:	08007bed 	.word	0x08007bed
 8007b48:	08007c21 	.word	0x08007c21
 8007b4c:	08007c55 	.word	0x08007c55
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007b56:	685b      	ldr	r3, [r3, #4]
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	d00b      	beq.n	8007b74 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007b62:	685b      	ldr	r3, [r3, #4]
 8007b64:	687a      	ldr	r2, [r7, #4]
 8007b66:	7c12      	ldrb	r2, [r2, #16]
 8007b68:	f107 0108 	add.w	r1, r7, #8
 8007b6c:	4610      	mov	r0, r2
 8007b6e:	4798      	blx	r3
 8007b70:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007b72:	e091      	b.n	8007c98 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8007b74:	6839      	ldr	r1, [r7, #0]
 8007b76:	6878      	ldr	r0, [r7, #4]
 8007b78:	f000 fab2 	bl	80080e0 <USBD_CtlError>
            err++;
 8007b7c:	7afb      	ldrb	r3, [r7, #11]
 8007b7e:	3301      	adds	r3, #1
 8007b80:	72fb      	strb	r3, [r7, #11]
          break;
 8007b82:	e089      	b.n	8007c98 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007b8a:	689b      	ldr	r3, [r3, #8]
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	d00b      	beq.n	8007ba8 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007b96:	689b      	ldr	r3, [r3, #8]
 8007b98:	687a      	ldr	r2, [r7, #4]
 8007b9a:	7c12      	ldrb	r2, [r2, #16]
 8007b9c:	f107 0108 	add.w	r1, r7, #8
 8007ba0:	4610      	mov	r0, r2
 8007ba2:	4798      	blx	r3
 8007ba4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007ba6:	e077      	b.n	8007c98 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8007ba8:	6839      	ldr	r1, [r7, #0]
 8007baa:	6878      	ldr	r0, [r7, #4]
 8007bac:	f000 fa98 	bl	80080e0 <USBD_CtlError>
            err++;
 8007bb0:	7afb      	ldrb	r3, [r7, #11]
 8007bb2:	3301      	adds	r3, #1
 8007bb4:	72fb      	strb	r3, [r7, #11]
          break;
 8007bb6:	e06f      	b.n	8007c98 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007bbe:	68db      	ldr	r3, [r3, #12]
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	d00b      	beq.n	8007bdc <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007bca:	68db      	ldr	r3, [r3, #12]
 8007bcc:	687a      	ldr	r2, [r7, #4]
 8007bce:	7c12      	ldrb	r2, [r2, #16]
 8007bd0:	f107 0108 	add.w	r1, r7, #8
 8007bd4:	4610      	mov	r0, r2
 8007bd6:	4798      	blx	r3
 8007bd8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007bda:	e05d      	b.n	8007c98 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8007bdc:	6839      	ldr	r1, [r7, #0]
 8007bde:	6878      	ldr	r0, [r7, #4]
 8007be0:	f000 fa7e 	bl	80080e0 <USBD_CtlError>
            err++;
 8007be4:	7afb      	ldrb	r3, [r7, #11]
 8007be6:	3301      	adds	r3, #1
 8007be8:	72fb      	strb	r3, [r7, #11]
          break;
 8007bea:	e055      	b.n	8007c98 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007bf2:	691b      	ldr	r3, [r3, #16]
 8007bf4:	2b00      	cmp	r3, #0
 8007bf6:	d00b      	beq.n	8007c10 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007bfe:	691b      	ldr	r3, [r3, #16]
 8007c00:	687a      	ldr	r2, [r7, #4]
 8007c02:	7c12      	ldrb	r2, [r2, #16]
 8007c04:	f107 0108 	add.w	r1, r7, #8
 8007c08:	4610      	mov	r0, r2
 8007c0a:	4798      	blx	r3
 8007c0c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007c0e:	e043      	b.n	8007c98 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8007c10:	6839      	ldr	r1, [r7, #0]
 8007c12:	6878      	ldr	r0, [r7, #4]
 8007c14:	f000 fa64 	bl	80080e0 <USBD_CtlError>
            err++;
 8007c18:	7afb      	ldrb	r3, [r7, #11]
 8007c1a:	3301      	adds	r3, #1
 8007c1c:	72fb      	strb	r3, [r7, #11]
          break;
 8007c1e:	e03b      	b.n	8007c98 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007c26:	695b      	ldr	r3, [r3, #20]
 8007c28:	2b00      	cmp	r3, #0
 8007c2a:	d00b      	beq.n	8007c44 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007c32:	695b      	ldr	r3, [r3, #20]
 8007c34:	687a      	ldr	r2, [r7, #4]
 8007c36:	7c12      	ldrb	r2, [r2, #16]
 8007c38:	f107 0108 	add.w	r1, r7, #8
 8007c3c:	4610      	mov	r0, r2
 8007c3e:	4798      	blx	r3
 8007c40:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007c42:	e029      	b.n	8007c98 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8007c44:	6839      	ldr	r1, [r7, #0]
 8007c46:	6878      	ldr	r0, [r7, #4]
 8007c48:	f000 fa4a 	bl	80080e0 <USBD_CtlError>
            err++;
 8007c4c:	7afb      	ldrb	r3, [r7, #11]
 8007c4e:	3301      	adds	r3, #1
 8007c50:	72fb      	strb	r3, [r7, #11]
          break;
 8007c52:	e021      	b.n	8007c98 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007c5a:	699b      	ldr	r3, [r3, #24]
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	d00b      	beq.n	8007c78 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007c66:	699b      	ldr	r3, [r3, #24]
 8007c68:	687a      	ldr	r2, [r7, #4]
 8007c6a:	7c12      	ldrb	r2, [r2, #16]
 8007c6c:	f107 0108 	add.w	r1, r7, #8
 8007c70:	4610      	mov	r0, r2
 8007c72:	4798      	blx	r3
 8007c74:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007c76:	e00f      	b.n	8007c98 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8007c78:	6839      	ldr	r1, [r7, #0]
 8007c7a:	6878      	ldr	r0, [r7, #4]
 8007c7c:	f000 fa30 	bl	80080e0 <USBD_CtlError>
            err++;
 8007c80:	7afb      	ldrb	r3, [r7, #11]
 8007c82:	3301      	adds	r3, #1
 8007c84:	72fb      	strb	r3, [r7, #11]
          break;
 8007c86:	e007      	b.n	8007c98 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8007c88:	6839      	ldr	r1, [r7, #0]
 8007c8a:	6878      	ldr	r0, [r7, #4]
 8007c8c:	f000 fa28 	bl	80080e0 <USBD_CtlError>
          err++;
 8007c90:	7afb      	ldrb	r3, [r7, #11]
 8007c92:	3301      	adds	r3, #1
 8007c94:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 8007c96:	bf00      	nop
      }
      break;
 8007c98:	e037      	b.n	8007d0a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	7c1b      	ldrb	r3, [r3, #16]
 8007c9e:	2b00      	cmp	r3, #0
 8007ca0:	d109      	bne.n	8007cb6 <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007ca8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007caa:	f107 0208 	add.w	r2, r7, #8
 8007cae:	4610      	mov	r0, r2
 8007cb0:	4798      	blx	r3
 8007cb2:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007cb4:	e029      	b.n	8007d0a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8007cb6:	6839      	ldr	r1, [r7, #0]
 8007cb8:	6878      	ldr	r0, [r7, #4]
 8007cba:	f000 fa11 	bl	80080e0 <USBD_CtlError>
        err++;
 8007cbe:	7afb      	ldrb	r3, [r7, #11]
 8007cc0:	3301      	adds	r3, #1
 8007cc2:	72fb      	strb	r3, [r7, #11]
      break;
 8007cc4:	e021      	b.n	8007d0a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	7c1b      	ldrb	r3, [r3, #16]
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	d10d      	bne.n	8007cea <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007cd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007cd6:	f107 0208 	add.w	r2, r7, #8
 8007cda:	4610      	mov	r0, r2
 8007cdc:	4798      	blx	r3
 8007cde:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	3301      	adds	r3, #1
 8007ce4:	2207      	movs	r2, #7
 8007ce6:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007ce8:	e00f      	b.n	8007d0a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8007cea:	6839      	ldr	r1, [r7, #0]
 8007cec:	6878      	ldr	r0, [r7, #4]
 8007cee:	f000 f9f7 	bl	80080e0 <USBD_CtlError>
        err++;
 8007cf2:	7afb      	ldrb	r3, [r7, #11]
 8007cf4:	3301      	adds	r3, #1
 8007cf6:	72fb      	strb	r3, [r7, #11]
      break;
 8007cf8:	e007      	b.n	8007d0a <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 8007cfa:	6839      	ldr	r1, [r7, #0]
 8007cfc:	6878      	ldr	r0, [r7, #4]
 8007cfe:	f000 f9ef 	bl	80080e0 <USBD_CtlError>
      err++;
 8007d02:	7afb      	ldrb	r3, [r7, #11]
 8007d04:	3301      	adds	r3, #1
 8007d06:	72fb      	strb	r3, [r7, #11]
      break;
 8007d08:	bf00      	nop
  }

  if (err != 0U)
 8007d0a:	7afb      	ldrb	r3, [r7, #11]
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	d11e      	bne.n	8007d4e <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 8007d10:	683b      	ldr	r3, [r7, #0]
 8007d12:	88db      	ldrh	r3, [r3, #6]
 8007d14:	2b00      	cmp	r3, #0
 8007d16:	d016      	beq.n	8007d46 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 8007d18:	893b      	ldrh	r3, [r7, #8]
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	d00e      	beq.n	8007d3c <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 8007d1e:	683b      	ldr	r3, [r7, #0]
 8007d20:	88da      	ldrh	r2, [r3, #6]
 8007d22:	893b      	ldrh	r3, [r7, #8]
 8007d24:	4293      	cmp	r3, r2
 8007d26:	bf28      	it	cs
 8007d28:	4613      	movcs	r3, r2
 8007d2a:	b29b      	uxth	r3, r3
 8007d2c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8007d2e:	893b      	ldrh	r3, [r7, #8]
 8007d30:	461a      	mov	r2, r3
 8007d32:	68f9      	ldr	r1, [r7, #12]
 8007d34:	6878      	ldr	r0, [r7, #4]
 8007d36:	f000 fa44 	bl	80081c2 <USBD_CtlSendData>
 8007d3a:	e009      	b.n	8007d50 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8007d3c:	6839      	ldr	r1, [r7, #0]
 8007d3e:	6878      	ldr	r0, [r7, #4]
 8007d40:	f000 f9ce 	bl	80080e0 <USBD_CtlError>
 8007d44:	e004      	b.n	8007d50 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8007d46:	6878      	ldr	r0, [r7, #4]
 8007d48:	f000 fa95 	bl	8008276 <USBD_CtlSendStatus>
 8007d4c:	e000      	b.n	8007d50 <USBD_GetDescriptor+0x320>
    return;
 8007d4e:	bf00      	nop
  }
}
 8007d50:	3710      	adds	r7, #16
 8007d52:	46bd      	mov	sp, r7
 8007d54:	bd80      	pop	{r7, pc}
 8007d56:	bf00      	nop

08007d58 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007d58:	b580      	push	{r7, lr}
 8007d5a:	b084      	sub	sp, #16
 8007d5c:	af00      	add	r7, sp, #0
 8007d5e:	6078      	str	r0, [r7, #4]
 8007d60:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8007d62:	683b      	ldr	r3, [r7, #0]
 8007d64:	889b      	ldrh	r3, [r3, #4]
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	d131      	bne.n	8007dce <USBD_SetAddress+0x76>
 8007d6a:	683b      	ldr	r3, [r7, #0]
 8007d6c:	88db      	ldrh	r3, [r3, #6]
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	d12d      	bne.n	8007dce <USBD_SetAddress+0x76>
 8007d72:	683b      	ldr	r3, [r7, #0]
 8007d74:	885b      	ldrh	r3, [r3, #2]
 8007d76:	2b7f      	cmp	r3, #127	; 0x7f
 8007d78:	d829      	bhi.n	8007dce <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8007d7a:	683b      	ldr	r3, [r7, #0]
 8007d7c:	885b      	ldrh	r3, [r3, #2]
 8007d7e:	b2db      	uxtb	r3, r3
 8007d80:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007d84:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007d8c:	b2db      	uxtb	r3, r3
 8007d8e:	2b03      	cmp	r3, #3
 8007d90:	d104      	bne.n	8007d9c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8007d92:	6839      	ldr	r1, [r7, #0]
 8007d94:	6878      	ldr	r0, [r7, #4]
 8007d96:	f000 f9a3 	bl	80080e0 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007d9a:	e01d      	b.n	8007dd8 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	7bfa      	ldrb	r2, [r7, #15]
 8007da0:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007da4:	7bfb      	ldrb	r3, [r7, #15]
 8007da6:	4619      	mov	r1, r3
 8007da8:	6878      	ldr	r0, [r7, #4]
 8007daa:	f000 ff1b 	bl	8008be4 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8007dae:	6878      	ldr	r0, [r7, #4]
 8007db0:	f000 fa61 	bl	8008276 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007db4:	7bfb      	ldrb	r3, [r7, #15]
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	d004      	beq.n	8007dc4 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	2202      	movs	r2, #2
 8007dbe:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007dc2:	e009      	b.n	8007dd8 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	2201      	movs	r2, #1
 8007dc8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007dcc:	e004      	b.n	8007dd8 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007dce:	6839      	ldr	r1, [r7, #0]
 8007dd0:	6878      	ldr	r0, [r7, #4]
 8007dd2:	f000 f985 	bl	80080e0 <USBD_CtlError>
  }
}
 8007dd6:	bf00      	nop
 8007dd8:	bf00      	nop
 8007dda:	3710      	adds	r7, #16
 8007ddc:	46bd      	mov	sp, r7
 8007dde:	bd80      	pop	{r7, pc}

08007de0 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007de0:	b580      	push	{r7, lr}
 8007de2:	b084      	sub	sp, #16
 8007de4:	af00      	add	r7, sp, #0
 8007de6:	6078      	str	r0, [r7, #4]
 8007de8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007dea:	2300      	movs	r3, #0
 8007dec:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8007dee:	683b      	ldr	r3, [r7, #0]
 8007df0:	885b      	ldrh	r3, [r3, #2]
 8007df2:	b2da      	uxtb	r2, r3
 8007df4:	4b4c      	ldr	r3, [pc, #304]	; (8007f28 <USBD_SetConfig+0x148>)
 8007df6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007df8:	4b4b      	ldr	r3, [pc, #300]	; (8007f28 <USBD_SetConfig+0x148>)
 8007dfa:	781b      	ldrb	r3, [r3, #0]
 8007dfc:	2b01      	cmp	r3, #1
 8007dfe:	d905      	bls.n	8007e0c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8007e00:	6839      	ldr	r1, [r7, #0]
 8007e02:	6878      	ldr	r0, [r7, #4]
 8007e04:	f000 f96c 	bl	80080e0 <USBD_CtlError>
    return USBD_FAIL;
 8007e08:	2303      	movs	r3, #3
 8007e0a:	e088      	b.n	8007f1e <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007e12:	b2db      	uxtb	r3, r3
 8007e14:	2b02      	cmp	r3, #2
 8007e16:	d002      	beq.n	8007e1e <USBD_SetConfig+0x3e>
 8007e18:	2b03      	cmp	r3, #3
 8007e1a:	d025      	beq.n	8007e68 <USBD_SetConfig+0x88>
 8007e1c:	e071      	b.n	8007f02 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8007e1e:	4b42      	ldr	r3, [pc, #264]	; (8007f28 <USBD_SetConfig+0x148>)
 8007e20:	781b      	ldrb	r3, [r3, #0]
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	d01c      	beq.n	8007e60 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 8007e26:	4b40      	ldr	r3, [pc, #256]	; (8007f28 <USBD_SetConfig+0x148>)
 8007e28:	781b      	ldrb	r3, [r3, #0]
 8007e2a:	461a      	mov	r2, r3
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007e30:	4b3d      	ldr	r3, [pc, #244]	; (8007f28 <USBD_SetConfig+0x148>)
 8007e32:	781b      	ldrb	r3, [r3, #0]
 8007e34:	4619      	mov	r1, r3
 8007e36:	6878      	ldr	r0, [r7, #4]
 8007e38:	f7ff f91e 	bl	8007078 <USBD_SetClassConfig>
 8007e3c:	4603      	mov	r3, r0
 8007e3e:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8007e40:	7bfb      	ldrb	r3, [r7, #15]
 8007e42:	2b00      	cmp	r3, #0
 8007e44:	d004      	beq.n	8007e50 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 8007e46:	6839      	ldr	r1, [r7, #0]
 8007e48:	6878      	ldr	r0, [r7, #4]
 8007e4a:	f000 f949 	bl	80080e0 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007e4e:	e065      	b.n	8007f1c <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8007e50:	6878      	ldr	r0, [r7, #4]
 8007e52:	f000 fa10 	bl	8008276 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	2203      	movs	r2, #3
 8007e5a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8007e5e:	e05d      	b.n	8007f1c <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8007e60:	6878      	ldr	r0, [r7, #4]
 8007e62:	f000 fa08 	bl	8008276 <USBD_CtlSendStatus>
      break;
 8007e66:	e059      	b.n	8007f1c <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8007e68:	4b2f      	ldr	r3, [pc, #188]	; (8007f28 <USBD_SetConfig+0x148>)
 8007e6a:	781b      	ldrb	r3, [r3, #0]
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	d112      	bne.n	8007e96 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	2202      	movs	r2, #2
 8007e74:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8007e78:	4b2b      	ldr	r3, [pc, #172]	; (8007f28 <USBD_SetConfig+0x148>)
 8007e7a:	781b      	ldrb	r3, [r3, #0]
 8007e7c:	461a      	mov	r2, r3
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007e82:	4b29      	ldr	r3, [pc, #164]	; (8007f28 <USBD_SetConfig+0x148>)
 8007e84:	781b      	ldrb	r3, [r3, #0]
 8007e86:	4619      	mov	r1, r3
 8007e88:	6878      	ldr	r0, [r7, #4]
 8007e8a:	f7ff f911 	bl	80070b0 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8007e8e:	6878      	ldr	r0, [r7, #4]
 8007e90:	f000 f9f1 	bl	8008276 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007e94:	e042      	b.n	8007f1c <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 8007e96:	4b24      	ldr	r3, [pc, #144]	; (8007f28 <USBD_SetConfig+0x148>)
 8007e98:	781b      	ldrb	r3, [r3, #0]
 8007e9a:	461a      	mov	r2, r3
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	685b      	ldr	r3, [r3, #4]
 8007ea0:	429a      	cmp	r2, r3
 8007ea2:	d02a      	beq.n	8007efa <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	685b      	ldr	r3, [r3, #4]
 8007ea8:	b2db      	uxtb	r3, r3
 8007eaa:	4619      	mov	r1, r3
 8007eac:	6878      	ldr	r0, [r7, #4]
 8007eae:	f7ff f8ff 	bl	80070b0 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8007eb2:	4b1d      	ldr	r3, [pc, #116]	; (8007f28 <USBD_SetConfig+0x148>)
 8007eb4:	781b      	ldrb	r3, [r3, #0]
 8007eb6:	461a      	mov	r2, r3
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007ebc:	4b1a      	ldr	r3, [pc, #104]	; (8007f28 <USBD_SetConfig+0x148>)
 8007ebe:	781b      	ldrb	r3, [r3, #0]
 8007ec0:	4619      	mov	r1, r3
 8007ec2:	6878      	ldr	r0, [r7, #4]
 8007ec4:	f7ff f8d8 	bl	8007078 <USBD_SetClassConfig>
 8007ec8:	4603      	mov	r3, r0
 8007eca:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8007ecc:	7bfb      	ldrb	r3, [r7, #15]
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	d00f      	beq.n	8007ef2 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 8007ed2:	6839      	ldr	r1, [r7, #0]
 8007ed4:	6878      	ldr	r0, [r7, #4]
 8007ed6:	f000 f903 	bl	80080e0 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	685b      	ldr	r3, [r3, #4]
 8007ede:	b2db      	uxtb	r3, r3
 8007ee0:	4619      	mov	r1, r3
 8007ee2:	6878      	ldr	r0, [r7, #4]
 8007ee4:	f7ff f8e4 	bl	80070b0 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	2202      	movs	r2, #2
 8007eec:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8007ef0:	e014      	b.n	8007f1c <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8007ef2:	6878      	ldr	r0, [r7, #4]
 8007ef4:	f000 f9bf 	bl	8008276 <USBD_CtlSendStatus>
      break;
 8007ef8:	e010      	b.n	8007f1c <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8007efa:	6878      	ldr	r0, [r7, #4]
 8007efc:	f000 f9bb 	bl	8008276 <USBD_CtlSendStatus>
      break;
 8007f00:	e00c      	b.n	8007f1c <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8007f02:	6839      	ldr	r1, [r7, #0]
 8007f04:	6878      	ldr	r0, [r7, #4]
 8007f06:	f000 f8eb 	bl	80080e0 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007f0a:	4b07      	ldr	r3, [pc, #28]	; (8007f28 <USBD_SetConfig+0x148>)
 8007f0c:	781b      	ldrb	r3, [r3, #0]
 8007f0e:	4619      	mov	r1, r3
 8007f10:	6878      	ldr	r0, [r7, #4]
 8007f12:	f7ff f8cd 	bl	80070b0 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8007f16:	2303      	movs	r3, #3
 8007f18:	73fb      	strb	r3, [r7, #15]
      break;
 8007f1a:	bf00      	nop
  }

  return ret;
 8007f1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f1e:	4618      	mov	r0, r3
 8007f20:	3710      	adds	r7, #16
 8007f22:	46bd      	mov	sp, r7
 8007f24:	bd80      	pop	{r7, pc}
 8007f26:	bf00      	nop
 8007f28:	200001b4 	.word	0x200001b4

08007f2c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007f2c:	b580      	push	{r7, lr}
 8007f2e:	b082      	sub	sp, #8
 8007f30:	af00      	add	r7, sp, #0
 8007f32:	6078      	str	r0, [r7, #4]
 8007f34:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8007f36:	683b      	ldr	r3, [r7, #0]
 8007f38:	88db      	ldrh	r3, [r3, #6]
 8007f3a:	2b01      	cmp	r3, #1
 8007f3c:	d004      	beq.n	8007f48 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8007f3e:	6839      	ldr	r1, [r7, #0]
 8007f40:	6878      	ldr	r0, [r7, #4]
 8007f42:	f000 f8cd 	bl	80080e0 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8007f46:	e023      	b.n	8007f90 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007f4e:	b2db      	uxtb	r3, r3
 8007f50:	2b02      	cmp	r3, #2
 8007f52:	dc02      	bgt.n	8007f5a <USBD_GetConfig+0x2e>
 8007f54:	2b00      	cmp	r3, #0
 8007f56:	dc03      	bgt.n	8007f60 <USBD_GetConfig+0x34>
 8007f58:	e015      	b.n	8007f86 <USBD_GetConfig+0x5a>
 8007f5a:	2b03      	cmp	r3, #3
 8007f5c:	d00b      	beq.n	8007f76 <USBD_GetConfig+0x4a>
 8007f5e:	e012      	b.n	8007f86 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	2200      	movs	r2, #0
 8007f64:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	3308      	adds	r3, #8
 8007f6a:	2201      	movs	r2, #1
 8007f6c:	4619      	mov	r1, r3
 8007f6e:	6878      	ldr	r0, [r7, #4]
 8007f70:	f000 f927 	bl	80081c2 <USBD_CtlSendData>
        break;
 8007f74:	e00c      	b.n	8007f90 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	3304      	adds	r3, #4
 8007f7a:	2201      	movs	r2, #1
 8007f7c:	4619      	mov	r1, r3
 8007f7e:	6878      	ldr	r0, [r7, #4]
 8007f80:	f000 f91f 	bl	80081c2 <USBD_CtlSendData>
        break;
 8007f84:	e004      	b.n	8007f90 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8007f86:	6839      	ldr	r1, [r7, #0]
 8007f88:	6878      	ldr	r0, [r7, #4]
 8007f8a:	f000 f8a9 	bl	80080e0 <USBD_CtlError>
        break;
 8007f8e:	bf00      	nop
}
 8007f90:	bf00      	nop
 8007f92:	3708      	adds	r7, #8
 8007f94:	46bd      	mov	sp, r7
 8007f96:	bd80      	pop	{r7, pc}

08007f98 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007f98:	b580      	push	{r7, lr}
 8007f9a:	b082      	sub	sp, #8
 8007f9c:	af00      	add	r7, sp, #0
 8007f9e:	6078      	str	r0, [r7, #4]
 8007fa0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007fa8:	b2db      	uxtb	r3, r3
 8007faa:	3b01      	subs	r3, #1
 8007fac:	2b02      	cmp	r3, #2
 8007fae:	d81e      	bhi.n	8007fee <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8007fb0:	683b      	ldr	r3, [r7, #0]
 8007fb2:	88db      	ldrh	r3, [r3, #6]
 8007fb4:	2b02      	cmp	r3, #2
 8007fb6:	d004      	beq.n	8007fc2 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8007fb8:	6839      	ldr	r1, [r7, #0]
 8007fba:	6878      	ldr	r0, [r7, #4]
 8007fbc:	f000 f890 	bl	80080e0 <USBD_CtlError>
        break;
 8007fc0:	e01a      	b.n	8007ff8 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	2201      	movs	r2, #1
 8007fc6:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8007fce:	2b00      	cmp	r3, #0
 8007fd0:	d005      	beq.n	8007fde <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	68db      	ldr	r3, [r3, #12]
 8007fd6:	f043 0202 	orr.w	r2, r3, #2
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	330c      	adds	r3, #12
 8007fe2:	2202      	movs	r2, #2
 8007fe4:	4619      	mov	r1, r3
 8007fe6:	6878      	ldr	r0, [r7, #4]
 8007fe8:	f000 f8eb 	bl	80081c2 <USBD_CtlSendData>
      break;
 8007fec:	e004      	b.n	8007ff8 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8007fee:	6839      	ldr	r1, [r7, #0]
 8007ff0:	6878      	ldr	r0, [r7, #4]
 8007ff2:	f000 f875 	bl	80080e0 <USBD_CtlError>
      break;
 8007ff6:	bf00      	nop
  }
}
 8007ff8:	bf00      	nop
 8007ffa:	3708      	adds	r7, #8
 8007ffc:	46bd      	mov	sp, r7
 8007ffe:	bd80      	pop	{r7, pc}

08008000 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008000:	b580      	push	{r7, lr}
 8008002:	b082      	sub	sp, #8
 8008004:	af00      	add	r7, sp, #0
 8008006:	6078      	str	r0, [r7, #4]
 8008008:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800800a:	683b      	ldr	r3, [r7, #0]
 800800c:	885b      	ldrh	r3, [r3, #2]
 800800e:	2b01      	cmp	r3, #1
 8008010:	d106      	bne.n	8008020 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	2201      	movs	r2, #1
 8008016:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800801a:	6878      	ldr	r0, [r7, #4]
 800801c:	f000 f92b 	bl	8008276 <USBD_CtlSendStatus>
  }
}
 8008020:	bf00      	nop
 8008022:	3708      	adds	r7, #8
 8008024:	46bd      	mov	sp, r7
 8008026:	bd80      	pop	{r7, pc}

08008028 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008028:	b580      	push	{r7, lr}
 800802a:	b082      	sub	sp, #8
 800802c:	af00      	add	r7, sp, #0
 800802e:	6078      	str	r0, [r7, #4]
 8008030:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008038:	b2db      	uxtb	r3, r3
 800803a:	3b01      	subs	r3, #1
 800803c:	2b02      	cmp	r3, #2
 800803e:	d80b      	bhi.n	8008058 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008040:	683b      	ldr	r3, [r7, #0]
 8008042:	885b      	ldrh	r3, [r3, #2]
 8008044:	2b01      	cmp	r3, #1
 8008046:	d10c      	bne.n	8008062 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	2200      	movs	r2, #0
 800804c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8008050:	6878      	ldr	r0, [r7, #4]
 8008052:	f000 f910 	bl	8008276 <USBD_CtlSendStatus>
      }
      break;
 8008056:	e004      	b.n	8008062 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8008058:	6839      	ldr	r1, [r7, #0]
 800805a:	6878      	ldr	r0, [r7, #4]
 800805c:	f000 f840 	bl	80080e0 <USBD_CtlError>
      break;
 8008060:	e000      	b.n	8008064 <USBD_ClrFeature+0x3c>
      break;
 8008062:	bf00      	nop
  }
}
 8008064:	bf00      	nop
 8008066:	3708      	adds	r7, #8
 8008068:	46bd      	mov	sp, r7
 800806a:	bd80      	pop	{r7, pc}

0800806c <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800806c:	b580      	push	{r7, lr}
 800806e:	b084      	sub	sp, #16
 8008070:	af00      	add	r7, sp, #0
 8008072:	6078      	str	r0, [r7, #4]
 8008074:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8008076:	683b      	ldr	r3, [r7, #0]
 8008078:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800807a:	68fb      	ldr	r3, [r7, #12]
 800807c:	781a      	ldrb	r2, [r3, #0]
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8008082:	68fb      	ldr	r3, [r7, #12]
 8008084:	3301      	adds	r3, #1
 8008086:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8008088:	68fb      	ldr	r3, [r7, #12]
 800808a:	781a      	ldrb	r2, [r3, #0]
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8008090:	68fb      	ldr	r3, [r7, #12]
 8008092:	3301      	adds	r3, #1
 8008094:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8008096:	68f8      	ldr	r0, [r7, #12]
 8008098:	f7ff fa91 	bl	80075be <SWAPBYTE>
 800809c:	4603      	mov	r3, r0
 800809e:	461a      	mov	r2, r3
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80080a4:	68fb      	ldr	r3, [r7, #12]
 80080a6:	3301      	adds	r3, #1
 80080a8:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80080aa:	68fb      	ldr	r3, [r7, #12]
 80080ac:	3301      	adds	r3, #1
 80080ae:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80080b0:	68f8      	ldr	r0, [r7, #12]
 80080b2:	f7ff fa84 	bl	80075be <SWAPBYTE>
 80080b6:	4603      	mov	r3, r0
 80080b8:	461a      	mov	r2, r3
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80080be:	68fb      	ldr	r3, [r7, #12]
 80080c0:	3301      	adds	r3, #1
 80080c2:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80080c4:	68fb      	ldr	r3, [r7, #12]
 80080c6:	3301      	adds	r3, #1
 80080c8:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80080ca:	68f8      	ldr	r0, [r7, #12]
 80080cc:	f7ff fa77 	bl	80075be <SWAPBYTE>
 80080d0:	4603      	mov	r3, r0
 80080d2:	461a      	mov	r2, r3
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	80da      	strh	r2, [r3, #6]
}
 80080d8:	bf00      	nop
 80080da:	3710      	adds	r7, #16
 80080dc:	46bd      	mov	sp, r7
 80080de:	bd80      	pop	{r7, pc}

080080e0 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80080e0:	b580      	push	{r7, lr}
 80080e2:	b082      	sub	sp, #8
 80080e4:	af00      	add	r7, sp, #0
 80080e6:	6078      	str	r0, [r7, #4]
 80080e8:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80080ea:	2180      	movs	r1, #128	; 0x80
 80080ec:	6878      	ldr	r0, [r7, #4]
 80080ee:	f000 fd0f 	bl	8008b10 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80080f2:	2100      	movs	r1, #0
 80080f4:	6878      	ldr	r0, [r7, #4]
 80080f6:	f000 fd0b 	bl	8008b10 <USBD_LL_StallEP>
}
 80080fa:	bf00      	nop
 80080fc:	3708      	adds	r7, #8
 80080fe:	46bd      	mov	sp, r7
 8008100:	bd80      	pop	{r7, pc}

08008102 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008102:	b580      	push	{r7, lr}
 8008104:	b086      	sub	sp, #24
 8008106:	af00      	add	r7, sp, #0
 8008108:	60f8      	str	r0, [r7, #12]
 800810a:	60b9      	str	r1, [r7, #8]
 800810c:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800810e:	2300      	movs	r3, #0
 8008110:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8008112:	68fb      	ldr	r3, [r7, #12]
 8008114:	2b00      	cmp	r3, #0
 8008116:	d036      	beq.n	8008186 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8008118:	68fb      	ldr	r3, [r7, #12]
 800811a:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800811c:	6938      	ldr	r0, [r7, #16]
 800811e:	f000 f836 	bl	800818e <USBD_GetLen>
 8008122:	4603      	mov	r3, r0
 8008124:	3301      	adds	r3, #1
 8008126:	b29b      	uxth	r3, r3
 8008128:	005b      	lsls	r3, r3, #1
 800812a:	b29a      	uxth	r2, r3
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8008130:	7dfb      	ldrb	r3, [r7, #23]
 8008132:	68ba      	ldr	r2, [r7, #8]
 8008134:	4413      	add	r3, r2
 8008136:	687a      	ldr	r2, [r7, #4]
 8008138:	7812      	ldrb	r2, [r2, #0]
 800813a:	701a      	strb	r2, [r3, #0]
  idx++;
 800813c:	7dfb      	ldrb	r3, [r7, #23]
 800813e:	3301      	adds	r3, #1
 8008140:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8008142:	7dfb      	ldrb	r3, [r7, #23]
 8008144:	68ba      	ldr	r2, [r7, #8]
 8008146:	4413      	add	r3, r2
 8008148:	2203      	movs	r2, #3
 800814a:	701a      	strb	r2, [r3, #0]
  idx++;
 800814c:	7dfb      	ldrb	r3, [r7, #23]
 800814e:	3301      	adds	r3, #1
 8008150:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8008152:	e013      	b.n	800817c <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8008154:	7dfb      	ldrb	r3, [r7, #23]
 8008156:	68ba      	ldr	r2, [r7, #8]
 8008158:	4413      	add	r3, r2
 800815a:	693a      	ldr	r2, [r7, #16]
 800815c:	7812      	ldrb	r2, [r2, #0]
 800815e:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8008160:	693b      	ldr	r3, [r7, #16]
 8008162:	3301      	adds	r3, #1
 8008164:	613b      	str	r3, [r7, #16]
    idx++;
 8008166:	7dfb      	ldrb	r3, [r7, #23]
 8008168:	3301      	adds	r3, #1
 800816a:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800816c:	7dfb      	ldrb	r3, [r7, #23]
 800816e:	68ba      	ldr	r2, [r7, #8]
 8008170:	4413      	add	r3, r2
 8008172:	2200      	movs	r2, #0
 8008174:	701a      	strb	r2, [r3, #0]
    idx++;
 8008176:	7dfb      	ldrb	r3, [r7, #23]
 8008178:	3301      	adds	r3, #1
 800817a:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800817c:	693b      	ldr	r3, [r7, #16]
 800817e:	781b      	ldrb	r3, [r3, #0]
 8008180:	2b00      	cmp	r3, #0
 8008182:	d1e7      	bne.n	8008154 <USBD_GetString+0x52>
 8008184:	e000      	b.n	8008188 <USBD_GetString+0x86>
    return;
 8008186:	bf00      	nop
  }
}
 8008188:	3718      	adds	r7, #24
 800818a:	46bd      	mov	sp, r7
 800818c:	bd80      	pop	{r7, pc}

0800818e <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800818e:	b480      	push	{r7}
 8008190:	b085      	sub	sp, #20
 8008192:	af00      	add	r7, sp, #0
 8008194:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8008196:	2300      	movs	r3, #0
 8008198:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800819e:	e005      	b.n	80081ac <USBD_GetLen+0x1e>
  {
    len++;
 80081a0:	7bfb      	ldrb	r3, [r7, #15]
 80081a2:	3301      	adds	r3, #1
 80081a4:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80081a6:	68bb      	ldr	r3, [r7, #8]
 80081a8:	3301      	adds	r3, #1
 80081aa:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80081ac:	68bb      	ldr	r3, [r7, #8]
 80081ae:	781b      	ldrb	r3, [r3, #0]
 80081b0:	2b00      	cmp	r3, #0
 80081b2:	d1f5      	bne.n	80081a0 <USBD_GetLen+0x12>
  }

  return len;
 80081b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80081b6:	4618      	mov	r0, r3
 80081b8:	3714      	adds	r7, #20
 80081ba:	46bd      	mov	sp, r7
 80081bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081c0:	4770      	bx	lr

080081c2 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80081c2:	b580      	push	{r7, lr}
 80081c4:	b084      	sub	sp, #16
 80081c6:	af00      	add	r7, sp, #0
 80081c8:	60f8      	str	r0, [r7, #12]
 80081ca:	60b9      	str	r1, [r7, #8]
 80081cc:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80081ce:	68fb      	ldr	r3, [r7, #12]
 80081d0:	2202      	movs	r2, #2
 80081d2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80081d6:	68fb      	ldr	r3, [r7, #12]
 80081d8:	687a      	ldr	r2, [r7, #4]
 80081da:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 80081dc:	68fb      	ldr	r3, [r7, #12]
 80081de:	687a      	ldr	r2, [r7, #4]
 80081e0:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	68ba      	ldr	r2, [r7, #8]
 80081e6:	2100      	movs	r1, #0
 80081e8:	68f8      	ldr	r0, [r7, #12]
 80081ea:	f000 fd1a 	bl	8008c22 <USBD_LL_Transmit>

  return USBD_OK;
 80081ee:	2300      	movs	r3, #0
}
 80081f0:	4618      	mov	r0, r3
 80081f2:	3710      	adds	r7, #16
 80081f4:	46bd      	mov	sp, r7
 80081f6:	bd80      	pop	{r7, pc}

080081f8 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80081f8:	b580      	push	{r7, lr}
 80081fa:	b084      	sub	sp, #16
 80081fc:	af00      	add	r7, sp, #0
 80081fe:	60f8      	str	r0, [r7, #12]
 8008200:	60b9      	str	r1, [r7, #8]
 8008202:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	68ba      	ldr	r2, [r7, #8]
 8008208:	2100      	movs	r1, #0
 800820a:	68f8      	ldr	r0, [r7, #12]
 800820c:	f000 fd09 	bl	8008c22 <USBD_LL_Transmit>

  return USBD_OK;
 8008210:	2300      	movs	r3, #0
}
 8008212:	4618      	mov	r0, r3
 8008214:	3710      	adds	r7, #16
 8008216:	46bd      	mov	sp, r7
 8008218:	bd80      	pop	{r7, pc}

0800821a <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800821a:	b580      	push	{r7, lr}
 800821c:	b084      	sub	sp, #16
 800821e:	af00      	add	r7, sp, #0
 8008220:	60f8      	str	r0, [r7, #12]
 8008222:	60b9      	str	r1, [r7, #8]
 8008224:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8008226:	68fb      	ldr	r3, [r7, #12]
 8008228:	2203      	movs	r2, #3
 800822a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800822e:	68fb      	ldr	r3, [r7, #12]
 8008230:	687a      	ldr	r2, [r7, #4]
 8008232:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8008236:	68fb      	ldr	r3, [r7, #12]
 8008238:	687a      	ldr	r2, [r7, #4]
 800823a:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	68ba      	ldr	r2, [r7, #8]
 8008242:	2100      	movs	r1, #0
 8008244:	68f8      	ldr	r0, [r7, #12]
 8008246:	f000 fd0d 	bl	8008c64 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800824a:	2300      	movs	r3, #0
}
 800824c:	4618      	mov	r0, r3
 800824e:	3710      	adds	r7, #16
 8008250:	46bd      	mov	sp, r7
 8008252:	bd80      	pop	{r7, pc}

08008254 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8008254:	b580      	push	{r7, lr}
 8008256:	b084      	sub	sp, #16
 8008258:	af00      	add	r7, sp, #0
 800825a:	60f8      	str	r0, [r7, #12]
 800825c:	60b9      	str	r1, [r7, #8]
 800825e:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	68ba      	ldr	r2, [r7, #8]
 8008264:	2100      	movs	r1, #0
 8008266:	68f8      	ldr	r0, [r7, #12]
 8008268:	f000 fcfc 	bl	8008c64 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800826c:	2300      	movs	r3, #0
}
 800826e:	4618      	mov	r0, r3
 8008270:	3710      	adds	r7, #16
 8008272:	46bd      	mov	sp, r7
 8008274:	bd80      	pop	{r7, pc}

08008276 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8008276:	b580      	push	{r7, lr}
 8008278:	b082      	sub	sp, #8
 800827a:	af00      	add	r7, sp, #0
 800827c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	2204      	movs	r2, #4
 8008282:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8008286:	2300      	movs	r3, #0
 8008288:	2200      	movs	r2, #0
 800828a:	2100      	movs	r1, #0
 800828c:	6878      	ldr	r0, [r7, #4]
 800828e:	f000 fcc8 	bl	8008c22 <USBD_LL_Transmit>

  return USBD_OK;
 8008292:	2300      	movs	r3, #0
}
 8008294:	4618      	mov	r0, r3
 8008296:	3708      	adds	r7, #8
 8008298:	46bd      	mov	sp, r7
 800829a:	bd80      	pop	{r7, pc}

0800829c <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800829c:	b580      	push	{r7, lr}
 800829e:	b082      	sub	sp, #8
 80082a0:	af00      	add	r7, sp, #0
 80082a2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	2205      	movs	r2, #5
 80082a8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80082ac:	2300      	movs	r3, #0
 80082ae:	2200      	movs	r2, #0
 80082b0:	2100      	movs	r1, #0
 80082b2:	6878      	ldr	r0, [r7, #4]
 80082b4:	f000 fcd6 	bl	8008c64 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80082b8:	2300      	movs	r3, #0
}
 80082ba:	4618      	mov	r0, r3
 80082bc:	3708      	adds	r7, #8
 80082be:	46bd      	mov	sp, r7
 80082c0:	bd80      	pop	{r7, pc}
	...

080082c4 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80082c4:	b580      	push	{r7, lr}
 80082c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80082c8:	2200      	movs	r2, #0
 80082ca:	4912      	ldr	r1, [pc, #72]	; (8008314 <MX_USB_DEVICE_Init+0x50>)
 80082cc:	4812      	ldr	r0, [pc, #72]	; (8008318 <MX_USB_DEVICE_Init+0x54>)
 80082ce:	f7fe fe65 	bl	8006f9c <USBD_Init>
 80082d2:	4603      	mov	r3, r0
 80082d4:	2b00      	cmp	r3, #0
 80082d6:	d001      	beq.n	80082dc <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80082d8:	f7f8 fc32 	bl	8000b40 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80082dc:	490f      	ldr	r1, [pc, #60]	; (800831c <MX_USB_DEVICE_Init+0x58>)
 80082de:	480e      	ldr	r0, [pc, #56]	; (8008318 <MX_USB_DEVICE_Init+0x54>)
 80082e0:	f7fe fe8c 	bl	8006ffc <USBD_RegisterClass>
 80082e4:	4603      	mov	r3, r0
 80082e6:	2b00      	cmp	r3, #0
 80082e8:	d001      	beq.n	80082ee <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80082ea:	f7f8 fc29 	bl	8000b40 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80082ee:	490c      	ldr	r1, [pc, #48]	; (8008320 <MX_USB_DEVICE_Init+0x5c>)
 80082f0:	4809      	ldr	r0, [pc, #36]	; (8008318 <MX_USB_DEVICE_Init+0x54>)
 80082f2:	f7fe fdad 	bl	8006e50 <USBD_CDC_RegisterInterface>
 80082f6:	4603      	mov	r3, r0
 80082f8:	2b00      	cmp	r3, #0
 80082fa:	d001      	beq.n	8008300 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80082fc:	f7f8 fc20 	bl	8000b40 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8008300:	4805      	ldr	r0, [pc, #20]	; (8008318 <MX_USB_DEVICE_Init+0x54>)
 8008302:	f7fe fea2 	bl	800704a <USBD_Start>
 8008306:	4603      	mov	r3, r0
 8008308:	2b00      	cmp	r3, #0
 800830a:	d001      	beq.n	8008310 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800830c:	f7f8 fc18 	bl	8000b40 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8008310:	bf00      	nop
 8008312:	bd80      	pop	{r7, pc}
 8008314:	20000130 	.word	0x20000130
 8008318:	20000528 	.word	0x20000528
 800831c:	20000018 	.word	0x20000018
 8008320:	2000011c 	.word	0x2000011c

08008324 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8008324:	b580      	push	{r7, lr}
 8008326:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8008328:	2200      	movs	r2, #0
 800832a:	4905      	ldr	r1, [pc, #20]	; (8008340 <CDC_Init_FS+0x1c>)
 800832c:	4805      	ldr	r0, [pc, #20]	; (8008344 <CDC_Init_FS+0x20>)
 800832e:	f7fe fda4 	bl	8006e7a <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8008332:	4905      	ldr	r1, [pc, #20]	; (8008348 <CDC_Init_FS+0x24>)
 8008334:	4803      	ldr	r0, [pc, #12]	; (8008344 <CDC_Init_FS+0x20>)
 8008336:	f7fe fdbe 	bl	8006eb6 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800833a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800833c:	4618      	mov	r0, r3
 800833e:	bd80      	pop	{r7, pc}
 8008340:	20000ff8 	.word	0x20000ff8
 8008344:	20000528 	.word	0x20000528
 8008348:	200007f8 	.word	0x200007f8

0800834c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800834c:	b480      	push	{r7}
 800834e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8008350:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8008352:	4618      	mov	r0, r3
 8008354:	46bd      	mov	sp, r7
 8008356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800835a:	4770      	bx	lr

0800835c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800835c:	b480      	push	{r7}
 800835e:	b083      	sub	sp, #12
 8008360:	af00      	add	r7, sp, #0
 8008362:	4603      	mov	r3, r0
 8008364:	6039      	str	r1, [r7, #0]
 8008366:	71fb      	strb	r3, [r7, #7]
 8008368:	4613      	mov	r3, r2
 800836a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800836c:	79fb      	ldrb	r3, [r7, #7]
 800836e:	2b23      	cmp	r3, #35	; 0x23
 8008370:	d84a      	bhi.n	8008408 <CDC_Control_FS+0xac>
 8008372:	a201      	add	r2, pc, #4	; (adr r2, 8008378 <CDC_Control_FS+0x1c>)
 8008374:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008378:	08008409 	.word	0x08008409
 800837c:	08008409 	.word	0x08008409
 8008380:	08008409 	.word	0x08008409
 8008384:	08008409 	.word	0x08008409
 8008388:	08008409 	.word	0x08008409
 800838c:	08008409 	.word	0x08008409
 8008390:	08008409 	.word	0x08008409
 8008394:	08008409 	.word	0x08008409
 8008398:	08008409 	.word	0x08008409
 800839c:	08008409 	.word	0x08008409
 80083a0:	08008409 	.word	0x08008409
 80083a4:	08008409 	.word	0x08008409
 80083a8:	08008409 	.word	0x08008409
 80083ac:	08008409 	.word	0x08008409
 80083b0:	08008409 	.word	0x08008409
 80083b4:	08008409 	.word	0x08008409
 80083b8:	08008409 	.word	0x08008409
 80083bc:	08008409 	.word	0x08008409
 80083c0:	08008409 	.word	0x08008409
 80083c4:	08008409 	.word	0x08008409
 80083c8:	08008409 	.word	0x08008409
 80083cc:	08008409 	.word	0x08008409
 80083d0:	08008409 	.word	0x08008409
 80083d4:	08008409 	.word	0x08008409
 80083d8:	08008409 	.word	0x08008409
 80083dc:	08008409 	.word	0x08008409
 80083e0:	08008409 	.word	0x08008409
 80083e4:	08008409 	.word	0x08008409
 80083e8:	08008409 	.word	0x08008409
 80083ec:	08008409 	.word	0x08008409
 80083f0:	08008409 	.word	0x08008409
 80083f4:	08008409 	.word	0x08008409
 80083f8:	08008409 	.word	0x08008409
 80083fc:	08008409 	.word	0x08008409
 8008400:	08008409 	.word	0x08008409
 8008404:	08008409 	.word	0x08008409
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8008408:	bf00      	nop
  }

  return (USBD_OK);
 800840a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800840c:	4618      	mov	r0, r3
 800840e:	370c      	adds	r7, #12
 8008410:	46bd      	mov	sp, r7
 8008412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008416:	4770      	bx	lr

08008418 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8008418:	b580      	push	{r7, lr}
 800841a:	b082      	sub	sp, #8
 800841c:	af00      	add	r7, sp, #0
 800841e:	6078      	str	r0, [r7, #4]
 8008420:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
	USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8008422:	6879      	ldr	r1, [r7, #4]
 8008424:	4808      	ldr	r0, [pc, #32]	; (8008448 <CDC_Receive_FS+0x30>)
 8008426:	f7fe fd46 	bl	8006eb6 <USBD_CDC_SetRxBuffer>
	USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800842a:	4807      	ldr	r0, [pc, #28]	; (8008448 <CDC_Receive_FS+0x30>)
 800842c:	f7fe fd8c 	bl	8006f48 <USBD_CDC_ReceivePacket>
	CDC_Transmit_FS(Buf,*Len);
 8008430:	683b      	ldr	r3, [r7, #0]
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	b29b      	uxth	r3, r3
 8008436:	4619      	mov	r1, r3
 8008438:	6878      	ldr	r0, [r7, #4]
 800843a:	f000 f807 	bl	800844c <CDC_Transmit_FS>
	return (USBD_OK);
 800843e:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8008440:	4618      	mov	r0, r3
 8008442:	3708      	adds	r7, #8
 8008444:	46bd      	mov	sp, r7
 8008446:	bd80      	pop	{r7, pc}
 8008448:	20000528 	.word	0x20000528

0800844c <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800844c:	b580      	push	{r7, lr}
 800844e:	b084      	sub	sp, #16
 8008450:	af00      	add	r7, sp, #0
 8008452:	6078      	str	r0, [r7, #4]
 8008454:	460b      	mov	r3, r1
 8008456:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8008458:	2300      	movs	r3, #0
 800845a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800845c:	4b0d      	ldr	r3, [pc, #52]	; (8008494 <CDC_Transmit_FS+0x48>)
 800845e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008462:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8008464:	68bb      	ldr	r3, [r7, #8]
 8008466:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800846a:	2b00      	cmp	r3, #0
 800846c:	d001      	beq.n	8008472 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800846e:	2301      	movs	r3, #1
 8008470:	e00b      	b.n	800848a <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8008472:	887b      	ldrh	r3, [r7, #2]
 8008474:	461a      	mov	r2, r3
 8008476:	6879      	ldr	r1, [r7, #4]
 8008478:	4806      	ldr	r0, [pc, #24]	; (8008494 <CDC_Transmit_FS+0x48>)
 800847a:	f7fe fcfe 	bl	8006e7a <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800847e:	4805      	ldr	r0, [pc, #20]	; (8008494 <CDC_Transmit_FS+0x48>)
 8008480:	f7fe fd32 	bl	8006ee8 <USBD_CDC_TransmitPacket>
 8008484:	4603      	mov	r3, r0
 8008486:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8008488:	7bfb      	ldrb	r3, [r7, #15]
}
 800848a:	4618      	mov	r0, r3
 800848c:	3710      	adds	r7, #16
 800848e:	46bd      	mov	sp, r7
 8008490:	bd80      	pop	{r7, pc}
 8008492:	bf00      	nop
 8008494:	20000528 	.word	0x20000528

08008498 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8008498:	b480      	push	{r7}
 800849a:	b087      	sub	sp, #28
 800849c:	af00      	add	r7, sp, #0
 800849e:	60f8      	str	r0, [r7, #12]
 80084a0:	60b9      	str	r1, [r7, #8]
 80084a2:	4613      	mov	r3, r2
 80084a4:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 80084a6:	2300      	movs	r3, #0
 80084a8:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 80084aa:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80084ae:	4618      	mov	r0, r3
 80084b0:	371c      	adds	r7, #28
 80084b2:	46bd      	mov	sp, r7
 80084b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084b8:	4770      	bx	lr
	...

080084bc <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80084bc:	b480      	push	{r7}
 80084be:	b083      	sub	sp, #12
 80084c0:	af00      	add	r7, sp, #0
 80084c2:	4603      	mov	r3, r0
 80084c4:	6039      	str	r1, [r7, #0]
 80084c6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80084c8:	683b      	ldr	r3, [r7, #0]
 80084ca:	2212      	movs	r2, #18
 80084cc:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80084ce:	4b03      	ldr	r3, [pc, #12]	; (80084dc <USBD_FS_DeviceDescriptor+0x20>)
}
 80084d0:	4618      	mov	r0, r3
 80084d2:	370c      	adds	r7, #12
 80084d4:	46bd      	mov	sp, r7
 80084d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084da:	4770      	bx	lr
 80084dc:	20000150 	.word	0x20000150

080084e0 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80084e0:	b480      	push	{r7}
 80084e2:	b083      	sub	sp, #12
 80084e4:	af00      	add	r7, sp, #0
 80084e6:	4603      	mov	r3, r0
 80084e8:	6039      	str	r1, [r7, #0]
 80084ea:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80084ec:	683b      	ldr	r3, [r7, #0]
 80084ee:	2204      	movs	r2, #4
 80084f0:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80084f2:	4b03      	ldr	r3, [pc, #12]	; (8008500 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80084f4:	4618      	mov	r0, r3
 80084f6:	370c      	adds	r7, #12
 80084f8:	46bd      	mov	sp, r7
 80084fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084fe:	4770      	bx	lr
 8008500:	20000170 	.word	0x20000170

08008504 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008504:	b580      	push	{r7, lr}
 8008506:	b082      	sub	sp, #8
 8008508:	af00      	add	r7, sp, #0
 800850a:	4603      	mov	r3, r0
 800850c:	6039      	str	r1, [r7, #0]
 800850e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008510:	79fb      	ldrb	r3, [r7, #7]
 8008512:	2b00      	cmp	r3, #0
 8008514:	d105      	bne.n	8008522 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008516:	683a      	ldr	r2, [r7, #0]
 8008518:	4907      	ldr	r1, [pc, #28]	; (8008538 <USBD_FS_ProductStrDescriptor+0x34>)
 800851a:	4808      	ldr	r0, [pc, #32]	; (800853c <USBD_FS_ProductStrDescriptor+0x38>)
 800851c:	f7ff fdf1 	bl	8008102 <USBD_GetString>
 8008520:	e004      	b.n	800852c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008522:	683a      	ldr	r2, [r7, #0]
 8008524:	4904      	ldr	r1, [pc, #16]	; (8008538 <USBD_FS_ProductStrDescriptor+0x34>)
 8008526:	4805      	ldr	r0, [pc, #20]	; (800853c <USBD_FS_ProductStrDescriptor+0x38>)
 8008528:	f7ff fdeb 	bl	8008102 <USBD_GetString>
  }
  return USBD_StrDesc;
 800852c:	4b02      	ldr	r3, [pc, #8]	; (8008538 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800852e:	4618      	mov	r0, r3
 8008530:	3708      	adds	r7, #8
 8008532:	46bd      	mov	sp, r7
 8008534:	bd80      	pop	{r7, pc}
 8008536:	bf00      	nop
 8008538:	200017f8 	.word	0x200017f8
 800853c:	08008e8c 	.word	0x08008e8c

08008540 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008540:	b580      	push	{r7, lr}
 8008542:	b082      	sub	sp, #8
 8008544:	af00      	add	r7, sp, #0
 8008546:	4603      	mov	r3, r0
 8008548:	6039      	str	r1, [r7, #0]
 800854a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800854c:	683a      	ldr	r2, [r7, #0]
 800854e:	4904      	ldr	r1, [pc, #16]	; (8008560 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8008550:	4804      	ldr	r0, [pc, #16]	; (8008564 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8008552:	f7ff fdd6 	bl	8008102 <USBD_GetString>
  return USBD_StrDesc;
 8008556:	4b02      	ldr	r3, [pc, #8]	; (8008560 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8008558:	4618      	mov	r0, r3
 800855a:	3708      	adds	r7, #8
 800855c:	46bd      	mov	sp, r7
 800855e:	bd80      	pop	{r7, pc}
 8008560:	200017f8 	.word	0x200017f8
 8008564:	08008ea4 	.word	0x08008ea4

08008568 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008568:	b580      	push	{r7, lr}
 800856a:	b082      	sub	sp, #8
 800856c:	af00      	add	r7, sp, #0
 800856e:	4603      	mov	r3, r0
 8008570:	6039      	str	r1, [r7, #0]
 8008572:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8008574:	683b      	ldr	r3, [r7, #0]
 8008576:	221a      	movs	r2, #26
 8008578:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800857a:	f000 f855 	bl	8008628 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800857e:	4b02      	ldr	r3, [pc, #8]	; (8008588 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8008580:	4618      	mov	r0, r3
 8008582:	3708      	adds	r7, #8
 8008584:	46bd      	mov	sp, r7
 8008586:	bd80      	pop	{r7, pc}
 8008588:	20000174 	.word	0x20000174

0800858c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800858c:	b580      	push	{r7, lr}
 800858e:	b082      	sub	sp, #8
 8008590:	af00      	add	r7, sp, #0
 8008592:	4603      	mov	r3, r0
 8008594:	6039      	str	r1, [r7, #0]
 8008596:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8008598:	79fb      	ldrb	r3, [r7, #7]
 800859a:	2b00      	cmp	r3, #0
 800859c:	d105      	bne.n	80085aa <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800859e:	683a      	ldr	r2, [r7, #0]
 80085a0:	4907      	ldr	r1, [pc, #28]	; (80085c0 <USBD_FS_ConfigStrDescriptor+0x34>)
 80085a2:	4808      	ldr	r0, [pc, #32]	; (80085c4 <USBD_FS_ConfigStrDescriptor+0x38>)
 80085a4:	f7ff fdad 	bl	8008102 <USBD_GetString>
 80085a8:	e004      	b.n	80085b4 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80085aa:	683a      	ldr	r2, [r7, #0]
 80085ac:	4904      	ldr	r1, [pc, #16]	; (80085c0 <USBD_FS_ConfigStrDescriptor+0x34>)
 80085ae:	4805      	ldr	r0, [pc, #20]	; (80085c4 <USBD_FS_ConfigStrDescriptor+0x38>)
 80085b0:	f7ff fda7 	bl	8008102 <USBD_GetString>
  }
  return USBD_StrDesc;
 80085b4:	4b02      	ldr	r3, [pc, #8]	; (80085c0 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80085b6:	4618      	mov	r0, r3
 80085b8:	3708      	adds	r7, #8
 80085ba:	46bd      	mov	sp, r7
 80085bc:	bd80      	pop	{r7, pc}
 80085be:	bf00      	nop
 80085c0:	200017f8 	.word	0x200017f8
 80085c4:	08008eb8 	.word	0x08008eb8

080085c8 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80085c8:	b580      	push	{r7, lr}
 80085ca:	b082      	sub	sp, #8
 80085cc:	af00      	add	r7, sp, #0
 80085ce:	4603      	mov	r3, r0
 80085d0:	6039      	str	r1, [r7, #0]
 80085d2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80085d4:	79fb      	ldrb	r3, [r7, #7]
 80085d6:	2b00      	cmp	r3, #0
 80085d8:	d105      	bne.n	80085e6 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80085da:	683a      	ldr	r2, [r7, #0]
 80085dc:	4907      	ldr	r1, [pc, #28]	; (80085fc <USBD_FS_InterfaceStrDescriptor+0x34>)
 80085de:	4808      	ldr	r0, [pc, #32]	; (8008600 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80085e0:	f7ff fd8f 	bl	8008102 <USBD_GetString>
 80085e4:	e004      	b.n	80085f0 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80085e6:	683a      	ldr	r2, [r7, #0]
 80085e8:	4904      	ldr	r1, [pc, #16]	; (80085fc <USBD_FS_InterfaceStrDescriptor+0x34>)
 80085ea:	4805      	ldr	r0, [pc, #20]	; (8008600 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80085ec:	f7ff fd89 	bl	8008102 <USBD_GetString>
  }
  return USBD_StrDesc;
 80085f0:	4b02      	ldr	r3, [pc, #8]	; (80085fc <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80085f2:	4618      	mov	r0, r3
 80085f4:	3708      	adds	r7, #8
 80085f6:	46bd      	mov	sp, r7
 80085f8:	bd80      	pop	{r7, pc}
 80085fa:	bf00      	nop
 80085fc:	200017f8 	.word	0x200017f8
 8008600:	08008ec4 	.word	0x08008ec4

08008604 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008604:	b480      	push	{r7}
 8008606:	b083      	sub	sp, #12
 8008608:	af00      	add	r7, sp, #0
 800860a:	4603      	mov	r3, r0
 800860c:	6039      	str	r1, [r7, #0]
 800860e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 8008610:	683b      	ldr	r3, [r7, #0]
 8008612:	220c      	movs	r2, #12
 8008614:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 8008616:	4b03      	ldr	r3, [pc, #12]	; (8008624 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 8008618:	4618      	mov	r0, r3
 800861a:	370c      	adds	r7, #12
 800861c:	46bd      	mov	sp, r7
 800861e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008622:	4770      	bx	lr
 8008624:	20000164 	.word	0x20000164

08008628 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8008628:	b580      	push	{r7, lr}
 800862a:	b084      	sub	sp, #16
 800862c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800862e:	4b0f      	ldr	r3, [pc, #60]	; (800866c <Get_SerialNum+0x44>)
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8008634:	4b0e      	ldr	r3, [pc, #56]	; (8008670 <Get_SerialNum+0x48>)
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800863a:	4b0e      	ldr	r3, [pc, #56]	; (8008674 <Get_SerialNum+0x4c>)
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8008640:	68fa      	ldr	r2, [r7, #12]
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	4413      	add	r3, r2
 8008646:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8008648:	68fb      	ldr	r3, [r7, #12]
 800864a:	2b00      	cmp	r3, #0
 800864c:	d009      	beq.n	8008662 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800864e:	2208      	movs	r2, #8
 8008650:	4909      	ldr	r1, [pc, #36]	; (8008678 <Get_SerialNum+0x50>)
 8008652:	68f8      	ldr	r0, [r7, #12]
 8008654:	f000 f814 	bl	8008680 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8008658:	2204      	movs	r2, #4
 800865a:	4908      	ldr	r1, [pc, #32]	; (800867c <Get_SerialNum+0x54>)
 800865c:	68b8      	ldr	r0, [r7, #8]
 800865e:	f000 f80f 	bl	8008680 <IntToUnicode>
  }
}
 8008662:	bf00      	nop
 8008664:	3710      	adds	r7, #16
 8008666:	46bd      	mov	sp, r7
 8008668:	bd80      	pop	{r7, pc}
 800866a:	bf00      	nop
 800866c:	1fff7a10 	.word	0x1fff7a10
 8008670:	1fff7a14 	.word	0x1fff7a14
 8008674:	1fff7a18 	.word	0x1fff7a18
 8008678:	20000176 	.word	0x20000176
 800867c:	20000186 	.word	0x20000186

08008680 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8008680:	b480      	push	{r7}
 8008682:	b087      	sub	sp, #28
 8008684:	af00      	add	r7, sp, #0
 8008686:	60f8      	str	r0, [r7, #12]
 8008688:	60b9      	str	r1, [r7, #8]
 800868a:	4613      	mov	r3, r2
 800868c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800868e:	2300      	movs	r3, #0
 8008690:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8008692:	2300      	movs	r3, #0
 8008694:	75fb      	strb	r3, [r7, #23]
 8008696:	e027      	b.n	80086e8 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8008698:	68fb      	ldr	r3, [r7, #12]
 800869a:	0f1b      	lsrs	r3, r3, #28
 800869c:	2b09      	cmp	r3, #9
 800869e:	d80b      	bhi.n	80086b8 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80086a0:	68fb      	ldr	r3, [r7, #12]
 80086a2:	0f1b      	lsrs	r3, r3, #28
 80086a4:	b2da      	uxtb	r2, r3
 80086a6:	7dfb      	ldrb	r3, [r7, #23]
 80086a8:	005b      	lsls	r3, r3, #1
 80086aa:	4619      	mov	r1, r3
 80086ac:	68bb      	ldr	r3, [r7, #8]
 80086ae:	440b      	add	r3, r1
 80086b0:	3230      	adds	r2, #48	; 0x30
 80086b2:	b2d2      	uxtb	r2, r2
 80086b4:	701a      	strb	r2, [r3, #0]
 80086b6:	e00a      	b.n	80086ce <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80086b8:	68fb      	ldr	r3, [r7, #12]
 80086ba:	0f1b      	lsrs	r3, r3, #28
 80086bc:	b2da      	uxtb	r2, r3
 80086be:	7dfb      	ldrb	r3, [r7, #23]
 80086c0:	005b      	lsls	r3, r3, #1
 80086c2:	4619      	mov	r1, r3
 80086c4:	68bb      	ldr	r3, [r7, #8]
 80086c6:	440b      	add	r3, r1
 80086c8:	3237      	adds	r2, #55	; 0x37
 80086ca:	b2d2      	uxtb	r2, r2
 80086cc:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80086ce:	68fb      	ldr	r3, [r7, #12]
 80086d0:	011b      	lsls	r3, r3, #4
 80086d2:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80086d4:	7dfb      	ldrb	r3, [r7, #23]
 80086d6:	005b      	lsls	r3, r3, #1
 80086d8:	3301      	adds	r3, #1
 80086da:	68ba      	ldr	r2, [r7, #8]
 80086dc:	4413      	add	r3, r2
 80086de:	2200      	movs	r2, #0
 80086e0:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80086e2:	7dfb      	ldrb	r3, [r7, #23]
 80086e4:	3301      	adds	r3, #1
 80086e6:	75fb      	strb	r3, [r7, #23]
 80086e8:	7dfa      	ldrb	r2, [r7, #23]
 80086ea:	79fb      	ldrb	r3, [r7, #7]
 80086ec:	429a      	cmp	r2, r3
 80086ee:	d3d3      	bcc.n	8008698 <IntToUnicode+0x18>
  }
}
 80086f0:	bf00      	nop
 80086f2:	bf00      	nop
 80086f4:	371c      	adds	r7, #28
 80086f6:	46bd      	mov	sp, r7
 80086f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086fc:	4770      	bx	lr
	...

08008700 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8008700:	b580      	push	{r7, lr}
 8008702:	b098      	sub	sp, #96	; 0x60
 8008704:	af00      	add	r7, sp, #0
 8008706:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008708:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800870c:	2200      	movs	r2, #0
 800870e:	601a      	str	r2, [r3, #0]
 8008710:	605a      	str	r2, [r3, #4]
 8008712:	609a      	str	r2, [r3, #8]
 8008714:	60da      	str	r2, [r3, #12]
 8008716:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8008718:	f107 0310 	add.w	r3, r7, #16
 800871c:	223c      	movs	r2, #60	; 0x3c
 800871e:	2100      	movs	r1, #0
 8008720:	4618      	mov	r0, r3
 8008722:	f000 fb89 	bl	8008e38 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	681b      	ldr	r3, [r3, #0]
 800872a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800872e:	d148      	bne.n	80087c2 <HAL_PCD_MspInit+0xc2>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8008730:	2380      	movs	r3, #128	; 0x80
 8008732:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 8008734:	2300      	movs	r3, #0
 8008736:	647b      	str	r3, [r7, #68]	; 0x44
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8008738:	f107 0310 	add.w	r3, r7, #16
 800873c:	4618      	mov	r0, r3
 800873e:	f7fa ffc1 	bl	80036c4 <HAL_RCCEx_PeriphCLKConfig>
 8008742:	4603      	mov	r3, r0
 8008744:	2b00      	cmp	r3, #0
 8008746:	d001      	beq.n	800874c <HAL_PCD_MspInit+0x4c>
    {
      Error_Handler();
 8008748:	f7f8 f9fa 	bl	8000b40 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800874c:	2300      	movs	r3, #0
 800874e:	60fb      	str	r3, [r7, #12]
 8008750:	4b1e      	ldr	r3, [pc, #120]	; (80087cc <HAL_PCD_MspInit+0xcc>)
 8008752:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008754:	4a1d      	ldr	r2, [pc, #116]	; (80087cc <HAL_PCD_MspInit+0xcc>)
 8008756:	f043 0301 	orr.w	r3, r3, #1
 800875a:	6313      	str	r3, [r2, #48]	; 0x30
 800875c:	4b1b      	ldr	r3, [pc, #108]	; (80087cc <HAL_PCD_MspInit+0xcc>)
 800875e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008760:	f003 0301 	and.w	r3, r3, #1
 8008764:	60fb      	str	r3, [r7, #12]
 8008766:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8008768:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800876c:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800876e:	2302      	movs	r3, #2
 8008770:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008772:	2300      	movs	r3, #0
 8008774:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008776:	2303      	movs	r3, #3
 8008778:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800877a:	230a      	movs	r3, #10
 800877c:	65fb      	str	r3, [r7, #92]	; 0x5c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800877e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8008782:	4619      	mov	r1, r3
 8008784:	4812      	ldr	r0, [pc, #72]	; (80087d0 <HAL_PCD_MspInit+0xd0>)
 8008786:	f7f8 fed1 	bl	800152c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800878a:	4b10      	ldr	r3, [pc, #64]	; (80087cc <HAL_PCD_MspInit+0xcc>)
 800878c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800878e:	4a0f      	ldr	r2, [pc, #60]	; (80087cc <HAL_PCD_MspInit+0xcc>)
 8008790:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008794:	6353      	str	r3, [r2, #52]	; 0x34
 8008796:	2300      	movs	r3, #0
 8008798:	60bb      	str	r3, [r7, #8]
 800879a:	4b0c      	ldr	r3, [pc, #48]	; (80087cc <HAL_PCD_MspInit+0xcc>)
 800879c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800879e:	4a0b      	ldr	r2, [pc, #44]	; (80087cc <HAL_PCD_MspInit+0xcc>)
 80087a0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80087a4:	6453      	str	r3, [r2, #68]	; 0x44
 80087a6:	4b09      	ldr	r3, [pc, #36]	; (80087cc <HAL_PCD_MspInit+0xcc>)
 80087a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80087aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80087ae:	60bb      	str	r3, [r7, #8]
 80087b0:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80087b2:	2200      	movs	r2, #0
 80087b4:	2100      	movs	r1, #0
 80087b6:	2043      	movs	r0, #67	; 0x43
 80087b8:	f7f8 fdef 	bl	800139a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80087bc:	2043      	movs	r0, #67	; 0x43
 80087be:	f7f8 fe08 	bl	80013d2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80087c2:	bf00      	nop
 80087c4:	3760      	adds	r7, #96	; 0x60
 80087c6:	46bd      	mov	sp, r7
 80087c8:	bd80      	pop	{r7, pc}
 80087ca:	bf00      	nop
 80087cc:	40023800 	.word	0x40023800
 80087d0:	40020000 	.word	0x40020000

080087d4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80087d4:	b580      	push	{r7, lr}
 80087d6:	b082      	sub	sp, #8
 80087d8:	af00      	add	r7, sp, #0
 80087da:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80087e8:	4619      	mov	r1, r3
 80087ea:	4610      	mov	r0, r2
 80087ec:	f7fe fc78 	bl	80070e0 <USBD_LL_SetupStage>
}
 80087f0:	bf00      	nop
 80087f2:	3708      	adds	r7, #8
 80087f4:	46bd      	mov	sp, r7
 80087f6:	bd80      	pop	{r7, pc}

080087f8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80087f8:	b580      	push	{r7, lr}
 80087fa:	b082      	sub	sp, #8
 80087fc:	af00      	add	r7, sp, #0
 80087fe:	6078      	str	r0, [r7, #4]
 8008800:	460b      	mov	r3, r1
 8008802:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800880a:	78fa      	ldrb	r2, [r7, #3]
 800880c:	6879      	ldr	r1, [r7, #4]
 800880e:	4613      	mov	r3, r2
 8008810:	00db      	lsls	r3, r3, #3
 8008812:	1a9b      	subs	r3, r3, r2
 8008814:	009b      	lsls	r3, r3, #2
 8008816:	440b      	add	r3, r1
 8008818:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800881c:	681a      	ldr	r2, [r3, #0]
 800881e:	78fb      	ldrb	r3, [r7, #3]
 8008820:	4619      	mov	r1, r3
 8008822:	f7fe fcb2 	bl	800718a <USBD_LL_DataOutStage>
}
 8008826:	bf00      	nop
 8008828:	3708      	adds	r7, #8
 800882a:	46bd      	mov	sp, r7
 800882c:	bd80      	pop	{r7, pc}

0800882e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800882e:	b580      	push	{r7, lr}
 8008830:	b082      	sub	sp, #8
 8008832:	af00      	add	r7, sp, #0
 8008834:	6078      	str	r0, [r7, #4]
 8008836:	460b      	mov	r3, r1
 8008838:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8008840:	78fa      	ldrb	r2, [r7, #3]
 8008842:	6879      	ldr	r1, [r7, #4]
 8008844:	4613      	mov	r3, r2
 8008846:	00db      	lsls	r3, r3, #3
 8008848:	1a9b      	subs	r3, r3, r2
 800884a:	009b      	lsls	r3, r3, #2
 800884c:	440b      	add	r3, r1
 800884e:	3348      	adds	r3, #72	; 0x48
 8008850:	681a      	ldr	r2, [r3, #0]
 8008852:	78fb      	ldrb	r3, [r7, #3]
 8008854:	4619      	mov	r1, r3
 8008856:	f7fe fcfb 	bl	8007250 <USBD_LL_DataInStage>
}
 800885a:	bf00      	nop
 800885c:	3708      	adds	r7, #8
 800885e:	46bd      	mov	sp, r7
 8008860:	bd80      	pop	{r7, pc}

08008862 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008862:	b580      	push	{r7, lr}
 8008864:	b082      	sub	sp, #8
 8008866:	af00      	add	r7, sp, #0
 8008868:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008870:	4618      	mov	r0, r3
 8008872:	f7fe fe0f 	bl	8007494 <USBD_LL_SOF>
}
 8008876:	bf00      	nop
 8008878:	3708      	adds	r7, #8
 800887a:	46bd      	mov	sp, r7
 800887c:	bd80      	pop	{r7, pc}

0800887e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800887e:	b580      	push	{r7, lr}
 8008880:	b084      	sub	sp, #16
 8008882:	af00      	add	r7, sp, #0
 8008884:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8008886:	2301      	movs	r3, #1
 8008888:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	68db      	ldr	r3, [r3, #12]
 800888e:	2b00      	cmp	r3, #0
 8008890:	d102      	bne.n	8008898 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8008892:	2300      	movs	r3, #0
 8008894:	73fb      	strb	r3, [r7, #15]
 8008896:	e008      	b.n	80088aa <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	68db      	ldr	r3, [r3, #12]
 800889c:	2b02      	cmp	r3, #2
 800889e:	d102      	bne.n	80088a6 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 80088a0:	2301      	movs	r3, #1
 80088a2:	73fb      	strb	r3, [r7, #15]
 80088a4:	e001      	b.n	80088aa <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 80088a6:	f7f8 f94b 	bl	8000b40 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80088b0:	7bfa      	ldrb	r2, [r7, #15]
 80088b2:	4611      	mov	r1, r2
 80088b4:	4618      	mov	r0, r3
 80088b6:	f7fe fdaf 	bl	8007418 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80088c0:	4618      	mov	r0, r3
 80088c2:	f7fe fd5b 	bl	800737c <USBD_LL_Reset>
}
 80088c6:	bf00      	nop
 80088c8:	3710      	adds	r7, #16
 80088ca:	46bd      	mov	sp, r7
 80088cc:	bd80      	pop	{r7, pc}
	...

080088d0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80088d0:	b580      	push	{r7, lr}
 80088d2:	b082      	sub	sp, #8
 80088d4:	af00      	add	r7, sp, #0
 80088d6:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80088de:	4618      	mov	r0, r3
 80088e0:	f7fe fdaa 	bl	8007438 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80088ec:	681b      	ldr	r3, [r3, #0]
 80088ee:	687a      	ldr	r2, [r7, #4]
 80088f0:	6812      	ldr	r2, [r2, #0]
 80088f2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80088f6:	f043 0301 	orr.w	r3, r3, #1
 80088fa:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	6a1b      	ldr	r3, [r3, #32]
 8008900:	2b00      	cmp	r3, #0
 8008902:	d005      	beq.n	8008910 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008904:	4b04      	ldr	r3, [pc, #16]	; (8008918 <HAL_PCD_SuspendCallback+0x48>)
 8008906:	691b      	ldr	r3, [r3, #16]
 8008908:	4a03      	ldr	r2, [pc, #12]	; (8008918 <HAL_PCD_SuspendCallback+0x48>)
 800890a:	f043 0306 	orr.w	r3, r3, #6
 800890e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8008910:	bf00      	nop
 8008912:	3708      	adds	r7, #8
 8008914:	46bd      	mov	sp, r7
 8008916:	bd80      	pop	{r7, pc}
 8008918:	e000ed00 	.word	0xe000ed00

0800891c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800891c:	b580      	push	{r7, lr}
 800891e:	b082      	sub	sp, #8
 8008920:	af00      	add	r7, sp, #0
 8008922:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800892a:	4618      	mov	r0, r3
 800892c:	f7fe fd9a 	bl	8007464 <USBD_LL_Resume>
}
 8008930:	bf00      	nop
 8008932:	3708      	adds	r7, #8
 8008934:	46bd      	mov	sp, r7
 8008936:	bd80      	pop	{r7, pc}

08008938 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008938:	b580      	push	{r7, lr}
 800893a:	b082      	sub	sp, #8
 800893c:	af00      	add	r7, sp, #0
 800893e:	6078      	str	r0, [r7, #4]
 8008940:	460b      	mov	r3, r1
 8008942:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800894a:	78fa      	ldrb	r2, [r7, #3]
 800894c:	4611      	mov	r1, r2
 800894e:	4618      	mov	r0, r3
 8008950:	f7fe fde8 	bl	8007524 <USBD_LL_IsoOUTIncomplete>
}
 8008954:	bf00      	nop
 8008956:	3708      	adds	r7, #8
 8008958:	46bd      	mov	sp, r7
 800895a:	bd80      	pop	{r7, pc}

0800895c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800895c:	b580      	push	{r7, lr}
 800895e:	b082      	sub	sp, #8
 8008960:	af00      	add	r7, sp, #0
 8008962:	6078      	str	r0, [r7, #4]
 8008964:	460b      	mov	r3, r1
 8008966:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800896e:	78fa      	ldrb	r2, [r7, #3]
 8008970:	4611      	mov	r1, r2
 8008972:	4618      	mov	r0, r3
 8008974:	f7fe fdb0 	bl	80074d8 <USBD_LL_IsoINIncomplete>
}
 8008978:	bf00      	nop
 800897a:	3708      	adds	r7, #8
 800897c:	46bd      	mov	sp, r7
 800897e:	bd80      	pop	{r7, pc}

08008980 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008980:	b580      	push	{r7, lr}
 8008982:	b082      	sub	sp, #8
 8008984:	af00      	add	r7, sp, #0
 8008986:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800898e:	4618      	mov	r0, r3
 8008990:	f7fe fdee 	bl	8007570 <USBD_LL_DevConnected>
}
 8008994:	bf00      	nop
 8008996:	3708      	adds	r7, #8
 8008998:	46bd      	mov	sp, r7
 800899a:	bd80      	pop	{r7, pc}

0800899c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800899c:	b580      	push	{r7, lr}
 800899e:	b082      	sub	sp, #8
 80089a0:	af00      	add	r7, sp, #0
 80089a2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80089aa:	4618      	mov	r0, r3
 80089ac:	f7fe fdeb 	bl	8007586 <USBD_LL_DevDisconnected>
}
 80089b0:	bf00      	nop
 80089b2:	3708      	adds	r7, #8
 80089b4:	46bd      	mov	sp, r7
 80089b6:	bd80      	pop	{r7, pc}

080089b8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80089b8:	b580      	push	{r7, lr}
 80089ba:	b082      	sub	sp, #8
 80089bc:	af00      	add	r7, sp, #0
 80089be:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	781b      	ldrb	r3, [r3, #0]
 80089c4:	2b00      	cmp	r3, #0
 80089c6:	d13c      	bne.n	8008a42 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 80089c8:	4a20      	ldr	r2, [pc, #128]	; (8008a4c <USBD_LL_Init+0x94>)
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	4a1e      	ldr	r2, [pc, #120]	; (8008a4c <USBD_LL_Init+0x94>)
 80089d4:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80089d8:	4b1c      	ldr	r3, [pc, #112]	; (8008a4c <USBD_LL_Init+0x94>)
 80089da:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80089de:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 80089e0:	4b1a      	ldr	r3, [pc, #104]	; (8008a4c <USBD_LL_Init+0x94>)
 80089e2:	2206      	movs	r2, #6
 80089e4:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80089e6:	4b19      	ldr	r3, [pc, #100]	; (8008a4c <USBD_LL_Init+0x94>)
 80089e8:	2202      	movs	r2, #2
 80089ea:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80089ec:	4b17      	ldr	r3, [pc, #92]	; (8008a4c <USBD_LL_Init+0x94>)
 80089ee:	2200      	movs	r2, #0
 80089f0:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80089f2:	4b16      	ldr	r3, [pc, #88]	; (8008a4c <USBD_LL_Init+0x94>)
 80089f4:	2202      	movs	r2, #2
 80089f6:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80089f8:	4b14      	ldr	r3, [pc, #80]	; (8008a4c <USBD_LL_Init+0x94>)
 80089fa:	2200      	movs	r2, #0
 80089fc:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80089fe:	4b13      	ldr	r3, [pc, #76]	; (8008a4c <USBD_LL_Init+0x94>)
 8008a00:	2200      	movs	r2, #0
 8008a02:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8008a04:	4b11      	ldr	r3, [pc, #68]	; (8008a4c <USBD_LL_Init+0x94>)
 8008a06:	2200      	movs	r2, #0
 8008a08:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8008a0a:	4b10      	ldr	r3, [pc, #64]	; (8008a4c <USBD_LL_Init+0x94>)
 8008a0c:	2200      	movs	r2, #0
 8008a0e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8008a10:	4b0e      	ldr	r3, [pc, #56]	; (8008a4c <USBD_LL_Init+0x94>)
 8008a12:	2200      	movs	r2, #0
 8008a14:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8008a16:	480d      	ldr	r0, [pc, #52]	; (8008a4c <USBD_LL_Init+0x94>)
 8008a18:	f7f9 fab5 	bl	8001f86 <HAL_PCD_Init>
 8008a1c:	4603      	mov	r3, r0
 8008a1e:	2b00      	cmp	r3, #0
 8008a20:	d001      	beq.n	8008a26 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8008a22:	f7f8 f88d 	bl	8000b40 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8008a26:	2180      	movs	r1, #128	; 0x80
 8008a28:	4808      	ldr	r0, [pc, #32]	; (8008a4c <USBD_LL_Init+0x94>)
 8008a2a:	f7fa fc46 	bl	80032ba <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8008a2e:	2240      	movs	r2, #64	; 0x40
 8008a30:	2100      	movs	r1, #0
 8008a32:	4806      	ldr	r0, [pc, #24]	; (8008a4c <USBD_LL_Init+0x94>)
 8008a34:	f7fa fbfa 	bl	800322c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8008a38:	2280      	movs	r2, #128	; 0x80
 8008a3a:	2101      	movs	r1, #1
 8008a3c:	4803      	ldr	r0, [pc, #12]	; (8008a4c <USBD_LL_Init+0x94>)
 8008a3e:	f7fa fbf5 	bl	800322c <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8008a42:	2300      	movs	r3, #0
}
 8008a44:	4618      	mov	r0, r3
 8008a46:	3708      	adds	r7, #8
 8008a48:	46bd      	mov	sp, r7
 8008a4a:	bd80      	pop	{r7, pc}
 8008a4c:	200019f8 	.word	0x200019f8

08008a50 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8008a50:	b580      	push	{r7, lr}
 8008a52:	b084      	sub	sp, #16
 8008a54:	af00      	add	r7, sp, #0
 8008a56:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008a58:	2300      	movs	r3, #0
 8008a5a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008a5c:	2300      	movs	r3, #0
 8008a5e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008a66:	4618      	mov	r0, r3
 8008a68:	f7f9 fbb1 	bl	80021ce <HAL_PCD_Start>
 8008a6c:	4603      	mov	r3, r0
 8008a6e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008a70:	7bfb      	ldrb	r3, [r7, #15]
 8008a72:	4618      	mov	r0, r3
 8008a74:	f000 f990 	bl	8008d98 <USBD_Get_USB_Status>
 8008a78:	4603      	mov	r3, r0
 8008a7a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008a7c:	7bbb      	ldrb	r3, [r7, #14]
}
 8008a7e:	4618      	mov	r0, r3
 8008a80:	3710      	adds	r7, #16
 8008a82:	46bd      	mov	sp, r7
 8008a84:	bd80      	pop	{r7, pc}

08008a86 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8008a86:	b580      	push	{r7, lr}
 8008a88:	b084      	sub	sp, #16
 8008a8a:	af00      	add	r7, sp, #0
 8008a8c:	6078      	str	r0, [r7, #4]
 8008a8e:	4608      	mov	r0, r1
 8008a90:	4611      	mov	r1, r2
 8008a92:	461a      	mov	r2, r3
 8008a94:	4603      	mov	r3, r0
 8008a96:	70fb      	strb	r3, [r7, #3]
 8008a98:	460b      	mov	r3, r1
 8008a9a:	70bb      	strb	r3, [r7, #2]
 8008a9c:	4613      	mov	r3, r2
 8008a9e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008aa0:	2300      	movs	r3, #0
 8008aa2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008aa4:	2300      	movs	r3, #0
 8008aa6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8008aae:	78bb      	ldrb	r3, [r7, #2]
 8008ab0:	883a      	ldrh	r2, [r7, #0]
 8008ab2:	78f9      	ldrb	r1, [r7, #3]
 8008ab4:	f7f9 ffc2 	bl	8002a3c <HAL_PCD_EP_Open>
 8008ab8:	4603      	mov	r3, r0
 8008aba:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008abc:	7bfb      	ldrb	r3, [r7, #15]
 8008abe:	4618      	mov	r0, r3
 8008ac0:	f000 f96a 	bl	8008d98 <USBD_Get_USB_Status>
 8008ac4:	4603      	mov	r3, r0
 8008ac6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008ac8:	7bbb      	ldrb	r3, [r7, #14]
}
 8008aca:	4618      	mov	r0, r3
 8008acc:	3710      	adds	r7, #16
 8008ace:	46bd      	mov	sp, r7
 8008ad0:	bd80      	pop	{r7, pc}

08008ad2 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008ad2:	b580      	push	{r7, lr}
 8008ad4:	b084      	sub	sp, #16
 8008ad6:	af00      	add	r7, sp, #0
 8008ad8:	6078      	str	r0, [r7, #4]
 8008ada:	460b      	mov	r3, r1
 8008adc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008ade:	2300      	movs	r3, #0
 8008ae0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008ae2:	2300      	movs	r3, #0
 8008ae4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008aec:	78fa      	ldrb	r2, [r7, #3]
 8008aee:	4611      	mov	r1, r2
 8008af0:	4618      	mov	r0, r3
 8008af2:	f7fa f80b 	bl	8002b0c <HAL_PCD_EP_Close>
 8008af6:	4603      	mov	r3, r0
 8008af8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008afa:	7bfb      	ldrb	r3, [r7, #15]
 8008afc:	4618      	mov	r0, r3
 8008afe:	f000 f94b 	bl	8008d98 <USBD_Get_USB_Status>
 8008b02:	4603      	mov	r3, r0
 8008b04:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008b06:	7bbb      	ldrb	r3, [r7, #14]
}
 8008b08:	4618      	mov	r0, r3
 8008b0a:	3710      	adds	r7, #16
 8008b0c:	46bd      	mov	sp, r7
 8008b0e:	bd80      	pop	{r7, pc}

08008b10 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008b10:	b580      	push	{r7, lr}
 8008b12:	b084      	sub	sp, #16
 8008b14:	af00      	add	r7, sp, #0
 8008b16:	6078      	str	r0, [r7, #4]
 8008b18:	460b      	mov	r3, r1
 8008b1a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008b1c:	2300      	movs	r3, #0
 8008b1e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008b20:	2300      	movs	r3, #0
 8008b22:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008b2a:	78fa      	ldrb	r2, [r7, #3]
 8008b2c:	4611      	mov	r1, r2
 8008b2e:	4618      	mov	r0, r3
 8008b30:	f7fa f8e3 	bl	8002cfa <HAL_PCD_EP_SetStall>
 8008b34:	4603      	mov	r3, r0
 8008b36:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008b38:	7bfb      	ldrb	r3, [r7, #15]
 8008b3a:	4618      	mov	r0, r3
 8008b3c:	f000 f92c 	bl	8008d98 <USBD_Get_USB_Status>
 8008b40:	4603      	mov	r3, r0
 8008b42:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008b44:	7bbb      	ldrb	r3, [r7, #14]
}
 8008b46:	4618      	mov	r0, r3
 8008b48:	3710      	adds	r7, #16
 8008b4a:	46bd      	mov	sp, r7
 8008b4c:	bd80      	pop	{r7, pc}

08008b4e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008b4e:	b580      	push	{r7, lr}
 8008b50:	b084      	sub	sp, #16
 8008b52:	af00      	add	r7, sp, #0
 8008b54:	6078      	str	r0, [r7, #4]
 8008b56:	460b      	mov	r3, r1
 8008b58:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008b5a:	2300      	movs	r3, #0
 8008b5c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008b5e:	2300      	movs	r3, #0
 8008b60:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008b68:	78fa      	ldrb	r2, [r7, #3]
 8008b6a:	4611      	mov	r1, r2
 8008b6c:	4618      	mov	r0, r3
 8008b6e:	f7fa f928 	bl	8002dc2 <HAL_PCD_EP_ClrStall>
 8008b72:	4603      	mov	r3, r0
 8008b74:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008b76:	7bfb      	ldrb	r3, [r7, #15]
 8008b78:	4618      	mov	r0, r3
 8008b7a:	f000 f90d 	bl	8008d98 <USBD_Get_USB_Status>
 8008b7e:	4603      	mov	r3, r0
 8008b80:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008b82:	7bbb      	ldrb	r3, [r7, #14]
}
 8008b84:	4618      	mov	r0, r3
 8008b86:	3710      	adds	r7, #16
 8008b88:	46bd      	mov	sp, r7
 8008b8a:	bd80      	pop	{r7, pc}

08008b8c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008b8c:	b480      	push	{r7}
 8008b8e:	b085      	sub	sp, #20
 8008b90:	af00      	add	r7, sp, #0
 8008b92:	6078      	str	r0, [r7, #4]
 8008b94:	460b      	mov	r3, r1
 8008b96:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008b9e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8008ba0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008ba4:	2b00      	cmp	r3, #0
 8008ba6:	da0b      	bge.n	8008bc0 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8008ba8:	78fb      	ldrb	r3, [r7, #3]
 8008baa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008bae:	68f9      	ldr	r1, [r7, #12]
 8008bb0:	4613      	mov	r3, r2
 8008bb2:	00db      	lsls	r3, r3, #3
 8008bb4:	1a9b      	subs	r3, r3, r2
 8008bb6:	009b      	lsls	r3, r3, #2
 8008bb8:	440b      	add	r3, r1
 8008bba:	333e      	adds	r3, #62	; 0x3e
 8008bbc:	781b      	ldrb	r3, [r3, #0]
 8008bbe:	e00b      	b.n	8008bd8 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8008bc0:	78fb      	ldrb	r3, [r7, #3]
 8008bc2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008bc6:	68f9      	ldr	r1, [r7, #12]
 8008bc8:	4613      	mov	r3, r2
 8008bca:	00db      	lsls	r3, r3, #3
 8008bcc:	1a9b      	subs	r3, r3, r2
 8008bce:	009b      	lsls	r3, r3, #2
 8008bd0:	440b      	add	r3, r1
 8008bd2:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8008bd6:	781b      	ldrb	r3, [r3, #0]
  }
}
 8008bd8:	4618      	mov	r0, r3
 8008bda:	3714      	adds	r7, #20
 8008bdc:	46bd      	mov	sp, r7
 8008bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008be2:	4770      	bx	lr

08008be4 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8008be4:	b580      	push	{r7, lr}
 8008be6:	b084      	sub	sp, #16
 8008be8:	af00      	add	r7, sp, #0
 8008bea:	6078      	str	r0, [r7, #4]
 8008bec:	460b      	mov	r3, r1
 8008bee:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008bf0:	2300      	movs	r3, #0
 8008bf2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008bf4:	2300      	movs	r3, #0
 8008bf6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008bfe:	78fa      	ldrb	r2, [r7, #3]
 8008c00:	4611      	mov	r1, r2
 8008c02:	4618      	mov	r0, r3
 8008c04:	f7f9 fef5 	bl	80029f2 <HAL_PCD_SetAddress>
 8008c08:	4603      	mov	r3, r0
 8008c0a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008c0c:	7bfb      	ldrb	r3, [r7, #15]
 8008c0e:	4618      	mov	r0, r3
 8008c10:	f000 f8c2 	bl	8008d98 <USBD_Get_USB_Status>
 8008c14:	4603      	mov	r3, r0
 8008c16:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008c18:	7bbb      	ldrb	r3, [r7, #14]
}
 8008c1a:	4618      	mov	r0, r3
 8008c1c:	3710      	adds	r7, #16
 8008c1e:	46bd      	mov	sp, r7
 8008c20:	bd80      	pop	{r7, pc}

08008c22 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008c22:	b580      	push	{r7, lr}
 8008c24:	b086      	sub	sp, #24
 8008c26:	af00      	add	r7, sp, #0
 8008c28:	60f8      	str	r0, [r7, #12]
 8008c2a:	607a      	str	r2, [r7, #4]
 8008c2c:	603b      	str	r3, [r7, #0]
 8008c2e:	460b      	mov	r3, r1
 8008c30:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008c32:	2300      	movs	r3, #0
 8008c34:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008c36:	2300      	movs	r3, #0
 8008c38:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8008c3a:	68fb      	ldr	r3, [r7, #12]
 8008c3c:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8008c40:	7af9      	ldrb	r1, [r7, #11]
 8008c42:	683b      	ldr	r3, [r7, #0]
 8008c44:	687a      	ldr	r2, [r7, #4]
 8008c46:	f7fa f80e 	bl	8002c66 <HAL_PCD_EP_Transmit>
 8008c4a:	4603      	mov	r3, r0
 8008c4c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008c4e:	7dfb      	ldrb	r3, [r7, #23]
 8008c50:	4618      	mov	r0, r3
 8008c52:	f000 f8a1 	bl	8008d98 <USBD_Get_USB_Status>
 8008c56:	4603      	mov	r3, r0
 8008c58:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008c5a:	7dbb      	ldrb	r3, [r7, #22]
}
 8008c5c:	4618      	mov	r0, r3
 8008c5e:	3718      	adds	r7, #24
 8008c60:	46bd      	mov	sp, r7
 8008c62:	bd80      	pop	{r7, pc}

08008c64 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008c64:	b580      	push	{r7, lr}
 8008c66:	b086      	sub	sp, #24
 8008c68:	af00      	add	r7, sp, #0
 8008c6a:	60f8      	str	r0, [r7, #12]
 8008c6c:	607a      	str	r2, [r7, #4]
 8008c6e:	603b      	str	r3, [r7, #0]
 8008c70:	460b      	mov	r3, r1
 8008c72:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008c74:	2300      	movs	r3, #0
 8008c76:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008c78:	2300      	movs	r3, #0
 8008c7a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8008c7c:	68fb      	ldr	r3, [r7, #12]
 8008c7e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8008c82:	7af9      	ldrb	r1, [r7, #11]
 8008c84:	683b      	ldr	r3, [r7, #0]
 8008c86:	687a      	ldr	r2, [r7, #4]
 8008c88:	f7f9 ff8a 	bl	8002ba0 <HAL_PCD_EP_Receive>
 8008c8c:	4603      	mov	r3, r0
 8008c8e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008c90:	7dfb      	ldrb	r3, [r7, #23]
 8008c92:	4618      	mov	r0, r3
 8008c94:	f000 f880 	bl	8008d98 <USBD_Get_USB_Status>
 8008c98:	4603      	mov	r3, r0
 8008c9a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008c9c:	7dbb      	ldrb	r3, [r7, #22]
}
 8008c9e:	4618      	mov	r0, r3
 8008ca0:	3718      	adds	r7, #24
 8008ca2:	46bd      	mov	sp, r7
 8008ca4:	bd80      	pop	{r7, pc}

08008ca6 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008ca6:	b580      	push	{r7, lr}
 8008ca8:	b082      	sub	sp, #8
 8008caa:	af00      	add	r7, sp, #0
 8008cac:	6078      	str	r0, [r7, #4]
 8008cae:	460b      	mov	r3, r1
 8008cb0:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008cb8:	78fa      	ldrb	r2, [r7, #3]
 8008cba:	4611      	mov	r1, r2
 8008cbc:	4618      	mov	r0, r3
 8008cbe:	f7f9 ffba 	bl	8002c36 <HAL_PCD_EP_GetRxCount>
 8008cc2:	4603      	mov	r3, r0
}
 8008cc4:	4618      	mov	r0, r3
 8008cc6:	3708      	adds	r7, #8
 8008cc8:	46bd      	mov	sp, r7
 8008cca:	bd80      	pop	{r7, pc}

08008ccc <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8008ccc:	b580      	push	{r7, lr}
 8008cce:	b082      	sub	sp, #8
 8008cd0:	af00      	add	r7, sp, #0
 8008cd2:	6078      	str	r0, [r7, #4]
 8008cd4:	460b      	mov	r3, r1
 8008cd6:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 8008cd8:	78fb      	ldrb	r3, [r7, #3]
 8008cda:	2b00      	cmp	r3, #0
 8008cdc:	d002      	beq.n	8008ce4 <HAL_PCDEx_LPM_Callback+0x18>
 8008cde:	2b01      	cmp	r3, #1
 8008ce0:	d01f      	beq.n	8008d22 <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 8008ce2:	e03b      	b.n	8008d5c <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	6a1b      	ldr	r3, [r3, #32]
 8008ce8:	2b00      	cmp	r3, #0
 8008cea:	d007      	beq.n	8008cfc <HAL_PCDEx_LPM_Callback+0x30>
      SystemClock_Config();
 8008cec:	f7f7 fc18 	bl	8000520 <SystemClock_Config>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008cf0:	4b1c      	ldr	r3, [pc, #112]	; (8008d64 <HAL_PCDEx_LPM_Callback+0x98>)
 8008cf2:	691b      	ldr	r3, [r3, #16]
 8008cf4:	4a1b      	ldr	r2, [pc, #108]	; (8008d64 <HAL_PCDEx_LPM_Callback+0x98>)
 8008cf6:	f023 0306 	bic.w	r3, r3, #6
 8008cfa:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	681b      	ldr	r3, [r3, #0]
 8008d00:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008d04:	681b      	ldr	r3, [r3, #0]
 8008d06:	687a      	ldr	r2, [r7, #4]
 8008d08:	6812      	ldr	r2, [r2, #0]
 8008d0a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008d0e:	f023 0301 	bic.w	r3, r3, #1
 8008d12:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008d1a:	4618      	mov	r0, r3
 8008d1c:	f7fe fba2 	bl	8007464 <USBD_LL_Resume>
    break;
 8008d20:	e01c      	b.n	8008d5c <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	681b      	ldr	r3, [r3, #0]
 8008d26:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008d2a:	681b      	ldr	r3, [r3, #0]
 8008d2c:	687a      	ldr	r2, [r7, #4]
 8008d2e:	6812      	ldr	r2, [r2, #0]
 8008d30:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008d34:	f043 0301 	orr.w	r3, r3, #1
 8008d38:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008d40:	4618      	mov	r0, r3
 8008d42:	f7fe fb79 	bl	8007438 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	6a1b      	ldr	r3, [r3, #32]
 8008d4a:	2b00      	cmp	r3, #0
 8008d4c:	d005      	beq.n	8008d5a <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008d4e:	4b05      	ldr	r3, [pc, #20]	; (8008d64 <HAL_PCDEx_LPM_Callback+0x98>)
 8008d50:	691b      	ldr	r3, [r3, #16]
 8008d52:	4a04      	ldr	r2, [pc, #16]	; (8008d64 <HAL_PCDEx_LPM_Callback+0x98>)
 8008d54:	f043 0306 	orr.w	r3, r3, #6
 8008d58:	6113      	str	r3, [r2, #16]
    break;
 8008d5a:	bf00      	nop
}
 8008d5c:	bf00      	nop
 8008d5e:	3708      	adds	r7, #8
 8008d60:	46bd      	mov	sp, r7
 8008d62:	bd80      	pop	{r7, pc}
 8008d64:	e000ed00 	.word	0xe000ed00

08008d68 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8008d68:	b480      	push	{r7}
 8008d6a:	b083      	sub	sp, #12
 8008d6c:	af00      	add	r7, sp, #0
 8008d6e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8008d70:	4b03      	ldr	r3, [pc, #12]	; (8008d80 <USBD_static_malloc+0x18>)
}
 8008d72:	4618      	mov	r0, r3
 8008d74:	370c      	adds	r7, #12
 8008d76:	46bd      	mov	sp, r7
 8008d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d7c:	4770      	bx	lr
 8008d7e:	bf00      	nop
 8008d80:	200001b8 	.word	0x200001b8

08008d84 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8008d84:	b480      	push	{r7}
 8008d86:	b083      	sub	sp, #12
 8008d88:	af00      	add	r7, sp, #0
 8008d8a:	6078      	str	r0, [r7, #4]

}
 8008d8c:	bf00      	nop
 8008d8e:	370c      	adds	r7, #12
 8008d90:	46bd      	mov	sp, r7
 8008d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d96:	4770      	bx	lr

08008d98 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008d98:	b480      	push	{r7}
 8008d9a:	b085      	sub	sp, #20
 8008d9c:	af00      	add	r7, sp, #0
 8008d9e:	4603      	mov	r3, r0
 8008da0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008da2:	2300      	movs	r3, #0
 8008da4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008da6:	79fb      	ldrb	r3, [r7, #7]
 8008da8:	2b03      	cmp	r3, #3
 8008daa:	d817      	bhi.n	8008ddc <USBD_Get_USB_Status+0x44>
 8008dac:	a201      	add	r2, pc, #4	; (adr r2, 8008db4 <USBD_Get_USB_Status+0x1c>)
 8008dae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008db2:	bf00      	nop
 8008db4:	08008dc5 	.word	0x08008dc5
 8008db8:	08008dcb 	.word	0x08008dcb
 8008dbc:	08008dd1 	.word	0x08008dd1
 8008dc0:	08008dd7 	.word	0x08008dd7
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8008dc4:	2300      	movs	r3, #0
 8008dc6:	73fb      	strb	r3, [r7, #15]
    break;
 8008dc8:	e00b      	b.n	8008de2 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008dca:	2303      	movs	r3, #3
 8008dcc:	73fb      	strb	r3, [r7, #15]
    break;
 8008dce:	e008      	b.n	8008de2 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008dd0:	2301      	movs	r3, #1
 8008dd2:	73fb      	strb	r3, [r7, #15]
    break;
 8008dd4:	e005      	b.n	8008de2 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008dd6:	2303      	movs	r3, #3
 8008dd8:	73fb      	strb	r3, [r7, #15]
    break;
 8008dda:	e002      	b.n	8008de2 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8008ddc:	2303      	movs	r3, #3
 8008dde:	73fb      	strb	r3, [r7, #15]
    break;
 8008de0:	bf00      	nop
  }
  return usb_status;
 8008de2:	7bfb      	ldrb	r3, [r7, #15]
}
 8008de4:	4618      	mov	r0, r3
 8008de6:	3714      	adds	r7, #20
 8008de8:	46bd      	mov	sp, r7
 8008dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dee:	4770      	bx	lr

08008df0 <__libc_init_array>:
 8008df0:	b570      	push	{r4, r5, r6, lr}
 8008df2:	4d0d      	ldr	r5, [pc, #52]	; (8008e28 <__libc_init_array+0x38>)
 8008df4:	4c0d      	ldr	r4, [pc, #52]	; (8008e2c <__libc_init_array+0x3c>)
 8008df6:	1b64      	subs	r4, r4, r5
 8008df8:	10a4      	asrs	r4, r4, #2
 8008dfa:	2600      	movs	r6, #0
 8008dfc:	42a6      	cmp	r6, r4
 8008dfe:	d109      	bne.n	8008e14 <__libc_init_array+0x24>
 8008e00:	4d0b      	ldr	r5, [pc, #44]	; (8008e30 <__libc_init_array+0x40>)
 8008e02:	4c0c      	ldr	r4, [pc, #48]	; (8008e34 <__libc_init_array+0x44>)
 8008e04:	f000 f820 	bl	8008e48 <_init>
 8008e08:	1b64      	subs	r4, r4, r5
 8008e0a:	10a4      	asrs	r4, r4, #2
 8008e0c:	2600      	movs	r6, #0
 8008e0e:	42a6      	cmp	r6, r4
 8008e10:	d105      	bne.n	8008e1e <__libc_init_array+0x2e>
 8008e12:	bd70      	pop	{r4, r5, r6, pc}
 8008e14:	f855 3b04 	ldr.w	r3, [r5], #4
 8008e18:	4798      	blx	r3
 8008e1a:	3601      	adds	r6, #1
 8008e1c:	e7ee      	b.n	8008dfc <__libc_init_array+0xc>
 8008e1e:	f855 3b04 	ldr.w	r3, [r5], #4
 8008e22:	4798      	blx	r3
 8008e24:	3601      	adds	r6, #1
 8008e26:	e7f2      	b.n	8008e0e <__libc_init_array+0x1e>
 8008e28:	08008ef4 	.word	0x08008ef4
 8008e2c:	08008ef4 	.word	0x08008ef4
 8008e30:	08008ef4 	.word	0x08008ef4
 8008e34:	08008ef8 	.word	0x08008ef8

08008e38 <memset>:
 8008e38:	4402      	add	r2, r0
 8008e3a:	4603      	mov	r3, r0
 8008e3c:	4293      	cmp	r3, r2
 8008e3e:	d100      	bne.n	8008e42 <memset+0xa>
 8008e40:	4770      	bx	lr
 8008e42:	f803 1b01 	strb.w	r1, [r3], #1
 8008e46:	e7f9      	b.n	8008e3c <memset+0x4>

08008e48 <_init>:
 8008e48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e4a:	bf00      	nop
 8008e4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008e4e:	bc08      	pop	{r3}
 8008e50:	469e      	mov	lr, r3
 8008e52:	4770      	bx	lr

08008e54 <_fini>:
 8008e54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e56:	bf00      	nop
 8008e58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008e5a:	bc08      	pop	{r3}
 8008e5c:	469e      	mov	lr, r3
 8008e5e:	4770      	bx	lr
