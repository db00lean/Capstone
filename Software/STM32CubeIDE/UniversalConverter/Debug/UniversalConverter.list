
UniversalConverter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001b4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008ae0  080001b4  080001b4  000101b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000060  08008c94  08008c94  00018c94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008cf4  08008cf4  00020190  2**0
                  CONTENTS
  4 .ARM          00000008  08008cf4  08008cf4  00018cf4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008cfc  08008cfc  00020190  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008cfc  08008cfc  00018cfc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008d00  08008d00  00018d00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000190  20000000  08008d04  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020190  2**0
                  CONTENTS
 10 .bss          00001c60  20000190  20000190  00020190  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20001df0  20001df0  00020190  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020190  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001c20c  00000000  00000000  000201c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003b83  00000000  00000000  0003c3cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001160  00000000  00000000  0003ff50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000ff8  00000000  00000000  000410b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002cf5a  00000000  00000000  000420a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000171bd  00000000  00000000  0006f002  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000faebc  00000000  00000000  000861bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0018107b  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004774  00000000  00000000  001810d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b4 <__do_global_dtors_aux>:
 80001b4:	b510      	push	{r4, lr}
 80001b6:	4c05      	ldr	r4, [pc, #20]	; (80001cc <__do_global_dtors_aux+0x18>)
 80001b8:	7823      	ldrb	r3, [r4, #0]
 80001ba:	b933      	cbnz	r3, 80001ca <__do_global_dtors_aux+0x16>
 80001bc:	4b04      	ldr	r3, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x1c>)
 80001be:	b113      	cbz	r3, 80001c6 <__do_global_dtors_aux+0x12>
 80001c0:	4804      	ldr	r0, [pc, #16]	; (80001d4 <__do_global_dtors_aux+0x20>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	2301      	movs	r3, #1
 80001c8:	7023      	strb	r3, [r4, #0]
 80001ca:	bd10      	pop	{r4, pc}
 80001cc:	20000190 	.word	0x20000190
 80001d0:	00000000 	.word	0x00000000
 80001d4:	08008c7c 	.word	0x08008c7c

080001d8 <frame_dummy>:
 80001d8:	b508      	push	{r3, lr}
 80001da:	4b03      	ldr	r3, [pc, #12]	; (80001e8 <frame_dummy+0x10>)
 80001dc:	b11b      	cbz	r3, 80001e6 <frame_dummy+0xe>
 80001de:	4903      	ldr	r1, [pc, #12]	; (80001ec <frame_dummy+0x14>)
 80001e0:	4803      	ldr	r0, [pc, #12]	; (80001f0 <frame_dummy+0x18>)
 80001e2:	f3af 8000 	nop.w
 80001e6:	bd08      	pop	{r3, pc}
 80001e8:	00000000 	.word	0x00000000
 80001ec:	20000194 	.word	0x20000194
 80001f0:	08008c7c 	.word	0x08008c7c

080001f4 <__aeabi_uldivmod>:
 80001f4:	b953      	cbnz	r3, 800020c <__aeabi_uldivmod+0x18>
 80001f6:	b94a      	cbnz	r2, 800020c <__aeabi_uldivmod+0x18>
 80001f8:	2900      	cmp	r1, #0
 80001fa:	bf08      	it	eq
 80001fc:	2800      	cmpeq	r0, #0
 80001fe:	bf1c      	itt	ne
 8000200:	f04f 31ff 	movne.w	r1, #4294967295
 8000204:	f04f 30ff 	movne.w	r0, #4294967295
 8000208:	f000 b96e 	b.w	80004e8 <__aeabi_idiv0>
 800020c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000210:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000214:	f000 f806 	bl	8000224 <__udivmoddi4>
 8000218:	f8dd e004 	ldr.w	lr, [sp, #4]
 800021c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000220:	b004      	add	sp, #16
 8000222:	4770      	bx	lr

08000224 <__udivmoddi4>:
 8000224:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000228:	9d08      	ldr	r5, [sp, #32]
 800022a:	4604      	mov	r4, r0
 800022c:	468c      	mov	ip, r1
 800022e:	2b00      	cmp	r3, #0
 8000230:	f040 8083 	bne.w	800033a <__udivmoddi4+0x116>
 8000234:	428a      	cmp	r2, r1
 8000236:	4617      	mov	r7, r2
 8000238:	d947      	bls.n	80002ca <__udivmoddi4+0xa6>
 800023a:	fab2 f282 	clz	r2, r2
 800023e:	b142      	cbz	r2, 8000252 <__udivmoddi4+0x2e>
 8000240:	f1c2 0020 	rsb	r0, r2, #32
 8000244:	fa24 f000 	lsr.w	r0, r4, r0
 8000248:	4091      	lsls	r1, r2
 800024a:	4097      	lsls	r7, r2
 800024c:	ea40 0c01 	orr.w	ip, r0, r1
 8000250:	4094      	lsls	r4, r2
 8000252:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000256:	0c23      	lsrs	r3, r4, #16
 8000258:	fbbc f6f8 	udiv	r6, ip, r8
 800025c:	fa1f fe87 	uxth.w	lr, r7
 8000260:	fb08 c116 	mls	r1, r8, r6, ip
 8000264:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000268:	fb06 f10e 	mul.w	r1, r6, lr
 800026c:	4299      	cmp	r1, r3
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x60>
 8000270:	18fb      	adds	r3, r7, r3
 8000272:	f106 30ff 	add.w	r0, r6, #4294967295
 8000276:	f080 8119 	bcs.w	80004ac <__udivmoddi4+0x288>
 800027a:	4299      	cmp	r1, r3
 800027c:	f240 8116 	bls.w	80004ac <__udivmoddi4+0x288>
 8000280:	3e02      	subs	r6, #2
 8000282:	443b      	add	r3, r7
 8000284:	1a5b      	subs	r3, r3, r1
 8000286:	b2a4      	uxth	r4, r4
 8000288:	fbb3 f0f8 	udiv	r0, r3, r8
 800028c:	fb08 3310 	mls	r3, r8, r0, r3
 8000290:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000294:	fb00 fe0e 	mul.w	lr, r0, lr
 8000298:	45a6      	cmp	lr, r4
 800029a:	d909      	bls.n	80002b0 <__udivmoddi4+0x8c>
 800029c:	193c      	adds	r4, r7, r4
 800029e:	f100 33ff 	add.w	r3, r0, #4294967295
 80002a2:	f080 8105 	bcs.w	80004b0 <__udivmoddi4+0x28c>
 80002a6:	45a6      	cmp	lr, r4
 80002a8:	f240 8102 	bls.w	80004b0 <__udivmoddi4+0x28c>
 80002ac:	3802      	subs	r0, #2
 80002ae:	443c      	add	r4, r7
 80002b0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002b4:	eba4 040e 	sub.w	r4, r4, lr
 80002b8:	2600      	movs	r6, #0
 80002ba:	b11d      	cbz	r5, 80002c4 <__udivmoddi4+0xa0>
 80002bc:	40d4      	lsrs	r4, r2
 80002be:	2300      	movs	r3, #0
 80002c0:	e9c5 4300 	strd	r4, r3, [r5]
 80002c4:	4631      	mov	r1, r6
 80002c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ca:	b902      	cbnz	r2, 80002ce <__udivmoddi4+0xaa>
 80002cc:	deff      	udf	#255	; 0xff
 80002ce:	fab2 f282 	clz	r2, r2
 80002d2:	2a00      	cmp	r2, #0
 80002d4:	d150      	bne.n	8000378 <__udivmoddi4+0x154>
 80002d6:	1bcb      	subs	r3, r1, r7
 80002d8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002dc:	fa1f f887 	uxth.w	r8, r7
 80002e0:	2601      	movs	r6, #1
 80002e2:	fbb3 fcfe 	udiv	ip, r3, lr
 80002e6:	0c21      	lsrs	r1, r4, #16
 80002e8:	fb0e 331c 	mls	r3, lr, ip, r3
 80002ec:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002f0:	fb08 f30c 	mul.w	r3, r8, ip
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d907      	bls.n	8000308 <__udivmoddi4+0xe4>
 80002f8:	1879      	adds	r1, r7, r1
 80002fa:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002fe:	d202      	bcs.n	8000306 <__udivmoddi4+0xe2>
 8000300:	428b      	cmp	r3, r1
 8000302:	f200 80e9 	bhi.w	80004d8 <__udivmoddi4+0x2b4>
 8000306:	4684      	mov	ip, r0
 8000308:	1ac9      	subs	r1, r1, r3
 800030a:	b2a3      	uxth	r3, r4
 800030c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000310:	fb0e 1110 	mls	r1, lr, r0, r1
 8000314:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000318:	fb08 f800 	mul.w	r8, r8, r0
 800031c:	45a0      	cmp	r8, r4
 800031e:	d907      	bls.n	8000330 <__udivmoddi4+0x10c>
 8000320:	193c      	adds	r4, r7, r4
 8000322:	f100 33ff 	add.w	r3, r0, #4294967295
 8000326:	d202      	bcs.n	800032e <__udivmoddi4+0x10a>
 8000328:	45a0      	cmp	r8, r4
 800032a:	f200 80d9 	bhi.w	80004e0 <__udivmoddi4+0x2bc>
 800032e:	4618      	mov	r0, r3
 8000330:	eba4 0408 	sub.w	r4, r4, r8
 8000334:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000338:	e7bf      	b.n	80002ba <__udivmoddi4+0x96>
 800033a:	428b      	cmp	r3, r1
 800033c:	d909      	bls.n	8000352 <__udivmoddi4+0x12e>
 800033e:	2d00      	cmp	r5, #0
 8000340:	f000 80b1 	beq.w	80004a6 <__udivmoddi4+0x282>
 8000344:	2600      	movs	r6, #0
 8000346:	e9c5 0100 	strd	r0, r1, [r5]
 800034a:	4630      	mov	r0, r6
 800034c:	4631      	mov	r1, r6
 800034e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000352:	fab3 f683 	clz	r6, r3
 8000356:	2e00      	cmp	r6, #0
 8000358:	d14a      	bne.n	80003f0 <__udivmoddi4+0x1cc>
 800035a:	428b      	cmp	r3, r1
 800035c:	d302      	bcc.n	8000364 <__udivmoddi4+0x140>
 800035e:	4282      	cmp	r2, r0
 8000360:	f200 80b8 	bhi.w	80004d4 <__udivmoddi4+0x2b0>
 8000364:	1a84      	subs	r4, r0, r2
 8000366:	eb61 0103 	sbc.w	r1, r1, r3
 800036a:	2001      	movs	r0, #1
 800036c:	468c      	mov	ip, r1
 800036e:	2d00      	cmp	r5, #0
 8000370:	d0a8      	beq.n	80002c4 <__udivmoddi4+0xa0>
 8000372:	e9c5 4c00 	strd	r4, ip, [r5]
 8000376:	e7a5      	b.n	80002c4 <__udivmoddi4+0xa0>
 8000378:	f1c2 0320 	rsb	r3, r2, #32
 800037c:	fa20 f603 	lsr.w	r6, r0, r3
 8000380:	4097      	lsls	r7, r2
 8000382:	fa01 f002 	lsl.w	r0, r1, r2
 8000386:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800038a:	40d9      	lsrs	r1, r3
 800038c:	4330      	orrs	r0, r6
 800038e:	0c03      	lsrs	r3, r0, #16
 8000390:	fbb1 f6fe 	udiv	r6, r1, lr
 8000394:	fa1f f887 	uxth.w	r8, r7
 8000398:	fb0e 1116 	mls	r1, lr, r6, r1
 800039c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003a0:	fb06 f108 	mul.w	r1, r6, r8
 80003a4:	4299      	cmp	r1, r3
 80003a6:	fa04 f402 	lsl.w	r4, r4, r2
 80003aa:	d909      	bls.n	80003c0 <__udivmoddi4+0x19c>
 80003ac:	18fb      	adds	r3, r7, r3
 80003ae:	f106 3cff 	add.w	ip, r6, #4294967295
 80003b2:	f080 808d 	bcs.w	80004d0 <__udivmoddi4+0x2ac>
 80003b6:	4299      	cmp	r1, r3
 80003b8:	f240 808a 	bls.w	80004d0 <__udivmoddi4+0x2ac>
 80003bc:	3e02      	subs	r6, #2
 80003be:	443b      	add	r3, r7
 80003c0:	1a5b      	subs	r3, r3, r1
 80003c2:	b281      	uxth	r1, r0
 80003c4:	fbb3 f0fe 	udiv	r0, r3, lr
 80003c8:	fb0e 3310 	mls	r3, lr, r0, r3
 80003cc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003d0:	fb00 f308 	mul.w	r3, r0, r8
 80003d4:	428b      	cmp	r3, r1
 80003d6:	d907      	bls.n	80003e8 <__udivmoddi4+0x1c4>
 80003d8:	1879      	adds	r1, r7, r1
 80003da:	f100 3cff 	add.w	ip, r0, #4294967295
 80003de:	d273      	bcs.n	80004c8 <__udivmoddi4+0x2a4>
 80003e0:	428b      	cmp	r3, r1
 80003e2:	d971      	bls.n	80004c8 <__udivmoddi4+0x2a4>
 80003e4:	3802      	subs	r0, #2
 80003e6:	4439      	add	r1, r7
 80003e8:	1acb      	subs	r3, r1, r3
 80003ea:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003ee:	e778      	b.n	80002e2 <__udivmoddi4+0xbe>
 80003f0:	f1c6 0c20 	rsb	ip, r6, #32
 80003f4:	fa03 f406 	lsl.w	r4, r3, r6
 80003f8:	fa22 f30c 	lsr.w	r3, r2, ip
 80003fc:	431c      	orrs	r4, r3
 80003fe:	fa20 f70c 	lsr.w	r7, r0, ip
 8000402:	fa01 f306 	lsl.w	r3, r1, r6
 8000406:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 800040a:	fa21 f10c 	lsr.w	r1, r1, ip
 800040e:	431f      	orrs	r7, r3
 8000410:	0c3b      	lsrs	r3, r7, #16
 8000412:	fbb1 f9fe 	udiv	r9, r1, lr
 8000416:	fa1f f884 	uxth.w	r8, r4
 800041a:	fb0e 1119 	mls	r1, lr, r9, r1
 800041e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000422:	fb09 fa08 	mul.w	sl, r9, r8
 8000426:	458a      	cmp	sl, r1
 8000428:	fa02 f206 	lsl.w	r2, r2, r6
 800042c:	fa00 f306 	lsl.w	r3, r0, r6
 8000430:	d908      	bls.n	8000444 <__udivmoddi4+0x220>
 8000432:	1861      	adds	r1, r4, r1
 8000434:	f109 30ff 	add.w	r0, r9, #4294967295
 8000438:	d248      	bcs.n	80004cc <__udivmoddi4+0x2a8>
 800043a:	458a      	cmp	sl, r1
 800043c:	d946      	bls.n	80004cc <__udivmoddi4+0x2a8>
 800043e:	f1a9 0902 	sub.w	r9, r9, #2
 8000442:	4421      	add	r1, r4
 8000444:	eba1 010a 	sub.w	r1, r1, sl
 8000448:	b2bf      	uxth	r7, r7
 800044a:	fbb1 f0fe 	udiv	r0, r1, lr
 800044e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000452:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000456:	fb00 f808 	mul.w	r8, r0, r8
 800045a:	45b8      	cmp	r8, r7
 800045c:	d907      	bls.n	800046e <__udivmoddi4+0x24a>
 800045e:	19e7      	adds	r7, r4, r7
 8000460:	f100 31ff 	add.w	r1, r0, #4294967295
 8000464:	d22e      	bcs.n	80004c4 <__udivmoddi4+0x2a0>
 8000466:	45b8      	cmp	r8, r7
 8000468:	d92c      	bls.n	80004c4 <__udivmoddi4+0x2a0>
 800046a:	3802      	subs	r0, #2
 800046c:	4427      	add	r7, r4
 800046e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000472:	eba7 0708 	sub.w	r7, r7, r8
 8000476:	fba0 8902 	umull	r8, r9, r0, r2
 800047a:	454f      	cmp	r7, r9
 800047c:	46c6      	mov	lr, r8
 800047e:	4649      	mov	r1, r9
 8000480:	d31a      	bcc.n	80004b8 <__udivmoddi4+0x294>
 8000482:	d017      	beq.n	80004b4 <__udivmoddi4+0x290>
 8000484:	b15d      	cbz	r5, 800049e <__udivmoddi4+0x27a>
 8000486:	ebb3 020e 	subs.w	r2, r3, lr
 800048a:	eb67 0701 	sbc.w	r7, r7, r1
 800048e:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000492:	40f2      	lsrs	r2, r6
 8000494:	ea4c 0202 	orr.w	r2, ip, r2
 8000498:	40f7      	lsrs	r7, r6
 800049a:	e9c5 2700 	strd	r2, r7, [r5]
 800049e:	2600      	movs	r6, #0
 80004a0:	4631      	mov	r1, r6
 80004a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004a6:	462e      	mov	r6, r5
 80004a8:	4628      	mov	r0, r5
 80004aa:	e70b      	b.n	80002c4 <__udivmoddi4+0xa0>
 80004ac:	4606      	mov	r6, r0
 80004ae:	e6e9      	b.n	8000284 <__udivmoddi4+0x60>
 80004b0:	4618      	mov	r0, r3
 80004b2:	e6fd      	b.n	80002b0 <__udivmoddi4+0x8c>
 80004b4:	4543      	cmp	r3, r8
 80004b6:	d2e5      	bcs.n	8000484 <__udivmoddi4+0x260>
 80004b8:	ebb8 0e02 	subs.w	lr, r8, r2
 80004bc:	eb69 0104 	sbc.w	r1, r9, r4
 80004c0:	3801      	subs	r0, #1
 80004c2:	e7df      	b.n	8000484 <__udivmoddi4+0x260>
 80004c4:	4608      	mov	r0, r1
 80004c6:	e7d2      	b.n	800046e <__udivmoddi4+0x24a>
 80004c8:	4660      	mov	r0, ip
 80004ca:	e78d      	b.n	80003e8 <__udivmoddi4+0x1c4>
 80004cc:	4681      	mov	r9, r0
 80004ce:	e7b9      	b.n	8000444 <__udivmoddi4+0x220>
 80004d0:	4666      	mov	r6, ip
 80004d2:	e775      	b.n	80003c0 <__udivmoddi4+0x19c>
 80004d4:	4630      	mov	r0, r6
 80004d6:	e74a      	b.n	800036e <__udivmoddi4+0x14a>
 80004d8:	f1ac 0c02 	sub.w	ip, ip, #2
 80004dc:	4439      	add	r1, r7
 80004de:	e713      	b.n	8000308 <__udivmoddi4+0xe4>
 80004e0:	3802      	subs	r0, #2
 80004e2:	443c      	add	r4, r7
 80004e4:	e724      	b.n	8000330 <__udivmoddi4+0x10c>
 80004e6:	bf00      	nop

080004e8 <__aeabi_idiv0>:
 80004e8:	4770      	bx	lr
 80004ea:	bf00      	nop

080004ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004ec:	b580      	push	{r7, lr}
 80004ee:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004f0:	f000 fd58 	bl	8000fa4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004f4:	f000 f814 	bl	8000520 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004f8:	f000 f9be 	bl	8000878 <MX_GPIO_Init>
  MX_FMC_Init();
 80004fc:	f000 f95a 	bl	80007b4 <MX_FMC_Init>
  MX_USB_DEVICE_Init();
 8000500:	f007 fe26 	bl	8008150 <MX_USB_DEVICE_Init>
  MX_LTDC_Init();
 8000504:	f000 f87a 	bl	80005fc <MX_LTDC_Init>
  MX_UART4_Init();
 8000508:	f000 f92a 	bl	8000760 <MX_UART4_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart4, rx_buff, sizeof(rx_buff));
 800050c:	2201      	movs	r2, #1
 800050e:	4902      	ldr	r1, [pc, #8]	; (8000518 <main+0x2c>)
 8000510:	4802      	ldr	r0, [pc, #8]	; (800051c <main+0x30>)
 8000512:	f003 fe32 	bl	800417a <HAL_UART_Receive_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000516:	e7fe      	b.n	8000516 <main+0x2a>
 8000518:	200003d4 	.word	0x200003d4
 800051c:	200004d0 	.word	0x200004d0

08000520 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000520:	b580      	push	{r7, lr}
 8000522:	b094      	sub	sp, #80	; 0x50
 8000524:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000526:	f107 031c 	add.w	r3, r7, #28
 800052a:	2234      	movs	r2, #52	; 0x34
 800052c:	2100      	movs	r1, #0
 800052e:	4618      	mov	r0, r3
 8000530:	f008 fb9c 	bl	8008c6c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000534:	f107 0308 	add.w	r3, r7, #8
 8000538:	2200      	movs	r2, #0
 800053a:	601a      	str	r2, [r3, #0]
 800053c:	605a      	str	r2, [r3, #4]
 800053e:	609a      	str	r2, [r3, #8]
 8000540:	60da      	str	r2, [r3, #12]
 8000542:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000544:	2300      	movs	r3, #0
 8000546:	607b      	str	r3, [r7, #4]
 8000548:	4b2a      	ldr	r3, [pc, #168]	; (80005f4 <SystemClock_Config+0xd4>)
 800054a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800054c:	4a29      	ldr	r2, [pc, #164]	; (80005f4 <SystemClock_Config+0xd4>)
 800054e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000552:	6413      	str	r3, [r2, #64]	; 0x40
 8000554:	4b27      	ldr	r3, [pc, #156]	; (80005f4 <SystemClock_Config+0xd4>)
 8000556:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000558:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800055c:	607b      	str	r3, [r7, #4]
 800055e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000560:	2300      	movs	r3, #0
 8000562:	603b      	str	r3, [r7, #0]
 8000564:	4b24      	ldr	r3, [pc, #144]	; (80005f8 <SystemClock_Config+0xd8>)
 8000566:	681b      	ldr	r3, [r3, #0]
 8000568:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800056c:	4a22      	ldr	r2, [pc, #136]	; (80005f8 <SystemClock_Config+0xd8>)
 800056e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000572:	6013      	str	r3, [r2, #0]
 8000574:	4b20      	ldr	r3, [pc, #128]	; (80005f8 <SystemClock_Config+0xd8>)
 8000576:	681b      	ldr	r3, [r3, #0]
 8000578:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800057c:	603b      	str	r3, [r7, #0]
 800057e:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000580:	2301      	movs	r3, #1
 8000582:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000584:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000588:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800058a:	2302      	movs	r3, #2
 800058c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800058e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000592:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000594:	2319      	movs	r3, #25
 8000596:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 192;
 8000598:	23c0      	movs	r3, #192	; 0xc0
 800059a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800059c:	2302      	movs	r3, #2
 800059e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80005a0:	2304      	movs	r3, #4
 80005a2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80005a4:	2302      	movs	r3, #2
 80005a6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005a8:	f107 031c 	add.w	r3, r7, #28
 80005ac:	4618      	mov	r0, r3
 80005ae:	f003 fa3d 	bl	8003a2c <HAL_RCC_OscConfig>
 80005b2:	4603      	mov	r3, r0
 80005b4:	2b00      	cmp	r3, #0
 80005b6:	d001      	beq.n	80005bc <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80005b8:	f000 fa38 	bl	8000a2c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005bc:	230f      	movs	r3, #15
 80005be:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005c0:	2302      	movs	r3, #2
 80005c2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 80005c4:	2380      	movs	r3, #128	; 0x80
 80005c6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80005c8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80005cc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80005ce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005d2:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80005d4:	f107 0308 	add.w	r3, r7, #8
 80005d8:	2101      	movs	r1, #1
 80005da:	4618      	mov	r0, r3
 80005dc:	f002 fe18 	bl	8003210 <HAL_RCC_ClockConfig>
 80005e0:	4603      	mov	r3, r0
 80005e2:	2b00      	cmp	r3, #0
 80005e4:	d001      	beq.n	80005ea <SystemClock_Config+0xca>
  {
    Error_Handler();
 80005e6:	f000 fa21 	bl	8000a2c <Error_Handler>
  }
}
 80005ea:	bf00      	nop
 80005ec:	3750      	adds	r7, #80	; 0x50
 80005ee:	46bd      	mov	sp, r7
 80005f0:	bd80      	pop	{r7, pc}
 80005f2:	bf00      	nop
 80005f4:	40023800 	.word	0x40023800
 80005f8:	40007000 	.word	0x40007000

080005fc <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	b09a      	sub	sp, #104	; 0x68
 8000600:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8000602:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000606:	2234      	movs	r2, #52	; 0x34
 8000608:	2100      	movs	r1, #0
 800060a:	4618      	mov	r0, r3
 800060c:	f008 fb2e 	bl	8008c6c <memset>
  LTDC_LayerCfgTypeDef pLayerCfg1 = {0};
 8000610:	463b      	mov	r3, r7
 8000612:	2234      	movs	r2, #52	; 0x34
 8000614:	2100      	movs	r1, #0
 8000616:	4618      	mov	r0, r3
 8000618:	f008 fb28 	bl	8008c6c <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 800061c:	4b4e      	ldr	r3, [pc, #312]	; (8000758 <MX_LTDC_Init+0x15c>)
 800061e:	4a4f      	ldr	r2, [pc, #316]	; (800075c <MX_LTDC_Init+0x160>)
 8000620:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8000622:	4b4d      	ldr	r3, [pc, #308]	; (8000758 <MX_LTDC_Init+0x15c>)
 8000624:	2200      	movs	r2, #0
 8000626:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8000628:	4b4b      	ldr	r3, [pc, #300]	; (8000758 <MX_LTDC_Init+0x15c>)
 800062a:	2200      	movs	r2, #0
 800062c:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 800062e:	4b4a      	ldr	r3, [pc, #296]	; (8000758 <MX_LTDC_Init+0x15c>)
 8000630:	2200      	movs	r2, #0
 8000632:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8000634:	4b48      	ldr	r3, [pc, #288]	; (8000758 <MX_LTDC_Init+0x15c>)
 8000636:	2200      	movs	r2, #0
 8000638:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 47;
 800063a:	4b47      	ldr	r3, [pc, #284]	; (8000758 <MX_LTDC_Init+0x15c>)
 800063c:	222f      	movs	r2, #47	; 0x2f
 800063e:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 0;
 8000640:	4b45      	ldr	r3, [pc, #276]	; (8000758 <MX_LTDC_Init+0x15c>)
 8000642:	2200      	movs	r2, #0
 8000644:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 87;
 8000646:	4b44      	ldr	r3, [pc, #272]	; (8000758 <MX_LTDC_Init+0x15c>)
 8000648:	2257      	movs	r2, #87	; 0x57
 800064a:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 31;
 800064c:	4b42      	ldr	r3, [pc, #264]	; (8000758 <MX_LTDC_Init+0x15c>)
 800064e:	221f      	movs	r2, #31
 8000650:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 887;
 8000652:	4b41      	ldr	r3, [pc, #260]	; (8000758 <MX_LTDC_Init+0x15c>)
 8000654:	f240 3277 	movw	r2, #887	; 0x377
 8000658:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 511;
 800065a:	4b3f      	ldr	r3, [pc, #252]	; (8000758 <MX_LTDC_Init+0x15c>)
 800065c:	f240 12ff 	movw	r2, #511	; 0x1ff
 8000660:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 927;
 8000662:	4b3d      	ldr	r3, [pc, #244]	; (8000758 <MX_LTDC_Init+0x15c>)
 8000664:	f240 329f 	movw	r2, #927	; 0x39f
 8000668:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 524;
 800066a:	4b3b      	ldr	r3, [pc, #236]	; (8000758 <MX_LTDC_Init+0x15c>)
 800066c:	f44f 7203 	mov.w	r2, #524	; 0x20c
 8000670:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 50;
 8000672:	4b39      	ldr	r3, [pc, #228]	; (8000758 <MX_LTDC_Init+0x15c>)
 8000674:	2232      	movs	r2, #50	; 0x32
 8000676:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 120;
 800067a:	4b37      	ldr	r3, [pc, #220]	; (8000758 <MX_LTDC_Init+0x15c>)
 800067c:	2278      	movs	r2, #120	; 0x78
 800067e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 255;
 8000682:	4b35      	ldr	r3, [pc, #212]	; (8000758 <MX_LTDC_Init+0x15c>)
 8000684:	22ff      	movs	r2, #255	; 0xff
 8000686:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 800068a:	4833      	ldr	r0, [pc, #204]	; (8000758 <MX_LTDC_Init+0x15c>)
 800068c:	f001 f88a 	bl	80017a4 <HAL_LTDC_Init>
 8000690:	4603      	mov	r3, r0
 8000692:	2b00      	cmp	r3, #0
 8000694:	d001      	beq.n	800069a <MX_LTDC_Init+0x9e>
  {
    Error_Handler();
 8000696:	f000 f9c9 	bl	8000a2c <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 800069a:	2300      	movs	r3, #0
 800069c:	637b      	str	r3, [r7, #52]	; 0x34
  pLayerCfg.WindowX1 = 0;
 800069e:	2300      	movs	r3, #0
 80006a0:	63bb      	str	r3, [r7, #56]	; 0x38
  pLayerCfg.WindowY0 = 0;
 80006a2:	2300      	movs	r3, #0
 80006a4:	63fb      	str	r3, [r7, #60]	; 0x3c
  pLayerCfg.WindowY1 = 0;
 80006a6:	2300      	movs	r3, #0
 80006a8:	643b      	str	r3, [r7, #64]	; 0x40
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 80006aa:	2300      	movs	r3, #0
 80006ac:	647b      	str	r3, [r7, #68]	; 0x44
  pLayerCfg.Alpha = 0;
 80006ae:	2300      	movs	r3, #0
 80006b0:	64bb      	str	r3, [r7, #72]	; 0x48
  pLayerCfg.Alpha0 = 0;
 80006b2:	2300      	movs	r3, #0
 80006b4:	64fb      	str	r3, [r7, #76]	; 0x4c
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 80006b6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80006ba:	653b      	str	r3, [r7, #80]	; 0x50
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 80006bc:	2305      	movs	r3, #5
 80006be:	657b      	str	r3, [r7, #84]	; 0x54
  pLayerCfg.FBStartAdress = 0;
 80006c0:	2300      	movs	r3, #0
 80006c2:	65bb      	str	r3, [r7, #88]	; 0x58
  pLayerCfg.ImageWidth = 0;
 80006c4:	2300      	movs	r3, #0
 80006c6:	65fb      	str	r3, [r7, #92]	; 0x5c
  pLayerCfg.ImageHeight = 0;
 80006c8:	2300      	movs	r3, #0
 80006ca:	663b      	str	r3, [r7, #96]	; 0x60
  pLayerCfg.Backcolor.Blue = 0;
 80006cc:	2300      	movs	r3, #0
 80006ce:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  pLayerCfg.Backcolor.Green = 0;
 80006d2:	2300      	movs	r3, #0
 80006d4:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
  pLayerCfg.Backcolor.Red = 0;
 80006d8:	2300      	movs	r3, #0
 80006da:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 80006de:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80006e2:	2200      	movs	r2, #0
 80006e4:	4619      	mov	r1, r3
 80006e6:	481c      	ldr	r0, [pc, #112]	; (8000758 <MX_LTDC_Init+0x15c>)
 80006e8:	f001 f9ee 	bl	8001ac8 <HAL_LTDC_ConfigLayer>
 80006ec:	4603      	mov	r3, r0
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	d001      	beq.n	80006f6 <MX_LTDC_Init+0xfa>
  {
    Error_Handler();
 80006f2:	f000 f99b 	bl	8000a2c <Error_Handler>
  }
  pLayerCfg1.WindowX0 = 0;
 80006f6:	2300      	movs	r3, #0
 80006f8:	603b      	str	r3, [r7, #0]
  pLayerCfg1.WindowX1 = 0;
 80006fa:	2300      	movs	r3, #0
 80006fc:	607b      	str	r3, [r7, #4]
  pLayerCfg1.WindowY0 = 0;
 80006fe:	2300      	movs	r3, #0
 8000700:	60bb      	str	r3, [r7, #8]
  pLayerCfg1.WindowY1 = 0;
 8000702:	2300      	movs	r3, #0
 8000704:	60fb      	str	r3, [r7, #12]
  pLayerCfg1.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8000706:	2300      	movs	r3, #0
 8000708:	613b      	str	r3, [r7, #16]
  pLayerCfg1.Alpha = 0;
 800070a:	2300      	movs	r3, #0
 800070c:	617b      	str	r3, [r7, #20]
  pLayerCfg1.Alpha0 = 0;
 800070e:	2300      	movs	r3, #0
 8000710:	61bb      	str	r3, [r7, #24]
  pLayerCfg1.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8000712:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000716:	61fb      	str	r3, [r7, #28]
  pLayerCfg1.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8000718:	2305      	movs	r3, #5
 800071a:	623b      	str	r3, [r7, #32]
  pLayerCfg1.FBStartAdress = 0;
 800071c:	2300      	movs	r3, #0
 800071e:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg1.ImageWidth = 0;
 8000720:	2300      	movs	r3, #0
 8000722:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg1.ImageHeight = 0;
 8000724:	2300      	movs	r3, #0
 8000726:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg1.Backcolor.Blue = 0;
 8000728:	2300      	movs	r3, #0
 800072a:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  pLayerCfg1.Backcolor.Green = 0;
 800072e:	2300      	movs	r3, #0
 8000730:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  pLayerCfg1.Backcolor.Red = 0;
 8000734:	2300      	movs	r3, #0
 8000736:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg1, 1) != HAL_OK)
 800073a:	463b      	mov	r3, r7
 800073c:	2201      	movs	r2, #1
 800073e:	4619      	mov	r1, r3
 8000740:	4805      	ldr	r0, [pc, #20]	; (8000758 <MX_LTDC_Init+0x15c>)
 8000742:	f001 f9c1 	bl	8001ac8 <HAL_LTDC_ConfigLayer>
 8000746:	4603      	mov	r3, r0
 8000748:	2b00      	cmp	r3, #0
 800074a:	d001      	beq.n	8000750 <MX_LTDC_Init+0x154>
  {
    Error_Handler();
 800074c:	f000 f96e 	bl	8000a2c <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8000750:	bf00      	nop
 8000752:	3768      	adds	r7, #104	; 0x68
 8000754:	46bd      	mov	sp, r7
 8000756:	bd80      	pop	{r7, pc}
 8000758:	20000428 	.word	0x20000428
 800075c:	40016800 	.word	0x40016800

08000760 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8000764:	4b11      	ldr	r3, [pc, #68]	; (80007ac <MX_UART4_Init+0x4c>)
 8000766:	4a12      	ldr	r2, [pc, #72]	; (80007b0 <MX_UART4_Init+0x50>)
 8000768:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 9600;
 800076a:	4b10      	ldr	r3, [pc, #64]	; (80007ac <MX_UART4_Init+0x4c>)
 800076c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000770:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8000772:	4b0e      	ldr	r3, [pc, #56]	; (80007ac <MX_UART4_Init+0x4c>)
 8000774:	2200      	movs	r2, #0
 8000776:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000778:	4b0c      	ldr	r3, [pc, #48]	; (80007ac <MX_UART4_Init+0x4c>)
 800077a:	2200      	movs	r2, #0
 800077c:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800077e:	4b0b      	ldr	r3, [pc, #44]	; (80007ac <MX_UART4_Init+0x4c>)
 8000780:	2200      	movs	r2, #0
 8000782:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8000784:	4b09      	ldr	r3, [pc, #36]	; (80007ac <MX_UART4_Init+0x4c>)
 8000786:	220c      	movs	r2, #12
 8000788:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800078a:	4b08      	ldr	r3, [pc, #32]	; (80007ac <MX_UART4_Init+0x4c>)
 800078c:	2200      	movs	r2, #0
 800078e:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000790:	4b06      	ldr	r3, [pc, #24]	; (80007ac <MX_UART4_Init+0x4c>)
 8000792:	2200      	movs	r2, #0
 8000794:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8000796:	4805      	ldr	r0, [pc, #20]	; (80007ac <MX_UART4_Init+0x4c>)
 8000798:	f003 fc10 	bl	8003fbc <HAL_UART_Init>
 800079c:	4603      	mov	r3, r0
 800079e:	2b00      	cmp	r3, #0
 80007a0:	d001      	beq.n	80007a6 <MX_UART4_Init+0x46>
  {
    Error_Handler();
 80007a2:	f000 f943 	bl	8000a2c <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 80007a6:	bf00      	nop
 80007a8:	bd80      	pop	{r7, pc}
 80007aa:	bf00      	nop
 80007ac:	200004d0 	.word	0x200004d0
 80007b0:	40004c00 	.word	0x40004c00

080007b4 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	b088      	sub	sp, #32
 80007b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_NORSRAM_TimingTypeDef Timing = {0};
 80007ba:	1d3b      	adds	r3, r7, #4
 80007bc:	2200      	movs	r2, #0
 80007be:	601a      	str	r2, [r3, #0]
 80007c0:	605a      	str	r2, [r3, #4]
 80007c2:	609a      	str	r2, [r3, #8]
 80007c4:	60da      	str	r2, [r3, #12]
 80007c6:	611a      	str	r2, [r3, #16]
 80007c8:	615a      	str	r2, [r3, #20]
 80007ca:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FMC_NORSRAM_DEVICE;
 80007cc:	4b28      	ldr	r3, [pc, #160]	; (8000870 <MX_FMC_Init+0xbc>)
 80007ce:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 80007d2:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FMC_NORSRAM_EXTENDED_DEVICE;
 80007d4:	4b26      	ldr	r3, [pc, #152]	; (8000870 <MX_FMC_Init+0xbc>)
 80007d6:	4a27      	ldr	r2, [pc, #156]	; (8000874 <MX_FMC_Init+0xc0>)
 80007d8:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FMC_NORSRAM_BANK2;
 80007da:	4b25      	ldr	r3, [pc, #148]	; (8000870 <MX_FMC_Init+0xbc>)
 80007dc:	2202      	movs	r2, #2
 80007de:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FMC_DATA_ADDRESS_MUX_DISABLE;
 80007e0:	4b23      	ldr	r3, [pc, #140]	; (8000870 <MX_FMC_Init+0xbc>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FMC_MEMORY_TYPE_SRAM;
 80007e6:	4b22      	ldr	r3, [pc, #136]	; (8000870 <MX_FMC_Init+0xbc>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FMC_NORSRAM_MEM_BUS_WIDTH_16;
 80007ec:	4b20      	ldr	r3, [pc, #128]	; (8000870 <MX_FMC_Init+0xbc>)
 80007ee:	2210      	movs	r2, #16
 80007f0:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FMC_BURST_ACCESS_MODE_DISABLE;
 80007f2:	4b1f      	ldr	r3, [pc, #124]	; (8000870 <MX_FMC_Init+0xbc>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FMC_WAIT_SIGNAL_POLARITY_LOW;
 80007f8:	4b1d      	ldr	r3, [pc, #116]	; (8000870 <MX_FMC_Init+0xbc>)
 80007fa:	2200      	movs	r2, #0
 80007fc:	61da      	str	r2, [r3, #28]
  hsram1.Init.WaitSignalActive = FMC_WAIT_TIMING_BEFORE_WS;
 80007fe:	4b1c      	ldr	r3, [pc, #112]	; (8000870 <MX_FMC_Init+0xbc>)
 8000800:	2200      	movs	r2, #0
 8000802:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WriteOperation = FMC_WRITE_OPERATION_DISABLE;
 8000804:	4b1a      	ldr	r3, [pc, #104]	; (8000870 <MX_FMC_Init+0xbc>)
 8000806:	2200      	movs	r2, #0
 8000808:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.WaitSignal = FMC_WAIT_SIGNAL_DISABLE;
 800080a:	4b19      	ldr	r3, [pc, #100]	; (8000870 <MX_FMC_Init+0xbc>)
 800080c:	2200      	movs	r2, #0
 800080e:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.ExtendedMode = FMC_EXTENDED_MODE_DISABLE;
 8000810:	4b17      	ldr	r3, [pc, #92]	; (8000870 <MX_FMC_Init+0xbc>)
 8000812:	2200      	movs	r2, #0
 8000814:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.AsynchronousWait = FMC_ASYNCHRONOUS_WAIT_DISABLE;
 8000816:	4b16      	ldr	r3, [pc, #88]	; (8000870 <MX_FMC_Init+0xbc>)
 8000818:	2200      	movs	r2, #0
 800081a:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.WriteBurst = FMC_WRITE_BURST_DISABLE;
 800081c:	4b14      	ldr	r3, [pc, #80]	; (8000870 <MX_FMC_Init+0xbc>)
 800081e:	2200      	movs	r2, #0
 8000820:	639a      	str	r2, [r3, #56]	; 0x38
  hsram1.Init.ContinuousClock = FMC_CONTINUOUS_CLOCK_SYNC_ONLY;
 8000822:	4b13      	ldr	r3, [pc, #76]	; (8000870 <MX_FMC_Init+0xbc>)
 8000824:	2200      	movs	r2, #0
 8000826:	63da      	str	r2, [r3, #60]	; 0x3c
  hsram1.Init.WriteFifo = FMC_WRITE_FIFO_DISABLE;
 8000828:	4b11      	ldr	r3, [pc, #68]	; (8000870 <MX_FMC_Init+0xbc>)
 800082a:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800082e:	641a      	str	r2, [r3, #64]	; 0x40
  hsram1.Init.PageSize = FMC_PAGE_SIZE_NONE;
 8000830:	4b0f      	ldr	r3, [pc, #60]	; (8000870 <MX_FMC_Init+0xbc>)
 8000832:	2200      	movs	r2, #0
 8000834:	645a      	str	r2, [r3, #68]	; 0x44
  /* Timing */
  Timing.AddressSetupTime = 10;
 8000836:	230a      	movs	r3, #10
 8000838:	607b      	str	r3, [r7, #4]
  Timing.AddressHoldTime = 15;
 800083a:	230f      	movs	r3, #15
 800083c:	60bb      	str	r3, [r7, #8]
  Timing.DataSetupTime = 10;
 800083e:	230a      	movs	r3, #10
 8000840:	60fb      	str	r3, [r7, #12]
  Timing.BusTurnAroundDuration = 2;
 8000842:	2302      	movs	r3, #2
 8000844:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 8000846:	2310      	movs	r3, #16
 8000848:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 800084a:	2311      	movs	r3, #17
 800084c:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FMC_ACCESS_MODE_A;
 800084e:	2300      	movs	r3, #0
 8000850:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK)
 8000852:	1d3b      	adds	r3, r7, #4
 8000854:	2200      	movs	r2, #0
 8000856:	4619      	mov	r1, r3
 8000858:	4805      	ldr	r0, [pc, #20]	; (8000870 <MX_FMC_Init+0xbc>)
 800085a:	f003 fb6b 	bl	8003f34 <HAL_SRAM_Init>
 800085e:	4603      	mov	r3, r0
 8000860:	2b00      	cmp	r3, #0
 8000862:	d001      	beq.n	8000868 <MX_FMC_Init+0xb4>
  {
    Error_Handler( );
 8000864:	f000 f8e2 	bl	8000a2c <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8000868:	bf00      	nop
 800086a:	3720      	adds	r7, #32
 800086c:	46bd      	mov	sp, r7
 800086e:	bd80      	pop	{r7, pc}
 8000870:	200003d8 	.word	0x200003d8
 8000874:	a0000104 	.word	0xa0000104

08000878 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	b090      	sub	sp, #64	; 0x40
 800087c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800087e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000882:	2200      	movs	r2, #0
 8000884:	601a      	str	r2, [r3, #0]
 8000886:	605a      	str	r2, [r3, #4]
 8000888:	609a      	str	r2, [r3, #8]
 800088a:	60da      	str	r2, [r3, #12]
 800088c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800088e:	2300      	movs	r3, #0
 8000890:	62bb      	str	r3, [r7, #40]	; 0x28
 8000892:	4b58      	ldr	r3, [pc, #352]	; (80009f4 <MX_GPIO_Init+0x17c>)
 8000894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000896:	4a57      	ldr	r2, [pc, #348]	; (80009f4 <MX_GPIO_Init+0x17c>)
 8000898:	f043 0310 	orr.w	r3, r3, #16
 800089c:	6313      	str	r3, [r2, #48]	; 0x30
 800089e:	4b55      	ldr	r3, [pc, #340]	; (80009f4 <MX_GPIO_Init+0x17c>)
 80008a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008a2:	f003 0310 	and.w	r3, r3, #16
 80008a6:	62bb      	str	r3, [r7, #40]	; 0x28
 80008a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008aa:	2300      	movs	r3, #0
 80008ac:	627b      	str	r3, [r7, #36]	; 0x24
 80008ae:	4b51      	ldr	r3, [pc, #324]	; (80009f4 <MX_GPIO_Init+0x17c>)
 80008b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008b2:	4a50      	ldr	r2, [pc, #320]	; (80009f4 <MX_GPIO_Init+0x17c>)
 80008b4:	f043 0304 	orr.w	r3, r3, #4
 80008b8:	6313      	str	r3, [r2, #48]	; 0x30
 80008ba:	4b4e      	ldr	r3, [pc, #312]	; (80009f4 <MX_GPIO_Init+0x17c>)
 80008bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008be:	f003 0304 	and.w	r3, r3, #4
 80008c2:	627b      	str	r3, [r7, #36]	; 0x24
 80008c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOI_CLK_ENABLE();
 80008c6:	2300      	movs	r3, #0
 80008c8:	623b      	str	r3, [r7, #32]
 80008ca:	4b4a      	ldr	r3, [pc, #296]	; (80009f4 <MX_GPIO_Init+0x17c>)
 80008cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ce:	4a49      	ldr	r2, [pc, #292]	; (80009f4 <MX_GPIO_Init+0x17c>)
 80008d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80008d4:	6313      	str	r3, [r2, #48]	; 0x30
 80008d6:	4b47      	ldr	r3, [pc, #284]	; (80009f4 <MX_GPIO_Init+0x17c>)
 80008d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80008de:	623b      	str	r3, [r7, #32]
 80008e0:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80008e2:	2300      	movs	r3, #0
 80008e4:	61fb      	str	r3, [r7, #28]
 80008e6:	4b43      	ldr	r3, [pc, #268]	; (80009f4 <MX_GPIO_Init+0x17c>)
 80008e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ea:	4a42      	ldr	r2, [pc, #264]	; (80009f4 <MX_GPIO_Init+0x17c>)
 80008ec:	f043 0320 	orr.w	r3, r3, #32
 80008f0:	6313      	str	r3, [r2, #48]	; 0x30
 80008f2:	4b40      	ldr	r3, [pc, #256]	; (80009f4 <MX_GPIO_Init+0x17c>)
 80008f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008f6:	f003 0320 	and.w	r3, r3, #32
 80008fa:	61fb      	str	r3, [r7, #28]
 80008fc:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008fe:	2300      	movs	r3, #0
 8000900:	61bb      	str	r3, [r7, #24]
 8000902:	4b3c      	ldr	r3, [pc, #240]	; (80009f4 <MX_GPIO_Init+0x17c>)
 8000904:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000906:	4a3b      	ldr	r2, [pc, #236]	; (80009f4 <MX_GPIO_Init+0x17c>)
 8000908:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800090c:	6313      	str	r3, [r2, #48]	; 0x30
 800090e:	4b39      	ldr	r3, [pc, #228]	; (80009f4 <MX_GPIO_Init+0x17c>)
 8000910:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000912:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000916:	61bb      	str	r3, [r7, #24]
 8000918:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800091a:	2300      	movs	r3, #0
 800091c:	617b      	str	r3, [r7, #20]
 800091e:	4b35      	ldr	r3, [pc, #212]	; (80009f4 <MX_GPIO_Init+0x17c>)
 8000920:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000922:	4a34      	ldr	r2, [pc, #208]	; (80009f4 <MX_GPIO_Init+0x17c>)
 8000924:	f043 0302 	orr.w	r3, r3, #2
 8000928:	6313      	str	r3, [r2, #48]	; 0x30
 800092a:	4b32      	ldr	r3, [pc, #200]	; (80009f4 <MX_GPIO_Init+0x17c>)
 800092c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800092e:	f003 0302 	and.w	r3, r3, #2
 8000932:	617b      	str	r3, [r7, #20]
 8000934:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8000936:	2300      	movs	r3, #0
 8000938:	613b      	str	r3, [r7, #16]
 800093a:	4b2e      	ldr	r3, [pc, #184]	; (80009f4 <MX_GPIO_Init+0x17c>)
 800093c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800093e:	4a2d      	ldr	r2, [pc, #180]	; (80009f4 <MX_GPIO_Init+0x17c>)
 8000940:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000944:	6313      	str	r3, [r2, #48]	; 0x30
 8000946:	4b2b      	ldr	r3, [pc, #172]	; (80009f4 <MX_GPIO_Init+0x17c>)
 8000948:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800094a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800094e:	613b      	str	r3, [r7, #16]
 8000950:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000952:	2300      	movs	r3, #0
 8000954:	60fb      	str	r3, [r7, #12]
 8000956:	4b27      	ldr	r3, [pc, #156]	; (80009f4 <MX_GPIO_Init+0x17c>)
 8000958:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800095a:	4a26      	ldr	r2, [pc, #152]	; (80009f4 <MX_GPIO_Init+0x17c>)
 800095c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000960:	6313      	str	r3, [r2, #48]	; 0x30
 8000962:	4b24      	ldr	r3, [pc, #144]	; (80009f4 <MX_GPIO_Init+0x17c>)
 8000964:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000966:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800096a:	60fb      	str	r3, [r7, #12]
 800096c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800096e:	2300      	movs	r3, #0
 8000970:	60bb      	str	r3, [r7, #8]
 8000972:	4b20      	ldr	r3, [pc, #128]	; (80009f4 <MX_GPIO_Init+0x17c>)
 8000974:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000976:	4a1f      	ldr	r2, [pc, #124]	; (80009f4 <MX_GPIO_Init+0x17c>)
 8000978:	f043 0308 	orr.w	r3, r3, #8
 800097c:	6313      	str	r3, [r2, #48]	; 0x30
 800097e:	4b1d      	ldr	r3, [pc, #116]	; (80009f4 <MX_GPIO_Init+0x17c>)
 8000980:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000982:	f003 0308 	and.w	r3, r3, #8
 8000986:	60bb      	str	r3, [r7, #8]
 8000988:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800098a:	2300      	movs	r3, #0
 800098c:	607b      	str	r3, [r7, #4]
 800098e:	4b19      	ldr	r3, [pc, #100]	; (80009f4 <MX_GPIO_Init+0x17c>)
 8000990:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000992:	4a18      	ldr	r2, [pc, #96]	; (80009f4 <MX_GPIO_Init+0x17c>)
 8000994:	f043 0301 	orr.w	r3, r3, #1
 8000998:	6313      	str	r3, [r2, #48]	; 0x30
 800099a:	4b16      	ldr	r3, [pc, #88]	; (80009f4 <MX_GPIO_Init+0x17c>)
 800099c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800099e:	f003 0301 	and.w	r3, r3, #1
 80009a2:	607b      	str	r3, [r7, #4]
 80009a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 80009a6:	2300      	movs	r3, #0
 80009a8:	603b      	str	r3, [r7, #0]
 80009aa:	4b12      	ldr	r3, [pc, #72]	; (80009f4 <MX_GPIO_Init+0x17c>)
 80009ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ae:	4a11      	ldr	r2, [pc, #68]	; (80009f4 <MX_GPIO_Init+0x17c>)
 80009b0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80009b4:	6313      	str	r3, [r2, #48]	; 0x30
 80009b6:	4b0f      	ldr	r3, [pc, #60]	; (80009f4 <MX_GPIO_Init+0x17c>)
 80009b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80009be:	603b      	str	r3, [r7, #0]
 80009c0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_SET);
 80009c2:	2201      	movs	r2, #1
 80009c4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80009c8:	480b      	ldr	r0, [pc, #44]	; (80009f8 <MX_GPIO_Init+0x180>)
 80009ca:	f000 fed1 	bl	8001770 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 80009ce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80009d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009d4:	2301      	movs	r3, #1
 80009d6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80009d8:	2301      	movs	r3, #1
 80009da:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009dc:	2300      	movs	r3, #0
 80009de:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009e0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80009e4:	4619      	mov	r1, r3
 80009e6:	4804      	ldr	r0, [pc, #16]	; (80009f8 <MX_GPIO_Init+0x180>)
 80009e8:	f000 fd16 	bl	8001418 <HAL_GPIO_Init>

}
 80009ec:	bf00      	nop
 80009ee:	3740      	adds	r7, #64	; 0x40
 80009f0:	46bd      	mov	sp, r7
 80009f2:	bd80      	pop	{r7, pc}
 80009f4:	40023800 	.word	0x40023800
 80009f8:	40020400 	.word	0x40020400

080009fc <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	b082      	sub	sp, #8
 8000a00:	af00      	add	r7, sp, #0
 8000a02:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart4, rx_buff, sizeof(rx_buff), 100);
 8000a04:	2364      	movs	r3, #100	; 0x64
 8000a06:	2201      	movs	r2, #1
 8000a08:	4906      	ldr	r1, [pc, #24]	; (8000a24 <HAL_UART_RxCpltCallback+0x28>)
 8000a0a:	4807      	ldr	r0, [pc, #28]	; (8000a28 <HAL_UART_RxCpltCallback+0x2c>)
 8000a0c:	f003 fb23 	bl	8004056 <HAL_UART_Transmit>
    HAL_UART_Receive_IT(&huart4, rx_buff, sizeof(rx_buff));
 8000a10:	2201      	movs	r2, #1
 8000a12:	4904      	ldr	r1, [pc, #16]	; (8000a24 <HAL_UART_RxCpltCallback+0x28>)
 8000a14:	4804      	ldr	r0, [pc, #16]	; (8000a28 <HAL_UART_RxCpltCallback+0x2c>)
 8000a16:	f003 fbb0 	bl	800417a <HAL_UART_Receive_IT>
}
 8000a1a:	bf00      	nop
 8000a1c:	3708      	adds	r7, #8
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	bd80      	pop	{r7, pc}
 8000a22:	bf00      	nop
 8000a24:	200003d4 	.word	0x200003d4
 8000a28:	200004d0 	.word	0x200004d0

08000a2c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a2c:	b480      	push	{r7}
 8000a2e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a30:	b672      	cpsid	i
}
 8000a32:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a34:	e7fe      	b.n	8000a34 <Error_Handler+0x8>
	...

08000a38 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a38:	b480      	push	{r7}
 8000a3a:	b083      	sub	sp, #12
 8000a3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a3e:	2300      	movs	r3, #0
 8000a40:	607b      	str	r3, [r7, #4]
 8000a42:	4b10      	ldr	r3, [pc, #64]	; (8000a84 <HAL_MspInit+0x4c>)
 8000a44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a46:	4a0f      	ldr	r2, [pc, #60]	; (8000a84 <HAL_MspInit+0x4c>)
 8000a48:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a4c:	6453      	str	r3, [r2, #68]	; 0x44
 8000a4e:	4b0d      	ldr	r3, [pc, #52]	; (8000a84 <HAL_MspInit+0x4c>)
 8000a50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a52:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a56:	607b      	str	r3, [r7, #4]
 8000a58:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	603b      	str	r3, [r7, #0]
 8000a5e:	4b09      	ldr	r3, [pc, #36]	; (8000a84 <HAL_MspInit+0x4c>)
 8000a60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a62:	4a08      	ldr	r2, [pc, #32]	; (8000a84 <HAL_MspInit+0x4c>)
 8000a64:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a68:	6413      	str	r3, [r2, #64]	; 0x40
 8000a6a:	4b06      	ldr	r3, [pc, #24]	; (8000a84 <HAL_MspInit+0x4c>)
 8000a6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a72:	603b      	str	r3, [r7, #0]
 8000a74:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a76:	bf00      	nop
 8000a78:	370c      	adds	r7, #12
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a80:	4770      	bx	lr
 8000a82:	bf00      	nop
 8000a84:	40023800 	.word	0x40023800

08000a88 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b09e      	sub	sp, #120	; 0x78
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a90:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000a94:	2200      	movs	r2, #0
 8000a96:	601a      	str	r2, [r3, #0]
 8000a98:	605a      	str	r2, [r3, #4]
 8000a9a:	609a      	str	r2, [r3, #8]
 8000a9c:	60da      	str	r2, [r3, #12]
 8000a9e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000aa0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000aa4:	223c      	movs	r2, #60	; 0x3c
 8000aa6:	2100      	movs	r1, #0
 8000aa8:	4618      	mov	r0, r3
 8000aaa:	f008 f8df 	bl	8008c6c <memset>
  if(hltdc->Instance==LTDC)
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	681b      	ldr	r3, [r3, #0]
 8000ab2:	4a8d      	ldr	r2, [pc, #564]	; (8000ce8 <HAL_LTDC_MspInit+0x260>)
 8000ab4:	4293      	cmp	r3, r2
 8000ab6:	f040 8112 	bne.w	8000cde <HAL_LTDC_MspInit+0x256>
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8000aba:	2308      	movs	r3, #8
 8000abc:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 8000abe:	23c0      	movs	r3, #192	; 0xc0
 8000ac0:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 8000ac2:	2302      	movs	r3, #2
 8000ac4:	647b      	str	r3, [r7, #68]	; 0x44
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000aca:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000ace:	4618      	mov	r0, r3
 8000ad0:	f002 fd6e 	bl	80035b0 <HAL_RCCEx_PeriphCLKConfig>
 8000ad4:	4603      	mov	r3, r0
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d001      	beq.n	8000ade <HAL_LTDC_MspInit+0x56>
    {
      Error_Handler();
 8000ada:	f7ff ffa7 	bl	8000a2c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8000ade:	2300      	movs	r3, #0
 8000ae0:	627b      	str	r3, [r7, #36]	; 0x24
 8000ae2:	4b82      	ldr	r3, [pc, #520]	; (8000cec <HAL_LTDC_MspInit+0x264>)
 8000ae4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ae6:	4a81      	ldr	r2, [pc, #516]	; (8000cec <HAL_LTDC_MspInit+0x264>)
 8000ae8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000aec:	6453      	str	r3, [r2, #68]	; 0x44
 8000aee:	4b7f      	ldr	r3, [pc, #508]	; (8000cec <HAL_LTDC_MspInit+0x264>)
 8000af0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000af2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000af6:	627b      	str	r3, [r7, #36]	; 0x24
 8000af8:	6a7b      	ldr	r3, [r7, #36]	; 0x24

    __HAL_RCC_GPIOI_CLK_ENABLE();
 8000afa:	2300      	movs	r3, #0
 8000afc:	623b      	str	r3, [r7, #32]
 8000afe:	4b7b      	ldr	r3, [pc, #492]	; (8000cec <HAL_LTDC_MspInit+0x264>)
 8000b00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b02:	4a7a      	ldr	r2, [pc, #488]	; (8000cec <HAL_LTDC_MspInit+0x264>)
 8000b04:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b08:	6313      	str	r3, [r2, #48]	; 0x30
 8000b0a:	4b78      	ldr	r3, [pc, #480]	; (8000cec <HAL_LTDC_MspInit+0x264>)
 8000b0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000b12:	623b      	str	r3, [r7, #32]
 8000b14:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b16:	2300      	movs	r3, #0
 8000b18:	61fb      	str	r3, [r7, #28]
 8000b1a:	4b74      	ldr	r3, [pc, #464]	; (8000cec <HAL_LTDC_MspInit+0x264>)
 8000b1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b1e:	4a73      	ldr	r2, [pc, #460]	; (8000cec <HAL_LTDC_MspInit+0x264>)
 8000b20:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b24:	6313      	str	r3, [r2, #48]	; 0x30
 8000b26:	4b71      	ldr	r3, [pc, #452]	; (8000cec <HAL_LTDC_MspInit+0x264>)
 8000b28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b2e:	61fb      	str	r3, [r7, #28]
 8000b30:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b32:	2300      	movs	r3, #0
 8000b34:	61bb      	str	r3, [r7, #24]
 8000b36:	4b6d      	ldr	r3, [pc, #436]	; (8000cec <HAL_LTDC_MspInit+0x264>)
 8000b38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b3a:	4a6c      	ldr	r2, [pc, #432]	; (8000cec <HAL_LTDC_MspInit+0x264>)
 8000b3c:	f043 0302 	orr.w	r3, r3, #2
 8000b40:	6313      	str	r3, [r2, #48]	; 0x30
 8000b42:	4b6a      	ldr	r3, [pc, #424]	; (8000cec <HAL_LTDC_MspInit+0x264>)
 8000b44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b46:	f003 0302 	and.w	r3, r3, #2
 8000b4a:	61bb      	str	r3, [r7, #24]
 8000b4c:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8000b4e:	2300      	movs	r3, #0
 8000b50:	617b      	str	r3, [r7, #20]
 8000b52:	4b66      	ldr	r3, [pc, #408]	; (8000cec <HAL_LTDC_MspInit+0x264>)
 8000b54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b56:	4a65      	ldr	r2, [pc, #404]	; (8000cec <HAL_LTDC_MspInit+0x264>)
 8000b58:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000b5c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b5e:	4b63      	ldr	r3, [pc, #396]	; (8000cec <HAL_LTDC_MspInit+0x264>)
 8000b60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b62:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000b66:	617b      	str	r3, [r7, #20]
 8000b68:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	613b      	str	r3, [r7, #16]
 8000b6e:	4b5f      	ldr	r3, [pc, #380]	; (8000cec <HAL_LTDC_MspInit+0x264>)
 8000b70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b72:	4a5e      	ldr	r2, [pc, #376]	; (8000cec <HAL_LTDC_MspInit+0x264>)
 8000b74:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000b78:	6313      	str	r3, [r2, #48]	; 0x30
 8000b7a:	4b5c      	ldr	r3, [pc, #368]	; (8000cec <HAL_LTDC_MspInit+0x264>)
 8000b7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000b82:	613b      	str	r3, [r7, #16]
 8000b84:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOK_CLK_ENABLE();
 8000b86:	2300      	movs	r3, #0
 8000b88:	60fb      	str	r3, [r7, #12]
 8000b8a:	4b58      	ldr	r3, [pc, #352]	; (8000cec <HAL_LTDC_MspInit+0x264>)
 8000b8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b8e:	4a57      	ldr	r2, [pc, #348]	; (8000cec <HAL_LTDC_MspInit+0x264>)
 8000b90:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000b94:	6313      	str	r3, [r2, #48]	; 0x30
 8000b96:	4b55      	ldr	r3, [pc, #340]	; (8000cec <HAL_LTDC_MspInit+0x264>)
 8000b98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b9a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000b9e:	60fb      	str	r3, [r7, #12]
 8000ba0:	68fb      	ldr	r3, [r7, #12]
    PK5     ------> LTDC_B6
    PK6     ------> LTDC_B7
    PK7     ------> LTDC_DE
    PB5     ------> LTDC_G7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_15;
 8000ba2:	f44f 4308 	mov.w	r3, #34816	; 0x8800
 8000ba6:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ba8:	2302      	movs	r3, #2
 8000baa:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bac:	2300      	movs	r3, #0
 8000bae:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bb0:	2303      	movs	r3, #3
 8000bb2:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8000bb4:	2309      	movs	r3, #9
 8000bb6:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000bb8:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000bbc:	4619      	mov	r1, r3
 8000bbe:	484c      	ldr	r0, [pc, #304]	; (8000cf0 <HAL_LTDC_MspInit+0x268>)
 8000bc0:	f000 fc2a 	bl	8001418 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14;
 8000bc4:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 8000bc8:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bca:	2302      	movs	r3, #2
 8000bcc:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bce:	2300      	movs	r3, #0
 8000bd0:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bd2:	2303      	movs	r3, #3
 8000bd4:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000bd6:	230e      	movs	r3, #14
 8000bd8:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000bda:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000bde:	4619      	mov	r1, r3
 8000be0:	4843      	ldr	r0, [pc, #268]	; (8000cf0 <HAL_LTDC_MspInit+0x268>)
 8000be2:	f000 fc19 	bl	8001418 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000be6:	2310      	movs	r3, #16
 8000be8:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bea:	2302      	movs	r3, #2
 8000bec:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bee:	2300      	movs	r3, #0
 8000bf0:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bf2:	2303      	movs	r3, #3
 8000bf4:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8000bf6:	2309      	movs	r3, #9
 8000bf8:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000bfa:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000bfe:	4619      	mov	r1, r3
 8000c00:	483c      	ldr	r0, [pc, #240]	; (8000cf4 <HAL_LTDC_MspInit+0x26c>)
 8000c02:	f000 fc09 	bl	8001418 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_5;
 8000c06:	2323      	movs	r3, #35	; 0x23
 8000c08:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c0a:	2302      	movs	r3, #2
 8000c0c:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c0e:	2300      	movs	r3, #0
 8000c10:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c12:	2303      	movs	r3, #3
 8000c14:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000c16:	230e      	movs	r3, #14
 8000c18:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c1a:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000c1e:	4619      	mov	r1, r3
 8000c20:	4835      	ldr	r0, [pc, #212]	; (8000cf8 <HAL_LTDC_MspInit+0x270>)
 8000c22:	f000 fbf9 	bl	8001418 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000c26:	f24d 033f 	movw	r3, #53311	; 0xd03f
 8000c2a:	667b      	str	r3, [r7, #100]	; 0x64
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_12|GPIO_PIN_14
                          |GPIO_PIN_15;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c2c:	2302      	movs	r3, #2
 8000c2e:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c30:	2300      	movs	r3, #0
 8000c32:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c34:	2303      	movs	r3, #3
 8000c36:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000c38:	230e      	movs	r3, #14
 8000c3a:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8000c3c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000c40:	4619      	mov	r1, r3
 8000c42:	482e      	ldr	r0, [pc, #184]	; (8000cfc <HAL_LTDC_MspInit+0x274>)
 8000c44:	f000 fbe8 	bl	8001418 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_12|GPIO_PIN_13;
 8000c48:	f44f 5341 	mov.w	r3, #12352	; 0x3040
 8000c4c:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c4e:	2302      	movs	r3, #2
 8000c50:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c52:	2300      	movs	r3, #0
 8000c54:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c56:	2303      	movs	r3, #3
 8000c58:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000c5a:	230e      	movs	r3, #14
 8000c5c:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000c5e:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000c62:	4619      	mov	r1, r3
 8000c64:	4826      	ldr	r0, [pc, #152]	; (8000d00 <HAL_LTDC_MspInit+0x278>)
 8000c66:	f000 fbd7 	bl	8001418 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000c6a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c6e:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c70:	2302      	movs	r3, #2
 8000c72:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c74:	2300      	movs	r3, #0
 8000c76:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c78:	2303      	movs	r3, #3
 8000c7a:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8000c7c:	2309      	movs	r3, #9
 8000c7e:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8000c80:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000c84:	4619      	mov	r1, r3
 8000c86:	481d      	ldr	r0, [pc, #116]	; (8000cfc <HAL_LTDC_MspInit+0x274>)
 8000c88:	f000 fbc6 	bl	8001418 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000c8c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c90:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c92:	2302      	movs	r3, #2
 8000c94:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c96:	2300      	movs	r3, #0
 8000c98:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c9a:	2303      	movs	r3, #3
 8000c9c:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8000c9e:	2309      	movs	r3, #9
 8000ca0:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000ca2:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000ca6:	4619      	mov	r1, r3
 8000ca8:	4815      	ldr	r0, [pc, #84]	; (8000d00 <HAL_LTDC_MspInit+0x278>)
 8000caa:	f000 fbb5 	bl	8001418 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
 8000cae:	23f8      	movs	r3, #248	; 0xf8
 8000cb0:	667b      	str	r3, [r7, #100]	; 0x64
                          |GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cb2:	2302      	movs	r3, #2
 8000cb4:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cba:	2303      	movs	r3, #3
 8000cbc:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000cbe:	230e      	movs	r3, #14
 8000cc0:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8000cc2:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000cc6:	4619      	mov	r1, r3
 8000cc8:	480e      	ldr	r0, [pc, #56]	; (8000d04 <HAL_LTDC_MspInit+0x27c>)
 8000cca:	f000 fba5 	bl	8001418 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 0, 0);
 8000cce:	2200      	movs	r2, #0
 8000cd0:	2100      	movs	r1, #0
 8000cd2:	2058      	movs	r0, #88	; 0x58
 8000cd4:	f000 fad7 	bl	8001286 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8000cd8:	2058      	movs	r0, #88	; 0x58
 8000cda:	f000 faf0 	bl	80012be <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 8000cde:	bf00      	nop
 8000ce0:	3778      	adds	r7, #120	; 0x78
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	bd80      	pop	{r7, pc}
 8000ce6:	bf00      	nop
 8000ce8:	40016800 	.word	0x40016800
 8000cec:	40023800 	.word	0x40023800
 8000cf0:	40022000 	.word	0x40022000
 8000cf4:	40021c00 	.word	0x40021c00
 8000cf8:	40020400 	.word	0x40020400
 8000cfc:	40022400 	.word	0x40022400
 8000d00:	40021800 	.word	0x40021800
 8000d04:	40022800 	.word	0x40022800

08000d08 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b08a      	sub	sp, #40	; 0x28
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d10:	f107 0314 	add.w	r3, r7, #20
 8000d14:	2200      	movs	r2, #0
 8000d16:	601a      	str	r2, [r3, #0]
 8000d18:	605a      	str	r2, [r3, #4]
 8000d1a:	609a      	str	r2, [r3, #8]
 8000d1c:	60da      	str	r2, [r3, #12]
 8000d1e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	4a1d      	ldr	r2, [pc, #116]	; (8000d9c <HAL_UART_MspInit+0x94>)
 8000d26:	4293      	cmp	r3, r2
 8000d28:	d134      	bne.n	8000d94 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	613b      	str	r3, [r7, #16]
 8000d2e:	4b1c      	ldr	r3, [pc, #112]	; (8000da0 <HAL_UART_MspInit+0x98>)
 8000d30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d32:	4a1b      	ldr	r2, [pc, #108]	; (8000da0 <HAL_UART_MspInit+0x98>)
 8000d34:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000d38:	6413      	str	r3, [r2, #64]	; 0x40
 8000d3a:	4b19      	ldr	r3, [pc, #100]	; (8000da0 <HAL_UART_MspInit+0x98>)
 8000d3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d3e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000d42:	613b      	str	r3, [r7, #16]
 8000d44:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d46:	2300      	movs	r3, #0
 8000d48:	60fb      	str	r3, [r7, #12]
 8000d4a:	4b15      	ldr	r3, [pc, #84]	; (8000da0 <HAL_UART_MspInit+0x98>)
 8000d4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d4e:	4a14      	ldr	r2, [pc, #80]	; (8000da0 <HAL_UART_MspInit+0x98>)
 8000d50:	f043 0304 	orr.w	r3, r3, #4
 8000d54:	6313      	str	r3, [r2, #48]	; 0x30
 8000d56:	4b12      	ldr	r3, [pc, #72]	; (8000da0 <HAL_UART_MspInit+0x98>)
 8000d58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d5a:	f003 0304 	and.w	r3, r3, #4
 8000d5e:	60fb      	str	r3, [r7, #12]
 8000d60:	68fb      	ldr	r3, [r7, #12]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000d62:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000d66:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d68:	2302      	movs	r3, #2
 8000d6a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d70:	2303      	movs	r3, #3
 8000d72:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8000d74:	2308      	movs	r3, #8
 8000d76:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d78:	f107 0314 	add.w	r3, r7, #20
 8000d7c:	4619      	mov	r1, r3
 8000d7e:	4809      	ldr	r0, [pc, #36]	; (8000da4 <HAL_UART_MspInit+0x9c>)
 8000d80:	f000 fb4a 	bl	8001418 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 8000d84:	2200      	movs	r2, #0
 8000d86:	2100      	movs	r1, #0
 8000d88:	2034      	movs	r0, #52	; 0x34
 8000d8a:	f000 fa7c 	bl	8001286 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8000d8e:	2034      	movs	r0, #52	; 0x34
 8000d90:	f000 fa95 	bl	80012be <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }

}
 8000d94:	bf00      	nop
 8000d96:	3728      	adds	r7, #40	; 0x28
 8000d98:	46bd      	mov	sp, r7
 8000d9a:	bd80      	pop	{r7, pc}
 8000d9c:	40004c00 	.word	0x40004c00
 8000da0:	40023800 	.word	0x40023800
 8000da4:	40020800 	.word	0x40020800

08000da8 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b086      	sub	sp, #24
 8000dac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8000dae:	1d3b      	adds	r3, r7, #4
 8000db0:	2200      	movs	r2, #0
 8000db2:	601a      	str	r2, [r3, #0]
 8000db4:	605a      	str	r2, [r3, #4]
 8000db6:	609a      	str	r2, [r3, #8]
 8000db8:	60da      	str	r2, [r3, #12]
 8000dba:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8000dbc:	4b2c      	ldr	r3, [pc, #176]	; (8000e70 <HAL_FMC_MspInit+0xc8>)
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	d151      	bne.n	8000e68 <HAL_FMC_MspInit+0xc0>
    return;
  }
  FMC_Initialized = 1;
 8000dc4:	4b2a      	ldr	r3, [pc, #168]	; (8000e70 <HAL_FMC_MspInit+0xc8>)
 8000dc6:	2201      	movs	r2, #1
 8000dc8:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8000dca:	2300      	movs	r3, #0
 8000dcc:	603b      	str	r3, [r7, #0]
 8000dce:	4b29      	ldr	r3, [pc, #164]	; (8000e74 <HAL_FMC_MspInit+0xcc>)
 8000dd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000dd2:	4a28      	ldr	r2, [pc, #160]	; (8000e74 <HAL_FMC_MspInit+0xcc>)
 8000dd4:	f043 0301 	orr.w	r3, r3, #1
 8000dd8:	6393      	str	r3, [r2, #56]	; 0x38
 8000dda:	4b26      	ldr	r3, [pc, #152]	; (8000e74 <HAL_FMC_MspInit+0xcc>)
 8000ddc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000dde:	f003 0301 	and.w	r3, r3, #1
 8000de2:	603b      	str	r3, [r7, #0]
 8000de4:	683b      	ldr	r3, [r7, #0]
  PD5   ------> FMC_NWE
  PG9   ------> FMC_NE2
  PE0   ------> FMC_NBL0
  PE1   ------> FMC_NBL1
  */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_7|GPIO_PIN_8
 8000de6:	f64f 739b 	movw	r3, #65435	; 0xff9b
 8000dea:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0
                          |GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dec:	2302      	movs	r3, #2
 8000dee:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000df0:	2301      	movs	r3, #1
 8000df2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000df4:	2303      	movs	r3, #3
 8000df6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000df8:	230c      	movs	r3, #12
 8000dfa:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000dfc:	1d3b      	adds	r3, r7, #4
 8000dfe:	4619      	mov	r1, r3
 8000e00:	481d      	ldr	r0, [pc, #116]	; (8000e78 <HAL_FMC_MspInit+0xd0>)
 8000e02:	f000 fb09 	bl	8001418 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000e06:	f24f 033f 	movw	r3, #61503	; 0xf03f
 8000e0a:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_12|GPIO_PIN_13
                          |GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e0c:	2302      	movs	r3, #2
 8000e0e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e10:	2301      	movs	r3, #1
 8000e12:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e14:	2303      	movs	r3, #3
 8000e16:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000e18:	230c      	movs	r3, #12
 8000e1a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000e1c:	1d3b      	adds	r3, r7, #4
 8000e1e:	4619      	mov	r1, r3
 8000e20:	4816      	ldr	r0, [pc, #88]	; (8000e7c <HAL_FMC_MspInit+0xd4>)
 8000e22:	f000 faf9 	bl	8001418 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000e26:	f240 233f 	movw	r3, #575	; 0x23f
 8000e2a:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e2c:	2302      	movs	r3, #2
 8000e2e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e30:	2301      	movs	r3, #1
 8000e32:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e34:	2303      	movs	r3, #3
 8000e36:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000e38:	230c      	movs	r3, #12
 8000e3a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000e3c:	1d3b      	adds	r3, r7, #4
 8000e3e:	4619      	mov	r1, r3
 8000e40:	480f      	ldr	r0, [pc, #60]	; (8000e80 <HAL_FMC_MspInit+0xd8>)
 8000e42:	f000 fae9 	bl	8001418 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8000e46:	f64f 7333 	movw	r3, #65331	; 0xff33
 8000e4a:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
                          |GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e4c:	2302      	movs	r3, #2
 8000e4e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e50:	2301      	movs	r3, #1
 8000e52:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e54:	2303      	movs	r3, #3
 8000e56:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000e58:	230c      	movs	r3, #12
 8000e5a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e5c:	1d3b      	adds	r3, r7, #4
 8000e5e:	4619      	mov	r1, r3
 8000e60:	4808      	ldr	r0, [pc, #32]	; (8000e84 <HAL_FMC_MspInit+0xdc>)
 8000e62:	f000 fad9 	bl	8001418 <HAL_GPIO_Init>
 8000e66:	e000      	b.n	8000e6a <HAL_FMC_MspInit+0xc2>
    return;
 8000e68:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8000e6a:	3718      	adds	r7, #24
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	bd80      	pop	{r7, pc}
 8000e70:	200001ac 	.word	0x200001ac
 8000e74:	40023800 	.word	0x40023800
 8000e78:	40021000 	.word	0x40021000
 8000e7c:	40021400 	.word	0x40021400
 8000e80:	40021800 	.word	0x40021800
 8000e84:	40020c00 	.word	0x40020c00

08000e88 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* hsram){
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b082      	sub	sp, #8
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8000e90:	f7ff ff8a 	bl	8000da8 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 8000e94:	bf00      	nop
 8000e96:	3708      	adds	r7, #8
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	bd80      	pop	{r7, pc}

08000e9c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e9c:	b480      	push	{r7}
 8000e9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ea0:	e7fe      	b.n	8000ea0 <NMI_Handler+0x4>

08000ea2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ea2:	b480      	push	{r7}
 8000ea4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ea6:	e7fe      	b.n	8000ea6 <HardFault_Handler+0x4>

08000ea8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000eac:	e7fe      	b.n	8000eac <MemManage_Handler+0x4>

08000eae <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000eae:	b480      	push	{r7}
 8000eb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000eb2:	e7fe      	b.n	8000eb2 <BusFault_Handler+0x4>

08000eb4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000eb4:	b480      	push	{r7}
 8000eb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000eb8:	e7fe      	b.n	8000eb8 <UsageFault_Handler+0x4>

08000eba <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000eba:	b480      	push	{r7}
 8000ebc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ebe:	bf00      	nop
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec6:	4770      	bx	lr

08000ec8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ec8:	b480      	push	{r7}
 8000eca:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ecc:	bf00      	nop
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed4:	4770      	bx	lr

08000ed6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ed6:	b480      	push	{r7}
 8000ed8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000eda:	bf00      	nop
 8000edc:	46bd      	mov	sp, r7
 8000ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee2:	4770      	bx	lr

08000ee4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ee8:	f000 f8ae 	bl	8001048 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000eec:	bf00      	nop
 8000eee:	bd80      	pop	{r7, pc}

08000ef0 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8000ef4:	4802      	ldr	r0, [pc, #8]	; (8000f00 <UART4_IRQHandler+0x10>)
 8000ef6:	f003 f971 	bl	80041dc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8000efa:	bf00      	nop
 8000efc:	bd80      	pop	{r7, pc}
 8000efe:	bf00      	nop
 8000f00:	200004d0 	.word	0x200004d0

08000f04 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000f08:	4802      	ldr	r0, [pc, #8]	; (8000f14 <OTG_FS_IRQHandler+0x10>)
 8000f0a:	f001 f909 	bl	8002120 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000f0e:	bf00      	nop
 8000f10:	bd80      	pop	{r7, pc}
 8000f12:	bf00      	nop
 8000f14:	200019e8 	.word	0x200019e8

08000f18 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8000f1c:	4802      	ldr	r0, [pc, #8]	; (8000f28 <LTDC_IRQHandler+0x10>)
 8000f1e:	f000 fd11 	bl	8001944 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 8000f22:	bf00      	nop
 8000f24:	bd80      	pop	{r7, pc}
 8000f26:	bf00      	nop
 8000f28:	20000428 	.word	0x20000428

08000f2c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f2c:	b480      	push	{r7}
 8000f2e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f30:	4b06      	ldr	r3, [pc, #24]	; (8000f4c <SystemInit+0x20>)
 8000f32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f36:	4a05      	ldr	r2, [pc, #20]	; (8000f4c <SystemInit+0x20>)
 8000f38:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f3c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f40:	bf00      	nop
 8000f42:	46bd      	mov	sp, r7
 8000f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f48:	4770      	bx	lr
 8000f4a:	bf00      	nop
 8000f4c:	e000ed00 	.word	0xe000ed00

08000f50 <Reset_Handler>:
 8000f50:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f88 <LoopFillZerobss+0x12>
 8000f54:	480d      	ldr	r0, [pc, #52]	; (8000f8c <LoopFillZerobss+0x16>)
 8000f56:	490e      	ldr	r1, [pc, #56]	; (8000f90 <LoopFillZerobss+0x1a>)
 8000f58:	4a0e      	ldr	r2, [pc, #56]	; (8000f94 <LoopFillZerobss+0x1e>)
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	e002      	b.n	8000f64 <LoopCopyDataInit>

08000f5e <CopyDataInit>:
 8000f5e:	58d4      	ldr	r4, [r2, r3]
 8000f60:	50c4      	str	r4, [r0, r3]
 8000f62:	3304      	adds	r3, #4

08000f64 <LoopCopyDataInit>:
 8000f64:	18c4      	adds	r4, r0, r3
 8000f66:	428c      	cmp	r4, r1
 8000f68:	d3f9      	bcc.n	8000f5e <CopyDataInit>
 8000f6a:	4a0b      	ldr	r2, [pc, #44]	; (8000f98 <LoopFillZerobss+0x22>)
 8000f6c:	4c0b      	ldr	r4, [pc, #44]	; (8000f9c <LoopFillZerobss+0x26>)
 8000f6e:	2300      	movs	r3, #0
 8000f70:	e001      	b.n	8000f76 <LoopFillZerobss>

08000f72 <FillZerobss>:
 8000f72:	6013      	str	r3, [r2, #0]
 8000f74:	3204      	adds	r2, #4

08000f76 <LoopFillZerobss>:
 8000f76:	42a2      	cmp	r2, r4
 8000f78:	d3fb      	bcc.n	8000f72 <FillZerobss>
 8000f7a:	f7ff ffd7 	bl	8000f2c <SystemInit>
 8000f7e:	f007 fe51 	bl	8008c24 <__libc_init_array>
 8000f82:	f7ff fab3 	bl	80004ec <main>
 8000f86:	4770      	bx	lr
 8000f88:	20050000 	.word	0x20050000
 8000f8c:	20000000 	.word	0x20000000
 8000f90:	20000190 	.word	0x20000190
 8000f94:	08008d04 	.word	0x08008d04
 8000f98:	20000190 	.word	0x20000190
 8000f9c:	20001df0 	.word	0x20001df0

08000fa0 <ADC_IRQHandler>:
 8000fa0:	e7fe      	b.n	8000fa0 <ADC_IRQHandler>
	...

08000fa4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000fa8:	4b0e      	ldr	r3, [pc, #56]	; (8000fe4 <HAL_Init+0x40>)
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	4a0d      	ldr	r2, [pc, #52]	; (8000fe4 <HAL_Init+0x40>)
 8000fae:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000fb2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000fb4:	4b0b      	ldr	r3, [pc, #44]	; (8000fe4 <HAL_Init+0x40>)
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	4a0a      	ldr	r2, [pc, #40]	; (8000fe4 <HAL_Init+0x40>)
 8000fba:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000fbe:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000fc0:	4b08      	ldr	r3, [pc, #32]	; (8000fe4 <HAL_Init+0x40>)
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	4a07      	ldr	r2, [pc, #28]	; (8000fe4 <HAL_Init+0x40>)
 8000fc6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000fca:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fcc:	2003      	movs	r0, #3
 8000fce:	f000 f94f 	bl	8001270 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000fd2:	2000      	movs	r0, #0
 8000fd4:	f000 f808 	bl	8000fe8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000fd8:	f7ff fd2e 	bl	8000a38 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000fdc:	2300      	movs	r3, #0
}
 8000fde:	4618      	mov	r0, r3
 8000fe0:	bd80      	pop	{r7, pc}
 8000fe2:	bf00      	nop
 8000fe4:	40023c00 	.word	0x40023c00

08000fe8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b082      	sub	sp, #8
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ff0:	4b12      	ldr	r3, [pc, #72]	; (800103c <HAL_InitTick+0x54>)
 8000ff2:	681a      	ldr	r2, [r3, #0]
 8000ff4:	4b12      	ldr	r3, [pc, #72]	; (8001040 <HAL_InitTick+0x58>)
 8000ff6:	781b      	ldrb	r3, [r3, #0]
 8000ff8:	4619      	mov	r1, r3
 8000ffa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ffe:	fbb3 f3f1 	udiv	r3, r3, r1
 8001002:	fbb2 f3f3 	udiv	r3, r2, r3
 8001006:	4618      	mov	r0, r3
 8001008:	f000 f967 	bl	80012da <HAL_SYSTICK_Config>
 800100c:	4603      	mov	r3, r0
 800100e:	2b00      	cmp	r3, #0
 8001010:	d001      	beq.n	8001016 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001012:	2301      	movs	r3, #1
 8001014:	e00e      	b.n	8001034 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	2b0f      	cmp	r3, #15
 800101a:	d80a      	bhi.n	8001032 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800101c:	2200      	movs	r2, #0
 800101e:	6879      	ldr	r1, [r7, #4]
 8001020:	f04f 30ff 	mov.w	r0, #4294967295
 8001024:	f000 f92f 	bl	8001286 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001028:	4a06      	ldr	r2, [pc, #24]	; (8001044 <HAL_InitTick+0x5c>)
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800102e:	2300      	movs	r3, #0
 8001030:	e000      	b.n	8001034 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001032:	2301      	movs	r3, #1
}
 8001034:	4618      	mov	r0, r3
 8001036:	3708      	adds	r7, #8
 8001038:	46bd      	mov	sp, r7
 800103a:	bd80      	pop	{r7, pc}
 800103c:	20000000 	.word	0x20000000
 8001040:	20000008 	.word	0x20000008
 8001044:	20000004 	.word	0x20000004

08001048 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001048:	b480      	push	{r7}
 800104a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800104c:	4b06      	ldr	r3, [pc, #24]	; (8001068 <HAL_IncTick+0x20>)
 800104e:	781b      	ldrb	r3, [r3, #0]
 8001050:	461a      	mov	r2, r3
 8001052:	4b06      	ldr	r3, [pc, #24]	; (800106c <HAL_IncTick+0x24>)
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	4413      	add	r3, r2
 8001058:	4a04      	ldr	r2, [pc, #16]	; (800106c <HAL_IncTick+0x24>)
 800105a:	6013      	str	r3, [r2, #0]
}
 800105c:	bf00      	nop
 800105e:	46bd      	mov	sp, r7
 8001060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001064:	4770      	bx	lr
 8001066:	bf00      	nop
 8001068:	20000008 	.word	0x20000008
 800106c:	20000514 	.word	0x20000514

08001070 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001070:	b480      	push	{r7}
 8001072:	af00      	add	r7, sp, #0
  return uwTick;
 8001074:	4b03      	ldr	r3, [pc, #12]	; (8001084 <HAL_GetTick+0x14>)
 8001076:	681b      	ldr	r3, [r3, #0]
}
 8001078:	4618      	mov	r0, r3
 800107a:	46bd      	mov	sp, r7
 800107c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001080:	4770      	bx	lr
 8001082:	bf00      	nop
 8001084:	20000514 	.word	0x20000514

08001088 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	b084      	sub	sp, #16
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001090:	f7ff ffee 	bl	8001070 <HAL_GetTick>
 8001094:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800109a:	68fb      	ldr	r3, [r7, #12]
 800109c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80010a0:	d005      	beq.n	80010ae <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80010a2:	4b0a      	ldr	r3, [pc, #40]	; (80010cc <HAL_Delay+0x44>)
 80010a4:	781b      	ldrb	r3, [r3, #0]
 80010a6:	461a      	mov	r2, r3
 80010a8:	68fb      	ldr	r3, [r7, #12]
 80010aa:	4413      	add	r3, r2
 80010ac:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80010ae:	bf00      	nop
 80010b0:	f7ff ffde 	bl	8001070 <HAL_GetTick>
 80010b4:	4602      	mov	r2, r0
 80010b6:	68bb      	ldr	r3, [r7, #8]
 80010b8:	1ad3      	subs	r3, r2, r3
 80010ba:	68fa      	ldr	r2, [r7, #12]
 80010bc:	429a      	cmp	r2, r3
 80010be:	d8f7      	bhi.n	80010b0 <HAL_Delay+0x28>
  {
  }
}
 80010c0:	bf00      	nop
 80010c2:	bf00      	nop
 80010c4:	3710      	adds	r7, #16
 80010c6:	46bd      	mov	sp, r7
 80010c8:	bd80      	pop	{r7, pc}
 80010ca:	bf00      	nop
 80010cc:	20000008 	.word	0x20000008

080010d0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010d0:	b480      	push	{r7}
 80010d2:	b085      	sub	sp, #20
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	f003 0307 	and.w	r3, r3, #7
 80010de:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010e0:	4b0c      	ldr	r3, [pc, #48]	; (8001114 <__NVIC_SetPriorityGrouping+0x44>)
 80010e2:	68db      	ldr	r3, [r3, #12]
 80010e4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010e6:	68ba      	ldr	r2, [r7, #8]
 80010e8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80010ec:	4013      	ands	r3, r2
 80010ee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80010f0:	68fb      	ldr	r3, [r7, #12]
 80010f2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010f4:	68bb      	ldr	r3, [r7, #8]
 80010f6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80010f8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80010fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001100:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001102:	4a04      	ldr	r2, [pc, #16]	; (8001114 <__NVIC_SetPriorityGrouping+0x44>)
 8001104:	68bb      	ldr	r3, [r7, #8]
 8001106:	60d3      	str	r3, [r2, #12]
}
 8001108:	bf00      	nop
 800110a:	3714      	adds	r7, #20
 800110c:	46bd      	mov	sp, r7
 800110e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001112:	4770      	bx	lr
 8001114:	e000ed00 	.word	0xe000ed00

08001118 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001118:	b480      	push	{r7}
 800111a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800111c:	4b04      	ldr	r3, [pc, #16]	; (8001130 <__NVIC_GetPriorityGrouping+0x18>)
 800111e:	68db      	ldr	r3, [r3, #12]
 8001120:	0a1b      	lsrs	r3, r3, #8
 8001122:	f003 0307 	and.w	r3, r3, #7
}
 8001126:	4618      	mov	r0, r3
 8001128:	46bd      	mov	sp, r7
 800112a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112e:	4770      	bx	lr
 8001130:	e000ed00 	.word	0xe000ed00

08001134 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001134:	b480      	push	{r7}
 8001136:	b083      	sub	sp, #12
 8001138:	af00      	add	r7, sp, #0
 800113a:	4603      	mov	r3, r0
 800113c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800113e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001142:	2b00      	cmp	r3, #0
 8001144:	db0b      	blt.n	800115e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001146:	79fb      	ldrb	r3, [r7, #7]
 8001148:	f003 021f 	and.w	r2, r3, #31
 800114c:	4907      	ldr	r1, [pc, #28]	; (800116c <__NVIC_EnableIRQ+0x38>)
 800114e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001152:	095b      	lsrs	r3, r3, #5
 8001154:	2001      	movs	r0, #1
 8001156:	fa00 f202 	lsl.w	r2, r0, r2
 800115a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800115e:	bf00      	nop
 8001160:	370c      	adds	r7, #12
 8001162:	46bd      	mov	sp, r7
 8001164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001168:	4770      	bx	lr
 800116a:	bf00      	nop
 800116c:	e000e100 	.word	0xe000e100

08001170 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001170:	b480      	push	{r7}
 8001172:	b083      	sub	sp, #12
 8001174:	af00      	add	r7, sp, #0
 8001176:	4603      	mov	r3, r0
 8001178:	6039      	str	r1, [r7, #0]
 800117a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800117c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001180:	2b00      	cmp	r3, #0
 8001182:	db0a      	blt.n	800119a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001184:	683b      	ldr	r3, [r7, #0]
 8001186:	b2da      	uxtb	r2, r3
 8001188:	490c      	ldr	r1, [pc, #48]	; (80011bc <__NVIC_SetPriority+0x4c>)
 800118a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800118e:	0112      	lsls	r2, r2, #4
 8001190:	b2d2      	uxtb	r2, r2
 8001192:	440b      	add	r3, r1
 8001194:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001198:	e00a      	b.n	80011b0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800119a:	683b      	ldr	r3, [r7, #0]
 800119c:	b2da      	uxtb	r2, r3
 800119e:	4908      	ldr	r1, [pc, #32]	; (80011c0 <__NVIC_SetPriority+0x50>)
 80011a0:	79fb      	ldrb	r3, [r7, #7]
 80011a2:	f003 030f 	and.w	r3, r3, #15
 80011a6:	3b04      	subs	r3, #4
 80011a8:	0112      	lsls	r2, r2, #4
 80011aa:	b2d2      	uxtb	r2, r2
 80011ac:	440b      	add	r3, r1
 80011ae:	761a      	strb	r2, [r3, #24]
}
 80011b0:	bf00      	nop
 80011b2:	370c      	adds	r7, #12
 80011b4:	46bd      	mov	sp, r7
 80011b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ba:	4770      	bx	lr
 80011bc:	e000e100 	.word	0xe000e100
 80011c0:	e000ed00 	.word	0xe000ed00

080011c4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011c4:	b480      	push	{r7}
 80011c6:	b089      	sub	sp, #36	; 0x24
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	60f8      	str	r0, [r7, #12]
 80011cc:	60b9      	str	r1, [r7, #8]
 80011ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80011d0:	68fb      	ldr	r3, [r7, #12]
 80011d2:	f003 0307 	and.w	r3, r3, #7
 80011d6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011d8:	69fb      	ldr	r3, [r7, #28]
 80011da:	f1c3 0307 	rsb	r3, r3, #7
 80011de:	2b04      	cmp	r3, #4
 80011e0:	bf28      	it	cs
 80011e2:	2304      	movcs	r3, #4
 80011e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011e6:	69fb      	ldr	r3, [r7, #28]
 80011e8:	3304      	adds	r3, #4
 80011ea:	2b06      	cmp	r3, #6
 80011ec:	d902      	bls.n	80011f4 <NVIC_EncodePriority+0x30>
 80011ee:	69fb      	ldr	r3, [r7, #28]
 80011f0:	3b03      	subs	r3, #3
 80011f2:	e000      	b.n	80011f6 <NVIC_EncodePriority+0x32>
 80011f4:	2300      	movs	r3, #0
 80011f6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011f8:	f04f 32ff 	mov.w	r2, #4294967295
 80011fc:	69bb      	ldr	r3, [r7, #24]
 80011fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001202:	43da      	mvns	r2, r3
 8001204:	68bb      	ldr	r3, [r7, #8]
 8001206:	401a      	ands	r2, r3
 8001208:	697b      	ldr	r3, [r7, #20]
 800120a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800120c:	f04f 31ff 	mov.w	r1, #4294967295
 8001210:	697b      	ldr	r3, [r7, #20]
 8001212:	fa01 f303 	lsl.w	r3, r1, r3
 8001216:	43d9      	mvns	r1, r3
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800121c:	4313      	orrs	r3, r2
         );
}
 800121e:	4618      	mov	r0, r3
 8001220:	3724      	adds	r7, #36	; 0x24
 8001222:	46bd      	mov	sp, r7
 8001224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001228:	4770      	bx	lr
	...

0800122c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	b082      	sub	sp, #8
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	3b01      	subs	r3, #1
 8001238:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800123c:	d301      	bcc.n	8001242 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800123e:	2301      	movs	r3, #1
 8001240:	e00f      	b.n	8001262 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001242:	4a0a      	ldr	r2, [pc, #40]	; (800126c <SysTick_Config+0x40>)
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	3b01      	subs	r3, #1
 8001248:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800124a:	210f      	movs	r1, #15
 800124c:	f04f 30ff 	mov.w	r0, #4294967295
 8001250:	f7ff ff8e 	bl	8001170 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001254:	4b05      	ldr	r3, [pc, #20]	; (800126c <SysTick_Config+0x40>)
 8001256:	2200      	movs	r2, #0
 8001258:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800125a:	4b04      	ldr	r3, [pc, #16]	; (800126c <SysTick_Config+0x40>)
 800125c:	2207      	movs	r2, #7
 800125e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001260:	2300      	movs	r3, #0
}
 8001262:	4618      	mov	r0, r3
 8001264:	3708      	adds	r7, #8
 8001266:	46bd      	mov	sp, r7
 8001268:	bd80      	pop	{r7, pc}
 800126a:	bf00      	nop
 800126c:	e000e010 	.word	0xe000e010

08001270 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	b082      	sub	sp, #8
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001278:	6878      	ldr	r0, [r7, #4]
 800127a:	f7ff ff29 	bl	80010d0 <__NVIC_SetPriorityGrouping>
}
 800127e:	bf00      	nop
 8001280:	3708      	adds	r7, #8
 8001282:	46bd      	mov	sp, r7
 8001284:	bd80      	pop	{r7, pc}

08001286 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001286:	b580      	push	{r7, lr}
 8001288:	b086      	sub	sp, #24
 800128a:	af00      	add	r7, sp, #0
 800128c:	4603      	mov	r3, r0
 800128e:	60b9      	str	r1, [r7, #8]
 8001290:	607a      	str	r2, [r7, #4]
 8001292:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001294:	2300      	movs	r3, #0
 8001296:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001298:	f7ff ff3e 	bl	8001118 <__NVIC_GetPriorityGrouping>
 800129c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800129e:	687a      	ldr	r2, [r7, #4]
 80012a0:	68b9      	ldr	r1, [r7, #8]
 80012a2:	6978      	ldr	r0, [r7, #20]
 80012a4:	f7ff ff8e 	bl	80011c4 <NVIC_EncodePriority>
 80012a8:	4602      	mov	r2, r0
 80012aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012ae:	4611      	mov	r1, r2
 80012b0:	4618      	mov	r0, r3
 80012b2:	f7ff ff5d 	bl	8001170 <__NVIC_SetPriority>
}
 80012b6:	bf00      	nop
 80012b8:	3718      	adds	r7, #24
 80012ba:	46bd      	mov	sp, r7
 80012bc:	bd80      	pop	{r7, pc}

080012be <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012be:	b580      	push	{r7, lr}
 80012c0:	b082      	sub	sp, #8
 80012c2:	af00      	add	r7, sp, #0
 80012c4:	4603      	mov	r3, r0
 80012c6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80012c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012cc:	4618      	mov	r0, r3
 80012ce:	f7ff ff31 	bl	8001134 <__NVIC_EnableIRQ>
}
 80012d2:	bf00      	nop
 80012d4:	3708      	adds	r7, #8
 80012d6:	46bd      	mov	sp, r7
 80012d8:	bd80      	pop	{r7, pc}

080012da <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80012da:	b580      	push	{r7, lr}
 80012dc:	b082      	sub	sp, #8
 80012de:	af00      	add	r7, sp, #0
 80012e0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80012e2:	6878      	ldr	r0, [r7, #4]
 80012e4:	f7ff ffa2 	bl	800122c <SysTick_Config>
 80012e8:	4603      	mov	r3, r0
}
 80012ea:	4618      	mov	r0, r3
 80012ec:	3708      	adds	r7, #8
 80012ee:	46bd      	mov	sp, r7
 80012f0:	bd80      	pop	{r7, pc}

080012f2 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80012f2:	b580      	push	{r7, lr}
 80012f4:	b084      	sub	sp, #16
 80012f6:	af00      	add	r7, sp, #0
 80012f8:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012fe:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001300:	f7ff feb6 	bl	8001070 <HAL_GetTick>
 8001304:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800130c:	b2db      	uxtb	r3, r3
 800130e:	2b02      	cmp	r3, #2
 8001310:	d008      	beq.n	8001324 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	2280      	movs	r2, #128	; 0x80
 8001316:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	2200      	movs	r2, #0
 800131c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001320:	2301      	movs	r3, #1
 8001322:	e052      	b.n	80013ca <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	681a      	ldr	r2, [r3, #0]
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	f022 0216 	bic.w	r2, r2, #22
 8001332:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	695a      	ldr	r2, [r3, #20]
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001342:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001348:	2b00      	cmp	r3, #0
 800134a:	d103      	bne.n	8001354 <HAL_DMA_Abort+0x62>
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001350:	2b00      	cmp	r3, #0
 8001352:	d007      	beq.n	8001364 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	681a      	ldr	r2, [r3, #0]
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	f022 0208 	bic.w	r2, r2, #8
 8001362:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	681a      	ldr	r2, [r3, #0]
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	f022 0201 	bic.w	r2, r2, #1
 8001372:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001374:	e013      	b.n	800139e <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001376:	f7ff fe7b 	bl	8001070 <HAL_GetTick>
 800137a:	4602      	mov	r2, r0
 800137c:	68bb      	ldr	r3, [r7, #8]
 800137e:	1ad3      	subs	r3, r2, r3
 8001380:	2b05      	cmp	r3, #5
 8001382:	d90c      	bls.n	800139e <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	2220      	movs	r2, #32
 8001388:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	2203      	movs	r2, #3
 800138e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	2200      	movs	r2, #0
 8001396:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800139a:	2303      	movs	r3, #3
 800139c:	e015      	b.n	80013ca <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	f003 0301 	and.w	r3, r3, #1
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d1e4      	bne.n	8001376 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80013b0:	223f      	movs	r2, #63	; 0x3f
 80013b2:	409a      	lsls	r2, r3
 80013b4:	68fb      	ldr	r3, [r7, #12]
 80013b6:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	2201      	movs	r2, #1
 80013bc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	2200      	movs	r2, #0
 80013c4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80013c8:	2300      	movs	r3, #0
}
 80013ca:	4618      	mov	r0, r3
 80013cc:	3710      	adds	r7, #16
 80013ce:	46bd      	mov	sp, r7
 80013d0:	bd80      	pop	{r7, pc}

080013d2 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80013d2:	b480      	push	{r7}
 80013d4:	b083      	sub	sp, #12
 80013d6:	af00      	add	r7, sp, #0
 80013d8:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80013e0:	b2db      	uxtb	r3, r3
 80013e2:	2b02      	cmp	r3, #2
 80013e4:	d004      	beq.n	80013f0 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	2280      	movs	r2, #128	; 0x80
 80013ea:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80013ec:	2301      	movs	r3, #1
 80013ee:	e00c      	b.n	800140a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	2205      	movs	r2, #5
 80013f4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	681a      	ldr	r2, [r3, #0]
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	f022 0201 	bic.w	r2, r2, #1
 8001406:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001408:	2300      	movs	r3, #0
}
 800140a:	4618      	mov	r0, r3
 800140c:	370c      	adds	r7, #12
 800140e:	46bd      	mov	sp, r7
 8001410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001414:	4770      	bx	lr
	...

08001418 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001418:	b480      	push	{r7}
 800141a:	b089      	sub	sp, #36	; 0x24
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]
 8001420:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001422:	2300      	movs	r3, #0
 8001424:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001426:	2300      	movs	r3, #0
 8001428:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800142a:	2300      	movs	r3, #0
 800142c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800142e:	2300      	movs	r3, #0
 8001430:	61fb      	str	r3, [r7, #28]
 8001432:	e177      	b.n	8001724 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001434:	2201      	movs	r2, #1
 8001436:	69fb      	ldr	r3, [r7, #28]
 8001438:	fa02 f303 	lsl.w	r3, r2, r3
 800143c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800143e:	683b      	ldr	r3, [r7, #0]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	697a      	ldr	r2, [r7, #20]
 8001444:	4013      	ands	r3, r2
 8001446:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001448:	693a      	ldr	r2, [r7, #16]
 800144a:	697b      	ldr	r3, [r7, #20]
 800144c:	429a      	cmp	r2, r3
 800144e:	f040 8166 	bne.w	800171e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001452:	683b      	ldr	r3, [r7, #0]
 8001454:	685b      	ldr	r3, [r3, #4]
 8001456:	f003 0303 	and.w	r3, r3, #3
 800145a:	2b01      	cmp	r3, #1
 800145c:	d005      	beq.n	800146a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800145e:	683b      	ldr	r3, [r7, #0]
 8001460:	685b      	ldr	r3, [r3, #4]
 8001462:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001466:	2b02      	cmp	r3, #2
 8001468:	d130      	bne.n	80014cc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	689b      	ldr	r3, [r3, #8]
 800146e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001470:	69fb      	ldr	r3, [r7, #28]
 8001472:	005b      	lsls	r3, r3, #1
 8001474:	2203      	movs	r2, #3
 8001476:	fa02 f303 	lsl.w	r3, r2, r3
 800147a:	43db      	mvns	r3, r3
 800147c:	69ba      	ldr	r2, [r7, #24]
 800147e:	4013      	ands	r3, r2
 8001480:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001482:	683b      	ldr	r3, [r7, #0]
 8001484:	68da      	ldr	r2, [r3, #12]
 8001486:	69fb      	ldr	r3, [r7, #28]
 8001488:	005b      	lsls	r3, r3, #1
 800148a:	fa02 f303 	lsl.w	r3, r2, r3
 800148e:	69ba      	ldr	r2, [r7, #24]
 8001490:	4313      	orrs	r3, r2
 8001492:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	69ba      	ldr	r2, [r7, #24]
 8001498:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	685b      	ldr	r3, [r3, #4]
 800149e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80014a0:	2201      	movs	r2, #1
 80014a2:	69fb      	ldr	r3, [r7, #28]
 80014a4:	fa02 f303 	lsl.w	r3, r2, r3
 80014a8:	43db      	mvns	r3, r3
 80014aa:	69ba      	ldr	r2, [r7, #24]
 80014ac:	4013      	ands	r3, r2
 80014ae:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80014b0:	683b      	ldr	r3, [r7, #0]
 80014b2:	685b      	ldr	r3, [r3, #4]
 80014b4:	091b      	lsrs	r3, r3, #4
 80014b6:	f003 0201 	and.w	r2, r3, #1
 80014ba:	69fb      	ldr	r3, [r7, #28]
 80014bc:	fa02 f303 	lsl.w	r3, r2, r3
 80014c0:	69ba      	ldr	r2, [r7, #24]
 80014c2:	4313      	orrs	r3, r2
 80014c4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	69ba      	ldr	r2, [r7, #24]
 80014ca:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80014cc:	683b      	ldr	r3, [r7, #0]
 80014ce:	685b      	ldr	r3, [r3, #4]
 80014d0:	f003 0303 	and.w	r3, r3, #3
 80014d4:	2b03      	cmp	r3, #3
 80014d6:	d017      	beq.n	8001508 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	68db      	ldr	r3, [r3, #12]
 80014dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80014de:	69fb      	ldr	r3, [r7, #28]
 80014e0:	005b      	lsls	r3, r3, #1
 80014e2:	2203      	movs	r2, #3
 80014e4:	fa02 f303 	lsl.w	r3, r2, r3
 80014e8:	43db      	mvns	r3, r3
 80014ea:	69ba      	ldr	r2, [r7, #24]
 80014ec:	4013      	ands	r3, r2
 80014ee:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80014f0:	683b      	ldr	r3, [r7, #0]
 80014f2:	689a      	ldr	r2, [r3, #8]
 80014f4:	69fb      	ldr	r3, [r7, #28]
 80014f6:	005b      	lsls	r3, r3, #1
 80014f8:	fa02 f303 	lsl.w	r3, r2, r3
 80014fc:	69ba      	ldr	r2, [r7, #24]
 80014fe:	4313      	orrs	r3, r2
 8001500:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	69ba      	ldr	r2, [r7, #24]
 8001506:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001508:	683b      	ldr	r3, [r7, #0]
 800150a:	685b      	ldr	r3, [r3, #4]
 800150c:	f003 0303 	and.w	r3, r3, #3
 8001510:	2b02      	cmp	r3, #2
 8001512:	d123      	bne.n	800155c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001514:	69fb      	ldr	r3, [r7, #28]
 8001516:	08da      	lsrs	r2, r3, #3
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	3208      	adds	r2, #8
 800151c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001520:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001522:	69fb      	ldr	r3, [r7, #28]
 8001524:	f003 0307 	and.w	r3, r3, #7
 8001528:	009b      	lsls	r3, r3, #2
 800152a:	220f      	movs	r2, #15
 800152c:	fa02 f303 	lsl.w	r3, r2, r3
 8001530:	43db      	mvns	r3, r3
 8001532:	69ba      	ldr	r2, [r7, #24]
 8001534:	4013      	ands	r3, r2
 8001536:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001538:	683b      	ldr	r3, [r7, #0]
 800153a:	691a      	ldr	r2, [r3, #16]
 800153c:	69fb      	ldr	r3, [r7, #28]
 800153e:	f003 0307 	and.w	r3, r3, #7
 8001542:	009b      	lsls	r3, r3, #2
 8001544:	fa02 f303 	lsl.w	r3, r2, r3
 8001548:	69ba      	ldr	r2, [r7, #24]
 800154a:	4313      	orrs	r3, r2
 800154c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800154e:	69fb      	ldr	r3, [r7, #28]
 8001550:	08da      	lsrs	r2, r3, #3
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	3208      	adds	r2, #8
 8001556:	69b9      	ldr	r1, [r7, #24]
 8001558:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001562:	69fb      	ldr	r3, [r7, #28]
 8001564:	005b      	lsls	r3, r3, #1
 8001566:	2203      	movs	r2, #3
 8001568:	fa02 f303 	lsl.w	r3, r2, r3
 800156c:	43db      	mvns	r3, r3
 800156e:	69ba      	ldr	r2, [r7, #24]
 8001570:	4013      	ands	r3, r2
 8001572:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001574:	683b      	ldr	r3, [r7, #0]
 8001576:	685b      	ldr	r3, [r3, #4]
 8001578:	f003 0203 	and.w	r2, r3, #3
 800157c:	69fb      	ldr	r3, [r7, #28]
 800157e:	005b      	lsls	r3, r3, #1
 8001580:	fa02 f303 	lsl.w	r3, r2, r3
 8001584:	69ba      	ldr	r2, [r7, #24]
 8001586:	4313      	orrs	r3, r2
 8001588:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	69ba      	ldr	r2, [r7, #24]
 800158e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001590:	683b      	ldr	r3, [r7, #0]
 8001592:	685b      	ldr	r3, [r3, #4]
 8001594:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001598:	2b00      	cmp	r3, #0
 800159a:	f000 80c0 	beq.w	800171e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800159e:	2300      	movs	r3, #0
 80015a0:	60fb      	str	r3, [r7, #12]
 80015a2:	4b66      	ldr	r3, [pc, #408]	; (800173c <HAL_GPIO_Init+0x324>)
 80015a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015a6:	4a65      	ldr	r2, [pc, #404]	; (800173c <HAL_GPIO_Init+0x324>)
 80015a8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80015ac:	6453      	str	r3, [r2, #68]	; 0x44
 80015ae:	4b63      	ldr	r3, [pc, #396]	; (800173c <HAL_GPIO_Init+0x324>)
 80015b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80015b6:	60fb      	str	r3, [r7, #12]
 80015b8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80015ba:	4a61      	ldr	r2, [pc, #388]	; (8001740 <HAL_GPIO_Init+0x328>)
 80015bc:	69fb      	ldr	r3, [r7, #28]
 80015be:	089b      	lsrs	r3, r3, #2
 80015c0:	3302      	adds	r3, #2
 80015c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80015c8:	69fb      	ldr	r3, [r7, #28]
 80015ca:	f003 0303 	and.w	r3, r3, #3
 80015ce:	009b      	lsls	r3, r3, #2
 80015d0:	220f      	movs	r2, #15
 80015d2:	fa02 f303 	lsl.w	r3, r2, r3
 80015d6:	43db      	mvns	r3, r3
 80015d8:	69ba      	ldr	r2, [r7, #24]
 80015da:	4013      	ands	r3, r2
 80015dc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	4a58      	ldr	r2, [pc, #352]	; (8001744 <HAL_GPIO_Init+0x32c>)
 80015e2:	4293      	cmp	r3, r2
 80015e4:	d037      	beq.n	8001656 <HAL_GPIO_Init+0x23e>
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	4a57      	ldr	r2, [pc, #348]	; (8001748 <HAL_GPIO_Init+0x330>)
 80015ea:	4293      	cmp	r3, r2
 80015ec:	d031      	beq.n	8001652 <HAL_GPIO_Init+0x23a>
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	4a56      	ldr	r2, [pc, #344]	; (800174c <HAL_GPIO_Init+0x334>)
 80015f2:	4293      	cmp	r3, r2
 80015f4:	d02b      	beq.n	800164e <HAL_GPIO_Init+0x236>
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	4a55      	ldr	r2, [pc, #340]	; (8001750 <HAL_GPIO_Init+0x338>)
 80015fa:	4293      	cmp	r3, r2
 80015fc:	d025      	beq.n	800164a <HAL_GPIO_Init+0x232>
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	4a54      	ldr	r2, [pc, #336]	; (8001754 <HAL_GPIO_Init+0x33c>)
 8001602:	4293      	cmp	r3, r2
 8001604:	d01f      	beq.n	8001646 <HAL_GPIO_Init+0x22e>
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	4a53      	ldr	r2, [pc, #332]	; (8001758 <HAL_GPIO_Init+0x340>)
 800160a:	4293      	cmp	r3, r2
 800160c:	d019      	beq.n	8001642 <HAL_GPIO_Init+0x22a>
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	4a52      	ldr	r2, [pc, #328]	; (800175c <HAL_GPIO_Init+0x344>)
 8001612:	4293      	cmp	r3, r2
 8001614:	d013      	beq.n	800163e <HAL_GPIO_Init+0x226>
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	4a51      	ldr	r2, [pc, #324]	; (8001760 <HAL_GPIO_Init+0x348>)
 800161a:	4293      	cmp	r3, r2
 800161c:	d00d      	beq.n	800163a <HAL_GPIO_Init+0x222>
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	4a50      	ldr	r2, [pc, #320]	; (8001764 <HAL_GPIO_Init+0x34c>)
 8001622:	4293      	cmp	r3, r2
 8001624:	d007      	beq.n	8001636 <HAL_GPIO_Init+0x21e>
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	4a4f      	ldr	r2, [pc, #316]	; (8001768 <HAL_GPIO_Init+0x350>)
 800162a:	4293      	cmp	r3, r2
 800162c:	d101      	bne.n	8001632 <HAL_GPIO_Init+0x21a>
 800162e:	2309      	movs	r3, #9
 8001630:	e012      	b.n	8001658 <HAL_GPIO_Init+0x240>
 8001632:	230a      	movs	r3, #10
 8001634:	e010      	b.n	8001658 <HAL_GPIO_Init+0x240>
 8001636:	2308      	movs	r3, #8
 8001638:	e00e      	b.n	8001658 <HAL_GPIO_Init+0x240>
 800163a:	2307      	movs	r3, #7
 800163c:	e00c      	b.n	8001658 <HAL_GPIO_Init+0x240>
 800163e:	2306      	movs	r3, #6
 8001640:	e00a      	b.n	8001658 <HAL_GPIO_Init+0x240>
 8001642:	2305      	movs	r3, #5
 8001644:	e008      	b.n	8001658 <HAL_GPIO_Init+0x240>
 8001646:	2304      	movs	r3, #4
 8001648:	e006      	b.n	8001658 <HAL_GPIO_Init+0x240>
 800164a:	2303      	movs	r3, #3
 800164c:	e004      	b.n	8001658 <HAL_GPIO_Init+0x240>
 800164e:	2302      	movs	r3, #2
 8001650:	e002      	b.n	8001658 <HAL_GPIO_Init+0x240>
 8001652:	2301      	movs	r3, #1
 8001654:	e000      	b.n	8001658 <HAL_GPIO_Init+0x240>
 8001656:	2300      	movs	r3, #0
 8001658:	69fa      	ldr	r2, [r7, #28]
 800165a:	f002 0203 	and.w	r2, r2, #3
 800165e:	0092      	lsls	r2, r2, #2
 8001660:	4093      	lsls	r3, r2
 8001662:	69ba      	ldr	r2, [r7, #24]
 8001664:	4313      	orrs	r3, r2
 8001666:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001668:	4935      	ldr	r1, [pc, #212]	; (8001740 <HAL_GPIO_Init+0x328>)
 800166a:	69fb      	ldr	r3, [r7, #28]
 800166c:	089b      	lsrs	r3, r3, #2
 800166e:	3302      	adds	r3, #2
 8001670:	69ba      	ldr	r2, [r7, #24]
 8001672:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001676:	4b3d      	ldr	r3, [pc, #244]	; (800176c <HAL_GPIO_Init+0x354>)
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800167c:	693b      	ldr	r3, [r7, #16]
 800167e:	43db      	mvns	r3, r3
 8001680:	69ba      	ldr	r2, [r7, #24]
 8001682:	4013      	ands	r3, r2
 8001684:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001686:	683b      	ldr	r3, [r7, #0]
 8001688:	685b      	ldr	r3, [r3, #4]
 800168a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800168e:	2b00      	cmp	r3, #0
 8001690:	d003      	beq.n	800169a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001692:	69ba      	ldr	r2, [r7, #24]
 8001694:	693b      	ldr	r3, [r7, #16]
 8001696:	4313      	orrs	r3, r2
 8001698:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800169a:	4a34      	ldr	r2, [pc, #208]	; (800176c <HAL_GPIO_Init+0x354>)
 800169c:	69bb      	ldr	r3, [r7, #24]
 800169e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80016a0:	4b32      	ldr	r3, [pc, #200]	; (800176c <HAL_GPIO_Init+0x354>)
 80016a2:	685b      	ldr	r3, [r3, #4]
 80016a4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016a6:	693b      	ldr	r3, [r7, #16]
 80016a8:	43db      	mvns	r3, r3
 80016aa:	69ba      	ldr	r2, [r7, #24]
 80016ac:	4013      	ands	r3, r2
 80016ae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80016b0:	683b      	ldr	r3, [r7, #0]
 80016b2:	685b      	ldr	r3, [r3, #4]
 80016b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d003      	beq.n	80016c4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80016bc:	69ba      	ldr	r2, [r7, #24]
 80016be:	693b      	ldr	r3, [r7, #16]
 80016c0:	4313      	orrs	r3, r2
 80016c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80016c4:	4a29      	ldr	r2, [pc, #164]	; (800176c <HAL_GPIO_Init+0x354>)
 80016c6:	69bb      	ldr	r3, [r7, #24]
 80016c8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80016ca:	4b28      	ldr	r3, [pc, #160]	; (800176c <HAL_GPIO_Init+0x354>)
 80016cc:	689b      	ldr	r3, [r3, #8]
 80016ce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016d0:	693b      	ldr	r3, [r7, #16]
 80016d2:	43db      	mvns	r3, r3
 80016d4:	69ba      	ldr	r2, [r7, #24]
 80016d6:	4013      	ands	r3, r2
 80016d8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80016da:	683b      	ldr	r3, [r7, #0]
 80016dc:	685b      	ldr	r3, [r3, #4]
 80016de:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d003      	beq.n	80016ee <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80016e6:	69ba      	ldr	r2, [r7, #24]
 80016e8:	693b      	ldr	r3, [r7, #16]
 80016ea:	4313      	orrs	r3, r2
 80016ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80016ee:	4a1f      	ldr	r2, [pc, #124]	; (800176c <HAL_GPIO_Init+0x354>)
 80016f0:	69bb      	ldr	r3, [r7, #24]
 80016f2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80016f4:	4b1d      	ldr	r3, [pc, #116]	; (800176c <HAL_GPIO_Init+0x354>)
 80016f6:	68db      	ldr	r3, [r3, #12]
 80016f8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016fa:	693b      	ldr	r3, [r7, #16]
 80016fc:	43db      	mvns	r3, r3
 80016fe:	69ba      	ldr	r2, [r7, #24]
 8001700:	4013      	ands	r3, r2
 8001702:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001704:	683b      	ldr	r3, [r7, #0]
 8001706:	685b      	ldr	r3, [r3, #4]
 8001708:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800170c:	2b00      	cmp	r3, #0
 800170e:	d003      	beq.n	8001718 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001710:	69ba      	ldr	r2, [r7, #24]
 8001712:	693b      	ldr	r3, [r7, #16]
 8001714:	4313      	orrs	r3, r2
 8001716:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001718:	4a14      	ldr	r2, [pc, #80]	; (800176c <HAL_GPIO_Init+0x354>)
 800171a:	69bb      	ldr	r3, [r7, #24]
 800171c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800171e:	69fb      	ldr	r3, [r7, #28]
 8001720:	3301      	adds	r3, #1
 8001722:	61fb      	str	r3, [r7, #28]
 8001724:	69fb      	ldr	r3, [r7, #28]
 8001726:	2b0f      	cmp	r3, #15
 8001728:	f67f ae84 	bls.w	8001434 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800172c:	bf00      	nop
 800172e:	bf00      	nop
 8001730:	3724      	adds	r7, #36	; 0x24
 8001732:	46bd      	mov	sp, r7
 8001734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001738:	4770      	bx	lr
 800173a:	bf00      	nop
 800173c:	40023800 	.word	0x40023800
 8001740:	40013800 	.word	0x40013800
 8001744:	40020000 	.word	0x40020000
 8001748:	40020400 	.word	0x40020400
 800174c:	40020800 	.word	0x40020800
 8001750:	40020c00 	.word	0x40020c00
 8001754:	40021000 	.word	0x40021000
 8001758:	40021400 	.word	0x40021400
 800175c:	40021800 	.word	0x40021800
 8001760:	40021c00 	.word	0x40021c00
 8001764:	40022000 	.word	0x40022000
 8001768:	40022400 	.word	0x40022400
 800176c:	40013c00 	.word	0x40013c00

08001770 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001770:	b480      	push	{r7}
 8001772:	b083      	sub	sp, #12
 8001774:	af00      	add	r7, sp, #0
 8001776:	6078      	str	r0, [r7, #4]
 8001778:	460b      	mov	r3, r1
 800177a:	807b      	strh	r3, [r7, #2]
 800177c:	4613      	mov	r3, r2
 800177e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001780:	787b      	ldrb	r3, [r7, #1]
 8001782:	2b00      	cmp	r3, #0
 8001784:	d003      	beq.n	800178e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001786:	887a      	ldrh	r2, [r7, #2]
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800178c:	e003      	b.n	8001796 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800178e:	887b      	ldrh	r3, [r7, #2]
 8001790:	041a      	lsls	r2, r3, #16
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	619a      	str	r2, [r3, #24]
}
 8001796:	bf00      	nop
 8001798:	370c      	adds	r7, #12
 800179a:	46bd      	mov	sp, r7
 800179c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a0:	4770      	bx	lr
	...

080017a4 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b084      	sub	sp, #16
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]
  uint32_t tmp, tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d101      	bne.n	80017b6 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 80017b2:	2301      	movs	r3, #1
 80017b4:	e0bf      	b.n	8001936 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 80017bc:	b2db      	uxtb	r3, r3
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d106      	bne.n	80017d0 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	2200      	movs	r2, #0
 80017c6:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 80017ca:	6878      	ldr	r0, [r7, #4]
 80017cc:	f7ff f95c 	bl	8000a88 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	2202      	movs	r2, #2
 80017d4:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	699a      	ldr	r2, [r3, #24]
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 80017e6:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	6999      	ldr	r1, [r3, #24]
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	685a      	ldr	r2, [r3, #4]
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	689b      	ldr	r3, [r3, #8]
 80017f6:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80017fc:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	691b      	ldr	r3, [r3, #16]
 8001802:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	430a      	orrs	r2, r1
 800180a:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	6899      	ldr	r1, [r3, #8]
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681a      	ldr	r2, [r3, #0]
 8001816:	4b4a      	ldr	r3, [pc, #296]	; (8001940 <HAL_LTDC_Init+0x19c>)
 8001818:	400b      	ands	r3, r1
 800181a:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	695b      	ldr	r3, [r3, #20]
 8001820:	041b      	lsls	r3, r3, #16
 8001822:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	6899      	ldr	r1, [r3, #8]
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	699a      	ldr	r2, [r3, #24]
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	431a      	orrs	r2, r3
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	430a      	orrs	r2, r1
 8001838:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	68d9      	ldr	r1, [r3, #12]
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681a      	ldr	r2, [r3, #0]
 8001844:	4b3e      	ldr	r3, [pc, #248]	; (8001940 <HAL_LTDC_Init+0x19c>)
 8001846:	400b      	ands	r3, r1
 8001848:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	69db      	ldr	r3, [r3, #28]
 800184e:	041b      	lsls	r3, r3, #16
 8001850:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	68d9      	ldr	r1, [r3, #12]
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	6a1a      	ldr	r2, [r3, #32]
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	431a      	orrs	r2, r3
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	430a      	orrs	r2, r1
 8001866:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	6919      	ldr	r1, [r3, #16]
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681a      	ldr	r2, [r3, #0]
 8001872:	4b33      	ldr	r3, [pc, #204]	; (8001940 <HAL_LTDC_Init+0x19c>)
 8001874:	400b      	ands	r3, r1
 8001876:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800187c:	041b      	lsls	r3, r3, #16
 800187e:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	6919      	ldr	r1, [r3, #16]
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	431a      	orrs	r2, r3
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	430a      	orrs	r2, r1
 8001894:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	6959      	ldr	r1, [r3, #20]
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681a      	ldr	r2, [r3, #0]
 80018a0:	4b27      	ldr	r3, [pc, #156]	; (8001940 <HAL_LTDC_Init+0x19c>)
 80018a2:	400b      	ands	r3, r1
 80018a4:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018aa:	041b      	lsls	r3, r3, #16
 80018ac:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	6959      	ldr	r1, [r3, #20]
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	431a      	orrs	r2, r3
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	430a      	orrs	r2, r1
 80018c2:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80018ca:	021b      	lsls	r3, r3, #8
 80018cc:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 80018d4:	041b      	lsls	r3, r3, #16
 80018d6:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 80018e6:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80018ee:	68ba      	ldr	r2, [r7, #8]
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	4313      	orrs	r3, r2
 80018f4:	687a      	ldr	r2, [r7, #4]
 80018f6:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 80018fa:	431a      	orrs	r2, r3
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	430a      	orrs	r2, r1
 8001902:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	f042 0206 	orr.w	r2, r2, #6
 8001912:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	699a      	ldr	r2, [r3, #24]
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	f042 0201 	orr.w	r2, r2, #1
 8001922:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	2200      	movs	r2, #0
 8001928:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	2201      	movs	r2, #1
 8001930:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8001934:	2300      	movs	r3, #0
}
 8001936:	4618      	mov	r0, r3
 8001938:	3710      	adds	r7, #16
 800193a:	46bd      	mov	sp, r7
 800193c:	bd80      	pop	{r7, pc}
 800193e:	bf00      	nop
 8001940:	f000f800 	.word	0xf000f800

08001944 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	b084      	sub	sp, #16
 8001948:	af00      	add	r7, sp, #0
 800194a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001952:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800195a:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	f003 0304 	and.w	r3, r3, #4
 8001962:	2b00      	cmp	r3, #0
 8001964:	d023      	beq.n	80019ae <HAL_LTDC_IRQHandler+0x6a>
 8001966:	68bb      	ldr	r3, [r7, #8]
 8001968:	f003 0304 	and.w	r3, r3, #4
 800196c:	2b00      	cmp	r3, #0
 800196e:	d01e      	beq.n	80019ae <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	f022 0204 	bic.w	r2, r2, #4
 800197e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	2204      	movs	r2, #4
 8001986:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800198e:	f043 0201 	orr.w	r2, r3, #1
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	2204      	movs	r2, #4
 800199c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	2200      	movs	r2, #0
 80019a4:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 80019a8:	6878      	ldr	r0, [r7, #4]
 80019aa:	f000 f86f 	bl	8001a8c <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	f003 0302 	and.w	r3, r3, #2
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d023      	beq.n	8001a00 <HAL_LTDC_IRQHandler+0xbc>
 80019b8:	68bb      	ldr	r3, [r7, #8]
 80019ba:	f003 0302 	and.w	r3, r3, #2
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d01e      	beq.n	8001a00 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	f022 0202 	bic.w	r2, r2, #2
 80019d0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	2202      	movs	r2, #2
 80019d8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80019e0:	f043 0202 	orr.w	r2, r3, #2
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	2204      	movs	r2, #4
 80019ee:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	2200      	movs	r2, #0
 80019f6:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 80019fa:	6878      	ldr	r0, [r7, #4]
 80019fc:	f000 f846 	bl	8001a8c <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	f003 0301 	and.w	r3, r3, #1
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d01b      	beq.n	8001a42 <HAL_LTDC_IRQHandler+0xfe>
 8001a0a:	68bb      	ldr	r3, [r7, #8]
 8001a0c:	f003 0301 	and.w	r3, r3, #1
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d016      	beq.n	8001a42 <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	f022 0201 	bic.w	r2, r2, #1
 8001a22:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	2201      	movs	r2, #1
 8001a2a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	2201      	movs	r2, #1
 8001a30:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	2200      	movs	r2, #0
 8001a38:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 8001a3c:	6878      	ldr	r0, [r7, #4]
 8001a3e:	f000 f82f 	bl	8001aa0 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	f003 0308 	and.w	r3, r3, #8
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d01b      	beq.n	8001a84 <HAL_LTDC_IRQHandler+0x140>
 8001a4c:	68bb      	ldr	r3, [r7, #8]
 8001a4e:	f003 0308 	and.w	r3, r3, #8
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d016      	beq.n	8001a84 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	f022 0208 	bic.w	r2, r2, #8
 8001a64:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	2208      	movs	r2, #8
 8001a6c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	2201      	movs	r2, #1
 8001a72:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	2200      	movs	r2, #0
 8001a7a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 8001a7e:	6878      	ldr	r0, [r7, #4]
 8001a80:	f000 f818 	bl	8001ab4 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 8001a84:	bf00      	nop
 8001a86:	3710      	adds	r7, #16
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	bd80      	pop	{r7, pc}

08001a8c <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 8001a8c:	b480      	push	{r7}
 8001a8e:	b083      	sub	sp, #12
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 8001a94:	bf00      	nop
 8001a96:	370c      	adds	r7, #12
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9e:	4770      	bx	lr

08001aa0 <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8001aa0:	b480      	push	{r7}
 8001aa2:	b083      	sub	sp, #12
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 8001aa8:	bf00      	nop
 8001aaa:	370c      	adds	r7, #12
 8001aac:	46bd      	mov	sp, r7
 8001aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab2:	4770      	bx	lr

08001ab4 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8001ab4:	b480      	push	{r7}
 8001ab6:	b083      	sub	sp, #12
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 8001abc:	bf00      	nop
 8001abe:	370c      	adds	r7, #12
 8001ac0:	46bd      	mov	sp, r7
 8001ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac6:	4770      	bx	lr

08001ac8 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8001ac8:	b5b0      	push	{r4, r5, r7, lr}
 8001aca:	b084      	sub	sp, #16
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	60f8      	str	r0, [r7, #12]
 8001ad0:	60b9      	str	r1, [r7, #8]
 8001ad2:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8001ada:	2b01      	cmp	r3, #1
 8001adc:	d101      	bne.n	8001ae2 <HAL_LTDC_ConfigLayer+0x1a>
 8001ade:	2302      	movs	r3, #2
 8001ae0:	e02c      	b.n	8001b3c <HAL_LTDC_ConfigLayer+0x74>
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	2201      	movs	r2, #1
 8001ae6:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	2202      	movs	r2, #2
 8001aee:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8001af2:	68fa      	ldr	r2, [r7, #12]
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	2134      	movs	r1, #52	; 0x34
 8001af8:	fb01 f303 	mul.w	r3, r1, r3
 8001afc:	4413      	add	r3, r2
 8001afe:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8001b02:	68bb      	ldr	r3, [r7, #8]
 8001b04:	4614      	mov	r4, r2
 8001b06:	461d      	mov	r5, r3
 8001b08:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001b0a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001b0c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001b0e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001b10:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001b12:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001b14:	682b      	ldr	r3, [r5, #0]
 8001b16:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8001b18:	687a      	ldr	r2, [r7, #4]
 8001b1a:	68b9      	ldr	r1, [r7, #8]
 8001b1c:	68f8      	ldr	r0, [r7, #12]
 8001b1e:	f000 f811 	bl	8001b44 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	2201      	movs	r2, #1
 8001b28:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	2201      	movs	r2, #1
 8001b2e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	2200      	movs	r2, #0
 8001b36:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8001b3a:	2300      	movs	r3, #0
}
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	3710      	adds	r7, #16
 8001b40:	46bd      	mov	sp, r7
 8001b42:	bdb0      	pop	{r4, r5, r7, pc}

08001b44 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8001b44:	b480      	push	{r7}
 8001b46:	b089      	sub	sp, #36	; 0x24
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	60f8      	str	r0, [r7, #12]
 8001b4c:	60b9      	str	r1, [r7, #8]
 8001b4e:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8001b50:	68bb      	ldr	r3, [r7, #8]
 8001b52:	685a      	ldr	r2, [r3, #4]
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	68db      	ldr	r3, [r3, #12]
 8001b5a:	0c1b      	lsrs	r3, r3, #16
 8001b5c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001b60:	4413      	add	r3, r2
 8001b62:	041b      	lsls	r3, r3, #16
 8001b64:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	461a      	mov	r2, r3
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	01db      	lsls	r3, r3, #7
 8001b70:	4413      	add	r3, r2
 8001b72:	3384      	adds	r3, #132	; 0x84
 8001b74:	685b      	ldr	r3, [r3, #4]
 8001b76:	68fa      	ldr	r2, [r7, #12]
 8001b78:	6812      	ldr	r2, [r2, #0]
 8001b7a:	4611      	mov	r1, r2
 8001b7c:	687a      	ldr	r2, [r7, #4]
 8001b7e:	01d2      	lsls	r2, r2, #7
 8001b80:	440a      	add	r2, r1
 8001b82:	3284      	adds	r2, #132	; 0x84
 8001b84:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8001b88:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8001b8a:	68bb      	ldr	r3, [r7, #8]
 8001b8c:	681a      	ldr	r2, [r3, #0]
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	68db      	ldr	r3, [r3, #12]
 8001b94:	0c1b      	lsrs	r3, r3, #16
 8001b96:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001b9a:	4413      	add	r3, r2
 8001b9c:	1c5a      	adds	r2, r3, #1
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	4619      	mov	r1, r3
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	01db      	lsls	r3, r3, #7
 8001ba8:	440b      	add	r3, r1
 8001baa:	3384      	adds	r3, #132	; 0x84
 8001bac:	4619      	mov	r1, r3
 8001bae:	69fb      	ldr	r3, [r7, #28]
 8001bb0:	4313      	orrs	r3, r2
 8001bb2:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8001bb4:	68bb      	ldr	r3, [r7, #8]
 8001bb6:	68da      	ldr	r2, [r3, #12]
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	68db      	ldr	r3, [r3, #12]
 8001bbe:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001bc2:	4413      	add	r3, r2
 8001bc4:	041b      	lsls	r3, r3, #16
 8001bc6:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	461a      	mov	r2, r3
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	01db      	lsls	r3, r3, #7
 8001bd2:	4413      	add	r3, r2
 8001bd4:	3384      	adds	r3, #132	; 0x84
 8001bd6:	689b      	ldr	r3, [r3, #8]
 8001bd8:	68fa      	ldr	r2, [r7, #12]
 8001bda:	6812      	ldr	r2, [r2, #0]
 8001bdc:	4611      	mov	r1, r2
 8001bde:	687a      	ldr	r2, [r7, #4]
 8001be0:	01d2      	lsls	r2, r2, #7
 8001be2:	440a      	add	r2, r1
 8001be4:	3284      	adds	r2, #132	; 0x84
 8001be6:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8001bea:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8001bec:	68bb      	ldr	r3, [r7, #8]
 8001bee:	689a      	ldr	r2, [r3, #8]
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	68db      	ldr	r3, [r3, #12]
 8001bf6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001bfa:	4413      	add	r3, r2
 8001bfc:	1c5a      	adds	r2, r3, #1
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	4619      	mov	r1, r3
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	01db      	lsls	r3, r3, #7
 8001c08:	440b      	add	r3, r1
 8001c0a:	3384      	adds	r3, #132	; 0x84
 8001c0c:	4619      	mov	r1, r3
 8001c0e:	69fb      	ldr	r3, [r7, #28]
 8001c10:	4313      	orrs	r3, r2
 8001c12:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	461a      	mov	r2, r3
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	01db      	lsls	r3, r3, #7
 8001c1e:	4413      	add	r3, r2
 8001c20:	3384      	adds	r3, #132	; 0x84
 8001c22:	691b      	ldr	r3, [r3, #16]
 8001c24:	68fa      	ldr	r2, [r7, #12]
 8001c26:	6812      	ldr	r2, [r2, #0]
 8001c28:	4611      	mov	r1, r2
 8001c2a:	687a      	ldr	r2, [r7, #4]
 8001c2c:	01d2      	lsls	r2, r2, #7
 8001c2e:	440a      	add	r2, r1
 8001c30:	3284      	adds	r2, #132	; 0x84
 8001c32:	f023 0307 	bic.w	r3, r3, #7
 8001c36:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	461a      	mov	r2, r3
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	01db      	lsls	r3, r3, #7
 8001c42:	4413      	add	r3, r2
 8001c44:	3384      	adds	r3, #132	; 0x84
 8001c46:	461a      	mov	r2, r3
 8001c48:	68bb      	ldr	r3, [r7, #8]
 8001c4a:	691b      	ldr	r3, [r3, #16]
 8001c4c:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8001c4e:	68bb      	ldr	r3, [r7, #8]
 8001c50:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8001c54:	021b      	lsls	r3, r3, #8
 8001c56:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8001c58:	68bb      	ldr	r3, [r7, #8]
 8001c5a:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8001c5e:	041b      	lsls	r3, r3, #16
 8001c60:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8001c62:	68bb      	ldr	r3, [r7, #8]
 8001c64:	699b      	ldr	r3, [r3, #24]
 8001c66:	061b      	lsls	r3, r3, #24
 8001c68:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	461a      	mov	r2, r3
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	01db      	lsls	r3, r3, #7
 8001c74:	4413      	add	r3, r2
 8001c76:	3384      	adds	r3, #132	; 0x84
 8001c78:	699b      	ldr	r3, [r3, #24]
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	461a      	mov	r2, r3
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	01db      	lsls	r3, r3, #7
 8001c84:	4413      	add	r3, r2
 8001c86:	3384      	adds	r3, #132	; 0x84
 8001c88:	461a      	mov	r2, r3
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8001c8e:	68bb      	ldr	r3, [r7, #8]
 8001c90:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001c94:	461a      	mov	r2, r3
 8001c96:	69fb      	ldr	r3, [r7, #28]
 8001c98:	431a      	orrs	r2, r3
 8001c9a:	69bb      	ldr	r3, [r7, #24]
 8001c9c:	431a      	orrs	r2, r3
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	4619      	mov	r1, r3
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	01db      	lsls	r3, r3, #7
 8001ca8:	440b      	add	r3, r1
 8001caa:	3384      	adds	r3, #132	; 0x84
 8001cac:	4619      	mov	r1, r3
 8001cae:	697b      	ldr	r3, [r7, #20]
 8001cb0:	4313      	orrs	r3, r2
 8001cb2:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	461a      	mov	r2, r3
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	01db      	lsls	r3, r3, #7
 8001cbe:	4413      	add	r3, r2
 8001cc0:	3384      	adds	r3, #132	; 0x84
 8001cc2:	695b      	ldr	r3, [r3, #20]
 8001cc4:	68fa      	ldr	r2, [r7, #12]
 8001cc6:	6812      	ldr	r2, [r2, #0]
 8001cc8:	4611      	mov	r1, r2
 8001cca:	687a      	ldr	r2, [r7, #4]
 8001ccc:	01d2      	lsls	r2, r2, #7
 8001cce:	440a      	add	r2, r1
 8001cd0:	3284      	adds	r2, #132	; 0x84
 8001cd2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001cd6:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	461a      	mov	r2, r3
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	01db      	lsls	r3, r3, #7
 8001ce2:	4413      	add	r3, r2
 8001ce4:	3384      	adds	r3, #132	; 0x84
 8001ce6:	461a      	mov	r2, r3
 8001ce8:	68bb      	ldr	r3, [r7, #8]
 8001cea:	695b      	ldr	r3, [r3, #20]
 8001cec:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	461a      	mov	r2, r3
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	01db      	lsls	r3, r3, #7
 8001cf8:	4413      	add	r3, r2
 8001cfa:	3384      	adds	r3, #132	; 0x84
 8001cfc:	69db      	ldr	r3, [r3, #28]
 8001cfe:	68fa      	ldr	r2, [r7, #12]
 8001d00:	6812      	ldr	r2, [r2, #0]
 8001d02:	4611      	mov	r1, r2
 8001d04:	687a      	ldr	r2, [r7, #4]
 8001d06:	01d2      	lsls	r2, r2, #7
 8001d08:	440a      	add	r2, r1
 8001d0a:	3284      	adds	r2, #132	; 0x84
 8001d0c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001d10:	f023 0307 	bic.w	r3, r3, #7
 8001d14:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8001d16:	68bb      	ldr	r3, [r7, #8]
 8001d18:	69da      	ldr	r2, [r3, #28]
 8001d1a:	68bb      	ldr	r3, [r7, #8]
 8001d1c:	6a1b      	ldr	r3, [r3, #32]
 8001d1e:	68f9      	ldr	r1, [r7, #12]
 8001d20:	6809      	ldr	r1, [r1, #0]
 8001d22:	4608      	mov	r0, r1
 8001d24:	6879      	ldr	r1, [r7, #4]
 8001d26:	01c9      	lsls	r1, r1, #7
 8001d28:	4401      	add	r1, r0
 8001d2a:	3184      	adds	r1, #132	; 0x84
 8001d2c:	4313      	orrs	r3, r2
 8001d2e:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	461a      	mov	r2, r3
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	01db      	lsls	r3, r3, #7
 8001d3a:	4413      	add	r3, r2
 8001d3c:	3384      	adds	r3, #132	; 0x84
 8001d3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	461a      	mov	r2, r3
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	01db      	lsls	r3, r3, #7
 8001d4a:	4413      	add	r3, r2
 8001d4c:	3384      	adds	r3, #132	; 0x84
 8001d4e:	461a      	mov	r2, r3
 8001d50:	2300      	movs	r3, #0
 8001d52:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	461a      	mov	r2, r3
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	01db      	lsls	r3, r3, #7
 8001d5e:	4413      	add	r3, r2
 8001d60:	3384      	adds	r3, #132	; 0x84
 8001d62:	461a      	mov	r2, r3
 8001d64:	68bb      	ldr	r3, [r7, #8]
 8001d66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d68:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8001d6a:	68bb      	ldr	r3, [r7, #8]
 8001d6c:	691b      	ldr	r3, [r3, #16]
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d102      	bne.n	8001d78 <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 8001d72:	2304      	movs	r3, #4
 8001d74:	61fb      	str	r3, [r7, #28]
 8001d76:	e01b      	b.n	8001db0 <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8001d78:	68bb      	ldr	r3, [r7, #8]
 8001d7a:	691b      	ldr	r3, [r3, #16]
 8001d7c:	2b01      	cmp	r3, #1
 8001d7e:	d102      	bne.n	8001d86 <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 8001d80:	2303      	movs	r3, #3
 8001d82:	61fb      	str	r3, [r7, #28]
 8001d84:	e014      	b.n	8001db0 <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8001d86:	68bb      	ldr	r3, [r7, #8]
 8001d88:	691b      	ldr	r3, [r3, #16]
 8001d8a:	2b04      	cmp	r3, #4
 8001d8c:	d00b      	beq.n	8001da6 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8001d8e:	68bb      	ldr	r3, [r7, #8]
 8001d90:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8001d92:	2b02      	cmp	r3, #2
 8001d94:	d007      	beq.n	8001da6 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8001d96:	68bb      	ldr	r3, [r7, #8]
 8001d98:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8001d9a:	2b03      	cmp	r3, #3
 8001d9c:	d003      	beq.n	8001da6 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8001d9e:	68bb      	ldr	r3, [r7, #8]
 8001da0:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8001da2:	2b07      	cmp	r3, #7
 8001da4:	d102      	bne.n	8001dac <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 8001da6:	2302      	movs	r3, #2
 8001da8:	61fb      	str	r3, [r7, #28]
 8001daa:	e001      	b.n	8001db0 <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 8001dac:	2301      	movs	r3, #1
 8001dae:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	461a      	mov	r2, r3
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	01db      	lsls	r3, r3, #7
 8001dba:	4413      	add	r3, r2
 8001dbc:	3384      	adds	r3, #132	; 0x84
 8001dbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dc0:	68fa      	ldr	r2, [r7, #12]
 8001dc2:	6812      	ldr	r2, [r2, #0]
 8001dc4:	4611      	mov	r1, r2
 8001dc6:	687a      	ldr	r2, [r7, #4]
 8001dc8:	01d2      	lsls	r2, r2, #7
 8001dca:	440a      	add	r2, r1
 8001dcc:	3284      	adds	r2, #132	; 0x84
 8001dce:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 8001dd2:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8001dd4:	68bb      	ldr	r3, [r7, #8]
 8001dd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001dd8:	69fa      	ldr	r2, [r7, #28]
 8001dda:	fb02 f303 	mul.w	r3, r2, r3
 8001dde:	041a      	lsls	r2, r3, #16
 8001de0:	68bb      	ldr	r3, [r7, #8]
 8001de2:	6859      	ldr	r1, [r3, #4]
 8001de4:	68bb      	ldr	r3, [r7, #8]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	1acb      	subs	r3, r1, r3
 8001dea:	69f9      	ldr	r1, [r7, #28]
 8001dec:	fb01 f303 	mul.w	r3, r1, r3
 8001df0:	3303      	adds	r3, #3
 8001df2:	68f9      	ldr	r1, [r7, #12]
 8001df4:	6809      	ldr	r1, [r1, #0]
 8001df6:	4608      	mov	r0, r1
 8001df8:	6879      	ldr	r1, [r7, #4]
 8001dfa:	01c9      	lsls	r1, r1, #7
 8001dfc:	4401      	add	r1, r0
 8001dfe:	3184      	adds	r1, #132	; 0x84
 8001e00:	4313      	orrs	r3, r2
 8001e02:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	461a      	mov	r2, r3
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	01db      	lsls	r3, r3, #7
 8001e0e:	4413      	add	r3, r2
 8001e10:	3384      	adds	r3, #132	; 0x84
 8001e12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e14:	68fa      	ldr	r2, [r7, #12]
 8001e16:	6812      	ldr	r2, [r2, #0]
 8001e18:	4611      	mov	r1, r2
 8001e1a:	687a      	ldr	r2, [r7, #4]
 8001e1c:	01d2      	lsls	r2, r2, #7
 8001e1e:	440a      	add	r2, r1
 8001e20:	3284      	adds	r2, #132	; 0x84
 8001e22:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8001e26:	f023 0307 	bic.w	r3, r3, #7
 8001e2a:	6313      	str	r3, [r2, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	461a      	mov	r2, r3
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	01db      	lsls	r3, r3, #7
 8001e36:	4413      	add	r3, r2
 8001e38:	3384      	adds	r3, #132	; 0x84
 8001e3a:	461a      	mov	r2, r3
 8001e3c:	68bb      	ldr	r3, [r7, #8]
 8001e3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e40:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	461a      	mov	r2, r3
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	01db      	lsls	r3, r3, #7
 8001e4c:	4413      	add	r3, r2
 8001e4e:	3384      	adds	r3, #132	; 0x84
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	68fa      	ldr	r2, [r7, #12]
 8001e54:	6812      	ldr	r2, [r2, #0]
 8001e56:	4611      	mov	r1, r2
 8001e58:	687a      	ldr	r2, [r7, #4]
 8001e5a:	01d2      	lsls	r2, r2, #7
 8001e5c:	440a      	add	r2, r1
 8001e5e:	3284      	adds	r2, #132	; 0x84
 8001e60:	f043 0301 	orr.w	r3, r3, #1
 8001e64:	6013      	str	r3, [r2, #0]
}
 8001e66:	bf00      	nop
 8001e68:	3724      	adds	r7, #36	; 0x24
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e70:	4770      	bx	lr

08001e72 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001e72:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001e74:	b08f      	sub	sp, #60	; 0x3c
 8001e76:	af0a      	add	r7, sp, #40	; 0x28
 8001e78:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d101      	bne.n	8001e84 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001e80:	2301      	movs	r3, #1
 8001e82:	e116      	b.n	80020b2 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8001e90:	b2db      	uxtb	r3, r3
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d106      	bne.n	8001ea4 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	2200      	movs	r2, #0
 8001e9a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001e9e:	6878      	ldr	r0, [r7, #4]
 8001ea0:	f006 fb48 	bl	8008534 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	2203      	movs	r2, #3
 8001ea8:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001eac:	68bb      	ldr	r3, [r7, #8]
 8001eae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001eb0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d102      	bne.n	8001ebe <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	2200      	movs	r2, #0
 8001ebc:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	4618      	mov	r0, r3
 8001ec4:	f003 fa5b 	bl	800537e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	603b      	str	r3, [r7, #0]
 8001ece:	687e      	ldr	r6, [r7, #4]
 8001ed0:	466d      	mov	r5, sp
 8001ed2:	f106 0410 	add.w	r4, r6, #16
 8001ed6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001ed8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001eda:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001edc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001ede:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001ee2:	e885 0003 	stmia.w	r5, {r0, r1}
 8001ee6:	1d33      	adds	r3, r6, #4
 8001ee8:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001eea:	6838      	ldr	r0, [r7, #0]
 8001eec:	f003 f932 	bl	8005154 <USB_CoreInit>
 8001ef0:	4603      	mov	r3, r0
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d005      	beq.n	8001f02 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	2202      	movs	r2, #2
 8001efa:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8001efe:	2301      	movs	r3, #1
 8001f00:	e0d7      	b.n	80020b2 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	2100      	movs	r1, #0
 8001f08:	4618      	mov	r0, r3
 8001f0a:	f003 fa49 	bl	80053a0 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001f0e:	2300      	movs	r3, #0
 8001f10:	73fb      	strb	r3, [r7, #15]
 8001f12:	e04a      	b.n	8001faa <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001f14:	7bfa      	ldrb	r2, [r7, #15]
 8001f16:	6879      	ldr	r1, [r7, #4]
 8001f18:	4613      	mov	r3, r2
 8001f1a:	00db      	lsls	r3, r3, #3
 8001f1c:	1a9b      	subs	r3, r3, r2
 8001f1e:	009b      	lsls	r3, r3, #2
 8001f20:	440b      	add	r3, r1
 8001f22:	333d      	adds	r3, #61	; 0x3d
 8001f24:	2201      	movs	r2, #1
 8001f26:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001f28:	7bfa      	ldrb	r2, [r7, #15]
 8001f2a:	6879      	ldr	r1, [r7, #4]
 8001f2c:	4613      	mov	r3, r2
 8001f2e:	00db      	lsls	r3, r3, #3
 8001f30:	1a9b      	subs	r3, r3, r2
 8001f32:	009b      	lsls	r3, r3, #2
 8001f34:	440b      	add	r3, r1
 8001f36:	333c      	adds	r3, #60	; 0x3c
 8001f38:	7bfa      	ldrb	r2, [r7, #15]
 8001f3a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001f3c:	7bfa      	ldrb	r2, [r7, #15]
 8001f3e:	7bfb      	ldrb	r3, [r7, #15]
 8001f40:	b298      	uxth	r0, r3
 8001f42:	6879      	ldr	r1, [r7, #4]
 8001f44:	4613      	mov	r3, r2
 8001f46:	00db      	lsls	r3, r3, #3
 8001f48:	1a9b      	subs	r3, r3, r2
 8001f4a:	009b      	lsls	r3, r3, #2
 8001f4c:	440b      	add	r3, r1
 8001f4e:	3342      	adds	r3, #66	; 0x42
 8001f50:	4602      	mov	r2, r0
 8001f52:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001f54:	7bfa      	ldrb	r2, [r7, #15]
 8001f56:	6879      	ldr	r1, [r7, #4]
 8001f58:	4613      	mov	r3, r2
 8001f5a:	00db      	lsls	r3, r3, #3
 8001f5c:	1a9b      	subs	r3, r3, r2
 8001f5e:	009b      	lsls	r3, r3, #2
 8001f60:	440b      	add	r3, r1
 8001f62:	333f      	adds	r3, #63	; 0x3f
 8001f64:	2200      	movs	r2, #0
 8001f66:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001f68:	7bfa      	ldrb	r2, [r7, #15]
 8001f6a:	6879      	ldr	r1, [r7, #4]
 8001f6c:	4613      	mov	r3, r2
 8001f6e:	00db      	lsls	r3, r3, #3
 8001f70:	1a9b      	subs	r3, r3, r2
 8001f72:	009b      	lsls	r3, r3, #2
 8001f74:	440b      	add	r3, r1
 8001f76:	3344      	adds	r3, #68	; 0x44
 8001f78:	2200      	movs	r2, #0
 8001f7a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001f7c:	7bfa      	ldrb	r2, [r7, #15]
 8001f7e:	6879      	ldr	r1, [r7, #4]
 8001f80:	4613      	mov	r3, r2
 8001f82:	00db      	lsls	r3, r3, #3
 8001f84:	1a9b      	subs	r3, r3, r2
 8001f86:	009b      	lsls	r3, r3, #2
 8001f88:	440b      	add	r3, r1
 8001f8a:	3348      	adds	r3, #72	; 0x48
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001f90:	7bfa      	ldrb	r2, [r7, #15]
 8001f92:	6879      	ldr	r1, [r7, #4]
 8001f94:	4613      	mov	r3, r2
 8001f96:	00db      	lsls	r3, r3, #3
 8001f98:	1a9b      	subs	r3, r3, r2
 8001f9a:	009b      	lsls	r3, r3, #2
 8001f9c:	440b      	add	r3, r1
 8001f9e:	3350      	adds	r3, #80	; 0x50
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001fa4:	7bfb      	ldrb	r3, [r7, #15]
 8001fa6:	3301      	adds	r3, #1
 8001fa8:	73fb      	strb	r3, [r7, #15]
 8001faa:	7bfa      	ldrb	r2, [r7, #15]
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	685b      	ldr	r3, [r3, #4]
 8001fb0:	429a      	cmp	r2, r3
 8001fb2:	d3af      	bcc.n	8001f14 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001fb4:	2300      	movs	r3, #0
 8001fb6:	73fb      	strb	r3, [r7, #15]
 8001fb8:	e044      	b.n	8002044 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001fba:	7bfa      	ldrb	r2, [r7, #15]
 8001fbc:	6879      	ldr	r1, [r7, #4]
 8001fbe:	4613      	mov	r3, r2
 8001fc0:	00db      	lsls	r3, r3, #3
 8001fc2:	1a9b      	subs	r3, r3, r2
 8001fc4:	009b      	lsls	r3, r3, #2
 8001fc6:	440b      	add	r3, r1
 8001fc8:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8001fcc:	2200      	movs	r2, #0
 8001fce:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001fd0:	7bfa      	ldrb	r2, [r7, #15]
 8001fd2:	6879      	ldr	r1, [r7, #4]
 8001fd4:	4613      	mov	r3, r2
 8001fd6:	00db      	lsls	r3, r3, #3
 8001fd8:	1a9b      	subs	r3, r3, r2
 8001fda:	009b      	lsls	r3, r3, #2
 8001fdc:	440b      	add	r3, r1
 8001fde:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8001fe2:	7bfa      	ldrb	r2, [r7, #15]
 8001fe4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001fe6:	7bfa      	ldrb	r2, [r7, #15]
 8001fe8:	6879      	ldr	r1, [r7, #4]
 8001fea:	4613      	mov	r3, r2
 8001fec:	00db      	lsls	r3, r3, #3
 8001fee:	1a9b      	subs	r3, r3, r2
 8001ff0:	009b      	lsls	r3, r3, #2
 8001ff2:	440b      	add	r3, r1
 8001ff4:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001ffc:	7bfa      	ldrb	r2, [r7, #15]
 8001ffe:	6879      	ldr	r1, [r7, #4]
 8002000:	4613      	mov	r3, r2
 8002002:	00db      	lsls	r3, r3, #3
 8002004:	1a9b      	subs	r3, r3, r2
 8002006:	009b      	lsls	r3, r3, #2
 8002008:	440b      	add	r3, r1
 800200a:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800200e:	2200      	movs	r2, #0
 8002010:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002012:	7bfa      	ldrb	r2, [r7, #15]
 8002014:	6879      	ldr	r1, [r7, #4]
 8002016:	4613      	mov	r3, r2
 8002018:	00db      	lsls	r3, r3, #3
 800201a:	1a9b      	subs	r3, r3, r2
 800201c:	009b      	lsls	r3, r3, #2
 800201e:	440b      	add	r3, r1
 8002020:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002024:	2200      	movs	r2, #0
 8002026:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002028:	7bfa      	ldrb	r2, [r7, #15]
 800202a:	6879      	ldr	r1, [r7, #4]
 800202c:	4613      	mov	r3, r2
 800202e:	00db      	lsls	r3, r3, #3
 8002030:	1a9b      	subs	r3, r3, r2
 8002032:	009b      	lsls	r3, r3, #2
 8002034:	440b      	add	r3, r1
 8002036:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800203a:	2200      	movs	r2, #0
 800203c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800203e:	7bfb      	ldrb	r3, [r7, #15]
 8002040:	3301      	adds	r3, #1
 8002042:	73fb      	strb	r3, [r7, #15]
 8002044:	7bfa      	ldrb	r2, [r7, #15]
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	685b      	ldr	r3, [r3, #4]
 800204a:	429a      	cmp	r2, r3
 800204c:	d3b5      	bcc.n	8001fba <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	603b      	str	r3, [r7, #0]
 8002054:	687e      	ldr	r6, [r7, #4]
 8002056:	466d      	mov	r5, sp
 8002058:	f106 0410 	add.w	r4, r6, #16
 800205c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800205e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002060:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002062:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002064:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002068:	e885 0003 	stmia.w	r5, {r0, r1}
 800206c:	1d33      	adds	r3, r6, #4
 800206e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002070:	6838      	ldr	r0, [r7, #0]
 8002072:	f003 f9e1 	bl	8005438 <USB_DevInit>
 8002076:	4603      	mov	r3, r0
 8002078:	2b00      	cmp	r3, #0
 800207a:	d005      	beq.n	8002088 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	2202      	movs	r2, #2
 8002080:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002084:	2301      	movs	r3, #1
 8002086:	e014      	b.n	80020b2 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	2200      	movs	r2, #0
 800208c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	2201      	movs	r2, #1
 8002094:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800209c:	2b01      	cmp	r3, #1
 800209e:	d102      	bne.n	80020a6 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80020a0:	6878      	ldr	r0, [r7, #4]
 80020a2:	f001 f891 	bl	80031c8 <HAL_PCDEx_ActivateLPM>
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	4618      	mov	r0, r3
 80020ac:	f004 fa50 	bl	8006550 <USB_DevDisconnect>

  return HAL_OK;
 80020b0:	2300      	movs	r3, #0
}
 80020b2:	4618      	mov	r0, r3
 80020b4:	3714      	adds	r7, #20
 80020b6:	46bd      	mov	sp, r7
 80020b8:	bdf0      	pop	{r4, r5, r6, r7, pc}

080020ba <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80020ba:	b580      	push	{r7, lr}
 80020bc:	b084      	sub	sp, #16
 80020be:	af00      	add	r7, sp, #0
 80020c0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80020ce:	2b01      	cmp	r3, #1
 80020d0:	d101      	bne.n	80020d6 <HAL_PCD_Start+0x1c>
 80020d2:	2302      	movs	r3, #2
 80020d4:	e020      	b.n	8002118 <HAL_PCD_Start+0x5e>
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	2201      	movs	r2, #1
 80020da:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020e2:	2b01      	cmp	r3, #1
 80020e4:	d109      	bne.n	80020fa <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80020ea:	2b01      	cmp	r3, #1
 80020ec:	d005      	beq.n	80020fa <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020f2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	4618      	mov	r0, r3
 8002100:	f003 f92c 	bl	800535c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	4618      	mov	r0, r3
 800210a:	f004 fa00 	bl	800650e <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	2200      	movs	r2, #0
 8002112:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002116:	2300      	movs	r3, #0
}
 8002118:	4618      	mov	r0, r3
 800211a:	3710      	adds	r7, #16
 800211c:	46bd      	mov	sp, r7
 800211e:	bd80      	pop	{r7, pc}

08002120 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002120:	b590      	push	{r4, r7, lr}
 8002122:	b08d      	sub	sp, #52	; 0x34
 8002124:	af00      	add	r7, sp, #0
 8002126:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800212e:	6a3b      	ldr	r3, [r7, #32]
 8002130:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t temp;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	4618      	mov	r0, r3
 8002138:	f004 fabe 	bl	80066b8 <USB_GetMode>
 800213c:	4603      	mov	r3, r0
 800213e:	2b00      	cmp	r3, #0
 8002140:	f040 83ca 	bne.w	80028d8 <HAL_PCD_IRQHandler+0x7b8>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	4618      	mov	r0, r3
 800214a:	f004 fa22 	bl	8006592 <USB_ReadInterrupts>
 800214e:	4603      	mov	r3, r0
 8002150:	2b00      	cmp	r3, #0
 8002152:	f000 83c0 	beq.w	80028d6 <HAL_PCD_IRQHandler+0x7b6>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	4618      	mov	r0, r3
 800215c:	f004 fa19 	bl	8006592 <USB_ReadInterrupts>
 8002160:	4603      	mov	r3, r0
 8002162:	f003 0302 	and.w	r3, r3, #2
 8002166:	2b02      	cmp	r3, #2
 8002168:	d107      	bne.n	800217a <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	695a      	ldr	r2, [r3, #20]
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	f002 0202 	and.w	r2, r2, #2
 8002178:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	4618      	mov	r0, r3
 8002180:	f004 fa07 	bl	8006592 <USB_ReadInterrupts>
 8002184:	4603      	mov	r3, r0
 8002186:	f003 0310 	and.w	r3, r3, #16
 800218a:	2b10      	cmp	r3, #16
 800218c:	d161      	bne.n	8002252 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	699a      	ldr	r2, [r3, #24]
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	f022 0210 	bic.w	r2, r2, #16
 800219c:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 800219e:	6a3b      	ldr	r3, [r7, #32]
 80021a0:	6a1b      	ldr	r3, [r3, #32]
 80021a2:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 80021a4:	69bb      	ldr	r3, [r7, #24]
 80021a6:	f003 020f 	and.w	r2, r3, #15
 80021aa:	4613      	mov	r3, r2
 80021ac:	00db      	lsls	r3, r3, #3
 80021ae:	1a9b      	subs	r3, r3, r2
 80021b0:	009b      	lsls	r3, r3, #2
 80021b2:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80021b6:	687a      	ldr	r2, [r7, #4]
 80021b8:	4413      	add	r3, r2
 80021ba:	3304      	adds	r3, #4
 80021bc:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80021be:	69bb      	ldr	r3, [r7, #24]
 80021c0:	0c5b      	lsrs	r3, r3, #17
 80021c2:	f003 030f 	and.w	r3, r3, #15
 80021c6:	2b02      	cmp	r3, #2
 80021c8:	d124      	bne.n	8002214 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 80021ca:	69ba      	ldr	r2, [r7, #24]
 80021cc:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80021d0:	4013      	ands	r3, r2
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d035      	beq.n	8002242 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80021d6:	697b      	ldr	r3, [r7, #20]
 80021d8:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 80021da:	69bb      	ldr	r3, [r7, #24]
 80021dc:	091b      	lsrs	r3, r3, #4
 80021de:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80021e0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80021e4:	b29b      	uxth	r3, r3
 80021e6:	461a      	mov	r2, r3
 80021e8:	6a38      	ldr	r0, [r7, #32]
 80021ea:	f004 f83e 	bl	800626a <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80021ee:	697b      	ldr	r3, [r7, #20]
 80021f0:	68da      	ldr	r2, [r3, #12]
 80021f2:	69bb      	ldr	r3, [r7, #24]
 80021f4:	091b      	lsrs	r3, r3, #4
 80021f6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80021fa:	441a      	add	r2, r3
 80021fc:	697b      	ldr	r3, [r7, #20]
 80021fe:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002200:	697b      	ldr	r3, [r7, #20]
 8002202:	699a      	ldr	r2, [r3, #24]
 8002204:	69bb      	ldr	r3, [r7, #24]
 8002206:	091b      	lsrs	r3, r3, #4
 8002208:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800220c:	441a      	add	r2, r3
 800220e:	697b      	ldr	r3, [r7, #20]
 8002210:	619a      	str	r2, [r3, #24]
 8002212:	e016      	b.n	8002242 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8002214:	69bb      	ldr	r3, [r7, #24]
 8002216:	0c5b      	lsrs	r3, r3, #17
 8002218:	f003 030f 	and.w	r3, r3, #15
 800221c:	2b06      	cmp	r3, #6
 800221e:	d110      	bne.n	8002242 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002226:	2208      	movs	r2, #8
 8002228:	4619      	mov	r1, r3
 800222a:	6a38      	ldr	r0, [r7, #32]
 800222c:	f004 f81d 	bl	800626a <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002230:	697b      	ldr	r3, [r7, #20]
 8002232:	699a      	ldr	r2, [r3, #24]
 8002234:	69bb      	ldr	r3, [r7, #24]
 8002236:	091b      	lsrs	r3, r3, #4
 8002238:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800223c:	441a      	add	r2, r3
 800223e:	697b      	ldr	r3, [r7, #20]
 8002240:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	699a      	ldr	r2, [r3, #24]
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	f042 0210 	orr.w	r2, r2, #16
 8002250:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	4618      	mov	r0, r3
 8002258:	f004 f99b 	bl	8006592 <USB_ReadInterrupts>
 800225c:	4603      	mov	r3, r0
 800225e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002262:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002266:	d16e      	bne.n	8002346 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8002268:	2300      	movs	r3, #0
 800226a:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	4618      	mov	r0, r3
 8002272:	f004 f9a1 	bl	80065b8 <USB_ReadDevAllOutEpInterrupt>
 8002276:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8002278:	e062      	b.n	8002340 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 800227a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800227c:	f003 0301 	and.w	r3, r3, #1
 8002280:	2b00      	cmp	r3, #0
 8002282:	d057      	beq.n	8002334 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800228a:	b2d2      	uxtb	r2, r2
 800228c:	4611      	mov	r1, r2
 800228e:	4618      	mov	r0, r3
 8002290:	f004 f9c6 	bl	8006620 <USB_ReadDevOutEPInterrupt>
 8002294:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002296:	693b      	ldr	r3, [r7, #16]
 8002298:	f003 0301 	and.w	r3, r3, #1
 800229c:	2b00      	cmp	r3, #0
 800229e:	d00c      	beq.n	80022ba <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80022a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022a2:	015a      	lsls	r2, r3, #5
 80022a4:	69fb      	ldr	r3, [r7, #28]
 80022a6:	4413      	add	r3, r2
 80022a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80022ac:	461a      	mov	r2, r3
 80022ae:	2301      	movs	r3, #1
 80022b0:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80022b2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80022b4:	6878      	ldr	r0, [r7, #4]
 80022b6:	f000 fddd 	bl	8002e74 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80022ba:	693b      	ldr	r3, [r7, #16]
 80022bc:	f003 0308 	and.w	r3, r3, #8
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d00c      	beq.n	80022de <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80022c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022c6:	015a      	lsls	r2, r3, #5
 80022c8:	69fb      	ldr	r3, [r7, #28]
 80022ca:	4413      	add	r3, r2
 80022cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80022d0:	461a      	mov	r2, r3
 80022d2:	2308      	movs	r3, #8
 80022d4:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80022d6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80022d8:	6878      	ldr	r0, [r7, #4]
 80022da:	f000 fed7 	bl	800308c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80022de:	693b      	ldr	r3, [r7, #16]
 80022e0:	f003 0310 	and.w	r3, r3, #16
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d008      	beq.n	80022fa <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80022e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022ea:	015a      	lsls	r2, r3, #5
 80022ec:	69fb      	ldr	r3, [r7, #28]
 80022ee:	4413      	add	r3, r2
 80022f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80022f4:	461a      	mov	r2, r3
 80022f6:	2310      	movs	r3, #16
 80022f8:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80022fa:	693b      	ldr	r3, [r7, #16]
 80022fc:	f003 0320 	and.w	r3, r3, #32
 8002300:	2b00      	cmp	r3, #0
 8002302:	d008      	beq.n	8002316 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002304:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002306:	015a      	lsls	r2, r3, #5
 8002308:	69fb      	ldr	r3, [r7, #28]
 800230a:	4413      	add	r3, r2
 800230c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002310:	461a      	mov	r2, r3
 8002312:	2320      	movs	r3, #32
 8002314:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002316:	693b      	ldr	r3, [r7, #16]
 8002318:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800231c:	2b00      	cmp	r3, #0
 800231e:	d009      	beq.n	8002334 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8002320:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002322:	015a      	lsls	r2, r3, #5
 8002324:	69fb      	ldr	r3, [r7, #28]
 8002326:	4413      	add	r3, r2
 8002328:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800232c:	461a      	mov	r2, r3
 800232e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002332:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8002334:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002336:	3301      	adds	r3, #1
 8002338:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800233a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800233c:	085b      	lsrs	r3, r3, #1
 800233e:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002340:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002342:	2b00      	cmp	r3, #0
 8002344:	d199      	bne.n	800227a <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	4618      	mov	r0, r3
 800234c:	f004 f921 	bl	8006592 <USB_ReadInterrupts>
 8002350:	4603      	mov	r3, r0
 8002352:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002356:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800235a:	f040 80c0 	bne.w	80024de <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	4618      	mov	r0, r3
 8002364:	f004 f942 	bl	80065ec <USB_ReadDevAllInEpInterrupt>
 8002368:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 800236a:	2300      	movs	r3, #0
 800236c:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 800236e:	e0b2      	b.n	80024d6 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002370:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002372:	f003 0301 	and.w	r3, r3, #1
 8002376:	2b00      	cmp	r3, #0
 8002378:	f000 80a7 	beq.w	80024ca <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002382:	b2d2      	uxtb	r2, r2
 8002384:	4611      	mov	r1, r2
 8002386:	4618      	mov	r0, r3
 8002388:	f004 f968 	bl	800665c <USB_ReadDevInEPInterrupt>
 800238c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800238e:	693b      	ldr	r3, [r7, #16]
 8002390:	f003 0301 	and.w	r3, r3, #1
 8002394:	2b00      	cmp	r3, #0
 8002396:	d057      	beq.n	8002448 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002398:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800239a:	f003 030f 	and.w	r3, r3, #15
 800239e:	2201      	movs	r2, #1
 80023a0:	fa02 f303 	lsl.w	r3, r2, r3
 80023a4:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80023a6:	69fb      	ldr	r3, [r7, #28]
 80023a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80023ac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	43db      	mvns	r3, r3
 80023b2:	69f9      	ldr	r1, [r7, #28]
 80023b4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80023b8:	4013      	ands	r3, r2
 80023ba:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80023bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023be:	015a      	lsls	r2, r3, #5
 80023c0:	69fb      	ldr	r3, [r7, #28]
 80023c2:	4413      	add	r3, r2
 80023c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80023c8:	461a      	mov	r2, r3
 80023ca:	2301      	movs	r3, #1
 80023cc:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	691b      	ldr	r3, [r3, #16]
 80023d2:	2b01      	cmp	r3, #1
 80023d4:	d132      	bne.n	800243c <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80023d6:	6879      	ldr	r1, [r7, #4]
 80023d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80023da:	4613      	mov	r3, r2
 80023dc:	00db      	lsls	r3, r3, #3
 80023de:	1a9b      	subs	r3, r3, r2
 80023e0:	009b      	lsls	r3, r3, #2
 80023e2:	440b      	add	r3, r1
 80023e4:	3348      	adds	r3, #72	; 0x48
 80023e6:	6819      	ldr	r1, [r3, #0]
 80023e8:	6878      	ldr	r0, [r7, #4]
 80023ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80023ec:	4613      	mov	r3, r2
 80023ee:	00db      	lsls	r3, r3, #3
 80023f0:	1a9b      	subs	r3, r3, r2
 80023f2:	009b      	lsls	r3, r3, #2
 80023f4:	4403      	add	r3, r0
 80023f6:	3344      	adds	r3, #68	; 0x44
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	4419      	add	r1, r3
 80023fc:	6878      	ldr	r0, [r7, #4]
 80023fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002400:	4613      	mov	r3, r2
 8002402:	00db      	lsls	r3, r3, #3
 8002404:	1a9b      	subs	r3, r3, r2
 8002406:	009b      	lsls	r3, r3, #2
 8002408:	4403      	add	r3, r0
 800240a:	3348      	adds	r3, #72	; 0x48
 800240c:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800240e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002410:	2b00      	cmp	r3, #0
 8002412:	d113      	bne.n	800243c <HAL_PCD_IRQHandler+0x31c>
 8002414:	6879      	ldr	r1, [r7, #4]
 8002416:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002418:	4613      	mov	r3, r2
 800241a:	00db      	lsls	r3, r3, #3
 800241c:	1a9b      	subs	r3, r3, r2
 800241e:	009b      	lsls	r3, r3, #2
 8002420:	440b      	add	r3, r1
 8002422:	3350      	adds	r3, #80	; 0x50
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	2b00      	cmp	r3, #0
 8002428:	d108      	bne.n	800243c <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	6818      	ldr	r0, [r3, #0]
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002434:	461a      	mov	r2, r3
 8002436:	2101      	movs	r1, #1
 8002438:	f004 f970 	bl	800671c <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800243c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800243e:	b2db      	uxtb	r3, r3
 8002440:	4619      	mov	r1, r3
 8002442:	6878      	ldr	r0, [r7, #4]
 8002444:	f006 f90d 	bl	8008662 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002448:	693b      	ldr	r3, [r7, #16]
 800244a:	f003 0308 	and.w	r3, r3, #8
 800244e:	2b00      	cmp	r3, #0
 8002450:	d008      	beq.n	8002464 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002452:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002454:	015a      	lsls	r2, r3, #5
 8002456:	69fb      	ldr	r3, [r7, #28]
 8002458:	4413      	add	r3, r2
 800245a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800245e:	461a      	mov	r2, r3
 8002460:	2308      	movs	r3, #8
 8002462:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002464:	693b      	ldr	r3, [r7, #16]
 8002466:	f003 0310 	and.w	r3, r3, #16
 800246a:	2b00      	cmp	r3, #0
 800246c:	d008      	beq.n	8002480 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800246e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002470:	015a      	lsls	r2, r3, #5
 8002472:	69fb      	ldr	r3, [r7, #28]
 8002474:	4413      	add	r3, r2
 8002476:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800247a:	461a      	mov	r2, r3
 800247c:	2310      	movs	r3, #16
 800247e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8002480:	693b      	ldr	r3, [r7, #16]
 8002482:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002486:	2b00      	cmp	r3, #0
 8002488:	d008      	beq.n	800249c <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800248a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800248c:	015a      	lsls	r2, r3, #5
 800248e:	69fb      	ldr	r3, [r7, #28]
 8002490:	4413      	add	r3, r2
 8002492:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002496:	461a      	mov	r2, r3
 8002498:	2340      	movs	r3, #64	; 0x40
 800249a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800249c:	693b      	ldr	r3, [r7, #16]
 800249e:	f003 0302 	and.w	r3, r3, #2
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d008      	beq.n	80024b8 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80024a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024a8:	015a      	lsls	r2, r3, #5
 80024aa:	69fb      	ldr	r3, [r7, #28]
 80024ac:	4413      	add	r3, r2
 80024ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80024b2:	461a      	mov	r2, r3
 80024b4:	2302      	movs	r3, #2
 80024b6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80024b8:	693b      	ldr	r3, [r7, #16]
 80024ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d003      	beq.n	80024ca <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80024c2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80024c4:	6878      	ldr	r0, [r7, #4]
 80024c6:	f000 fc48 	bl	8002d5a <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80024ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024cc:	3301      	adds	r3, #1
 80024ce:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80024d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024d2:	085b      	lsrs	r3, r3, #1
 80024d4:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80024d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024d8:	2b00      	cmp	r3, #0
 80024da:	f47f af49 	bne.w	8002370 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	4618      	mov	r0, r3
 80024e4:	f004 f855 	bl	8006592 <USB_ReadInterrupts>
 80024e8:	4603      	mov	r3, r0
 80024ea:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80024ee:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80024f2:	d122      	bne.n	800253a <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80024f4:	69fb      	ldr	r3, [r7, #28]
 80024f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80024fa:	685b      	ldr	r3, [r3, #4]
 80024fc:	69fa      	ldr	r2, [r7, #28]
 80024fe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002502:	f023 0301 	bic.w	r3, r3, #1
 8002506:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 800250e:	2b01      	cmp	r3, #1
 8002510:	d108      	bne.n	8002524 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	2200      	movs	r2, #0
 8002516:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800251a:	2100      	movs	r1, #0
 800251c:	6878      	ldr	r0, [r7, #4]
 800251e:	f006 faef 	bl	8008b00 <HAL_PCDEx_LPM_Callback>
 8002522:	e002      	b.n	800252a <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8002524:	6878      	ldr	r0, [r7, #4]
 8002526:	f006 f913 	bl	8008750 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	695a      	ldr	r2, [r3, #20]
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8002538:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	4618      	mov	r0, r3
 8002540:	f004 f827 	bl	8006592 <USB_ReadInterrupts>
 8002544:	4603      	mov	r3, r0
 8002546:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800254a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800254e:	d112      	bne.n	8002576 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002550:	69fb      	ldr	r3, [r7, #28]
 8002552:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002556:	689b      	ldr	r3, [r3, #8]
 8002558:	f003 0301 	and.w	r3, r3, #1
 800255c:	2b01      	cmp	r3, #1
 800255e:	d102      	bne.n	8002566 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002560:	6878      	ldr	r0, [r7, #4]
 8002562:	f006 f8cf 	bl	8008704 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	695a      	ldr	r2, [r3, #20]
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8002574:	615a      	str	r2, [r3, #20]
    }
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	4618      	mov	r0, r3
 800257c:	f004 f809 	bl	8006592 <USB_ReadInterrupts>
 8002580:	4603      	mov	r3, r0
 8002582:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002586:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800258a:	d121      	bne.n	80025d0 <HAL_PCD_IRQHandler+0x4b0>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	695a      	ldr	r2, [r3, #20]
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 800259a:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d111      	bne.n	80025ca <HAL_PCD_IRQHandler+0x4aa>
      {
        hpcd->LPM_State = LPM_L1;
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	2201      	movs	r2, #1
 80025aa:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025b4:	089b      	lsrs	r3, r3, #2
 80025b6:	f003 020f 	and.w	r2, r3, #15
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80025c0:	2101      	movs	r1, #1
 80025c2:	6878      	ldr	r0, [r7, #4]
 80025c4:	f006 fa9c 	bl	8008b00 <HAL_PCDEx_LPM_Callback>
 80025c8:	e002      	b.n	80025d0 <HAL_PCD_IRQHandler+0x4b0>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80025ca:	6878      	ldr	r0, [r7, #4]
 80025cc:	f006 f89a 	bl	8008704 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	4618      	mov	r0, r3
 80025d6:	f003 ffdc 	bl	8006592 <USB_ReadInterrupts>
 80025da:	4603      	mov	r3, r0
 80025dc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80025e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80025e4:	f040 80c7 	bne.w	8002776 <HAL_PCD_IRQHandler+0x656>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80025e8:	69fb      	ldr	r3, [r7, #28]
 80025ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80025ee:	685b      	ldr	r3, [r3, #4]
 80025f0:	69fa      	ldr	r2, [r7, #28]
 80025f2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80025f6:	f023 0301 	bic.w	r3, r3, #1
 80025fa:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	2110      	movs	r1, #16
 8002602:	4618      	mov	r0, r3
 8002604:	f003 f876 	bl	80056f4 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002608:	2300      	movs	r3, #0
 800260a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800260c:	e056      	b.n	80026bc <HAL_PCD_IRQHandler+0x59c>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800260e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002610:	015a      	lsls	r2, r3, #5
 8002612:	69fb      	ldr	r3, [r7, #28]
 8002614:	4413      	add	r3, r2
 8002616:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800261a:	461a      	mov	r2, r3
 800261c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002620:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002622:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002624:	015a      	lsls	r2, r3, #5
 8002626:	69fb      	ldr	r3, [r7, #28]
 8002628:	4413      	add	r3, r2
 800262a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002632:	0151      	lsls	r1, r2, #5
 8002634:	69fa      	ldr	r2, [r7, #28]
 8002636:	440a      	add	r2, r1
 8002638:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800263c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002640:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8002642:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002644:	015a      	lsls	r2, r3, #5
 8002646:	69fb      	ldr	r3, [r7, #28]
 8002648:	4413      	add	r3, r2
 800264a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002652:	0151      	lsls	r1, r2, #5
 8002654:	69fa      	ldr	r2, [r7, #28]
 8002656:	440a      	add	r2, r1
 8002658:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800265c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002660:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002662:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002664:	015a      	lsls	r2, r3, #5
 8002666:	69fb      	ldr	r3, [r7, #28]
 8002668:	4413      	add	r3, r2
 800266a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800266e:	461a      	mov	r2, r3
 8002670:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002674:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002676:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002678:	015a      	lsls	r2, r3, #5
 800267a:	69fb      	ldr	r3, [r7, #28]
 800267c:	4413      	add	r3, r2
 800267e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002686:	0151      	lsls	r1, r2, #5
 8002688:	69fa      	ldr	r2, [r7, #28]
 800268a:	440a      	add	r2, r1
 800268c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002690:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002694:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002696:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002698:	015a      	lsls	r2, r3, #5
 800269a:	69fb      	ldr	r3, [r7, #28]
 800269c:	4413      	add	r3, r2
 800269e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80026a6:	0151      	lsls	r1, r2, #5
 80026a8:	69fa      	ldr	r2, [r7, #28]
 80026aa:	440a      	add	r2, r1
 80026ac:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80026b0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80026b4:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80026b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026b8:	3301      	adds	r3, #1
 80026ba:	62fb      	str	r3, [r7, #44]	; 0x2c
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	685b      	ldr	r3, [r3, #4]
 80026c0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80026c2:	429a      	cmp	r2, r3
 80026c4:	d3a3      	bcc.n	800260e <HAL_PCD_IRQHandler+0x4ee>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80026c6:	69fb      	ldr	r3, [r7, #28]
 80026c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80026cc:	69db      	ldr	r3, [r3, #28]
 80026ce:	69fa      	ldr	r2, [r7, #28]
 80026d0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80026d4:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80026d8:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d016      	beq.n	8002710 <HAL_PCD_IRQHandler+0x5f0>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80026e2:	69fb      	ldr	r3, [r7, #28]
 80026e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80026e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80026ec:	69fa      	ldr	r2, [r7, #28]
 80026ee:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80026f2:	f043 030b 	orr.w	r3, r3, #11
 80026f6:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80026fa:	69fb      	ldr	r3, [r7, #28]
 80026fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002700:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002702:	69fa      	ldr	r2, [r7, #28]
 8002704:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002708:	f043 030b 	orr.w	r3, r3, #11
 800270c:	6453      	str	r3, [r2, #68]	; 0x44
 800270e:	e015      	b.n	800273c <HAL_PCD_IRQHandler+0x61c>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002710:	69fb      	ldr	r3, [r7, #28]
 8002712:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002716:	695b      	ldr	r3, [r3, #20]
 8002718:	69fa      	ldr	r2, [r7, #28]
 800271a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800271e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002722:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8002726:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002728:	69fb      	ldr	r3, [r7, #28]
 800272a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800272e:	691b      	ldr	r3, [r3, #16]
 8002730:	69fa      	ldr	r2, [r7, #28]
 8002732:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002736:	f043 030b 	orr.w	r3, r3, #11
 800273a:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800273c:	69fb      	ldr	r3, [r7, #28]
 800273e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	69fa      	ldr	r2, [r7, #28]
 8002746:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800274a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800274e:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	6818      	ldr	r0, [r3, #0]
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	691b      	ldr	r3, [r3, #16]
 8002758:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002760:	461a      	mov	r2, r3
 8002762:	f003 ffdb 	bl	800671c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	695a      	ldr	r2, [r3, #20]
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8002774:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	4618      	mov	r0, r3
 800277c:	f003 ff09 	bl	8006592 <USB_ReadInterrupts>
 8002780:	4603      	mov	r3, r0
 8002782:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002786:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800278a:	d124      	bne.n	80027d6 <HAL_PCD_IRQHandler+0x6b6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	4618      	mov	r0, r3
 8002792:	f003 ff9f 	bl	80066d4 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	4618      	mov	r0, r3
 800279c:	f003 f807 	bl	80057ae <USB_GetDevSpeed>
 80027a0:	4603      	mov	r3, r0
 80027a2:	461a      	mov	r2, r3
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681c      	ldr	r4, [r3, #0]
 80027ac:	f000 fecc 	bl	8003548 <HAL_RCC_GetHCLKFreq>
 80027b0:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80027b6:	b2db      	uxtb	r3, r3
 80027b8:	461a      	mov	r2, r3
 80027ba:	4620      	mov	r0, r4
 80027bc:	f002 fd2c 	bl	8005218 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80027c0:	6878      	ldr	r0, [r7, #4]
 80027c2:	f005 ff76 	bl	80086b2 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	695a      	ldr	r2, [r3, #20]
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80027d4:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	4618      	mov	r0, r3
 80027dc:	f003 fed9 	bl	8006592 <USB_ReadInterrupts>
 80027e0:	4603      	mov	r3, r0
 80027e2:	f003 0308 	and.w	r3, r3, #8
 80027e6:	2b08      	cmp	r3, #8
 80027e8:	d10a      	bne.n	8002800 <HAL_PCD_IRQHandler+0x6e0>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80027ea:	6878      	ldr	r0, [r7, #4]
 80027ec:	f005 ff53 	bl	8008696 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	695a      	ldr	r2, [r3, #20]
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	f002 0208 	and.w	r2, r2, #8
 80027fe:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	4618      	mov	r0, r3
 8002806:	f003 fec4 	bl	8006592 <USB_ReadInterrupts>
 800280a:	4603      	mov	r3, r0
 800280c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002810:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002814:	d10f      	bne.n	8002836 <HAL_PCD_IRQHandler+0x716>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8002816:	2300      	movs	r3, #0
 8002818:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800281a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800281c:	b2db      	uxtb	r3, r3
 800281e:	4619      	mov	r1, r3
 8002820:	6878      	ldr	r0, [r7, #4]
 8002822:	f005 ffb5 	bl	8008790 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	695a      	ldr	r2, [r3, #20]
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8002834:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	4618      	mov	r0, r3
 800283c:	f003 fea9 	bl	8006592 <USB_ReadInterrupts>
 8002840:	4603      	mov	r3, r0
 8002842:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002846:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800284a:	d10f      	bne.n	800286c <HAL_PCD_IRQHandler+0x74c>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 800284c:	2300      	movs	r3, #0
 800284e:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002850:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002852:	b2db      	uxtb	r3, r3
 8002854:	4619      	mov	r1, r3
 8002856:	6878      	ldr	r0, [r7, #4]
 8002858:	f005 ff88 	bl	800876c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	695a      	ldr	r2, [r3, #20]
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 800286a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	4618      	mov	r0, r3
 8002872:	f003 fe8e 	bl	8006592 <USB_ReadInterrupts>
 8002876:	4603      	mov	r3, r0
 8002878:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800287c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002880:	d10a      	bne.n	8002898 <HAL_PCD_IRQHandler+0x778>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8002882:	6878      	ldr	r0, [r7, #4]
 8002884:	f005 ff96 	bl	80087b4 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	695a      	ldr	r2, [r3, #20]
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8002896:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	4618      	mov	r0, r3
 800289e:	f003 fe78 	bl	8006592 <USB_ReadInterrupts>
 80028a2:	4603      	mov	r3, r0
 80028a4:	f003 0304 	and.w	r3, r3, #4
 80028a8:	2b04      	cmp	r3, #4
 80028aa:	d115      	bne.n	80028d8 <HAL_PCD_IRQHandler+0x7b8>
    {
      temp = hpcd->Instance->GOTGINT;
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	685b      	ldr	r3, [r3, #4]
 80028b2:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80028b4:	69bb      	ldr	r3, [r7, #24]
 80028b6:	f003 0304 	and.w	r3, r3, #4
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d002      	beq.n	80028c4 <HAL_PCD_IRQHandler+0x7a4>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80028be:	6878      	ldr	r0, [r7, #4]
 80028c0:	f005 ff86 	bl	80087d0 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	6859      	ldr	r1, [r3, #4]
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	69ba      	ldr	r2, [r7, #24]
 80028d0:	430a      	orrs	r2, r1
 80028d2:	605a      	str	r2, [r3, #4]
 80028d4:	e000      	b.n	80028d8 <HAL_PCD_IRQHandler+0x7b8>
      return;
 80028d6:	bf00      	nop
    }
  }
}
 80028d8:	3734      	adds	r7, #52	; 0x34
 80028da:	46bd      	mov	sp, r7
 80028dc:	bd90      	pop	{r4, r7, pc}

080028de <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80028de:	b580      	push	{r7, lr}
 80028e0:	b082      	sub	sp, #8
 80028e2:	af00      	add	r7, sp, #0
 80028e4:	6078      	str	r0, [r7, #4]
 80028e6:	460b      	mov	r3, r1
 80028e8:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80028f0:	2b01      	cmp	r3, #1
 80028f2:	d101      	bne.n	80028f8 <HAL_PCD_SetAddress+0x1a>
 80028f4:	2302      	movs	r3, #2
 80028f6:	e013      	b.n	8002920 <HAL_PCD_SetAddress+0x42>
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	2201      	movs	r2, #1
 80028fc:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	78fa      	ldrb	r2, [r7, #3]
 8002904:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	78fa      	ldrb	r2, [r7, #3]
 800290e:	4611      	mov	r1, r2
 8002910:	4618      	mov	r0, r3
 8002912:	f003 fdd6 	bl	80064c2 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	2200      	movs	r2, #0
 800291a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800291e:	2300      	movs	r3, #0
}
 8002920:	4618      	mov	r0, r3
 8002922:	3708      	adds	r7, #8
 8002924:	46bd      	mov	sp, r7
 8002926:	bd80      	pop	{r7, pc}

08002928 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002928:	b580      	push	{r7, lr}
 800292a:	b084      	sub	sp, #16
 800292c:	af00      	add	r7, sp, #0
 800292e:	6078      	str	r0, [r7, #4]
 8002930:	4608      	mov	r0, r1
 8002932:	4611      	mov	r1, r2
 8002934:	461a      	mov	r2, r3
 8002936:	4603      	mov	r3, r0
 8002938:	70fb      	strb	r3, [r7, #3]
 800293a:	460b      	mov	r3, r1
 800293c:	803b      	strh	r3, [r7, #0]
 800293e:	4613      	mov	r3, r2
 8002940:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002942:	2300      	movs	r3, #0
 8002944:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002946:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800294a:	2b00      	cmp	r3, #0
 800294c:	da0f      	bge.n	800296e <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800294e:	78fb      	ldrb	r3, [r7, #3]
 8002950:	f003 020f 	and.w	r2, r3, #15
 8002954:	4613      	mov	r3, r2
 8002956:	00db      	lsls	r3, r3, #3
 8002958:	1a9b      	subs	r3, r3, r2
 800295a:	009b      	lsls	r3, r3, #2
 800295c:	3338      	adds	r3, #56	; 0x38
 800295e:	687a      	ldr	r2, [r7, #4]
 8002960:	4413      	add	r3, r2
 8002962:	3304      	adds	r3, #4
 8002964:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	2201      	movs	r2, #1
 800296a:	705a      	strb	r2, [r3, #1]
 800296c:	e00f      	b.n	800298e <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800296e:	78fb      	ldrb	r3, [r7, #3]
 8002970:	f003 020f 	and.w	r2, r3, #15
 8002974:	4613      	mov	r3, r2
 8002976:	00db      	lsls	r3, r3, #3
 8002978:	1a9b      	subs	r3, r3, r2
 800297a:	009b      	lsls	r3, r3, #2
 800297c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002980:	687a      	ldr	r2, [r7, #4]
 8002982:	4413      	add	r3, r2
 8002984:	3304      	adds	r3, #4
 8002986:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	2200      	movs	r2, #0
 800298c:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800298e:	78fb      	ldrb	r3, [r7, #3]
 8002990:	f003 030f 	and.w	r3, r3, #15
 8002994:	b2da      	uxtb	r2, r3
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800299a:	883a      	ldrh	r2, [r7, #0]
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	78ba      	ldrb	r2, [r7, #2]
 80029a4:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	785b      	ldrb	r3, [r3, #1]
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d004      	beq.n	80029b8 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	781b      	ldrb	r3, [r3, #0]
 80029b2:	b29a      	uxth	r2, r3
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80029b8:	78bb      	ldrb	r3, [r7, #2]
 80029ba:	2b02      	cmp	r3, #2
 80029bc:	d102      	bne.n	80029c4 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	2200      	movs	r2, #0
 80029c2:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80029ca:	2b01      	cmp	r3, #1
 80029cc:	d101      	bne.n	80029d2 <HAL_PCD_EP_Open+0xaa>
 80029ce:	2302      	movs	r3, #2
 80029d0:	e00e      	b.n	80029f0 <HAL_PCD_EP_Open+0xc8>
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	2201      	movs	r2, #1
 80029d6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	68f9      	ldr	r1, [r7, #12]
 80029e0:	4618      	mov	r0, r3
 80029e2:	f002 ff09 	bl	80057f8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	2200      	movs	r2, #0
 80029ea:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 80029ee:	7afb      	ldrb	r3, [r7, #11]
}
 80029f0:	4618      	mov	r0, r3
 80029f2:	3710      	adds	r7, #16
 80029f4:	46bd      	mov	sp, r7
 80029f6:	bd80      	pop	{r7, pc}

080029f8 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80029f8:	b580      	push	{r7, lr}
 80029fa:	b084      	sub	sp, #16
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	6078      	str	r0, [r7, #4]
 8002a00:	460b      	mov	r3, r1
 8002a02:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002a04:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	da0f      	bge.n	8002a2c <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002a0c:	78fb      	ldrb	r3, [r7, #3]
 8002a0e:	f003 020f 	and.w	r2, r3, #15
 8002a12:	4613      	mov	r3, r2
 8002a14:	00db      	lsls	r3, r3, #3
 8002a16:	1a9b      	subs	r3, r3, r2
 8002a18:	009b      	lsls	r3, r3, #2
 8002a1a:	3338      	adds	r3, #56	; 0x38
 8002a1c:	687a      	ldr	r2, [r7, #4]
 8002a1e:	4413      	add	r3, r2
 8002a20:	3304      	adds	r3, #4
 8002a22:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	2201      	movs	r2, #1
 8002a28:	705a      	strb	r2, [r3, #1]
 8002a2a:	e00f      	b.n	8002a4c <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002a2c:	78fb      	ldrb	r3, [r7, #3]
 8002a2e:	f003 020f 	and.w	r2, r3, #15
 8002a32:	4613      	mov	r3, r2
 8002a34:	00db      	lsls	r3, r3, #3
 8002a36:	1a9b      	subs	r3, r3, r2
 8002a38:	009b      	lsls	r3, r3, #2
 8002a3a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002a3e:	687a      	ldr	r2, [r7, #4]
 8002a40:	4413      	add	r3, r2
 8002a42:	3304      	adds	r3, #4
 8002a44:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	2200      	movs	r2, #0
 8002a4a:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8002a4c:	78fb      	ldrb	r3, [r7, #3]
 8002a4e:	f003 030f 	and.w	r3, r3, #15
 8002a52:	b2da      	uxtb	r2, r3
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002a5e:	2b01      	cmp	r3, #1
 8002a60:	d101      	bne.n	8002a66 <HAL_PCD_EP_Close+0x6e>
 8002a62:	2302      	movs	r3, #2
 8002a64:	e00e      	b.n	8002a84 <HAL_PCD_EP_Close+0x8c>
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	2201      	movs	r2, #1
 8002a6a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	68f9      	ldr	r1, [r7, #12]
 8002a74:	4618      	mov	r0, r3
 8002a76:	f002 ff47 	bl	8005908 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8002a82:	2300      	movs	r3, #0
}
 8002a84:	4618      	mov	r0, r3
 8002a86:	3710      	adds	r7, #16
 8002a88:	46bd      	mov	sp, r7
 8002a8a:	bd80      	pop	{r7, pc}

08002a8c <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002a8c:	b580      	push	{r7, lr}
 8002a8e:	b086      	sub	sp, #24
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	60f8      	str	r0, [r7, #12]
 8002a94:	607a      	str	r2, [r7, #4]
 8002a96:	603b      	str	r3, [r7, #0]
 8002a98:	460b      	mov	r3, r1
 8002a9a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002a9c:	7afb      	ldrb	r3, [r7, #11]
 8002a9e:	f003 020f 	and.w	r2, r3, #15
 8002aa2:	4613      	mov	r3, r2
 8002aa4:	00db      	lsls	r3, r3, #3
 8002aa6:	1a9b      	subs	r3, r3, r2
 8002aa8:	009b      	lsls	r3, r3, #2
 8002aaa:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002aae:	68fa      	ldr	r2, [r7, #12]
 8002ab0:	4413      	add	r3, r2
 8002ab2:	3304      	adds	r3, #4
 8002ab4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002ab6:	697b      	ldr	r3, [r7, #20]
 8002ab8:	687a      	ldr	r2, [r7, #4]
 8002aba:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002abc:	697b      	ldr	r3, [r7, #20]
 8002abe:	683a      	ldr	r2, [r7, #0]
 8002ac0:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8002ac2:	697b      	ldr	r3, [r7, #20]
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8002ac8:	697b      	ldr	r3, [r7, #20]
 8002aca:	2200      	movs	r2, #0
 8002acc:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002ace:	7afb      	ldrb	r3, [r7, #11]
 8002ad0:	f003 030f 	and.w	r3, r3, #15
 8002ad4:	b2da      	uxtb	r2, r3
 8002ad6:	697b      	ldr	r3, [r7, #20]
 8002ad8:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	691b      	ldr	r3, [r3, #16]
 8002ade:	2b01      	cmp	r3, #1
 8002ae0:	d102      	bne.n	8002ae8 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002ae2:	687a      	ldr	r2, [r7, #4]
 8002ae4:	697b      	ldr	r3, [r7, #20]
 8002ae6:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002ae8:	7afb      	ldrb	r3, [r7, #11]
 8002aea:	f003 030f 	and.w	r3, r3, #15
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d109      	bne.n	8002b06 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	6818      	ldr	r0, [r3, #0]
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	691b      	ldr	r3, [r3, #16]
 8002afa:	b2db      	uxtb	r3, r3
 8002afc:	461a      	mov	r2, r3
 8002afe:	6979      	ldr	r1, [r7, #20]
 8002b00:	f003 fa22 	bl	8005f48 <USB_EP0StartXfer>
 8002b04:	e008      	b.n	8002b18 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	6818      	ldr	r0, [r3, #0]
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	691b      	ldr	r3, [r3, #16]
 8002b0e:	b2db      	uxtb	r3, r3
 8002b10:	461a      	mov	r2, r3
 8002b12:	6979      	ldr	r1, [r7, #20]
 8002b14:	f002 ffd4 	bl	8005ac0 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002b18:	2300      	movs	r3, #0
}
 8002b1a:	4618      	mov	r0, r3
 8002b1c:	3718      	adds	r7, #24
 8002b1e:	46bd      	mov	sp, r7
 8002b20:	bd80      	pop	{r7, pc}

08002b22 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002b22:	b480      	push	{r7}
 8002b24:	b083      	sub	sp, #12
 8002b26:	af00      	add	r7, sp, #0
 8002b28:	6078      	str	r0, [r7, #4]
 8002b2a:	460b      	mov	r3, r1
 8002b2c:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002b2e:	78fb      	ldrb	r3, [r7, #3]
 8002b30:	f003 020f 	and.w	r2, r3, #15
 8002b34:	6879      	ldr	r1, [r7, #4]
 8002b36:	4613      	mov	r3, r2
 8002b38:	00db      	lsls	r3, r3, #3
 8002b3a:	1a9b      	subs	r3, r3, r2
 8002b3c:	009b      	lsls	r3, r3, #2
 8002b3e:	440b      	add	r3, r1
 8002b40:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8002b44:	681b      	ldr	r3, [r3, #0]
}
 8002b46:	4618      	mov	r0, r3
 8002b48:	370c      	adds	r7, #12
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b50:	4770      	bx	lr

08002b52 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002b52:	b580      	push	{r7, lr}
 8002b54:	b086      	sub	sp, #24
 8002b56:	af00      	add	r7, sp, #0
 8002b58:	60f8      	str	r0, [r7, #12]
 8002b5a:	607a      	str	r2, [r7, #4]
 8002b5c:	603b      	str	r3, [r7, #0]
 8002b5e:	460b      	mov	r3, r1
 8002b60:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002b62:	7afb      	ldrb	r3, [r7, #11]
 8002b64:	f003 020f 	and.w	r2, r3, #15
 8002b68:	4613      	mov	r3, r2
 8002b6a:	00db      	lsls	r3, r3, #3
 8002b6c:	1a9b      	subs	r3, r3, r2
 8002b6e:	009b      	lsls	r3, r3, #2
 8002b70:	3338      	adds	r3, #56	; 0x38
 8002b72:	68fa      	ldr	r2, [r7, #12]
 8002b74:	4413      	add	r3, r2
 8002b76:	3304      	adds	r3, #4
 8002b78:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002b7a:	697b      	ldr	r3, [r7, #20]
 8002b7c:	687a      	ldr	r2, [r7, #4]
 8002b7e:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002b80:	697b      	ldr	r3, [r7, #20]
 8002b82:	683a      	ldr	r2, [r7, #0]
 8002b84:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8002b86:	697b      	ldr	r3, [r7, #20]
 8002b88:	2200      	movs	r2, #0
 8002b8a:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8002b8c:	697b      	ldr	r3, [r7, #20]
 8002b8e:	2201      	movs	r2, #1
 8002b90:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002b92:	7afb      	ldrb	r3, [r7, #11]
 8002b94:	f003 030f 	and.w	r3, r3, #15
 8002b98:	b2da      	uxtb	r2, r3
 8002b9a:	697b      	ldr	r3, [r7, #20]
 8002b9c:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	691b      	ldr	r3, [r3, #16]
 8002ba2:	2b01      	cmp	r3, #1
 8002ba4:	d102      	bne.n	8002bac <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002ba6:	687a      	ldr	r2, [r7, #4]
 8002ba8:	697b      	ldr	r3, [r7, #20]
 8002baa:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002bac:	7afb      	ldrb	r3, [r7, #11]
 8002bae:	f003 030f 	and.w	r3, r3, #15
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d109      	bne.n	8002bca <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	6818      	ldr	r0, [r3, #0]
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	691b      	ldr	r3, [r3, #16]
 8002bbe:	b2db      	uxtb	r3, r3
 8002bc0:	461a      	mov	r2, r3
 8002bc2:	6979      	ldr	r1, [r7, #20]
 8002bc4:	f003 f9c0 	bl	8005f48 <USB_EP0StartXfer>
 8002bc8:	e008      	b.n	8002bdc <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	6818      	ldr	r0, [r3, #0]
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	691b      	ldr	r3, [r3, #16]
 8002bd2:	b2db      	uxtb	r3, r3
 8002bd4:	461a      	mov	r2, r3
 8002bd6:	6979      	ldr	r1, [r7, #20]
 8002bd8:	f002 ff72 	bl	8005ac0 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002bdc:	2300      	movs	r3, #0
}
 8002bde:	4618      	mov	r0, r3
 8002be0:	3718      	adds	r7, #24
 8002be2:	46bd      	mov	sp, r7
 8002be4:	bd80      	pop	{r7, pc}

08002be6 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002be6:	b580      	push	{r7, lr}
 8002be8:	b084      	sub	sp, #16
 8002bea:	af00      	add	r7, sp, #0
 8002bec:	6078      	str	r0, [r7, #4]
 8002bee:	460b      	mov	r3, r1
 8002bf0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002bf2:	78fb      	ldrb	r3, [r7, #3]
 8002bf4:	f003 020f 	and.w	r2, r3, #15
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	685b      	ldr	r3, [r3, #4]
 8002bfc:	429a      	cmp	r2, r3
 8002bfe:	d901      	bls.n	8002c04 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002c00:	2301      	movs	r3, #1
 8002c02:	e050      	b.n	8002ca6 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002c04:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	da0f      	bge.n	8002c2c <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002c0c:	78fb      	ldrb	r3, [r7, #3]
 8002c0e:	f003 020f 	and.w	r2, r3, #15
 8002c12:	4613      	mov	r3, r2
 8002c14:	00db      	lsls	r3, r3, #3
 8002c16:	1a9b      	subs	r3, r3, r2
 8002c18:	009b      	lsls	r3, r3, #2
 8002c1a:	3338      	adds	r3, #56	; 0x38
 8002c1c:	687a      	ldr	r2, [r7, #4]
 8002c1e:	4413      	add	r3, r2
 8002c20:	3304      	adds	r3, #4
 8002c22:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	2201      	movs	r2, #1
 8002c28:	705a      	strb	r2, [r3, #1]
 8002c2a:	e00d      	b.n	8002c48 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002c2c:	78fa      	ldrb	r2, [r7, #3]
 8002c2e:	4613      	mov	r3, r2
 8002c30:	00db      	lsls	r3, r3, #3
 8002c32:	1a9b      	subs	r3, r3, r2
 8002c34:	009b      	lsls	r3, r3, #2
 8002c36:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002c3a:	687a      	ldr	r2, [r7, #4]
 8002c3c:	4413      	add	r3, r2
 8002c3e:	3304      	adds	r3, #4
 8002c40:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	2200      	movs	r2, #0
 8002c46:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	2201      	movs	r2, #1
 8002c4c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002c4e:	78fb      	ldrb	r3, [r7, #3]
 8002c50:	f003 030f 	and.w	r3, r3, #15
 8002c54:	b2da      	uxtb	r2, r3
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002c60:	2b01      	cmp	r3, #1
 8002c62:	d101      	bne.n	8002c68 <HAL_PCD_EP_SetStall+0x82>
 8002c64:	2302      	movs	r3, #2
 8002c66:	e01e      	b.n	8002ca6 <HAL_PCD_EP_SetStall+0xc0>
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	2201      	movs	r2, #1
 8002c6c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	68f9      	ldr	r1, [r7, #12]
 8002c76:	4618      	mov	r0, r3
 8002c78:	f003 fb4f 	bl	800631a <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002c7c:	78fb      	ldrb	r3, [r7, #3]
 8002c7e:	f003 030f 	and.w	r3, r3, #15
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d10a      	bne.n	8002c9c <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	6818      	ldr	r0, [r3, #0]
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	691b      	ldr	r3, [r3, #16]
 8002c8e:	b2d9      	uxtb	r1, r3
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002c96:	461a      	mov	r2, r3
 8002c98:	f003 fd40 	bl	800671c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	2200      	movs	r2, #0
 8002ca0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002ca4:	2300      	movs	r3, #0
}
 8002ca6:	4618      	mov	r0, r3
 8002ca8:	3710      	adds	r7, #16
 8002caa:	46bd      	mov	sp, r7
 8002cac:	bd80      	pop	{r7, pc}

08002cae <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002cae:	b580      	push	{r7, lr}
 8002cb0:	b084      	sub	sp, #16
 8002cb2:	af00      	add	r7, sp, #0
 8002cb4:	6078      	str	r0, [r7, #4]
 8002cb6:	460b      	mov	r3, r1
 8002cb8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002cba:	78fb      	ldrb	r3, [r7, #3]
 8002cbc:	f003 020f 	and.w	r2, r3, #15
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	685b      	ldr	r3, [r3, #4]
 8002cc4:	429a      	cmp	r2, r3
 8002cc6:	d901      	bls.n	8002ccc <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002cc8:	2301      	movs	r3, #1
 8002cca:	e042      	b.n	8002d52 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002ccc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	da0f      	bge.n	8002cf4 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002cd4:	78fb      	ldrb	r3, [r7, #3]
 8002cd6:	f003 020f 	and.w	r2, r3, #15
 8002cda:	4613      	mov	r3, r2
 8002cdc:	00db      	lsls	r3, r3, #3
 8002cde:	1a9b      	subs	r3, r3, r2
 8002ce0:	009b      	lsls	r3, r3, #2
 8002ce2:	3338      	adds	r3, #56	; 0x38
 8002ce4:	687a      	ldr	r2, [r7, #4]
 8002ce6:	4413      	add	r3, r2
 8002ce8:	3304      	adds	r3, #4
 8002cea:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	2201      	movs	r2, #1
 8002cf0:	705a      	strb	r2, [r3, #1]
 8002cf2:	e00f      	b.n	8002d14 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002cf4:	78fb      	ldrb	r3, [r7, #3]
 8002cf6:	f003 020f 	and.w	r2, r3, #15
 8002cfa:	4613      	mov	r3, r2
 8002cfc:	00db      	lsls	r3, r3, #3
 8002cfe:	1a9b      	subs	r3, r3, r2
 8002d00:	009b      	lsls	r3, r3, #2
 8002d02:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002d06:	687a      	ldr	r2, [r7, #4]
 8002d08:	4413      	add	r3, r2
 8002d0a:	3304      	adds	r3, #4
 8002d0c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	2200      	movs	r2, #0
 8002d12:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	2200      	movs	r2, #0
 8002d18:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002d1a:	78fb      	ldrb	r3, [r7, #3]
 8002d1c:	f003 030f 	and.w	r3, r3, #15
 8002d20:	b2da      	uxtb	r2, r3
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002d2c:	2b01      	cmp	r3, #1
 8002d2e:	d101      	bne.n	8002d34 <HAL_PCD_EP_ClrStall+0x86>
 8002d30:	2302      	movs	r3, #2
 8002d32:	e00e      	b.n	8002d52 <HAL_PCD_EP_ClrStall+0xa4>
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	2201      	movs	r2, #1
 8002d38:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	68f9      	ldr	r1, [r7, #12]
 8002d42:	4618      	mov	r0, r3
 8002d44:	f003 fb57 	bl	80063f6 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	2200      	movs	r2, #0
 8002d4c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002d50:	2300      	movs	r3, #0
}
 8002d52:	4618      	mov	r0, r3
 8002d54:	3710      	adds	r7, #16
 8002d56:	46bd      	mov	sp, r7
 8002d58:	bd80      	pop	{r7, pc}

08002d5a <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002d5a:	b580      	push	{r7, lr}
 8002d5c:	b08a      	sub	sp, #40	; 0x28
 8002d5e:	af02      	add	r7, sp, #8
 8002d60:	6078      	str	r0, [r7, #4]
 8002d62:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002d6a:	697b      	ldr	r3, [r7, #20]
 8002d6c:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8002d6e:	683a      	ldr	r2, [r7, #0]
 8002d70:	4613      	mov	r3, r2
 8002d72:	00db      	lsls	r3, r3, #3
 8002d74:	1a9b      	subs	r3, r3, r2
 8002d76:	009b      	lsls	r3, r3, #2
 8002d78:	3338      	adds	r3, #56	; 0x38
 8002d7a:	687a      	ldr	r2, [r7, #4]
 8002d7c:	4413      	add	r3, r2
 8002d7e:	3304      	adds	r3, #4
 8002d80:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	699a      	ldr	r2, [r3, #24]
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	695b      	ldr	r3, [r3, #20]
 8002d8a:	429a      	cmp	r2, r3
 8002d8c:	d901      	bls.n	8002d92 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8002d8e:	2301      	movs	r3, #1
 8002d90:	e06c      	b.n	8002e6c <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	695a      	ldr	r2, [r3, #20]
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	699b      	ldr	r3, [r3, #24]
 8002d9a:	1ad3      	subs	r3, r2, r3
 8002d9c:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	689b      	ldr	r3, [r3, #8]
 8002da2:	69fa      	ldr	r2, [r7, #28]
 8002da4:	429a      	cmp	r2, r3
 8002da6:	d902      	bls.n	8002dae <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	689b      	ldr	r3, [r3, #8]
 8002dac:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8002dae:	69fb      	ldr	r3, [r7, #28]
 8002db0:	3303      	adds	r3, #3
 8002db2:	089b      	lsrs	r3, r3, #2
 8002db4:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002db6:	e02b      	b.n	8002e10 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	695a      	ldr	r2, [r3, #20]
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	699b      	ldr	r3, [r3, #24]
 8002dc0:	1ad3      	subs	r3, r2, r3
 8002dc2:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	689b      	ldr	r3, [r3, #8]
 8002dc8:	69fa      	ldr	r2, [r7, #28]
 8002dca:	429a      	cmp	r2, r3
 8002dcc:	d902      	bls.n	8002dd4 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	689b      	ldr	r3, [r3, #8]
 8002dd2:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8002dd4:	69fb      	ldr	r3, [r7, #28]
 8002dd6:	3303      	adds	r3, #3
 8002dd8:	089b      	lsrs	r3, r3, #2
 8002dda:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	68d9      	ldr	r1, [r3, #12]
 8002de0:	683b      	ldr	r3, [r7, #0]
 8002de2:	b2da      	uxtb	r2, r3
 8002de4:	69fb      	ldr	r3, [r7, #28]
 8002de6:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002dec:	b2db      	uxtb	r3, r3
 8002dee:	9300      	str	r3, [sp, #0]
 8002df0:	4603      	mov	r3, r0
 8002df2:	6978      	ldr	r0, [r7, #20]
 8002df4:	f003 f9fb 	bl	80061ee <USB_WritePacket>

    ep->xfer_buff  += len;
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	68da      	ldr	r2, [r3, #12]
 8002dfc:	69fb      	ldr	r3, [r7, #28]
 8002dfe:	441a      	add	r2, r3
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	699a      	ldr	r2, [r3, #24]
 8002e08:	69fb      	ldr	r3, [r7, #28]
 8002e0a:	441a      	add	r2, r3
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002e10:	683b      	ldr	r3, [r7, #0]
 8002e12:	015a      	lsls	r2, r3, #5
 8002e14:	693b      	ldr	r3, [r7, #16]
 8002e16:	4413      	add	r3, r2
 8002e18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002e1c:	699b      	ldr	r3, [r3, #24]
 8002e1e:	b29b      	uxth	r3, r3
 8002e20:	69ba      	ldr	r2, [r7, #24]
 8002e22:	429a      	cmp	r2, r3
 8002e24:	d809      	bhi.n	8002e3a <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	699a      	ldr	r2, [r3, #24]
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002e2e:	429a      	cmp	r2, r3
 8002e30:	d203      	bcs.n	8002e3a <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	695b      	ldr	r3, [r3, #20]
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d1be      	bne.n	8002db8 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	695a      	ldr	r2, [r3, #20]
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	699b      	ldr	r3, [r3, #24]
 8002e42:	429a      	cmp	r2, r3
 8002e44:	d811      	bhi.n	8002e6a <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002e46:	683b      	ldr	r3, [r7, #0]
 8002e48:	f003 030f 	and.w	r3, r3, #15
 8002e4c:	2201      	movs	r2, #1
 8002e4e:	fa02 f303 	lsl.w	r3, r2, r3
 8002e52:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002e54:	693b      	ldr	r3, [r7, #16]
 8002e56:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002e5a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002e5c:	68bb      	ldr	r3, [r7, #8]
 8002e5e:	43db      	mvns	r3, r3
 8002e60:	6939      	ldr	r1, [r7, #16]
 8002e62:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002e66:	4013      	ands	r3, r2
 8002e68:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8002e6a:	2300      	movs	r3, #0
}
 8002e6c:	4618      	mov	r0, r3
 8002e6e:	3720      	adds	r7, #32
 8002e70:	46bd      	mov	sp, r7
 8002e72:	bd80      	pop	{r7, pc}

08002e74 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002e74:	b580      	push	{r7, lr}
 8002e76:	b086      	sub	sp, #24
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	6078      	str	r0, [r7, #4]
 8002e7c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002e84:	697b      	ldr	r3, [r7, #20]
 8002e86:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002e88:	697b      	ldr	r3, [r7, #20]
 8002e8a:	333c      	adds	r3, #60	; 0x3c
 8002e8c:	3304      	adds	r3, #4
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002e92:	683b      	ldr	r3, [r7, #0]
 8002e94:	015a      	lsls	r2, r3, #5
 8002e96:	693b      	ldr	r3, [r7, #16]
 8002e98:	4413      	add	r3, r2
 8002e9a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002e9e:	689b      	ldr	r3, [r3, #8]
 8002ea0:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	691b      	ldr	r3, [r3, #16]
 8002ea6:	2b01      	cmp	r3, #1
 8002ea8:	f040 80a0 	bne.w	8002fec <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8002eac:	68bb      	ldr	r3, [r7, #8]
 8002eae:	f003 0308 	and.w	r3, r3, #8
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d015      	beq.n	8002ee2 <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	4a72      	ldr	r2, [pc, #456]	; (8003084 <PCD_EP_OutXfrComplete_int+0x210>)
 8002eba:	4293      	cmp	r3, r2
 8002ebc:	f240 80dd 	bls.w	800307a <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002ec0:	68bb      	ldr	r3, [r7, #8]
 8002ec2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	f000 80d7 	beq.w	800307a <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002ecc:	683b      	ldr	r3, [r7, #0]
 8002ece:	015a      	lsls	r2, r3, #5
 8002ed0:	693b      	ldr	r3, [r7, #16]
 8002ed2:	4413      	add	r3, r2
 8002ed4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002ed8:	461a      	mov	r2, r3
 8002eda:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002ede:	6093      	str	r3, [r2, #8]
 8002ee0:	e0cb      	b.n	800307a <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8002ee2:	68bb      	ldr	r3, [r7, #8]
 8002ee4:	f003 0320 	and.w	r3, r3, #32
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d009      	beq.n	8002f00 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002eec:	683b      	ldr	r3, [r7, #0]
 8002eee:	015a      	lsls	r2, r3, #5
 8002ef0:	693b      	ldr	r3, [r7, #16]
 8002ef2:	4413      	add	r3, r2
 8002ef4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002ef8:	461a      	mov	r2, r3
 8002efa:	2320      	movs	r3, #32
 8002efc:	6093      	str	r3, [r2, #8]
 8002efe:	e0bc      	b.n	800307a <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8002f00:	68bb      	ldr	r3, [r7, #8]
 8002f02:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	f040 80b7 	bne.w	800307a <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	4a5d      	ldr	r2, [pc, #372]	; (8003084 <PCD_EP_OutXfrComplete_int+0x210>)
 8002f10:	4293      	cmp	r3, r2
 8002f12:	d90f      	bls.n	8002f34 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002f14:	68bb      	ldr	r3, [r7, #8]
 8002f16:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d00a      	beq.n	8002f34 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002f1e:	683b      	ldr	r3, [r7, #0]
 8002f20:	015a      	lsls	r2, r3, #5
 8002f22:	693b      	ldr	r3, [r7, #16]
 8002f24:	4413      	add	r3, r2
 8002f26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002f2a:	461a      	mov	r2, r3
 8002f2c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002f30:	6093      	str	r3, [r2, #8]
 8002f32:	e0a2      	b.n	800307a <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8002f34:	6879      	ldr	r1, [r7, #4]
 8002f36:	683a      	ldr	r2, [r7, #0]
 8002f38:	4613      	mov	r3, r2
 8002f3a:	00db      	lsls	r3, r3, #3
 8002f3c:	1a9b      	subs	r3, r3, r2
 8002f3e:	009b      	lsls	r3, r3, #2
 8002f40:	440b      	add	r3, r1
 8002f42:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002f46:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8002f48:	683b      	ldr	r3, [r7, #0]
 8002f4a:	0159      	lsls	r1, r3, #5
 8002f4c:	693b      	ldr	r3, [r7, #16]
 8002f4e:	440b      	add	r3, r1
 8002f50:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002f54:	691b      	ldr	r3, [r3, #16]
 8002f56:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8002f5a:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8002f5c:	6878      	ldr	r0, [r7, #4]
 8002f5e:	683a      	ldr	r2, [r7, #0]
 8002f60:	4613      	mov	r3, r2
 8002f62:	00db      	lsls	r3, r3, #3
 8002f64:	1a9b      	subs	r3, r3, r2
 8002f66:	009b      	lsls	r3, r3, #2
 8002f68:	4403      	add	r3, r0
 8002f6a:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8002f6e:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8002f70:	6879      	ldr	r1, [r7, #4]
 8002f72:	683a      	ldr	r2, [r7, #0]
 8002f74:	4613      	mov	r3, r2
 8002f76:	00db      	lsls	r3, r3, #3
 8002f78:	1a9b      	subs	r3, r3, r2
 8002f7a:	009b      	lsls	r3, r3, #2
 8002f7c:	440b      	add	r3, r1
 8002f7e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002f82:	6819      	ldr	r1, [r3, #0]
 8002f84:	6878      	ldr	r0, [r7, #4]
 8002f86:	683a      	ldr	r2, [r7, #0]
 8002f88:	4613      	mov	r3, r2
 8002f8a:	00db      	lsls	r3, r3, #3
 8002f8c:	1a9b      	subs	r3, r3, r2
 8002f8e:	009b      	lsls	r3, r3, #2
 8002f90:	4403      	add	r3, r0
 8002f92:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	4419      	add	r1, r3
 8002f9a:	6878      	ldr	r0, [r7, #4]
 8002f9c:	683a      	ldr	r2, [r7, #0]
 8002f9e:	4613      	mov	r3, r2
 8002fa0:	00db      	lsls	r3, r3, #3
 8002fa2:	1a9b      	subs	r3, r3, r2
 8002fa4:	009b      	lsls	r3, r3, #2
 8002fa6:	4403      	add	r3, r0
 8002fa8:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002fac:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002fae:	683b      	ldr	r3, [r7, #0]
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d114      	bne.n	8002fde <PCD_EP_OutXfrComplete_int+0x16a>
 8002fb4:	6879      	ldr	r1, [r7, #4]
 8002fb6:	683a      	ldr	r2, [r7, #0]
 8002fb8:	4613      	mov	r3, r2
 8002fba:	00db      	lsls	r3, r3, #3
 8002fbc:	1a9b      	subs	r3, r3, r2
 8002fbe:	009b      	lsls	r3, r3, #2
 8002fc0:	440b      	add	r3, r1
 8002fc2:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d108      	bne.n	8002fde <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	6818      	ldr	r0, [r3, #0]
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002fd6:	461a      	mov	r2, r3
 8002fd8:	2101      	movs	r1, #1
 8002fda:	f003 fb9f 	bl	800671c <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002fde:	683b      	ldr	r3, [r7, #0]
 8002fe0:	b2db      	uxtb	r3, r3
 8002fe2:	4619      	mov	r1, r3
 8002fe4:	6878      	ldr	r0, [r7, #4]
 8002fe6:	f005 fb21 	bl	800862c <HAL_PCD_DataOutStageCallback>
 8002fea:	e046      	b.n	800307a <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	4a26      	ldr	r2, [pc, #152]	; (8003088 <PCD_EP_OutXfrComplete_int+0x214>)
 8002ff0:	4293      	cmp	r3, r2
 8002ff2:	d124      	bne.n	800303e <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8002ff4:	68bb      	ldr	r3, [r7, #8]
 8002ff6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d00a      	beq.n	8003014 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002ffe:	683b      	ldr	r3, [r7, #0]
 8003000:	015a      	lsls	r2, r3, #5
 8003002:	693b      	ldr	r3, [r7, #16]
 8003004:	4413      	add	r3, r2
 8003006:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800300a:	461a      	mov	r2, r3
 800300c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003010:	6093      	str	r3, [r2, #8]
 8003012:	e032      	b.n	800307a <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003014:	68bb      	ldr	r3, [r7, #8]
 8003016:	f003 0320 	and.w	r3, r3, #32
 800301a:	2b00      	cmp	r3, #0
 800301c:	d008      	beq.n	8003030 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800301e:	683b      	ldr	r3, [r7, #0]
 8003020:	015a      	lsls	r2, r3, #5
 8003022:	693b      	ldr	r3, [r7, #16]
 8003024:	4413      	add	r3, r2
 8003026:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800302a:	461a      	mov	r2, r3
 800302c:	2320      	movs	r3, #32
 800302e:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003030:	683b      	ldr	r3, [r7, #0]
 8003032:	b2db      	uxtb	r3, r3
 8003034:	4619      	mov	r1, r3
 8003036:	6878      	ldr	r0, [r7, #4]
 8003038:	f005 faf8 	bl	800862c <HAL_PCD_DataOutStageCallback>
 800303c:	e01d      	b.n	800307a <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800303e:	683b      	ldr	r3, [r7, #0]
 8003040:	2b00      	cmp	r3, #0
 8003042:	d114      	bne.n	800306e <PCD_EP_OutXfrComplete_int+0x1fa>
 8003044:	6879      	ldr	r1, [r7, #4]
 8003046:	683a      	ldr	r2, [r7, #0]
 8003048:	4613      	mov	r3, r2
 800304a:	00db      	lsls	r3, r3, #3
 800304c:	1a9b      	subs	r3, r3, r2
 800304e:	009b      	lsls	r3, r3, #2
 8003050:	440b      	add	r3, r1
 8003052:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	2b00      	cmp	r3, #0
 800305a:	d108      	bne.n	800306e <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	6818      	ldr	r0, [r3, #0]
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003066:	461a      	mov	r2, r3
 8003068:	2100      	movs	r1, #0
 800306a:	f003 fb57 	bl	800671c <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800306e:	683b      	ldr	r3, [r7, #0]
 8003070:	b2db      	uxtb	r3, r3
 8003072:	4619      	mov	r1, r3
 8003074:	6878      	ldr	r0, [r7, #4]
 8003076:	f005 fad9 	bl	800862c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800307a:	2300      	movs	r3, #0
}
 800307c:	4618      	mov	r0, r3
 800307e:	3718      	adds	r7, #24
 8003080:	46bd      	mov	sp, r7
 8003082:	bd80      	pop	{r7, pc}
 8003084:	4f54300a 	.word	0x4f54300a
 8003088:	4f54310a 	.word	0x4f54310a

0800308c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800308c:	b580      	push	{r7, lr}
 800308e:	b086      	sub	sp, #24
 8003090:	af00      	add	r7, sp, #0
 8003092:	6078      	str	r0, [r7, #4]
 8003094:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800309c:	697b      	ldr	r3, [r7, #20]
 800309e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80030a0:	697b      	ldr	r3, [r7, #20]
 80030a2:	333c      	adds	r3, #60	; 0x3c
 80030a4:	3304      	adds	r3, #4
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80030aa:	683b      	ldr	r3, [r7, #0]
 80030ac:	015a      	lsls	r2, r3, #5
 80030ae:	693b      	ldr	r3, [r7, #16]
 80030b0:	4413      	add	r3, r2
 80030b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80030b6:	689b      	ldr	r3, [r3, #8]
 80030b8:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	4a15      	ldr	r2, [pc, #84]	; (8003114 <PCD_EP_OutSetupPacket_int+0x88>)
 80030be:	4293      	cmp	r3, r2
 80030c0:	d90e      	bls.n	80030e0 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80030c2:	68bb      	ldr	r3, [r7, #8]
 80030c4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d009      	beq.n	80030e0 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80030cc:	683b      	ldr	r3, [r7, #0]
 80030ce:	015a      	lsls	r2, r3, #5
 80030d0:	693b      	ldr	r3, [r7, #16]
 80030d2:	4413      	add	r3, r2
 80030d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80030d8:	461a      	mov	r2, r3
 80030da:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80030de:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80030e0:	6878      	ldr	r0, [r7, #4]
 80030e2:	f005 fa91 	bl	8008608 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	4a0a      	ldr	r2, [pc, #40]	; (8003114 <PCD_EP_OutSetupPacket_int+0x88>)
 80030ea:	4293      	cmp	r3, r2
 80030ec:	d90c      	bls.n	8003108 <PCD_EP_OutSetupPacket_int+0x7c>
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	691b      	ldr	r3, [r3, #16]
 80030f2:	2b01      	cmp	r3, #1
 80030f4:	d108      	bne.n	8003108 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	6818      	ldr	r0, [r3, #0]
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003100:	461a      	mov	r2, r3
 8003102:	2101      	movs	r1, #1
 8003104:	f003 fb0a 	bl	800671c <USB_EP0_OutStart>
  }

  return HAL_OK;
 8003108:	2300      	movs	r3, #0
}
 800310a:	4618      	mov	r0, r3
 800310c:	3718      	adds	r7, #24
 800310e:	46bd      	mov	sp, r7
 8003110:	bd80      	pop	{r7, pc}
 8003112:	bf00      	nop
 8003114:	4f54300a 	.word	0x4f54300a

08003118 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8003118:	b480      	push	{r7}
 800311a:	b085      	sub	sp, #20
 800311c:	af00      	add	r7, sp, #0
 800311e:	6078      	str	r0, [r7, #4]
 8003120:	460b      	mov	r3, r1
 8003122:	70fb      	strb	r3, [r7, #3]
 8003124:	4613      	mov	r3, r2
 8003126:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800312e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8003130:	78fb      	ldrb	r3, [r7, #3]
 8003132:	2b00      	cmp	r3, #0
 8003134:	d107      	bne.n	8003146 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8003136:	883b      	ldrh	r3, [r7, #0]
 8003138:	0419      	lsls	r1, r3, #16
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	68ba      	ldr	r2, [r7, #8]
 8003140:	430a      	orrs	r2, r1
 8003142:	629a      	str	r2, [r3, #40]	; 0x28
 8003144:	e028      	b.n	8003198 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800314c:	0c1b      	lsrs	r3, r3, #16
 800314e:	68ba      	ldr	r2, [r7, #8]
 8003150:	4413      	add	r3, r2
 8003152:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003154:	2300      	movs	r3, #0
 8003156:	73fb      	strb	r3, [r7, #15]
 8003158:	e00d      	b.n	8003176 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681a      	ldr	r2, [r3, #0]
 800315e:	7bfb      	ldrb	r3, [r7, #15]
 8003160:	3340      	adds	r3, #64	; 0x40
 8003162:	009b      	lsls	r3, r3, #2
 8003164:	4413      	add	r3, r2
 8003166:	685b      	ldr	r3, [r3, #4]
 8003168:	0c1b      	lsrs	r3, r3, #16
 800316a:	68ba      	ldr	r2, [r7, #8]
 800316c:	4413      	add	r3, r2
 800316e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003170:	7bfb      	ldrb	r3, [r7, #15]
 8003172:	3301      	adds	r3, #1
 8003174:	73fb      	strb	r3, [r7, #15]
 8003176:	7bfa      	ldrb	r2, [r7, #15]
 8003178:	78fb      	ldrb	r3, [r7, #3]
 800317a:	3b01      	subs	r3, #1
 800317c:	429a      	cmp	r2, r3
 800317e:	d3ec      	bcc.n	800315a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003180:	883b      	ldrh	r3, [r7, #0]
 8003182:	0418      	lsls	r0, r3, #16
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	6819      	ldr	r1, [r3, #0]
 8003188:	78fb      	ldrb	r3, [r7, #3]
 800318a:	3b01      	subs	r3, #1
 800318c:	68ba      	ldr	r2, [r7, #8]
 800318e:	4302      	orrs	r2, r0
 8003190:	3340      	adds	r3, #64	; 0x40
 8003192:	009b      	lsls	r3, r3, #2
 8003194:	440b      	add	r3, r1
 8003196:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003198:	2300      	movs	r3, #0
}
 800319a:	4618      	mov	r0, r3
 800319c:	3714      	adds	r7, #20
 800319e:	46bd      	mov	sp, r7
 80031a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a4:	4770      	bx	lr

080031a6 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80031a6:	b480      	push	{r7}
 80031a8:	b083      	sub	sp, #12
 80031aa:	af00      	add	r7, sp, #0
 80031ac:	6078      	str	r0, [r7, #4]
 80031ae:	460b      	mov	r3, r1
 80031b0:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	887a      	ldrh	r2, [r7, #2]
 80031b8:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80031ba:	2300      	movs	r3, #0
}
 80031bc:	4618      	mov	r0, r3
 80031be:	370c      	adds	r7, #12
 80031c0:	46bd      	mov	sp, r7
 80031c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c6:	4770      	bx	lr

080031c8 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80031c8:	b480      	push	{r7}
 80031ca:	b085      	sub	sp, #20
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	2201      	movs	r2, #1
 80031da:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	2200      	movs	r2, #0
 80031e2:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	699b      	ldr	r3, [r3, #24]
 80031ea:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80031fa:	f043 0303 	orr.w	r3, r3, #3
 80031fe:	68fa      	ldr	r2, [r7, #12]
 8003200:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8003202:	2300      	movs	r3, #0
}
 8003204:	4618      	mov	r0, r3
 8003206:	3714      	adds	r7, #20
 8003208:	46bd      	mov	sp, r7
 800320a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800320e:	4770      	bx	lr

08003210 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003210:	b580      	push	{r7, lr}
 8003212:	b084      	sub	sp, #16
 8003214:	af00      	add	r7, sp, #0
 8003216:	6078      	str	r0, [r7, #4]
 8003218:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	2b00      	cmp	r3, #0
 800321e:	d101      	bne.n	8003224 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003220:	2301      	movs	r3, #1
 8003222:	e0cc      	b.n	80033be <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003224:	4b68      	ldr	r3, [pc, #416]	; (80033c8 <HAL_RCC_ClockConfig+0x1b8>)
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f003 030f 	and.w	r3, r3, #15
 800322c:	683a      	ldr	r2, [r7, #0]
 800322e:	429a      	cmp	r2, r3
 8003230:	d90c      	bls.n	800324c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003232:	4b65      	ldr	r3, [pc, #404]	; (80033c8 <HAL_RCC_ClockConfig+0x1b8>)
 8003234:	683a      	ldr	r2, [r7, #0]
 8003236:	b2d2      	uxtb	r2, r2
 8003238:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800323a:	4b63      	ldr	r3, [pc, #396]	; (80033c8 <HAL_RCC_ClockConfig+0x1b8>)
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	f003 030f 	and.w	r3, r3, #15
 8003242:	683a      	ldr	r2, [r7, #0]
 8003244:	429a      	cmp	r2, r3
 8003246:	d001      	beq.n	800324c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003248:	2301      	movs	r3, #1
 800324a:	e0b8      	b.n	80033be <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	f003 0302 	and.w	r3, r3, #2
 8003254:	2b00      	cmp	r3, #0
 8003256:	d020      	beq.n	800329a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	f003 0304 	and.w	r3, r3, #4
 8003260:	2b00      	cmp	r3, #0
 8003262:	d005      	beq.n	8003270 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003264:	4b59      	ldr	r3, [pc, #356]	; (80033cc <HAL_RCC_ClockConfig+0x1bc>)
 8003266:	689b      	ldr	r3, [r3, #8]
 8003268:	4a58      	ldr	r2, [pc, #352]	; (80033cc <HAL_RCC_ClockConfig+0x1bc>)
 800326a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800326e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f003 0308 	and.w	r3, r3, #8
 8003278:	2b00      	cmp	r3, #0
 800327a:	d005      	beq.n	8003288 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800327c:	4b53      	ldr	r3, [pc, #332]	; (80033cc <HAL_RCC_ClockConfig+0x1bc>)
 800327e:	689b      	ldr	r3, [r3, #8]
 8003280:	4a52      	ldr	r2, [pc, #328]	; (80033cc <HAL_RCC_ClockConfig+0x1bc>)
 8003282:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003286:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003288:	4b50      	ldr	r3, [pc, #320]	; (80033cc <HAL_RCC_ClockConfig+0x1bc>)
 800328a:	689b      	ldr	r3, [r3, #8]
 800328c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	689b      	ldr	r3, [r3, #8]
 8003294:	494d      	ldr	r1, [pc, #308]	; (80033cc <HAL_RCC_ClockConfig+0x1bc>)
 8003296:	4313      	orrs	r3, r2
 8003298:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	f003 0301 	and.w	r3, r3, #1
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d044      	beq.n	8003330 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	685b      	ldr	r3, [r3, #4]
 80032aa:	2b01      	cmp	r3, #1
 80032ac:	d107      	bne.n	80032be <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032ae:	4b47      	ldr	r3, [pc, #284]	; (80033cc <HAL_RCC_ClockConfig+0x1bc>)
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d119      	bne.n	80032ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80032ba:	2301      	movs	r3, #1
 80032bc:	e07f      	b.n	80033be <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	685b      	ldr	r3, [r3, #4]
 80032c2:	2b02      	cmp	r3, #2
 80032c4:	d003      	beq.n	80032ce <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80032ca:	2b03      	cmp	r3, #3
 80032cc:	d107      	bne.n	80032de <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80032ce:	4b3f      	ldr	r3, [pc, #252]	; (80033cc <HAL_RCC_ClockConfig+0x1bc>)
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d109      	bne.n	80032ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80032da:	2301      	movs	r3, #1
 80032dc:	e06f      	b.n	80033be <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80032de:	4b3b      	ldr	r3, [pc, #236]	; (80033cc <HAL_RCC_ClockConfig+0x1bc>)
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f003 0302 	and.w	r3, r3, #2
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d101      	bne.n	80032ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80032ea:	2301      	movs	r3, #1
 80032ec:	e067      	b.n	80033be <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80032ee:	4b37      	ldr	r3, [pc, #220]	; (80033cc <HAL_RCC_ClockConfig+0x1bc>)
 80032f0:	689b      	ldr	r3, [r3, #8]
 80032f2:	f023 0203 	bic.w	r2, r3, #3
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	685b      	ldr	r3, [r3, #4]
 80032fa:	4934      	ldr	r1, [pc, #208]	; (80033cc <HAL_RCC_ClockConfig+0x1bc>)
 80032fc:	4313      	orrs	r3, r2
 80032fe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003300:	f7fd feb6 	bl	8001070 <HAL_GetTick>
 8003304:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003306:	e00a      	b.n	800331e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003308:	f7fd feb2 	bl	8001070 <HAL_GetTick>
 800330c:	4602      	mov	r2, r0
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	1ad3      	subs	r3, r2, r3
 8003312:	f241 3288 	movw	r2, #5000	; 0x1388
 8003316:	4293      	cmp	r3, r2
 8003318:	d901      	bls.n	800331e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800331a:	2303      	movs	r3, #3
 800331c:	e04f      	b.n	80033be <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800331e:	4b2b      	ldr	r3, [pc, #172]	; (80033cc <HAL_RCC_ClockConfig+0x1bc>)
 8003320:	689b      	ldr	r3, [r3, #8]
 8003322:	f003 020c 	and.w	r2, r3, #12
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	685b      	ldr	r3, [r3, #4]
 800332a:	009b      	lsls	r3, r3, #2
 800332c:	429a      	cmp	r2, r3
 800332e:	d1eb      	bne.n	8003308 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003330:	4b25      	ldr	r3, [pc, #148]	; (80033c8 <HAL_RCC_ClockConfig+0x1b8>)
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	f003 030f 	and.w	r3, r3, #15
 8003338:	683a      	ldr	r2, [r7, #0]
 800333a:	429a      	cmp	r2, r3
 800333c:	d20c      	bcs.n	8003358 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800333e:	4b22      	ldr	r3, [pc, #136]	; (80033c8 <HAL_RCC_ClockConfig+0x1b8>)
 8003340:	683a      	ldr	r2, [r7, #0]
 8003342:	b2d2      	uxtb	r2, r2
 8003344:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003346:	4b20      	ldr	r3, [pc, #128]	; (80033c8 <HAL_RCC_ClockConfig+0x1b8>)
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f003 030f 	and.w	r3, r3, #15
 800334e:	683a      	ldr	r2, [r7, #0]
 8003350:	429a      	cmp	r2, r3
 8003352:	d001      	beq.n	8003358 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003354:	2301      	movs	r3, #1
 8003356:	e032      	b.n	80033be <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	f003 0304 	and.w	r3, r3, #4
 8003360:	2b00      	cmp	r3, #0
 8003362:	d008      	beq.n	8003376 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003364:	4b19      	ldr	r3, [pc, #100]	; (80033cc <HAL_RCC_ClockConfig+0x1bc>)
 8003366:	689b      	ldr	r3, [r3, #8]
 8003368:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	68db      	ldr	r3, [r3, #12]
 8003370:	4916      	ldr	r1, [pc, #88]	; (80033cc <HAL_RCC_ClockConfig+0x1bc>)
 8003372:	4313      	orrs	r3, r2
 8003374:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	f003 0308 	and.w	r3, r3, #8
 800337e:	2b00      	cmp	r3, #0
 8003380:	d009      	beq.n	8003396 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003382:	4b12      	ldr	r3, [pc, #72]	; (80033cc <HAL_RCC_ClockConfig+0x1bc>)
 8003384:	689b      	ldr	r3, [r3, #8]
 8003386:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	691b      	ldr	r3, [r3, #16]
 800338e:	00db      	lsls	r3, r3, #3
 8003390:	490e      	ldr	r1, [pc, #56]	; (80033cc <HAL_RCC_ClockConfig+0x1bc>)
 8003392:	4313      	orrs	r3, r2
 8003394:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003396:	f000 f821 	bl	80033dc <HAL_RCC_GetSysClockFreq>
 800339a:	4602      	mov	r2, r0
 800339c:	4b0b      	ldr	r3, [pc, #44]	; (80033cc <HAL_RCC_ClockConfig+0x1bc>)
 800339e:	689b      	ldr	r3, [r3, #8]
 80033a0:	091b      	lsrs	r3, r3, #4
 80033a2:	f003 030f 	and.w	r3, r3, #15
 80033a6:	490a      	ldr	r1, [pc, #40]	; (80033d0 <HAL_RCC_ClockConfig+0x1c0>)
 80033a8:	5ccb      	ldrb	r3, [r1, r3]
 80033aa:	fa22 f303 	lsr.w	r3, r2, r3
 80033ae:	4a09      	ldr	r2, [pc, #36]	; (80033d4 <HAL_RCC_ClockConfig+0x1c4>)
 80033b0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80033b2:	4b09      	ldr	r3, [pc, #36]	; (80033d8 <HAL_RCC_ClockConfig+0x1c8>)
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	4618      	mov	r0, r3
 80033b8:	f7fd fe16 	bl	8000fe8 <HAL_InitTick>

  return HAL_OK;
 80033bc:	2300      	movs	r3, #0
}
 80033be:	4618      	mov	r0, r3
 80033c0:	3710      	adds	r7, #16
 80033c2:	46bd      	mov	sp, r7
 80033c4:	bd80      	pop	{r7, pc}
 80033c6:	bf00      	nop
 80033c8:	40023c00 	.word	0x40023c00
 80033cc:	40023800 	.word	0x40023800
 80033d0:	08008cdc 	.word	0x08008cdc
 80033d4:	20000000 	.word	0x20000000
 80033d8:	20000004 	.word	0x20000004

080033dc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80033dc:	b5b0      	push	{r4, r5, r7, lr}
 80033de:	b084      	sub	sp, #16
 80033e0:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80033e2:	2100      	movs	r1, #0
 80033e4:	6079      	str	r1, [r7, #4]
 80033e6:	2100      	movs	r1, #0
 80033e8:	60f9      	str	r1, [r7, #12]
 80033ea:	2100      	movs	r1, #0
 80033ec:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80033ee:	2100      	movs	r1, #0
 80033f0:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80033f2:	4952      	ldr	r1, [pc, #328]	; (800353c <HAL_RCC_GetSysClockFreq+0x160>)
 80033f4:	6889      	ldr	r1, [r1, #8]
 80033f6:	f001 010c 	and.w	r1, r1, #12
 80033fa:	2908      	cmp	r1, #8
 80033fc:	d00d      	beq.n	800341a <HAL_RCC_GetSysClockFreq+0x3e>
 80033fe:	2908      	cmp	r1, #8
 8003400:	f200 8094 	bhi.w	800352c <HAL_RCC_GetSysClockFreq+0x150>
 8003404:	2900      	cmp	r1, #0
 8003406:	d002      	beq.n	800340e <HAL_RCC_GetSysClockFreq+0x32>
 8003408:	2904      	cmp	r1, #4
 800340a:	d003      	beq.n	8003414 <HAL_RCC_GetSysClockFreq+0x38>
 800340c:	e08e      	b.n	800352c <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800340e:	4b4c      	ldr	r3, [pc, #304]	; (8003540 <HAL_RCC_GetSysClockFreq+0x164>)
 8003410:	60bb      	str	r3, [r7, #8]
       break;
 8003412:	e08e      	b.n	8003532 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003414:	4b4b      	ldr	r3, [pc, #300]	; (8003544 <HAL_RCC_GetSysClockFreq+0x168>)
 8003416:	60bb      	str	r3, [r7, #8]
      break;
 8003418:	e08b      	b.n	8003532 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800341a:	4948      	ldr	r1, [pc, #288]	; (800353c <HAL_RCC_GetSysClockFreq+0x160>)
 800341c:	6849      	ldr	r1, [r1, #4]
 800341e:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8003422:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003424:	4945      	ldr	r1, [pc, #276]	; (800353c <HAL_RCC_GetSysClockFreq+0x160>)
 8003426:	6849      	ldr	r1, [r1, #4]
 8003428:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 800342c:	2900      	cmp	r1, #0
 800342e:	d024      	beq.n	800347a <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003430:	4942      	ldr	r1, [pc, #264]	; (800353c <HAL_RCC_GetSysClockFreq+0x160>)
 8003432:	6849      	ldr	r1, [r1, #4]
 8003434:	0989      	lsrs	r1, r1, #6
 8003436:	4608      	mov	r0, r1
 8003438:	f04f 0100 	mov.w	r1, #0
 800343c:	f240 14ff 	movw	r4, #511	; 0x1ff
 8003440:	f04f 0500 	mov.w	r5, #0
 8003444:	ea00 0204 	and.w	r2, r0, r4
 8003448:	ea01 0305 	and.w	r3, r1, r5
 800344c:	493d      	ldr	r1, [pc, #244]	; (8003544 <HAL_RCC_GetSysClockFreq+0x168>)
 800344e:	fb01 f003 	mul.w	r0, r1, r3
 8003452:	2100      	movs	r1, #0
 8003454:	fb01 f102 	mul.w	r1, r1, r2
 8003458:	1844      	adds	r4, r0, r1
 800345a:	493a      	ldr	r1, [pc, #232]	; (8003544 <HAL_RCC_GetSysClockFreq+0x168>)
 800345c:	fba2 0101 	umull	r0, r1, r2, r1
 8003460:	1863      	adds	r3, r4, r1
 8003462:	4619      	mov	r1, r3
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	461a      	mov	r2, r3
 8003468:	f04f 0300 	mov.w	r3, #0
 800346c:	f7fc fec2 	bl	80001f4 <__aeabi_uldivmod>
 8003470:	4602      	mov	r2, r0
 8003472:	460b      	mov	r3, r1
 8003474:	4613      	mov	r3, r2
 8003476:	60fb      	str	r3, [r7, #12]
 8003478:	e04a      	b.n	8003510 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800347a:	4b30      	ldr	r3, [pc, #192]	; (800353c <HAL_RCC_GetSysClockFreq+0x160>)
 800347c:	685b      	ldr	r3, [r3, #4]
 800347e:	099b      	lsrs	r3, r3, #6
 8003480:	461a      	mov	r2, r3
 8003482:	f04f 0300 	mov.w	r3, #0
 8003486:	f240 10ff 	movw	r0, #511	; 0x1ff
 800348a:	f04f 0100 	mov.w	r1, #0
 800348e:	ea02 0400 	and.w	r4, r2, r0
 8003492:	ea03 0501 	and.w	r5, r3, r1
 8003496:	4620      	mov	r0, r4
 8003498:	4629      	mov	r1, r5
 800349a:	f04f 0200 	mov.w	r2, #0
 800349e:	f04f 0300 	mov.w	r3, #0
 80034a2:	014b      	lsls	r3, r1, #5
 80034a4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80034a8:	0142      	lsls	r2, r0, #5
 80034aa:	4610      	mov	r0, r2
 80034ac:	4619      	mov	r1, r3
 80034ae:	1b00      	subs	r0, r0, r4
 80034b0:	eb61 0105 	sbc.w	r1, r1, r5
 80034b4:	f04f 0200 	mov.w	r2, #0
 80034b8:	f04f 0300 	mov.w	r3, #0
 80034bc:	018b      	lsls	r3, r1, #6
 80034be:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80034c2:	0182      	lsls	r2, r0, #6
 80034c4:	1a12      	subs	r2, r2, r0
 80034c6:	eb63 0301 	sbc.w	r3, r3, r1
 80034ca:	f04f 0000 	mov.w	r0, #0
 80034ce:	f04f 0100 	mov.w	r1, #0
 80034d2:	00d9      	lsls	r1, r3, #3
 80034d4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80034d8:	00d0      	lsls	r0, r2, #3
 80034da:	4602      	mov	r2, r0
 80034dc:	460b      	mov	r3, r1
 80034de:	1912      	adds	r2, r2, r4
 80034e0:	eb45 0303 	adc.w	r3, r5, r3
 80034e4:	f04f 0000 	mov.w	r0, #0
 80034e8:	f04f 0100 	mov.w	r1, #0
 80034ec:	0299      	lsls	r1, r3, #10
 80034ee:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80034f2:	0290      	lsls	r0, r2, #10
 80034f4:	4602      	mov	r2, r0
 80034f6:	460b      	mov	r3, r1
 80034f8:	4610      	mov	r0, r2
 80034fa:	4619      	mov	r1, r3
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	461a      	mov	r2, r3
 8003500:	f04f 0300 	mov.w	r3, #0
 8003504:	f7fc fe76 	bl	80001f4 <__aeabi_uldivmod>
 8003508:	4602      	mov	r2, r0
 800350a:	460b      	mov	r3, r1
 800350c:	4613      	mov	r3, r2
 800350e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003510:	4b0a      	ldr	r3, [pc, #40]	; (800353c <HAL_RCC_GetSysClockFreq+0x160>)
 8003512:	685b      	ldr	r3, [r3, #4]
 8003514:	0c1b      	lsrs	r3, r3, #16
 8003516:	f003 0303 	and.w	r3, r3, #3
 800351a:	3301      	adds	r3, #1
 800351c:	005b      	lsls	r3, r3, #1
 800351e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003520:	68fa      	ldr	r2, [r7, #12]
 8003522:	683b      	ldr	r3, [r7, #0]
 8003524:	fbb2 f3f3 	udiv	r3, r2, r3
 8003528:	60bb      	str	r3, [r7, #8]
      break;
 800352a:	e002      	b.n	8003532 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800352c:	4b04      	ldr	r3, [pc, #16]	; (8003540 <HAL_RCC_GetSysClockFreq+0x164>)
 800352e:	60bb      	str	r3, [r7, #8]
      break;
 8003530:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003532:	68bb      	ldr	r3, [r7, #8]
}
 8003534:	4618      	mov	r0, r3
 8003536:	3710      	adds	r7, #16
 8003538:	46bd      	mov	sp, r7
 800353a:	bdb0      	pop	{r4, r5, r7, pc}
 800353c:	40023800 	.word	0x40023800
 8003540:	00f42400 	.word	0x00f42400
 8003544:	017d7840 	.word	0x017d7840

08003548 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003548:	b480      	push	{r7}
 800354a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800354c:	4b03      	ldr	r3, [pc, #12]	; (800355c <HAL_RCC_GetHCLKFreq+0x14>)
 800354e:	681b      	ldr	r3, [r3, #0]
}
 8003550:	4618      	mov	r0, r3
 8003552:	46bd      	mov	sp, r7
 8003554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003558:	4770      	bx	lr
 800355a:	bf00      	nop
 800355c:	20000000 	.word	0x20000000

08003560 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003560:	b580      	push	{r7, lr}
 8003562:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003564:	f7ff fff0 	bl	8003548 <HAL_RCC_GetHCLKFreq>
 8003568:	4602      	mov	r2, r0
 800356a:	4b05      	ldr	r3, [pc, #20]	; (8003580 <HAL_RCC_GetPCLK1Freq+0x20>)
 800356c:	689b      	ldr	r3, [r3, #8]
 800356e:	0a9b      	lsrs	r3, r3, #10
 8003570:	f003 0307 	and.w	r3, r3, #7
 8003574:	4903      	ldr	r1, [pc, #12]	; (8003584 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003576:	5ccb      	ldrb	r3, [r1, r3]
 8003578:	fa22 f303 	lsr.w	r3, r2, r3
}
 800357c:	4618      	mov	r0, r3
 800357e:	bd80      	pop	{r7, pc}
 8003580:	40023800 	.word	0x40023800
 8003584:	08008cec 	.word	0x08008cec

08003588 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003588:	b580      	push	{r7, lr}
 800358a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800358c:	f7ff ffdc 	bl	8003548 <HAL_RCC_GetHCLKFreq>
 8003590:	4602      	mov	r2, r0
 8003592:	4b05      	ldr	r3, [pc, #20]	; (80035a8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003594:	689b      	ldr	r3, [r3, #8]
 8003596:	0b5b      	lsrs	r3, r3, #13
 8003598:	f003 0307 	and.w	r3, r3, #7
 800359c:	4903      	ldr	r1, [pc, #12]	; (80035ac <HAL_RCC_GetPCLK2Freq+0x24>)
 800359e:	5ccb      	ldrb	r3, [r1, r3]
 80035a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80035a4:	4618      	mov	r0, r3
 80035a6:	bd80      	pop	{r7, pc}
 80035a8:	40023800 	.word	0x40023800
 80035ac:	08008cec 	.word	0x08008cec

080035b0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80035b0:	b580      	push	{r7, lr}
 80035b2:	b088      	sub	sp, #32
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80035b8:	2300      	movs	r3, #0
 80035ba:	61fb      	str	r3, [r7, #28]
  uint32_t tmpreg1 = 0U;
 80035bc:	2300      	movs	r3, #0
 80035be:	61bb      	str	r3, [r7, #24]
  uint32_t pllsaip = 0U;
 80035c0:	2300      	movs	r3, #0
 80035c2:	617b      	str	r3, [r7, #20]
  uint32_t pllsaiq = 0U;
 80035c4:	2300      	movs	r3, #0
 80035c6:	613b      	str	r3, [r7, #16]
  uint32_t pllsair = 0U;
 80035c8:	2300      	movs	r3, #0
 80035ca:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*--------------------------- CLK48 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d00a      	beq.n	80035ee <HAL_RCCEx_PeriphCLKConfig+0x3e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80035d8:	4b66      	ldr	r3, [pc, #408]	; (8003774 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80035da:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80035de:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80035e6:	4963      	ldr	r1, [pc, #396]	; (8003774 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80035e8:	4313      	orrs	r3, r2
 80035ea:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SDIO Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d00a      	beq.n	8003610 <HAL_RCCEx_PeriphCLKConfig+0x60>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 80035fa:	4b5e      	ldr	r3, [pc, #376]	; (8003774 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80035fc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003600:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003608:	495a      	ldr	r1, [pc, #360]	; (8003774 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800360a:	4313      	orrs	r3, r2
 800360c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*------------------- Common configuration SAI/I2S -------------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	f003 0301 	and.w	r3, r3, #1
 8003618:	2b00      	cmp	r3, #0
 800361a:	d10b      	bne.n	8003634 <HAL_RCCEx_PeriphCLKConfig+0x84>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003624:	2b00      	cmp	r3, #0
 8003626:	d105      	bne.n	8003634 <HAL_RCCEx_PeriphCLKConfig+0x84>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8003630:	2b00      	cmp	r3, #0
 8003632:	d075      	beq.n	8003720 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003634:	4b50      	ldr	r3, [pc, #320]	; (8003778 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8003636:	2200      	movs	r2, #0
 8003638:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800363a:	f7fd fd19 	bl	8001070 <HAL_GetTick>
 800363e:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003640:	e008      	b.n	8003654 <HAL_RCCEx_PeriphCLKConfig+0xa4>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003642:	f7fd fd15 	bl	8001070 <HAL_GetTick>
 8003646:	4602      	mov	r2, r0
 8003648:	69fb      	ldr	r3, [r7, #28]
 800364a:	1ad3      	subs	r3, r2, r3
 800364c:	2b02      	cmp	r3, #2
 800364e:	d901      	bls.n	8003654 <HAL_RCCEx_PeriphCLKConfig+0xa4>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003650:	2303      	movs	r3, #3
 8003652:	e1dc      	b.n	8003a0e <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003654:	4b47      	ldr	r3, [pc, #284]	; (8003774 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800365c:	2b00      	cmp	r3, #0
 800365e:	d1f0      	bne.n	8003642 <HAL_RCCEx_PeriphCLKConfig+0x92>
    }

    /*---------------------- I2S configuration -------------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	f003 0301 	and.w	r3, r3, #1
 8003668:	2b00      	cmp	r3, #0
 800366a:	d009      	beq.n	8003680 <HAL_RCCEx_PeriphCLKConfig+0xd0>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	685b      	ldr	r3, [r3, #4]
 8003670:	019a      	lsls	r2, r3, #6
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	689b      	ldr	r3, [r3, #8]
 8003676:	071b      	lsls	r3, r3, #28
 8003678:	493e      	ldr	r1, [pc, #248]	; (8003774 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800367a:	4313      	orrs	r3, r2
 800367c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	f003 0302 	and.w	r3, r3, #2
 8003688:	2b00      	cmp	r3, #0
 800368a:	d01f      	beq.n	80036cc <HAL_RCCEx_PeriphCLKConfig+0x11c>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800368c:	4b39      	ldr	r3, [pc, #228]	; (8003774 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800368e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003692:	0f1b      	lsrs	r3, r3, #28
 8003694:	f003 0307 	and.w	r3, r3, #7
 8003698:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	685b      	ldr	r3, [r3, #4]
 800369e:	019a      	lsls	r2, r3, #6
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	68db      	ldr	r3, [r3, #12]
 80036a4:	061b      	lsls	r3, r3, #24
 80036a6:	431a      	orrs	r2, r3
 80036a8:	69bb      	ldr	r3, [r7, #24]
 80036aa:	071b      	lsls	r3, r3, #28
 80036ac:	4931      	ldr	r1, [pc, #196]	; (8003774 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80036ae:	4313      	orrs	r3, r2
 80036b0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80036b4:	4b2f      	ldr	r3, [pc, #188]	; (8003774 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80036b6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80036ba:	f023 021f 	bic.w	r2, r3, #31
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	6a1b      	ldr	r3, [r3, #32]
 80036c2:	3b01      	subs	r3, #1
 80036c4:	492b      	ldr	r1, [pc, #172]	; (8003774 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80036c6:	4313      	orrs	r3, r2
 80036c8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d00d      	beq.n	80036f4 <HAL_RCCEx_PeriphCLKConfig+0x144>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	685b      	ldr	r3, [r3, #4]
 80036dc:	019a      	lsls	r2, r3, #6
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	68db      	ldr	r3, [r3, #12]
 80036e2:	061b      	lsls	r3, r3, #24
 80036e4:	431a      	orrs	r2, r3
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	689b      	ldr	r3, [r3, #8]
 80036ea:	071b      	lsls	r3, r3, #28
 80036ec:	4921      	ldr	r1, [pc, #132]	; (8003774 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80036ee:	4313      	orrs	r3, r2
 80036f0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80036f4:	4b20      	ldr	r3, [pc, #128]	; (8003778 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 80036f6:	2201      	movs	r2, #1
 80036f8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80036fa:	f7fd fcb9 	bl	8001070 <HAL_GetTick>
 80036fe:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003700:	e008      	b.n	8003714 <HAL_RCCEx_PeriphCLKConfig+0x164>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003702:	f7fd fcb5 	bl	8001070 <HAL_GetTick>
 8003706:	4602      	mov	r2, r0
 8003708:	69fb      	ldr	r3, [r7, #28]
 800370a:	1ad3      	subs	r3, r2, r3
 800370c:	2b02      	cmp	r3, #2
 800370e:	d901      	bls.n	8003714 <HAL_RCCEx_PeriphCLKConfig+0x164>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003710:	2303      	movs	r3, #3
 8003712:	e17c      	b.n	8003a0e <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003714:	4b17      	ldr	r3, [pc, #92]	; (8003774 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800371c:	2b00      	cmp	r3, #0
 800371e:	d0f0      	beq.n	8003702 <HAL_RCCEx_PeriphCLKConfig+0x152>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI, LTDC or CLK48 Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for these peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	f003 0304 	and.w	r3, r3, #4
 8003728:	2b00      	cmp	r3, #0
 800372a:	d112      	bne.n	8003752 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)             ||
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8003734:	2b00      	cmp	r3, #0
 8003736:	d10c      	bne.n	8003752 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
     ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)          &&
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	f003 0380 	and.w	r3, r3, #128	; 0x80
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)             ||
 8003740:	2b00      	cmp	r3, #0
 8003742:	f000 80ce 	beq.w	80038e2 <HAL_RCCEx_PeriphCLKConfig+0x332>
      (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)))
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	6b5b      	ldr	r3, [r3, #52]	; 0x34
     ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)          &&
 800374a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800374e:	f040 80c8 	bne.w	80038e2 <HAL_RCCEx_PeriphCLKConfig+0x332>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003752:	4b0a      	ldr	r3, [pc, #40]	; (800377c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003754:	2200      	movs	r2, #0
 8003756:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003758:	f7fd fc8a 	bl	8001070 <HAL_GetTick>
 800375c:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800375e:	e00f      	b.n	8003780 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8003760:	f7fd fc86 	bl	8001070 <HAL_GetTick>
 8003764:	4602      	mov	r2, r0
 8003766:	69fb      	ldr	r3, [r7, #28]
 8003768:	1ad3      	subs	r3, r2, r3
 800376a:	2b02      	cmp	r3, #2
 800376c:	d908      	bls.n	8003780 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800376e:	2303      	movs	r3, #3
 8003770:	e14d      	b.n	8003a0e <HAL_RCCEx_PeriphCLKConfig+0x45e>
 8003772:	bf00      	nop
 8003774:	40023800 	.word	0x40023800
 8003778:	42470068 	.word	0x42470068
 800377c:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003780:	4ba5      	ldr	r3, [pc, #660]	; (8003a18 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003788:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800378c:	d0e8      	beq.n	8003760 <HAL_RCCEx_PeriphCLKConfig+0x1b0>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f003 0304 	and.w	r3, r3, #4
 8003796:	2b00      	cmp	r3, #0
 8003798:	d02e      	beq.n	80037f8 <HAL_RCCEx_PeriphCLKConfig+0x248>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 800379a:	4b9f      	ldr	r3, [pc, #636]	; (8003a18 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800379c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037a0:	0c1b      	lsrs	r3, r3, #16
 80037a2:	f003 0303 	and.w	r3, r3, #3
 80037a6:	3301      	adds	r3, #1
 80037a8:	005b      	lsls	r3, r3, #1
 80037aa:	617b      	str	r3, [r7, #20]
      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsair = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80037ac:	4b9a      	ldr	r3, [pc, #616]	; (8003a18 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80037ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037b2:	0f1b      	lsrs	r3, r3, #28
 80037b4:	f003 0307 	and.w	r3, r3, #7
 80037b8:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, pllsair);
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	691b      	ldr	r3, [r3, #16]
 80037be:	019a      	lsls	r2, r3, #6
 80037c0:	697b      	ldr	r3, [r7, #20]
 80037c2:	085b      	lsrs	r3, r3, #1
 80037c4:	3b01      	subs	r3, #1
 80037c6:	041b      	lsls	r3, r3, #16
 80037c8:	431a      	orrs	r2, r3
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	699b      	ldr	r3, [r3, #24]
 80037ce:	061b      	lsls	r3, r3, #24
 80037d0:	431a      	orrs	r2, r3
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	071b      	lsls	r3, r3, #28
 80037d6:	4990      	ldr	r1, [pc, #576]	; (8003a18 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80037d8:	4313      	orrs	r3, r2
 80037da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80037de:	4b8e      	ldr	r3, [pc, #568]	; (8003a18 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80037e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80037e4:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037ec:	3b01      	subs	r3, #1
 80037ee:	021b      	lsls	r3, r3, #8
 80037f0:	4989      	ldr	r1, [pc, #548]	; (8003a18 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80037f2:	4313      	orrs	r3, r2
 80037f4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	f003 0308 	and.w	r3, r3, #8
 8003800:	2b00      	cmp	r3, #0
 8003802:	d02c      	beq.n	800385e <HAL_RCCEx_PeriphCLKConfig+0x2ae>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 8003804:	4b84      	ldr	r3, [pc, #528]	; (8003a18 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8003806:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800380a:	0c1b      	lsrs	r3, r3, #16
 800380c:	f003 0303 	and.w	r3, r3, #3
 8003810:	3301      	adds	r3, #1
 8003812:	005b      	lsls	r3, r3, #1
 8003814:	617b      	str	r3, [r7, #20]
      /* Read PLLSAIQ value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003816:	4b80      	ldr	r3, [pc, #512]	; (8003a18 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8003818:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800381c:	0e1b      	lsrs	r3, r3, #24
 800381e:	f003 030f 	and.w	r3, r3, #15
 8003822:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, pllsaip, pllsaiq, PeriphClkInit->PLLSAI.PLLSAIR);
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	691b      	ldr	r3, [r3, #16]
 8003828:	019a      	lsls	r2, r3, #6
 800382a:	697b      	ldr	r3, [r7, #20]
 800382c:	085b      	lsrs	r3, r3, #1
 800382e:	3b01      	subs	r3, #1
 8003830:	041b      	lsls	r3, r3, #16
 8003832:	431a      	orrs	r2, r3
 8003834:	693b      	ldr	r3, [r7, #16]
 8003836:	061b      	lsls	r3, r3, #24
 8003838:	431a      	orrs	r2, r3
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	69db      	ldr	r3, [r3, #28]
 800383e:	071b      	lsls	r3, r3, #28
 8003840:	4975      	ldr	r1, [pc, #468]	; (8003a18 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8003842:	4313      	orrs	r3, r2
 8003844:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8003848:	4b73      	ldr	r3, [pc, #460]	; (8003a18 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800384a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800384e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003856:	4970      	ldr	r1, [pc, #448]	; (8003a18 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8003858:	4313      	orrs	r3, r2
 800385a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- CLK48 configuration ------------------------*/
    /* Configure the PLLSAI when it is used as clock source for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == (RCC_PERIPHCLK_CLK48)) &&
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003866:	2b00      	cmp	r3, #0
 8003868:	d024      	beq.n	80038b4 <HAL_RCCEx_PeriphCLKConfig+0x304>
       (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == (RCC_PERIPHCLK_CLK48)) &&
 800386e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003872:	d11f      	bne.n	80038b4 <HAL_RCCEx_PeriphCLKConfig+0x304>
    {
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));

      /* Read PLLSAIQ value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003874:	4b68      	ldr	r3, [pc, #416]	; (8003a18 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8003876:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800387a:	0e1b      	lsrs	r3, r3, #24
 800387c:	f003 030f 	and.w	r3, r3, #15
 8003880:	613b      	str	r3, [r7, #16]
      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsair = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003882:	4b65      	ldr	r3, [pc, #404]	; (8003a18 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8003884:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003888:	0f1b      	lsrs	r3, r3, #28
 800388a:	f003 0307 	and.w	r3, r3, #7
 800388e:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* CLK48_CLK(first level) = PLLSAI_VCO Output/PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, pllsair);
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	691b      	ldr	r3, [r3, #16]
 8003894:	019a      	lsls	r2, r3, #6
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	695b      	ldr	r3, [r3, #20]
 800389a:	085b      	lsrs	r3, r3, #1
 800389c:	3b01      	subs	r3, #1
 800389e:	041b      	lsls	r3, r3, #16
 80038a0:	431a      	orrs	r2, r3
 80038a2:	693b      	ldr	r3, [r7, #16]
 80038a4:	061b      	lsls	r3, r3, #24
 80038a6:	431a      	orrs	r2, r3
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	071b      	lsls	r3, r3, #28
 80038ac:	495a      	ldr	r1, [pc, #360]	; (8003a18 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80038ae:	4313      	orrs	r3, r2
 80038b0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80038b4:	4b59      	ldr	r3, [pc, #356]	; (8003a1c <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 80038b6:	2201      	movs	r2, #1
 80038b8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80038ba:	f7fd fbd9 	bl	8001070 <HAL_GetTick>
 80038be:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80038c0:	e008      	b.n	80038d4 <HAL_RCCEx_PeriphCLKConfig+0x324>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 80038c2:	f7fd fbd5 	bl	8001070 <HAL_GetTick>
 80038c6:	4602      	mov	r2, r0
 80038c8:	69fb      	ldr	r3, [r7, #28]
 80038ca:	1ad3      	subs	r3, r2, r3
 80038cc:	2b02      	cmp	r3, #2
 80038ce:	d901      	bls.n	80038d4 <HAL_RCCEx_PeriphCLKConfig+0x324>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80038d0:	2303      	movs	r3, #3
 80038d2:	e09c      	b.n	8003a0e <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80038d4:	4b50      	ldr	r3, [pc, #320]	; (8003a18 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80038dc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80038e0:	d1ef      	bne.n	80038c2 <HAL_RCCEx_PeriphCLKConfig+0x312>
  }

  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f003 0320 	and.w	r3, r3, #32
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	f000 8083 	beq.w	80039f6 <HAL_RCCEx_PeriphCLKConfig+0x446>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80038f0:	2300      	movs	r3, #0
 80038f2:	60bb      	str	r3, [r7, #8]
 80038f4:	4b48      	ldr	r3, [pc, #288]	; (8003a18 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80038f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038f8:	4a47      	ldr	r2, [pc, #284]	; (8003a18 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80038fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80038fe:	6413      	str	r3, [r2, #64]	; 0x40
 8003900:	4b45      	ldr	r3, [pc, #276]	; (8003a18 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8003902:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003904:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003908:	60bb      	str	r3, [r7, #8]
 800390a:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800390c:	4b44      	ldr	r3, [pc, #272]	; (8003a20 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	4a43      	ldr	r2, [pc, #268]	; (8003a20 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8003912:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003916:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003918:	f7fd fbaa 	bl	8001070 <HAL_GetTick>
 800391c:	61f8      	str	r0, [r7, #28]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800391e:	e008      	b.n	8003932 <HAL_RCCEx_PeriphCLKConfig+0x382>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8003920:	f7fd fba6 	bl	8001070 <HAL_GetTick>
 8003924:	4602      	mov	r2, r0
 8003926:	69fb      	ldr	r3, [r7, #28]
 8003928:	1ad3      	subs	r3, r2, r3
 800392a:	2b02      	cmp	r3, #2
 800392c:	d901      	bls.n	8003932 <HAL_RCCEx_PeriphCLKConfig+0x382>
      {
        return HAL_TIMEOUT;
 800392e:	2303      	movs	r3, #3
 8003930:	e06d      	b.n	8003a0e <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003932:	4b3b      	ldr	r3, [pc, #236]	; (8003a20 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800393a:	2b00      	cmp	r3, #0
 800393c:	d0f0      	beq.n	8003920 <HAL_RCCEx_PeriphCLKConfig+0x370>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800393e:	4b36      	ldr	r3, [pc, #216]	; (8003a18 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8003940:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003942:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003946:	61bb      	str	r3, [r7, #24]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003948:	69bb      	ldr	r3, [r7, #24]
 800394a:	2b00      	cmp	r3, #0
 800394c:	d02f      	beq.n	80039ae <HAL_RCCEx_PeriphCLKConfig+0x3fe>
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003952:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003956:	69ba      	ldr	r2, [r7, #24]
 8003958:	429a      	cmp	r2, r3
 800395a:	d028      	beq.n	80039ae <HAL_RCCEx_PeriphCLKConfig+0x3fe>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800395c:	4b2e      	ldr	r3, [pc, #184]	; (8003a18 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800395e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003960:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003964:	61bb      	str	r3, [r7, #24]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003966:	4b2f      	ldr	r3, [pc, #188]	; (8003a24 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8003968:	2201      	movs	r2, #1
 800396a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800396c:	4b2d      	ldr	r3, [pc, #180]	; (8003a24 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 800396e:	2200      	movs	r2, #0
 8003970:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8003972:	4a29      	ldr	r2, [pc, #164]	; (8003a18 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8003974:	69bb      	ldr	r3, [r7, #24]
 8003976:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003978:	4b27      	ldr	r3, [pc, #156]	; (8003a18 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800397a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800397c:	f003 0301 	and.w	r3, r3, #1
 8003980:	2b01      	cmp	r3, #1
 8003982:	d114      	bne.n	80039ae <HAL_RCCEx_PeriphCLKConfig+0x3fe>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8003984:	f7fd fb74 	bl	8001070 <HAL_GetTick>
 8003988:	61f8      	str	r0, [r7, #28]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800398a:	e00a      	b.n	80039a2 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800398c:	f7fd fb70 	bl	8001070 <HAL_GetTick>
 8003990:	4602      	mov	r2, r0
 8003992:	69fb      	ldr	r3, [r7, #28]
 8003994:	1ad3      	subs	r3, r2, r3
 8003996:	f241 3288 	movw	r2, #5000	; 0x1388
 800399a:	4293      	cmp	r3, r2
 800399c:	d901      	bls.n	80039a2 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
          {
            return HAL_TIMEOUT;
 800399e:	2303      	movs	r3, #3
 80039a0:	e035      	b.n	8003a0e <HAL_RCCEx_PeriphCLKConfig+0x45e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80039a2:	4b1d      	ldr	r3, [pc, #116]	; (8003a18 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80039a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039a6:	f003 0302 	and.w	r3, r3, #2
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d0ee      	beq.n	800398c <HAL_RCCEx_PeriphCLKConfig+0x3dc>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80039b6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80039ba:	d10d      	bne.n	80039d8 <HAL_RCCEx_PeriphCLKConfig+0x428>
 80039bc:	4b16      	ldr	r3, [pc, #88]	; (8003a18 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80039be:	689b      	ldr	r3, [r3, #8]
 80039c0:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039c8:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80039cc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80039d0:	4911      	ldr	r1, [pc, #68]	; (8003a18 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80039d2:	4313      	orrs	r3, r2
 80039d4:	608b      	str	r3, [r1, #8]
 80039d6:	e005      	b.n	80039e4 <HAL_RCCEx_PeriphCLKConfig+0x434>
 80039d8:	4b0f      	ldr	r3, [pc, #60]	; (8003a18 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80039da:	689b      	ldr	r3, [r3, #8]
 80039dc:	4a0e      	ldr	r2, [pc, #56]	; (8003a18 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80039de:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80039e2:	6093      	str	r3, [r2, #8]
 80039e4:	4b0c      	ldr	r3, [pc, #48]	; (8003a18 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80039e6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039ec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80039f0:	4909      	ldr	r1, [pc, #36]	; (8003a18 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80039f2:	4313      	orrs	r3, r2
 80039f4:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	f003 0310 	and.w	r3, r3, #16
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d004      	beq.n	8003a0c <HAL_RCCEx_PeriphCLKConfig+0x45c>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 8003a08:	4b07      	ldr	r3, [pc, #28]	; (8003a28 <HAL_RCCEx_PeriphCLKConfig+0x478>)
 8003a0a:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 8003a0c:	2300      	movs	r3, #0
}
 8003a0e:	4618      	mov	r0, r3
 8003a10:	3720      	adds	r7, #32
 8003a12:	46bd      	mov	sp, r7
 8003a14:	bd80      	pop	{r7, pc}
 8003a16:	bf00      	nop
 8003a18:	40023800 	.word	0x40023800
 8003a1c:	42470070 	.word	0x42470070
 8003a20:	40007000 	.word	0x40007000
 8003a24:	42470e40 	.word	0x42470e40
 8003a28:	424711e0 	.word	0x424711e0

08003a2c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003a2c:	b580      	push	{r7, lr}
 8003a2e:	b086      	sub	sp, #24
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d101      	bne.n	8003a3e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003a3a:	2301      	movs	r3, #1
 8003a3c:	e270      	b.n	8003f20 <HAL_RCC_OscConfig+0x4f4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	f003 0301 	and.w	r3, r3, #1
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d075      	beq.n	8003b36 <HAL_RCC_OscConfig+0x10a>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003a4a:	4ba3      	ldr	r3, [pc, #652]	; (8003cd8 <HAL_RCC_OscConfig+0x2ac>)
 8003a4c:	689b      	ldr	r3, [r3, #8]
 8003a4e:	f003 030c 	and.w	r3, r3, #12
 8003a52:	2b04      	cmp	r3, #4
 8003a54:	d00c      	beq.n	8003a70 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003a56:	4ba0      	ldr	r3, [pc, #640]	; (8003cd8 <HAL_RCC_OscConfig+0x2ac>)
 8003a58:	689b      	ldr	r3, [r3, #8]
 8003a5a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003a5e:	2b08      	cmp	r3, #8
 8003a60:	d112      	bne.n	8003a88 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003a62:	4b9d      	ldr	r3, [pc, #628]	; (8003cd8 <HAL_RCC_OscConfig+0x2ac>)
 8003a64:	685b      	ldr	r3, [r3, #4]
 8003a66:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a6a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003a6e:	d10b      	bne.n	8003a88 <HAL_RCC_OscConfig+0x5c>
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a70:	4b99      	ldr	r3, [pc, #612]	; (8003cd8 <HAL_RCC_OscConfig+0x2ac>)
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d05b      	beq.n	8003b34 <HAL_RCC_OscConfig+0x108>
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	685b      	ldr	r3, [r3, #4]
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d157      	bne.n	8003b34 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003a84:	2301      	movs	r3, #1
 8003a86:	e24b      	b.n	8003f20 <HAL_RCC_OscConfig+0x4f4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	685b      	ldr	r3, [r3, #4]
 8003a8c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a90:	d106      	bne.n	8003aa0 <HAL_RCC_OscConfig+0x74>
 8003a92:	4b91      	ldr	r3, [pc, #580]	; (8003cd8 <HAL_RCC_OscConfig+0x2ac>)
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	4a90      	ldr	r2, [pc, #576]	; (8003cd8 <HAL_RCC_OscConfig+0x2ac>)
 8003a98:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a9c:	6013      	str	r3, [r2, #0]
 8003a9e:	e01d      	b.n	8003adc <HAL_RCC_OscConfig+0xb0>
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	685b      	ldr	r3, [r3, #4]
 8003aa4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003aa8:	d10c      	bne.n	8003ac4 <HAL_RCC_OscConfig+0x98>
 8003aaa:	4b8b      	ldr	r3, [pc, #556]	; (8003cd8 <HAL_RCC_OscConfig+0x2ac>)
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	4a8a      	ldr	r2, [pc, #552]	; (8003cd8 <HAL_RCC_OscConfig+0x2ac>)
 8003ab0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003ab4:	6013      	str	r3, [r2, #0]
 8003ab6:	4b88      	ldr	r3, [pc, #544]	; (8003cd8 <HAL_RCC_OscConfig+0x2ac>)
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	4a87      	ldr	r2, [pc, #540]	; (8003cd8 <HAL_RCC_OscConfig+0x2ac>)
 8003abc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ac0:	6013      	str	r3, [r2, #0]
 8003ac2:	e00b      	b.n	8003adc <HAL_RCC_OscConfig+0xb0>
 8003ac4:	4b84      	ldr	r3, [pc, #528]	; (8003cd8 <HAL_RCC_OscConfig+0x2ac>)
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	4a83      	ldr	r2, [pc, #524]	; (8003cd8 <HAL_RCC_OscConfig+0x2ac>)
 8003aca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003ace:	6013      	str	r3, [r2, #0]
 8003ad0:	4b81      	ldr	r3, [pc, #516]	; (8003cd8 <HAL_RCC_OscConfig+0x2ac>)
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	4a80      	ldr	r2, [pc, #512]	; (8003cd8 <HAL_RCC_OscConfig+0x2ac>)
 8003ad6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003ada:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	685b      	ldr	r3, [r3, #4]
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d013      	beq.n	8003b0c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ae4:	f7fd fac4 	bl	8001070 <HAL_GetTick>
 8003ae8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003aea:	e008      	b.n	8003afe <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003aec:	f7fd fac0 	bl	8001070 <HAL_GetTick>
 8003af0:	4602      	mov	r2, r0
 8003af2:	693b      	ldr	r3, [r7, #16]
 8003af4:	1ad3      	subs	r3, r2, r3
 8003af6:	2b64      	cmp	r3, #100	; 0x64
 8003af8:	d901      	bls.n	8003afe <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003afa:	2303      	movs	r3, #3
 8003afc:	e210      	b.n	8003f20 <HAL_RCC_OscConfig+0x4f4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003afe:	4b76      	ldr	r3, [pc, #472]	; (8003cd8 <HAL_RCC_OscConfig+0x2ac>)
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d0f0      	beq.n	8003aec <HAL_RCC_OscConfig+0xc0>
 8003b0a:	e014      	b.n	8003b36 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b0c:	f7fd fab0 	bl	8001070 <HAL_GetTick>
 8003b10:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003b12:	e008      	b.n	8003b26 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003b14:	f7fd faac 	bl	8001070 <HAL_GetTick>
 8003b18:	4602      	mov	r2, r0
 8003b1a:	693b      	ldr	r3, [r7, #16]
 8003b1c:	1ad3      	subs	r3, r2, r3
 8003b1e:	2b64      	cmp	r3, #100	; 0x64
 8003b20:	d901      	bls.n	8003b26 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003b22:	2303      	movs	r3, #3
 8003b24:	e1fc      	b.n	8003f20 <HAL_RCC_OscConfig+0x4f4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003b26:	4b6c      	ldr	r3, [pc, #432]	; (8003cd8 <HAL_RCC_OscConfig+0x2ac>)
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d1f0      	bne.n	8003b14 <HAL_RCC_OscConfig+0xe8>
 8003b32:	e000      	b.n	8003b36 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b34:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	f003 0302 	and.w	r3, r3, #2
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d063      	beq.n	8003c0a <HAL_RCC_OscConfig+0x1de>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003b42:	4b65      	ldr	r3, [pc, #404]	; (8003cd8 <HAL_RCC_OscConfig+0x2ac>)
 8003b44:	689b      	ldr	r3, [r3, #8]
 8003b46:	f003 030c 	and.w	r3, r3, #12
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d00b      	beq.n	8003b66 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003b4e:	4b62      	ldr	r3, [pc, #392]	; (8003cd8 <HAL_RCC_OscConfig+0x2ac>)
 8003b50:	689b      	ldr	r3, [r3, #8]
 8003b52:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003b56:	2b08      	cmp	r3, #8
 8003b58:	d11c      	bne.n	8003b94 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003b5a:	4b5f      	ldr	r3, [pc, #380]	; (8003cd8 <HAL_RCC_OscConfig+0x2ac>)
 8003b5c:	685b      	ldr	r3, [r3, #4]
 8003b5e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d116      	bne.n	8003b94 <HAL_RCC_OscConfig+0x168>
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003b66:	4b5c      	ldr	r3, [pc, #368]	; (8003cd8 <HAL_RCC_OscConfig+0x2ac>)
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	f003 0302 	and.w	r3, r3, #2
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d005      	beq.n	8003b7e <HAL_RCC_OscConfig+0x152>
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	68db      	ldr	r3, [r3, #12]
 8003b76:	2b01      	cmp	r3, #1
 8003b78:	d001      	beq.n	8003b7e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003b7a:	2301      	movs	r3, #1
 8003b7c:	e1d0      	b.n	8003f20 <HAL_RCC_OscConfig+0x4f4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b7e:	4b56      	ldr	r3, [pc, #344]	; (8003cd8 <HAL_RCC_OscConfig+0x2ac>)
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	691b      	ldr	r3, [r3, #16]
 8003b8a:	00db      	lsls	r3, r3, #3
 8003b8c:	4952      	ldr	r1, [pc, #328]	; (8003cd8 <HAL_RCC_OscConfig+0x2ac>)
 8003b8e:	4313      	orrs	r3, r2
 8003b90:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003b92:	e03a      	b.n	8003c0a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	68db      	ldr	r3, [r3, #12]
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d020      	beq.n	8003bde <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003b9c:	4b4f      	ldr	r3, [pc, #316]	; (8003cdc <HAL_RCC_OscConfig+0x2b0>)
 8003b9e:	2201      	movs	r2, #1
 8003ba0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ba2:	f7fd fa65 	bl	8001070 <HAL_GetTick>
 8003ba6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ba8:	e008      	b.n	8003bbc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003baa:	f7fd fa61 	bl	8001070 <HAL_GetTick>
 8003bae:	4602      	mov	r2, r0
 8003bb0:	693b      	ldr	r3, [r7, #16]
 8003bb2:	1ad3      	subs	r3, r2, r3
 8003bb4:	2b02      	cmp	r3, #2
 8003bb6:	d901      	bls.n	8003bbc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003bb8:	2303      	movs	r3, #3
 8003bba:	e1b1      	b.n	8003f20 <HAL_RCC_OscConfig+0x4f4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003bbc:	4b46      	ldr	r3, [pc, #280]	; (8003cd8 <HAL_RCC_OscConfig+0x2ac>)
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	f003 0302 	and.w	r3, r3, #2
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d0f0      	beq.n	8003baa <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003bc8:	4b43      	ldr	r3, [pc, #268]	; (8003cd8 <HAL_RCC_OscConfig+0x2ac>)
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	691b      	ldr	r3, [r3, #16]
 8003bd4:	00db      	lsls	r3, r3, #3
 8003bd6:	4940      	ldr	r1, [pc, #256]	; (8003cd8 <HAL_RCC_OscConfig+0x2ac>)
 8003bd8:	4313      	orrs	r3, r2
 8003bda:	600b      	str	r3, [r1, #0]
 8003bdc:	e015      	b.n	8003c0a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003bde:	4b3f      	ldr	r3, [pc, #252]	; (8003cdc <HAL_RCC_OscConfig+0x2b0>)
 8003be0:	2200      	movs	r2, #0
 8003be2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003be4:	f7fd fa44 	bl	8001070 <HAL_GetTick>
 8003be8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003bea:	e008      	b.n	8003bfe <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003bec:	f7fd fa40 	bl	8001070 <HAL_GetTick>
 8003bf0:	4602      	mov	r2, r0
 8003bf2:	693b      	ldr	r3, [r7, #16]
 8003bf4:	1ad3      	subs	r3, r2, r3
 8003bf6:	2b02      	cmp	r3, #2
 8003bf8:	d901      	bls.n	8003bfe <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003bfa:	2303      	movs	r3, #3
 8003bfc:	e190      	b.n	8003f20 <HAL_RCC_OscConfig+0x4f4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003bfe:	4b36      	ldr	r3, [pc, #216]	; (8003cd8 <HAL_RCC_OscConfig+0x2ac>)
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	f003 0302 	and.w	r3, r3, #2
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d1f0      	bne.n	8003bec <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	f003 0308 	and.w	r3, r3, #8
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d030      	beq.n	8003c78 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	695b      	ldr	r3, [r3, #20]
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d016      	beq.n	8003c4c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003c1e:	4b30      	ldr	r3, [pc, #192]	; (8003ce0 <HAL_RCC_OscConfig+0x2b4>)
 8003c20:	2201      	movs	r2, #1
 8003c22:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c24:	f7fd fa24 	bl	8001070 <HAL_GetTick>
 8003c28:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003c2a:	e008      	b.n	8003c3e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003c2c:	f7fd fa20 	bl	8001070 <HAL_GetTick>
 8003c30:	4602      	mov	r2, r0
 8003c32:	693b      	ldr	r3, [r7, #16]
 8003c34:	1ad3      	subs	r3, r2, r3
 8003c36:	2b02      	cmp	r3, #2
 8003c38:	d901      	bls.n	8003c3e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003c3a:	2303      	movs	r3, #3
 8003c3c:	e170      	b.n	8003f20 <HAL_RCC_OscConfig+0x4f4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003c3e:	4b26      	ldr	r3, [pc, #152]	; (8003cd8 <HAL_RCC_OscConfig+0x2ac>)
 8003c40:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c42:	f003 0302 	and.w	r3, r3, #2
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d0f0      	beq.n	8003c2c <HAL_RCC_OscConfig+0x200>
 8003c4a:	e015      	b.n	8003c78 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003c4c:	4b24      	ldr	r3, [pc, #144]	; (8003ce0 <HAL_RCC_OscConfig+0x2b4>)
 8003c4e:	2200      	movs	r2, #0
 8003c50:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c52:	f7fd fa0d 	bl	8001070 <HAL_GetTick>
 8003c56:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003c58:	e008      	b.n	8003c6c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003c5a:	f7fd fa09 	bl	8001070 <HAL_GetTick>
 8003c5e:	4602      	mov	r2, r0
 8003c60:	693b      	ldr	r3, [r7, #16]
 8003c62:	1ad3      	subs	r3, r2, r3
 8003c64:	2b02      	cmp	r3, #2
 8003c66:	d901      	bls.n	8003c6c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003c68:	2303      	movs	r3, #3
 8003c6a:	e159      	b.n	8003f20 <HAL_RCC_OscConfig+0x4f4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003c6c:	4b1a      	ldr	r3, [pc, #104]	; (8003cd8 <HAL_RCC_OscConfig+0x2ac>)
 8003c6e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c70:	f003 0302 	and.w	r3, r3, #2
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d1f0      	bne.n	8003c5a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	f003 0304 	and.w	r3, r3, #4
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	f000 80a0 	beq.w	8003dc6 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003c86:	2300      	movs	r3, #0
 8003c88:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003c8a:	4b13      	ldr	r3, [pc, #76]	; (8003cd8 <HAL_RCC_OscConfig+0x2ac>)
 8003c8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d10f      	bne.n	8003cb6 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003c96:	2300      	movs	r3, #0
 8003c98:	60bb      	str	r3, [r7, #8]
 8003c9a:	4b0f      	ldr	r3, [pc, #60]	; (8003cd8 <HAL_RCC_OscConfig+0x2ac>)
 8003c9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c9e:	4a0e      	ldr	r2, [pc, #56]	; (8003cd8 <HAL_RCC_OscConfig+0x2ac>)
 8003ca0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ca4:	6413      	str	r3, [r2, #64]	; 0x40
 8003ca6:	4b0c      	ldr	r3, [pc, #48]	; (8003cd8 <HAL_RCC_OscConfig+0x2ac>)
 8003ca8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003caa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003cae:	60bb      	str	r3, [r7, #8]
 8003cb0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003cb2:	2301      	movs	r3, #1
 8003cb4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003cb6:	4b0b      	ldr	r3, [pc, #44]	; (8003ce4 <HAL_RCC_OscConfig+0x2b8>)
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d121      	bne.n	8003d06 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003cc2:	4b08      	ldr	r3, [pc, #32]	; (8003ce4 <HAL_RCC_OscConfig+0x2b8>)
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	4a07      	ldr	r2, [pc, #28]	; (8003ce4 <HAL_RCC_OscConfig+0x2b8>)
 8003cc8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ccc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003cce:	f7fd f9cf 	bl	8001070 <HAL_GetTick>
 8003cd2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003cd4:	e011      	b.n	8003cfa <HAL_RCC_OscConfig+0x2ce>
 8003cd6:	bf00      	nop
 8003cd8:	40023800 	.word	0x40023800
 8003cdc:	42470000 	.word	0x42470000
 8003ce0:	42470e80 	.word	0x42470e80
 8003ce4:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ce8:	f7fd f9c2 	bl	8001070 <HAL_GetTick>
 8003cec:	4602      	mov	r2, r0
 8003cee:	693b      	ldr	r3, [r7, #16]
 8003cf0:	1ad3      	subs	r3, r2, r3
 8003cf2:	2b02      	cmp	r3, #2
 8003cf4:	d901      	bls.n	8003cfa <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8003cf6:	2303      	movs	r3, #3
 8003cf8:	e112      	b.n	8003f20 <HAL_RCC_OscConfig+0x4f4>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003cfa:	4b8b      	ldr	r3, [pc, #556]	; (8003f28 <HAL_RCC_OscConfig+0x4fc>)
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d0f0      	beq.n	8003ce8 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	689b      	ldr	r3, [r3, #8]
 8003d0a:	2b01      	cmp	r3, #1
 8003d0c:	d106      	bne.n	8003d1c <HAL_RCC_OscConfig+0x2f0>
 8003d0e:	4b87      	ldr	r3, [pc, #540]	; (8003f2c <HAL_RCC_OscConfig+0x500>)
 8003d10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d12:	4a86      	ldr	r2, [pc, #536]	; (8003f2c <HAL_RCC_OscConfig+0x500>)
 8003d14:	f043 0301 	orr.w	r3, r3, #1
 8003d18:	6713      	str	r3, [r2, #112]	; 0x70
 8003d1a:	e01c      	b.n	8003d56 <HAL_RCC_OscConfig+0x32a>
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	689b      	ldr	r3, [r3, #8]
 8003d20:	2b05      	cmp	r3, #5
 8003d22:	d10c      	bne.n	8003d3e <HAL_RCC_OscConfig+0x312>
 8003d24:	4b81      	ldr	r3, [pc, #516]	; (8003f2c <HAL_RCC_OscConfig+0x500>)
 8003d26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d28:	4a80      	ldr	r2, [pc, #512]	; (8003f2c <HAL_RCC_OscConfig+0x500>)
 8003d2a:	f043 0304 	orr.w	r3, r3, #4
 8003d2e:	6713      	str	r3, [r2, #112]	; 0x70
 8003d30:	4b7e      	ldr	r3, [pc, #504]	; (8003f2c <HAL_RCC_OscConfig+0x500>)
 8003d32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d34:	4a7d      	ldr	r2, [pc, #500]	; (8003f2c <HAL_RCC_OscConfig+0x500>)
 8003d36:	f043 0301 	orr.w	r3, r3, #1
 8003d3a:	6713      	str	r3, [r2, #112]	; 0x70
 8003d3c:	e00b      	b.n	8003d56 <HAL_RCC_OscConfig+0x32a>
 8003d3e:	4b7b      	ldr	r3, [pc, #492]	; (8003f2c <HAL_RCC_OscConfig+0x500>)
 8003d40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d42:	4a7a      	ldr	r2, [pc, #488]	; (8003f2c <HAL_RCC_OscConfig+0x500>)
 8003d44:	f023 0301 	bic.w	r3, r3, #1
 8003d48:	6713      	str	r3, [r2, #112]	; 0x70
 8003d4a:	4b78      	ldr	r3, [pc, #480]	; (8003f2c <HAL_RCC_OscConfig+0x500>)
 8003d4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d4e:	4a77      	ldr	r2, [pc, #476]	; (8003f2c <HAL_RCC_OscConfig+0x500>)
 8003d50:	f023 0304 	bic.w	r3, r3, #4
 8003d54:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	689b      	ldr	r3, [r3, #8]
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d015      	beq.n	8003d8a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d5e:	f7fd f987 	bl	8001070 <HAL_GetTick>
 8003d62:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d64:	e00a      	b.n	8003d7c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003d66:	f7fd f983 	bl	8001070 <HAL_GetTick>
 8003d6a:	4602      	mov	r2, r0
 8003d6c:	693b      	ldr	r3, [r7, #16]
 8003d6e:	1ad3      	subs	r3, r2, r3
 8003d70:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d74:	4293      	cmp	r3, r2
 8003d76:	d901      	bls.n	8003d7c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003d78:	2303      	movs	r3, #3
 8003d7a:	e0d1      	b.n	8003f20 <HAL_RCC_OscConfig+0x4f4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d7c:	4b6b      	ldr	r3, [pc, #428]	; (8003f2c <HAL_RCC_OscConfig+0x500>)
 8003d7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d80:	f003 0302 	and.w	r3, r3, #2
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d0ee      	beq.n	8003d66 <HAL_RCC_OscConfig+0x33a>
 8003d88:	e014      	b.n	8003db4 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d8a:	f7fd f971 	bl	8001070 <HAL_GetTick>
 8003d8e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003d90:	e00a      	b.n	8003da8 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003d92:	f7fd f96d 	bl	8001070 <HAL_GetTick>
 8003d96:	4602      	mov	r2, r0
 8003d98:	693b      	ldr	r3, [r7, #16]
 8003d9a:	1ad3      	subs	r3, r2, r3
 8003d9c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003da0:	4293      	cmp	r3, r2
 8003da2:	d901      	bls.n	8003da8 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003da4:	2303      	movs	r3, #3
 8003da6:	e0bb      	b.n	8003f20 <HAL_RCC_OscConfig+0x4f4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003da8:	4b60      	ldr	r3, [pc, #384]	; (8003f2c <HAL_RCC_OscConfig+0x500>)
 8003daa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dac:	f003 0302 	and.w	r3, r3, #2
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d1ee      	bne.n	8003d92 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003db4:	7dfb      	ldrb	r3, [r7, #23]
 8003db6:	2b01      	cmp	r3, #1
 8003db8:	d105      	bne.n	8003dc6 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003dba:	4b5c      	ldr	r3, [pc, #368]	; (8003f2c <HAL_RCC_OscConfig+0x500>)
 8003dbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dbe:	4a5b      	ldr	r2, [pc, #364]	; (8003f2c <HAL_RCC_OscConfig+0x500>)
 8003dc0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003dc4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	699b      	ldr	r3, [r3, #24]
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	f000 80a7 	beq.w	8003f1e <HAL_RCC_OscConfig+0x4f2>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003dd0:	4b56      	ldr	r3, [pc, #344]	; (8003f2c <HAL_RCC_OscConfig+0x500>)
 8003dd2:	689b      	ldr	r3, [r3, #8]
 8003dd4:	f003 030c 	and.w	r3, r3, #12
 8003dd8:	2b08      	cmp	r3, #8
 8003dda:	d060      	beq.n	8003e9e <HAL_RCC_OscConfig+0x472>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	699b      	ldr	r3, [r3, #24]
 8003de0:	2b02      	cmp	r3, #2
 8003de2:	d145      	bne.n	8003e70 <HAL_RCC_OscConfig+0x444>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003de4:	4b52      	ldr	r3, [pc, #328]	; (8003f30 <HAL_RCC_OscConfig+0x504>)
 8003de6:	2200      	movs	r2, #0
 8003de8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003dea:	f7fd f941 	bl	8001070 <HAL_GetTick>
 8003dee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003df0:	e008      	b.n	8003e04 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003df2:	f7fd f93d 	bl	8001070 <HAL_GetTick>
 8003df6:	4602      	mov	r2, r0
 8003df8:	693b      	ldr	r3, [r7, #16]
 8003dfa:	1ad3      	subs	r3, r2, r3
 8003dfc:	2b02      	cmp	r3, #2
 8003dfe:	d901      	bls.n	8003e04 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003e00:	2303      	movs	r3, #3
 8003e02:	e08d      	b.n	8003f20 <HAL_RCC_OscConfig+0x4f4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e04:	4b49      	ldr	r3, [pc, #292]	; (8003f2c <HAL_RCC_OscConfig+0x500>)
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d1f0      	bne.n	8003df2 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	69da      	ldr	r2, [r3, #28]
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	6a1b      	ldr	r3, [r3, #32]
 8003e18:	431a      	orrs	r2, r3
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e1e:	019b      	lsls	r3, r3, #6
 8003e20:	431a      	orrs	r2, r3
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e26:	085b      	lsrs	r3, r3, #1
 8003e28:	3b01      	subs	r3, #1
 8003e2a:	041b      	lsls	r3, r3, #16
 8003e2c:	431a      	orrs	r2, r3
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e32:	061b      	lsls	r3, r3, #24
 8003e34:	431a      	orrs	r2, r3
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e3a:	071b      	lsls	r3, r3, #28
 8003e3c:	493b      	ldr	r1, [pc, #236]	; (8003f2c <HAL_RCC_OscConfig+0x500>)
 8003e3e:	4313      	orrs	r3, r2
 8003e40:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003e42:	4b3b      	ldr	r3, [pc, #236]	; (8003f30 <HAL_RCC_OscConfig+0x504>)
 8003e44:	2201      	movs	r2, #1
 8003e46:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e48:	f7fd f912 	bl	8001070 <HAL_GetTick>
 8003e4c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e4e:	e008      	b.n	8003e62 <HAL_RCC_OscConfig+0x436>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003e50:	f7fd f90e 	bl	8001070 <HAL_GetTick>
 8003e54:	4602      	mov	r2, r0
 8003e56:	693b      	ldr	r3, [r7, #16]
 8003e58:	1ad3      	subs	r3, r2, r3
 8003e5a:	2b02      	cmp	r3, #2
 8003e5c:	d901      	bls.n	8003e62 <HAL_RCC_OscConfig+0x436>
          {
            return HAL_TIMEOUT;
 8003e5e:	2303      	movs	r3, #3
 8003e60:	e05e      	b.n	8003f20 <HAL_RCC_OscConfig+0x4f4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e62:	4b32      	ldr	r3, [pc, #200]	; (8003f2c <HAL_RCC_OscConfig+0x500>)
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d0f0      	beq.n	8003e50 <HAL_RCC_OscConfig+0x424>
 8003e6e:	e056      	b.n	8003f1e <HAL_RCC_OscConfig+0x4f2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e70:	4b2f      	ldr	r3, [pc, #188]	; (8003f30 <HAL_RCC_OscConfig+0x504>)
 8003e72:	2200      	movs	r2, #0
 8003e74:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e76:	f7fd f8fb 	bl	8001070 <HAL_GetTick>
 8003e7a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e7c:	e008      	b.n	8003e90 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003e7e:	f7fd f8f7 	bl	8001070 <HAL_GetTick>
 8003e82:	4602      	mov	r2, r0
 8003e84:	693b      	ldr	r3, [r7, #16]
 8003e86:	1ad3      	subs	r3, r2, r3
 8003e88:	2b02      	cmp	r3, #2
 8003e8a:	d901      	bls.n	8003e90 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8003e8c:	2303      	movs	r3, #3
 8003e8e:	e047      	b.n	8003f20 <HAL_RCC_OscConfig+0x4f4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e90:	4b26      	ldr	r3, [pc, #152]	; (8003f2c <HAL_RCC_OscConfig+0x500>)
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d1f0      	bne.n	8003e7e <HAL_RCC_OscConfig+0x452>
 8003e9c:	e03f      	b.n	8003f1e <HAL_RCC_OscConfig+0x4f2>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	699b      	ldr	r3, [r3, #24]
 8003ea2:	2b01      	cmp	r3, #1
 8003ea4:	d101      	bne.n	8003eaa <HAL_RCC_OscConfig+0x47e>
      {
        return HAL_ERROR;
 8003ea6:	2301      	movs	r3, #1
 8003ea8:	e03a      	b.n	8003f20 <HAL_RCC_OscConfig+0x4f4>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003eaa:	4b20      	ldr	r3, [pc, #128]	; (8003f2c <HAL_RCC_OscConfig+0x500>)
 8003eac:	685b      	ldr	r3, [r3, #4]
 8003eae:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	699b      	ldr	r3, [r3, #24]
 8003eb4:	2b01      	cmp	r3, #1
 8003eb6:	d030      	beq.n	8003f1a <HAL_RCC_OscConfig+0x4ee>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003ec2:	429a      	cmp	r2, r3
 8003ec4:	d129      	bne.n	8003f1a <HAL_RCC_OscConfig+0x4ee>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ed0:	429a      	cmp	r2, r3
 8003ed2:	d122      	bne.n	8003f1a <HAL_RCC_OscConfig+0x4ee>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003ed4:	68fa      	ldr	r2, [r7, #12]
 8003ed6:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003eda:	4013      	ands	r3, r2
 8003edc:	687a      	ldr	r2, [r7, #4]
 8003ede:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003ee0:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003ee2:	4293      	cmp	r3, r2
 8003ee4:	d119      	bne.n	8003f1a <HAL_RCC_OscConfig+0x4ee>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ef0:	085b      	lsrs	r3, r3, #1
 8003ef2:	3b01      	subs	r3, #1
 8003ef4:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003ef6:	429a      	cmp	r2, r3
 8003ef8:	d10f      	bne.n	8003f1a <HAL_RCC_OscConfig+0x4ee>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f04:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003f06:	429a      	cmp	r2, r3
 8003f08:	d107      	bne.n	8003f1a <HAL_RCC_OscConfig+0x4ee>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f14:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003f16:	429a      	cmp	r2, r3
 8003f18:	d001      	beq.n	8003f1e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8003f1a:	2301      	movs	r3, #1
 8003f1c:	e000      	b.n	8003f20 <HAL_RCC_OscConfig+0x4f4>
        }
      }
    }
  }
  return HAL_OK;
 8003f1e:	2300      	movs	r3, #0
}
 8003f20:	4618      	mov	r0, r3
 8003f22:	3718      	adds	r7, #24
 8003f24:	46bd      	mov	sp, r7
 8003f26:	bd80      	pop	{r7, pc}
 8003f28:	40007000 	.word	0x40007000
 8003f2c:	40023800 	.word	0x40023800
 8003f30:	42470060 	.word	0x42470060

08003f34 <HAL_SRAM_Init>:
  * @param  Timing Pointer to SRAM control timing structure 
  * @param  ExtTiming Pointer to SRAM extended mode timing structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing, FMC_NORSRAM_TimingTypeDef *ExtTiming)
{ 
 8003f34:	b580      	push	{r7, lr}
 8003f36:	b084      	sub	sp, #16
 8003f38:	af00      	add	r7, sp, #0
 8003f3a:	60f8      	str	r0, [r7, #12]
 8003f3c:	60b9      	str	r1, [r7, #8]
 8003f3e:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if(hsram == NULL)
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d101      	bne.n	8003f4a <HAL_SRAM_Init+0x16>
  {
     return HAL_ERROR;
 8003f46:	2301      	movs	r3, #1
 8003f48:	e034      	b.n	8003fb4 <HAL_SRAM_Init+0x80>
  }
  
  if(hsram->State == HAL_SRAM_STATE_RESET)
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 8003f50:	b2db      	uxtb	r3, r3
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d106      	bne.n	8003f64 <HAL_SRAM_Init+0x30>
  {  
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	2200      	movs	r2, #0
 8003f5a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 8003f5e:	68f8      	ldr	r0, [r7, #12]
 8003f60:	f7fc ff92 	bl	8000e88 <HAL_SRAM_MspInit>
#endif
  }
  
  /* Initialize SRAM control Interface */
  FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	681a      	ldr	r2, [r3, #0]
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	3308      	adds	r3, #8
 8003f6c:	4619      	mov	r1, r3
 8003f6e:	4610      	mov	r0, r2
 8003f70:	f000 ffec 	bl	8004f4c <FMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank); 
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	6818      	ldr	r0, [r3, #0]
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	689b      	ldr	r3, [r3, #8]
 8003f7c:	461a      	mov	r2, r3
 8003f7e:	68b9      	ldr	r1, [r7, #8]
 8003f80:	f001 f854 	bl	800502c <FMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,  hsram->Init.ExtendedMode);  
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	6858      	ldr	r0, [r3, #4]
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	689a      	ldr	r2, [r3, #8]
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f90:	6879      	ldr	r1, [r7, #4]
 8003f92:	f001 f89f 	bl	80050d4 <FMC_NORSRAM_Extended_Timing_Init>
  
  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank); 
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	68fa      	ldr	r2, [r7, #12]
 8003f9c:	6892      	ldr	r2, [r2, #8]
 8003f9e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	68fa      	ldr	r2, [r7, #12]
 8003fa8:	6892      	ldr	r2, [r2, #8]
 8003faa:	f041 0101 	orr.w	r1, r1, #1
 8003fae:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  
  return HAL_OK;
 8003fb2:	2300      	movs	r3, #0
}
 8003fb4:	4618      	mov	r0, r3
 8003fb6:	3710      	adds	r7, #16
 8003fb8:	46bd      	mov	sp, r7
 8003fba:	bd80      	pop	{r7, pc}

08003fbc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003fbc:	b580      	push	{r7, lr}
 8003fbe:	b082      	sub	sp, #8
 8003fc0:	af00      	add	r7, sp, #0
 8003fc2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d101      	bne.n	8003fce <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003fca:	2301      	movs	r3, #1
 8003fcc:	e03f      	b.n	800404e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003fd4:	b2db      	uxtb	r3, r3
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d106      	bne.n	8003fe8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	2200      	movs	r2, #0
 8003fde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003fe2:	6878      	ldr	r0, [r7, #4]
 8003fe4:	f7fc fe90 	bl	8000d08 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	2224      	movs	r2, #36	; 0x24
 8003fec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	68da      	ldr	r2, [r3, #12]
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003ffe:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004000:	6878      	ldr	r0, [r7, #4]
 8004002:	f000 fddb 	bl	8004bbc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	691a      	ldr	r2, [r3, #16]
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004014:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	695a      	ldr	r2, [r3, #20]
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004024:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	68da      	ldr	r2, [r3, #12]
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004034:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	2200      	movs	r2, #0
 800403a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	2220      	movs	r2, #32
 8004040:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	2220      	movs	r2, #32
 8004048:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800404c:	2300      	movs	r3, #0
}
 800404e:	4618      	mov	r0, r3
 8004050:	3708      	adds	r7, #8
 8004052:	46bd      	mov	sp, r7
 8004054:	bd80      	pop	{r7, pc}

08004056 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004056:	b580      	push	{r7, lr}
 8004058:	b08a      	sub	sp, #40	; 0x28
 800405a:	af02      	add	r7, sp, #8
 800405c:	60f8      	str	r0, [r7, #12]
 800405e:	60b9      	str	r1, [r7, #8]
 8004060:	603b      	str	r3, [r7, #0]
 8004062:	4613      	mov	r3, r2
 8004064:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004066:	2300      	movs	r3, #0
 8004068:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004070:	b2db      	uxtb	r3, r3
 8004072:	2b20      	cmp	r3, #32
 8004074:	d17c      	bne.n	8004170 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004076:	68bb      	ldr	r3, [r7, #8]
 8004078:	2b00      	cmp	r3, #0
 800407a:	d002      	beq.n	8004082 <HAL_UART_Transmit+0x2c>
 800407c:	88fb      	ldrh	r3, [r7, #6]
 800407e:	2b00      	cmp	r3, #0
 8004080:	d101      	bne.n	8004086 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004082:	2301      	movs	r3, #1
 8004084:	e075      	b.n	8004172 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800408c:	2b01      	cmp	r3, #1
 800408e:	d101      	bne.n	8004094 <HAL_UART_Transmit+0x3e>
 8004090:	2302      	movs	r3, #2
 8004092:	e06e      	b.n	8004172 <HAL_UART_Transmit+0x11c>
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	2201      	movs	r2, #1
 8004098:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	2200      	movs	r2, #0
 80040a0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	2221      	movs	r2, #33	; 0x21
 80040a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80040aa:	f7fc ffe1 	bl	8001070 <HAL_GetTick>
 80040ae:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	88fa      	ldrh	r2, [r7, #6]
 80040b4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	88fa      	ldrh	r2, [r7, #6]
 80040ba:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	689b      	ldr	r3, [r3, #8]
 80040c0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80040c4:	d108      	bne.n	80040d8 <HAL_UART_Transmit+0x82>
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	691b      	ldr	r3, [r3, #16]
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d104      	bne.n	80040d8 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80040ce:	2300      	movs	r3, #0
 80040d0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80040d2:	68bb      	ldr	r3, [r7, #8]
 80040d4:	61bb      	str	r3, [r7, #24]
 80040d6:	e003      	b.n	80040e0 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80040d8:	68bb      	ldr	r3, [r7, #8]
 80040da:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80040dc:	2300      	movs	r3, #0
 80040de:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	2200      	movs	r2, #0
 80040e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80040e8:	e02a      	b.n	8004140 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80040ea:	683b      	ldr	r3, [r7, #0]
 80040ec:	9300      	str	r3, [sp, #0]
 80040ee:	697b      	ldr	r3, [r7, #20]
 80040f0:	2200      	movs	r2, #0
 80040f2:	2180      	movs	r1, #128	; 0x80
 80040f4:	68f8      	ldr	r0, [r7, #12]
 80040f6:	f000 fb1f 	bl	8004738 <UART_WaitOnFlagUntilTimeout>
 80040fa:	4603      	mov	r3, r0
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d001      	beq.n	8004104 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004100:	2303      	movs	r3, #3
 8004102:	e036      	b.n	8004172 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004104:	69fb      	ldr	r3, [r7, #28]
 8004106:	2b00      	cmp	r3, #0
 8004108:	d10b      	bne.n	8004122 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800410a:	69bb      	ldr	r3, [r7, #24]
 800410c:	881b      	ldrh	r3, [r3, #0]
 800410e:	461a      	mov	r2, r3
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004118:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800411a:	69bb      	ldr	r3, [r7, #24]
 800411c:	3302      	adds	r3, #2
 800411e:	61bb      	str	r3, [r7, #24]
 8004120:	e007      	b.n	8004132 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004122:	69fb      	ldr	r3, [r7, #28]
 8004124:	781a      	ldrb	r2, [r3, #0]
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800412c:	69fb      	ldr	r3, [r7, #28]
 800412e:	3301      	adds	r3, #1
 8004130:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004136:	b29b      	uxth	r3, r3
 8004138:	3b01      	subs	r3, #1
 800413a:	b29a      	uxth	r2, r3
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004144:	b29b      	uxth	r3, r3
 8004146:	2b00      	cmp	r3, #0
 8004148:	d1cf      	bne.n	80040ea <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800414a:	683b      	ldr	r3, [r7, #0]
 800414c:	9300      	str	r3, [sp, #0]
 800414e:	697b      	ldr	r3, [r7, #20]
 8004150:	2200      	movs	r2, #0
 8004152:	2140      	movs	r1, #64	; 0x40
 8004154:	68f8      	ldr	r0, [r7, #12]
 8004156:	f000 faef 	bl	8004738 <UART_WaitOnFlagUntilTimeout>
 800415a:	4603      	mov	r3, r0
 800415c:	2b00      	cmp	r3, #0
 800415e:	d001      	beq.n	8004164 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004160:	2303      	movs	r3, #3
 8004162:	e006      	b.n	8004172 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	2220      	movs	r2, #32
 8004168:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800416c:	2300      	movs	r3, #0
 800416e:	e000      	b.n	8004172 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004170:	2302      	movs	r3, #2
  }
}
 8004172:	4618      	mov	r0, r3
 8004174:	3720      	adds	r7, #32
 8004176:	46bd      	mov	sp, r7
 8004178:	bd80      	pop	{r7, pc}

0800417a <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800417a:	b580      	push	{r7, lr}
 800417c:	b084      	sub	sp, #16
 800417e:	af00      	add	r7, sp, #0
 8004180:	60f8      	str	r0, [r7, #12]
 8004182:	60b9      	str	r1, [r7, #8]
 8004184:	4613      	mov	r3, r2
 8004186:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800418e:	b2db      	uxtb	r3, r3
 8004190:	2b20      	cmp	r3, #32
 8004192:	d11d      	bne.n	80041d0 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8004194:	68bb      	ldr	r3, [r7, #8]
 8004196:	2b00      	cmp	r3, #0
 8004198:	d002      	beq.n	80041a0 <HAL_UART_Receive_IT+0x26>
 800419a:	88fb      	ldrh	r3, [r7, #6]
 800419c:	2b00      	cmp	r3, #0
 800419e:	d101      	bne.n	80041a4 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80041a0:	2301      	movs	r3, #1
 80041a2:	e016      	b.n	80041d2 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80041aa:	2b01      	cmp	r3, #1
 80041ac:	d101      	bne.n	80041b2 <HAL_UART_Receive_IT+0x38>
 80041ae:	2302      	movs	r3, #2
 80041b0:	e00f      	b.n	80041d2 <HAL_UART_Receive_IT+0x58>
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	2201      	movs	r2, #1
 80041b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	2200      	movs	r2, #0
 80041be:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80041c0:	88fb      	ldrh	r3, [r7, #6]
 80041c2:	461a      	mov	r2, r3
 80041c4:	68b9      	ldr	r1, [r7, #8]
 80041c6:	68f8      	ldr	r0, [r7, #12]
 80041c8:	f000 fb24 	bl	8004814 <UART_Start_Receive_IT>
 80041cc:	4603      	mov	r3, r0
 80041ce:	e000      	b.n	80041d2 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 80041d0:	2302      	movs	r3, #2
  }
}
 80041d2:	4618      	mov	r0, r3
 80041d4:	3710      	adds	r7, #16
 80041d6:	46bd      	mov	sp, r7
 80041d8:	bd80      	pop	{r7, pc}
	...

080041dc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80041dc:	b580      	push	{r7, lr}
 80041de:	b0ba      	sub	sp, #232	; 0xe8
 80041e0:	af00      	add	r7, sp, #0
 80041e2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	68db      	ldr	r3, [r3, #12]
 80041f4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	695b      	ldr	r3, [r3, #20]
 80041fe:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8004202:	2300      	movs	r3, #0
 8004204:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8004208:	2300      	movs	r3, #0
 800420a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800420e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004212:	f003 030f 	and.w	r3, r3, #15
 8004216:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800421a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800421e:	2b00      	cmp	r3, #0
 8004220:	d10f      	bne.n	8004242 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004222:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004226:	f003 0320 	and.w	r3, r3, #32
 800422a:	2b00      	cmp	r3, #0
 800422c:	d009      	beq.n	8004242 <HAL_UART_IRQHandler+0x66>
 800422e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004232:	f003 0320 	and.w	r3, r3, #32
 8004236:	2b00      	cmp	r3, #0
 8004238:	d003      	beq.n	8004242 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800423a:	6878      	ldr	r0, [r7, #4]
 800423c:	f000 fc03 	bl	8004a46 <UART_Receive_IT>
      return;
 8004240:	e256      	b.n	80046f0 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004242:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004246:	2b00      	cmp	r3, #0
 8004248:	f000 80de 	beq.w	8004408 <HAL_UART_IRQHandler+0x22c>
 800424c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004250:	f003 0301 	and.w	r3, r3, #1
 8004254:	2b00      	cmp	r3, #0
 8004256:	d106      	bne.n	8004266 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004258:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800425c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004260:	2b00      	cmp	r3, #0
 8004262:	f000 80d1 	beq.w	8004408 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004266:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800426a:	f003 0301 	and.w	r3, r3, #1
 800426e:	2b00      	cmp	r3, #0
 8004270:	d00b      	beq.n	800428a <HAL_UART_IRQHandler+0xae>
 8004272:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004276:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800427a:	2b00      	cmp	r3, #0
 800427c:	d005      	beq.n	800428a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004282:	f043 0201 	orr.w	r2, r3, #1
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800428a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800428e:	f003 0304 	and.w	r3, r3, #4
 8004292:	2b00      	cmp	r3, #0
 8004294:	d00b      	beq.n	80042ae <HAL_UART_IRQHandler+0xd2>
 8004296:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800429a:	f003 0301 	and.w	r3, r3, #1
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d005      	beq.n	80042ae <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042a6:	f043 0202 	orr.w	r2, r3, #2
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80042ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80042b2:	f003 0302 	and.w	r3, r3, #2
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d00b      	beq.n	80042d2 <HAL_UART_IRQHandler+0xf6>
 80042ba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80042be:	f003 0301 	and.w	r3, r3, #1
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d005      	beq.n	80042d2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042ca:	f043 0204 	orr.w	r2, r3, #4
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80042d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80042d6:	f003 0308 	and.w	r3, r3, #8
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d011      	beq.n	8004302 <HAL_UART_IRQHandler+0x126>
 80042de:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80042e2:	f003 0320 	and.w	r3, r3, #32
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d105      	bne.n	80042f6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80042ea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80042ee:	f003 0301 	and.w	r3, r3, #1
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d005      	beq.n	8004302 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042fa:	f043 0208 	orr.w	r2, r3, #8
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004306:	2b00      	cmp	r3, #0
 8004308:	f000 81ed 	beq.w	80046e6 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800430c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004310:	f003 0320 	and.w	r3, r3, #32
 8004314:	2b00      	cmp	r3, #0
 8004316:	d008      	beq.n	800432a <HAL_UART_IRQHandler+0x14e>
 8004318:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800431c:	f003 0320 	and.w	r3, r3, #32
 8004320:	2b00      	cmp	r3, #0
 8004322:	d002      	beq.n	800432a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004324:	6878      	ldr	r0, [r7, #4]
 8004326:	f000 fb8e 	bl	8004a46 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	695b      	ldr	r3, [r3, #20]
 8004330:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004334:	2b40      	cmp	r3, #64	; 0x40
 8004336:	bf0c      	ite	eq
 8004338:	2301      	moveq	r3, #1
 800433a:	2300      	movne	r3, #0
 800433c:	b2db      	uxtb	r3, r3
 800433e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004346:	f003 0308 	and.w	r3, r3, #8
 800434a:	2b00      	cmp	r3, #0
 800434c:	d103      	bne.n	8004356 <HAL_UART_IRQHandler+0x17a>
 800434e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004352:	2b00      	cmp	r3, #0
 8004354:	d04f      	beq.n	80043f6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004356:	6878      	ldr	r0, [r7, #4]
 8004358:	f000 fa96 	bl	8004888 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	695b      	ldr	r3, [r3, #20]
 8004362:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004366:	2b40      	cmp	r3, #64	; 0x40
 8004368:	d141      	bne.n	80043ee <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	3314      	adds	r3, #20
 8004370:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004374:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004378:	e853 3f00 	ldrex	r3, [r3]
 800437c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004380:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004384:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004388:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	3314      	adds	r3, #20
 8004392:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004396:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800439a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800439e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80043a2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80043a6:	e841 2300 	strex	r3, r2, [r1]
 80043aa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80043ae:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d1d9      	bne.n	800436a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d013      	beq.n	80043e6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043c2:	4a7d      	ldr	r2, [pc, #500]	; (80045b8 <HAL_UART_IRQHandler+0x3dc>)
 80043c4:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043ca:	4618      	mov	r0, r3
 80043cc:	f7fd f801 	bl	80013d2 <HAL_DMA_Abort_IT>
 80043d0:	4603      	mov	r3, r0
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d016      	beq.n	8004404 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80043dc:	687a      	ldr	r2, [r7, #4]
 80043de:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80043e0:	4610      	mov	r0, r2
 80043e2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80043e4:	e00e      	b.n	8004404 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80043e6:	6878      	ldr	r0, [r7, #4]
 80043e8:	f000 f990 	bl	800470c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80043ec:	e00a      	b.n	8004404 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80043ee:	6878      	ldr	r0, [r7, #4]
 80043f0:	f000 f98c 	bl	800470c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80043f4:	e006      	b.n	8004404 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80043f6:	6878      	ldr	r0, [r7, #4]
 80043f8:	f000 f988 	bl	800470c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	2200      	movs	r2, #0
 8004400:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8004402:	e170      	b.n	80046e6 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004404:	bf00      	nop
    return;
 8004406:	e16e      	b.n	80046e6 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800440c:	2b01      	cmp	r3, #1
 800440e:	f040 814a 	bne.w	80046a6 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004412:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004416:	f003 0310 	and.w	r3, r3, #16
 800441a:	2b00      	cmp	r3, #0
 800441c:	f000 8143 	beq.w	80046a6 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004420:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004424:	f003 0310 	and.w	r3, r3, #16
 8004428:	2b00      	cmp	r3, #0
 800442a:	f000 813c 	beq.w	80046a6 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800442e:	2300      	movs	r3, #0
 8004430:	60bb      	str	r3, [r7, #8]
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	60bb      	str	r3, [r7, #8]
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	685b      	ldr	r3, [r3, #4]
 8004440:	60bb      	str	r3, [r7, #8]
 8004442:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	695b      	ldr	r3, [r3, #20]
 800444a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800444e:	2b40      	cmp	r3, #64	; 0x40
 8004450:	f040 80b4 	bne.w	80045bc <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	685b      	ldr	r3, [r3, #4]
 800445c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004460:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004464:	2b00      	cmp	r3, #0
 8004466:	f000 8140 	beq.w	80046ea <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800446e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004472:	429a      	cmp	r2, r3
 8004474:	f080 8139 	bcs.w	80046ea <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800447e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004484:	69db      	ldr	r3, [r3, #28]
 8004486:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800448a:	f000 8088 	beq.w	800459e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	330c      	adds	r3, #12
 8004494:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004498:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800449c:	e853 3f00 	ldrex	r3, [r3]
 80044a0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80044a4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80044a8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80044ac:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	330c      	adds	r3, #12
 80044b6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80044ba:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80044be:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044c2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80044c6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80044ca:	e841 2300 	strex	r3, r2, [r1]
 80044ce:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80044d2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d1d9      	bne.n	800448e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	3314      	adds	r3, #20
 80044e0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044e2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80044e4:	e853 3f00 	ldrex	r3, [r3]
 80044e8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80044ea:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80044ec:	f023 0301 	bic.w	r3, r3, #1
 80044f0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	3314      	adds	r3, #20
 80044fa:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80044fe:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004502:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004504:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004506:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800450a:	e841 2300 	strex	r3, r2, [r1]
 800450e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004510:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004512:	2b00      	cmp	r3, #0
 8004514:	d1e1      	bne.n	80044da <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	3314      	adds	r3, #20
 800451c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800451e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004520:	e853 3f00 	ldrex	r3, [r3]
 8004524:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004526:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004528:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800452c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	3314      	adds	r3, #20
 8004536:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800453a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800453c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800453e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004540:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004542:	e841 2300 	strex	r3, r2, [r1]
 8004546:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004548:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800454a:	2b00      	cmp	r3, #0
 800454c:	d1e3      	bne.n	8004516 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	2220      	movs	r2, #32
 8004552:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	2200      	movs	r2, #0
 800455a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	330c      	adds	r3, #12
 8004562:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004564:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004566:	e853 3f00 	ldrex	r3, [r3]
 800456a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800456c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800456e:	f023 0310 	bic.w	r3, r3, #16
 8004572:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	330c      	adds	r3, #12
 800457c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8004580:	65ba      	str	r2, [r7, #88]	; 0x58
 8004582:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004584:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004586:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004588:	e841 2300 	strex	r3, r2, [r1]
 800458c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800458e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004590:	2b00      	cmp	r3, #0
 8004592:	d1e3      	bne.n	800455c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004598:	4618      	mov	r0, r3
 800459a:	f7fc feaa 	bl	80012f2 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80045a6:	b29b      	uxth	r3, r3
 80045a8:	1ad3      	subs	r3, r2, r3
 80045aa:	b29b      	uxth	r3, r3
 80045ac:	4619      	mov	r1, r3
 80045ae:	6878      	ldr	r0, [r7, #4]
 80045b0:	f000 f8b6 	bl	8004720 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80045b4:	e099      	b.n	80046ea <HAL_UART_IRQHandler+0x50e>
 80045b6:	bf00      	nop
 80045b8:	0800494f 	.word	0x0800494f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80045c4:	b29b      	uxth	r3, r3
 80045c6:	1ad3      	subs	r3, r2, r3
 80045c8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80045d0:	b29b      	uxth	r3, r3
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	f000 808b 	beq.w	80046ee <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80045d8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80045dc:	2b00      	cmp	r3, #0
 80045de:	f000 8086 	beq.w	80046ee <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	330c      	adds	r3, #12
 80045e8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045ec:	e853 3f00 	ldrex	r3, [r3]
 80045f0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80045f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80045f4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80045f8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	330c      	adds	r3, #12
 8004602:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8004606:	647a      	str	r2, [r7, #68]	; 0x44
 8004608:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800460a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800460c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800460e:	e841 2300 	strex	r3, r2, [r1]
 8004612:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004614:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004616:	2b00      	cmp	r3, #0
 8004618:	d1e3      	bne.n	80045e2 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	3314      	adds	r3, #20
 8004620:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004622:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004624:	e853 3f00 	ldrex	r3, [r3]
 8004628:	623b      	str	r3, [r7, #32]
   return(result);
 800462a:	6a3b      	ldr	r3, [r7, #32]
 800462c:	f023 0301 	bic.w	r3, r3, #1
 8004630:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	3314      	adds	r3, #20
 800463a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800463e:	633a      	str	r2, [r7, #48]	; 0x30
 8004640:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004642:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004644:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004646:	e841 2300 	strex	r3, r2, [r1]
 800464a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800464c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800464e:	2b00      	cmp	r3, #0
 8004650:	d1e3      	bne.n	800461a <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	2220      	movs	r2, #32
 8004656:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	2200      	movs	r2, #0
 800465e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	330c      	adds	r3, #12
 8004666:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004668:	693b      	ldr	r3, [r7, #16]
 800466a:	e853 3f00 	ldrex	r3, [r3]
 800466e:	60fb      	str	r3, [r7, #12]
   return(result);
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	f023 0310 	bic.w	r3, r3, #16
 8004676:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	330c      	adds	r3, #12
 8004680:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8004684:	61fa      	str	r2, [r7, #28]
 8004686:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004688:	69b9      	ldr	r1, [r7, #24]
 800468a:	69fa      	ldr	r2, [r7, #28]
 800468c:	e841 2300 	strex	r3, r2, [r1]
 8004690:	617b      	str	r3, [r7, #20]
   return(result);
 8004692:	697b      	ldr	r3, [r7, #20]
 8004694:	2b00      	cmp	r3, #0
 8004696:	d1e3      	bne.n	8004660 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004698:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800469c:	4619      	mov	r1, r3
 800469e:	6878      	ldr	r0, [r7, #4]
 80046a0:	f000 f83e 	bl	8004720 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80046a4:	e023      	b.n	80046ee <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80046a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80046aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d009      	beq.n	80046c6 <HAL_UART_IRQHandler+0x4ea>
 80046b2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80046b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d003      	beq.n	80046c6 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80046be:	6878      	ldr	r0, [r7, #4]
 80046c0:	f000 f959 	bl	8004976 <UART_Transmit_IT>
    return;
 80046c4:	e014      	b.n	80046f0 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80046c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80046ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d00e      	beq.n	80046f0 <HAL_UART_IRQHandler+0x514>
 80046d2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80046d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d008      	beq.n	80046f0 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80046de:	6878      	ldr	r0, [r7, #4]
 80046e0:	f000 f999 	bl	8004a16 <UART_EndTransmit_IT>
    return;
 80046e4:	e004      	b.n	80046f0 <HAL_UART_IRQHandler+0x514>
    return;
 80046e6:	bf00      	nop
 80046e8:	e002      	b.n	80046f0 <HAL_UART_IRQHandler+0x514>
      return;
 80046ea:	bf00      	nop
 80046ec:	e000      	b.n	80046f0 <HAL_UART_IRQHandler+0x514>
      return;
 80046ee:	bf00      	nop
  }
}
 80046f0:	37e8      	adds	r7, #232	; 0xe8
 80046f2:	46bd      	mov	sp, r7
 80046f4:	bd80      	pop	{r7, pc}
 80046f6:	bf00      	nop

080046f8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80046f8:	b480      	push	{r7}
 80046fa:	b083      	sub	sp, #12
 80046fc:	af00      	add	r7, sp, #0
 80046fe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004700:	bf00      	nop
 8004702:	370c      	adds	r7, #12
 8004704:	46bd      	mov	sp, r7
 8004706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800470a:	4770      	bx	lr

0800470c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800470c:	b480      	push	{r7}
 800470e:	b083      	sub	sp, #12
 8004710:	af00      	add	r7, sp, #0
 8004712:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004714:	bf00      	nop
 8004716:	370c      	adds	r7, #12
 8004718:	46bd      	mov	sp, r7
 800471a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800471e:	4770      	bx	lr

08004720 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004720:	b480      	push	{r7}
 8004722:	b083      	sub	sp, #12
 8004724:	af00      	add	r7, sp, #0
 8004726:	6078      	str	r0, [r7, #4]
 8004728:	460b      	mov	r3, r1
 800472a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800472c:	bf00      	nop
 800472e:	370c      	adds	r7, #12
 8004730:	46bd      	mov	sp, r7
 8004732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004736:	4770      	bx	lr

08004738 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004738:	b580      	push	{r7, lr}
 800473a:	b090      	sub	sp, #64	; 0x40
 800473c:	af00      	add	r7, sp, #0
 800473e:	60f8      	str	r0, [r7, #12]
 8004740:	60b9      	str	r1, [r7, #8]
 8004742:	603b      	str	r3, [r7, #0]
 8004744:	4613      	mov	r3, r2
 8004746:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004748:	e050      	b.n	80047ec <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800474a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800474c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004750:	d04c      	beq.n	80047ec <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004752:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004754:	2b00      	cmp	r3, #0
 8004756:	d007      	beq.n	8004768 <UART_WaitOnFlagUntilTimeout+0x30>
 8004758:	f7fc fc8a 	bl	8001070 <HAL_GetTick>
 800475c:	4602      	mov	r2, r0
 800475e:	683b      	ldr	r3, [r7, #0]
 8004760:	1ad3      	subs	r3, r2, r3
 8004762:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004764:	429a      	cmp	r2, r3
 8004766:	d241      	bcs.n	80047ec <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	330c      	adds	r3, #12
 800476e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004770:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004772:	e853 3f00 	ldrex	r3, [r3]
 8004776:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004778:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800477a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800477e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	330c      	adds	r3, #12
 8004786:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004788:	637a      	str	r2, [r7, #52]	; 0x34
 800478a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800478c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800478e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004790:	e841 2300 	strex	r3, r2, [r1]
 8004794:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004796:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004798:	2b00      	cmp	r3, #0
 800479a:	d1e5      	bne.n	8004768 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	3314      	adds	r3, #20
 80047a2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047a4:	697b      	ldr	r3, [r7, #20]
 80047a6:	e853 3f00 	ldrex	r3, [r3]
 80047aa:	613b      	str	r3, [r7, #16]
   return(result);
 80047ac:	693b      	ldr	r3, [r7, #16]
 80047ae:	f023 0301 	bic.w	r3, r3, #1
 80047b2:	63bb      	str	r3, [r7, #56]	; 0x38
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	3314      	adds	r3, #20
 80047ba:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80047bc:	623a      	str	r2, [r7, #32]
 80047be:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047c0:	69f9      	ldr	r1, [r7, #28]
 80047c2:	6a3a      	ldr	r2, [r7, #32]
 80047c4:	e841 2300 	strex	r3, r2, [r1]
 80047c8:	61bb      	str	r3, [r7, #24]
   return(result);
 80047ca:	69bb      	ldr	r3, [r7, #24]
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d1e5      	bne.n	800479c <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	2220      	movs	r2, #32
 80047d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	2220      	movs	r2, #32
 80047dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	2200      	movs	r2, #0
 80047e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80047e8:	2303      	movs	r3, #3
 80047ea:	e00f      	b.n	800480c <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	681a      	ldr	r2, [r3, #0]
 80047f2:	68bb      	ldr	r3, [r7, #8]
 80047f4:	4013      	ands	r3, r2
 80047f6:	68ba      	ldr	r2, [r7, #8]
 80047f8:	429a      	cmp	r2, r3
 80047fa:	bf0c      	ite	eq
 80047fc:	2301      	moveq	r3, #1
 80047fe:	2300      	movne	r3, #0
 8004800:	b2db      	uxtb	r3, r3
 8004802:	461a      	mov	r2, r3
 8004804:	79fb      	ldrb	r3, [r7, #7]
 8004806:	429a      	cmp	r2, r3
 8004808:	d09f      	beq.n	800474a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800480a:	2300      	movs	r3, #0
}
 800480c:	4618      	mov	r0, r3
 800480e:	3740      	adds	r7, #64	; 0x40
 8004810:	46bd      	mov	sp, r7
 8004812:	bd80      	pop	{r7, pc}

08004814 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004814:	b480      	push	{r7}
 8004816:	b085      	sub	sp, #20
 8004818:	af00      	add	r7, sp, #0
 800481a:	60f8      	str	r0, [r7, #12]
 800481c:	60b9      	str	r1, [r7, #8]
 800481e:	4613      	mov	r3, r2
 8004820:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	68ba      	ldr	r2, [r7, #8]
 8004826:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	88fa      	ldrh	r2, [r7, #6]
 800482c:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	88fa      	ldrh	r2, [r7, #6]
 8004832:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	2200      	movs	r2, #0
 8004838:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	2222      	movs	r2, #34	; 0x22
 800483e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	2200      	movs	r2, #0
 8004846:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	68da      	ldr	r2, [r3, #12]
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004858:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	695a      	ldr	r2, [r3, #20]
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	f042 0201 	orr.w	r2, r2, #1
 8004868:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	68da      	ldr	r2, [r3, #12]
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	f042 0220 	orr.w	r2, r2, #32
 8004878:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800487a:	2300      	movs	r3, #0
}
 800487c:	4618      	mov	r0, r3
 800487e:	3714      	adds	r7, #20
 8004880:	46bd      	mov	sp, r7
 8004882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004886:	4770      	bx	lr

08004888 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004888:	b480      	push	{r7}
 800488a:	b095      	sub	sp, #84	; 0x54
 800488c:	af00      	add	r7, sp, #0
 800488e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	330c      	adds	r3, #12
 8004896:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004898:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800489a:	e853 3f00 	ldrex	r3, [r3]
 800489e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80048a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048a2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80048a6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	330c      	adds	r3, #12
 80048ae:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80048b0:	643a      	str	r2, [r7, #64]	; 0x40
 80048b2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048b4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80048b6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80048b8:	e841 2300 	strex	r3, r2, [r1]
 80048bc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80048be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d1e5      	bne.n	8004890 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	3314      	adds	r3, #20
 80048ca:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048cc:	6a3b      	ldr	r3, [r7, #32]
 80048ce:	e853 3f00 	ldrex	r3, [r3]
 80048d2:	61fb      	str	r3, [r7, #28]
   return(result);
 80048d4:	69fb      	ldr	r3, [r7, #28]
 80048d6:	f023 0301 	bic.w	r3, r3, #1
 80048da:	64bb      	str	r3, [r7, #72]	; 0x48
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	3314      	adds	r3, #20
 80048e2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80048e4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80048e6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048e8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80048ea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80048ec:	e841 2300 	strex	r3, r2, [r1]
 80048f0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80048f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d1e5      	bne.n	80048c4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048fc:	2b01      	cmp	r3, #1
 80048fe:	d119      	bne.n	8004934 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	330c      	adds	r3, #12
 8004906:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	e853 3f00 	ldrex	r3, [r3]
 800490e:	60bb      	str	r3, [r7, #8]
   return(result);
 8004910:	68bb      	ldr	r3, [r7, #8]
 8004912:	f023 0310 	bic.w	r3, r3, #16
 8004916:	647b      	str	r3, [r7, #68]	; 0x44
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	330c      	adds	r3, #12
 800491e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004920:	61ba      	str	r2, [r7, #24]
 8004922:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004924:	6979      	ldr	r1, [r7, #20]
 8004926:	69ba      	ldr	r2, [r7, #24]
 8004928:	e841 2300 	strex	r3, r2, [r1]
 800492c:	613b      	str	r3, [r7, #16]
   return(result);
 800492e:	693b      	ldr	r3, [r7, #16]
 8004930:	2b00      	cmp	r3, #0
 8004932:	d1e5      	bne.n	8004900 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	2220      	movs	r2, #32
 8004938:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	2200      	movs	r2, #0
 8004940:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004942:	bf00      	nop
 8004944:	3754      	adds	r7, #84	; 0x54
 8004946:	46bd      	mov	sp, r7
 8004948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800494c:	4770      	bx	lr

0800494e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800494e:	b580      	push	{r7, lr}
 8004950:	b084      	sub	sp, #16
 8004952:	af00      	add	r7, sp, #0
 8004954:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800495a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	2200      	movs	r2, #0
 8004960:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	2200      	movs	r2, #0
 8004966:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004968:	68f8      	ldr	r0, [r7, #12]
 800496a:	f7ff fecf 	bl	800470c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800496e:	bf00      	nop
 8004970:	3710      	adds	r7, #16
 8004972:	46bd      	mov	sp, r7
 8004974:	bd80      	pop	{r7, pc}

08004976 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004976:	b480      	push	{r7}
 8004978:	b085      	sub	sp, #20
 800497a:	af00      	add	r7, sp, #0
 800497c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004984:	b2db      	uxtb	r3, r3
 8004986:	2b21      	cmp	r3, #33	; 0x21
 8004988:	d13e      	bne.n	8004a08 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	689b      	ldr	r3, [r3, #8]
 800498e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004992:	d114      	bne.n	80049be <UART_Transmit_IT+0x48>
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	691b      	ldr	r3, [r3, #16]
 8004998:	2b00      	cmp	r3, #0
 800499a:	d110      	bne.n	80049be <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	6a1b      	ldr	r3, [r3, #32]
 80049a0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	881b      	ldrh	r3, [r3, #0]
 80049a6:	461a      	mov	r2, r3
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80049b0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	6a1b      	ldr	r3, [r3, #32]
 80049b6:	1c9a      	adds	r2, r3, #2
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	621a      	str	r2, [r3, #32]
 80049bc:	e008      	b.n	80049d0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	6a1b      	ldr	r3, [r3, #32]
 80049c2:	1c59      	adds	r1, r3, #1
 80049c4:	687a      	ldr	r2, [r7, #4]
 80049c6:	6211      	str	r1, [r2, #32]
 80049c8:	781a      	ldrb	r2, [r3, #0]
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80049d4:	b29b      	uxth	r3, r3
 80049d6:	3b01      	subs	r3, #1
 80049d8:	b29b      	uxth	r3, r3
 80049da:	687a      	ldr	r2, [r7, #4]
 80049dc:	4619      	mov	r1, r3
 80049de:	84d1      	strh	r1, [r2, #38]	; 0x26
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d10f      	bne.n	8004a04 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	68da      	ldr	r2, [r3, #12]
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80049f2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	68da      	ldr	r2, [r3, #12]
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004a02:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004a04:	2300      	movs	r3, #0
 8004a06:	e000      	b.n	8004a0a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004a08:	2302      	movs	r3, #2
  }
}
 8004a0a:	4618      	mov	r0, r3
 8004a0c:	3714      	adds	r7, #20
 8004a0e:	46bd      	mov	sp, r7
 8004a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a14:	4770      	bx	lr

08004a16 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004a16:	b580      	push	{r7, lr}
 8004a18:	b082      	sub	sp, #8
 8004a1a:	af00      	add	r7, sp, #0
 8004a1c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	68da      	ldr	r2, [r3, #12]
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004a2c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	2220      	movs	r2, #32
 8004a32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004a36:	6878      	ldr	r0, [r7, #4]
 8004a38:	f7ff fe5e 	bl	80046f8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004a3c:	2300      	movs	r3, #0
}
 8004a3e:	4618      	mov	r0, r3
 8004a40:	3708      	adds	r7, #8
 8004a42:	46bd      	mov	sp, r7
 8004a44:	bd80      	pop	{r7, pc}

08004a46 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004a46:	b580      	push	{r7, lr}
 8004a48:	b08c      	sub	sp, #48	; 0x30
 8004a4a:	af00      	add	r7, sp, #0
 8004a4c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004a54:	b2db      	uxtb	r3, r3
 8004a56:	2b22      	cmp	r3, #34	; 0x22
 8004a58:	f040 80ab 	bne.w	8004bb2 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	689b      	ldr	r3, [r3, #8]
 8004a60:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a64:	d117      	bne.n	8004a96 <UART_Receive_IT+0x50>
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	691b      	ldr	r3, [r3, #16]
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d113      	bne.n	8004a96 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004a6e:	2300      	movs	r3, #0
 8004a70:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a76:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	685b      	ldr	r3, [r3, #4]
 8004a7e:	b29b      	uxth	r3, r3
 8004a80:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a84:	b29a      	uxth	r2, r3
 8004a86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a88:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a8e:	1c9a      	adds	r2, r3, #2
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	629a      	str	r2, [r3, #40]	; 0x28
 8004a94:	e026      	b.n	8004ae4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a9a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8004a9c:	2300      	movs	r3, #0
 8004a9e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	689b      	ldr	r3, [r3, #8]
 8004aa4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004aa8:	d007      	beq.n	8004aba <UART_Receive_IT+0x74>
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	689b      	ldr	r3, [r3, #8]
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d10a      	bne.n	8004ac8 <UART_Receive_IT+0x82>
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	691b      	ldr	r3, [r3, #16]
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d106      	bne.n	8004ac8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	685b      	ldr	r3, [r3, #4]
 8004ac0:	b2da      	uxtb	r2, r3
 8004ac2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ac4:	701a      	strb	r2, [r3, #0]
 8004ac6:	e008      	b.n	8004ada <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	685b      	ldr	r3, [r3, #4]
 8004ace:	b2db      	uxtb	r3, r3
 8004ad0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004ad4:	b2da      	uxtb	r2, r3
 8004ad6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ad8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ade:	1c5a      	adds	r2, r3, #1
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004ae8:	b29b      	uxth	r3, r3
 8004aea:	3b01      	subs	r3, #1
 8004aec:	b29b      	uxth	r3, r3
 8004aee:	687a      	ldr	r2, [r7, #4]
 8004af0:	4619      	mov	r1, r3
 8004af2:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d15a      	bne.n	8004bae <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	68da      	ldr	r2, [r3, #12]
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	f022 0220 	bic.w	r2, r2, #32
 8004b06:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	68da      	ldr	r2, [r3, #12]
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004b16:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	695a      	ldr	r2, [r3, #20]
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	f022 0201 	bic.w	r2, r2, #1
 8004b26:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	2220      	movs	r2, #32
 8004b2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b34:	2b01      	cmp	r3, #1
 8004b36:	d135      	bne.n	8004ba4 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	2200      	movs	r2, #0
 8004b3c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	330c      	adds	r3, #12
 8004b44:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b46:	697b      	ldr	r3, [r7, #20]
 8004b48:	e853 3f00 	ldrex	r3, [r3]
 8004b4c:	613b      	str	r3, [r7, #16]
   return(result);
 8004b4e:	693b      	ldr	r3, [r7, #16]
 8004b50:	f023 0310 	bic.w	r3, r3, #16
 8004b54:	627b      	str	r3, [r7, #36]	; 0x24
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	330c      	adds	r3, #12
 8004b5c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b5e:	623a      	str	r2, [r7, #32]
 8004b60:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b62:	69f9      	ldr	r1, [r7, #28]
 8004b64:	6a3a      	ldr	r2, [r7, #32]
 8004b66:	e841 2300 	strex	r3, r2, [r1]
 8004b6a:	61bb      	str	r3, [r7, #24]
   return(result);
 8004b6c:	69bb      	ldr	r3, [r7, #24]
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d1e5      	bne.n	8004b3e <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	f003 0310 	and.w	r3, r3, #16
 8004b7c:	2b10      	cmp	r3, #16
 8004b7e:	d10a      	bne.n	8004b96 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004b80:	2300      	movs	r3, #0
 8004b82:	60fb      	str	r3, [r7, #12]
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	60fb      	str	r3, [r7, #12]
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	685b      	ldr	r3, [r3, #4]
 8004b92:	60fb      	str	r3, [r7, #12]
 8004b94:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004b9a:	4619      	mov	r1, r3
 8004b9c:	6878      	ldr	r0, [r7, #4]
 8004b9e:	f7ff fdbf 	bl	8004720 <HAL_UARTEx_RxEventCallback>
 8004ba2:	e002      	b.n	8004baa <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004ba4:	6878      	ldr	r0, [r7, #4]
 8004ba6:	f7fb ff29 	bl	80009fc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004baa:	2300      	movs	r3, #0
 8004bac:	e002      	b.n	8004bb4 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8004bae:	2300      	movs	r3, #0
 8004bb0:	e000      	b.n	8004bb4 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8004bb2:	2302      	movs	r3, #2
  }
}
 8004bb4:	4618      	mov	r0, r3
 8004bb6:	3730      	adds	r7, #48	; 0x30
 8004bb8:	46bd      	mov	sp, r7
 8004bba:	bd80      	pop	{r7, pc}

08004bbc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004bbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004bc0:	b09f      	sub	sp, #124	; 0x7c
 8004bc2:	af00      	add	r7, sp, #0
 8004bc4:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004bc6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	691b      	ldr	r3, [r3, #16]
 8004bcc:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004bd0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004bd2:	68d9      	ldr	r1, [r3, #12]
 8004bd4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004bd6:	681a      	ldr	r2, [r3, #0]
 8004bd8:	ea40 0301 	orr.w	r3, r0, r1
 8004bdc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004bde:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004be0:	689a      	ldr	r2, [r3, #8]
 8004be2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004be4:	691b      	ldr	r3, [r3, #16]
 8004be6:	431a      	orrs	r2, r3
 8004be8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004bea:	695b      	ldr	r3, [r3, #20]
 8004bec:	431a      	orrs	r2, r3
 8004bee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004bf0:	69db      	ldr	r3, [r3, #28]
 8004bf2:	4313      	orrs	r3, r2
 8004bf4:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8004bf6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	68db      	ldr	r3, [r3, #12]
 8004bfc:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004c00:	f021 010c 	bic.w	r1, r1, #12
 8004c04:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004c06:	681a      	ldr	r2, [r3, #0]
 8004c08:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004c0a:	430b      	orrs	r3, r1
 8004c0c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004c0e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	695b      	ldr	r3, [r3, #20]
 8004c14:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004c18:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004c1a:	6999      	ldr	r1, [r3, #24]
 8004c1c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004c1e:	681a      	ldr	r2, [r3, #0]
 8004c20:	ea40 0301 	orr.w	r3, r0, r1
 8004c24:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004c26:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004c28:	681a      	ldr	r2, [r3, #0]
 8004c2a:	4bc5      	ldr	r3, [pc, #788]	; (8004f40 <UART_SetConfig+0x384>)
 8004c2c:	429a      	cmp	r2, r3
 8004c2e:	d004      	beq.n	8004c3a <UART_SetConfig+0x7e>
 8004c30:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004c32:	681a      	ldr	r2, [r3, #0]
 8004c34:	4bc3      	ldr	r3, [pc, #780]	; (8004f44 <UART_SetConfig+0x388>)
 8004c36:	429a      	cmp	r2, r3
 8004c38:	d103      	bne.n	8004c42 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004c3a:	f7fe fca5 	bl	8003588 <HAL_RCC_GetPCLK2Freq>
 8004c3e:	6778      	str	r0, [r7, #116]	; 0x74
 8004c40:	e002      	b.n	8004c48 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004c42:	f7fe fc8d 	bl	8003560 <HAL_RCC_GetPCLK1Freq>
 8004c46:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004c48:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004c4a:	69db      	ldr	r3, [r3, #28]
 8004c4c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004c50:	f040 80b6 	bne.w	8004dc0 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004c54:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004c56:	461c      	mov	r4, r3
 8004c58:	f04f 0500 	mov.w	r5, #0
 8004c5c:	4622      	mov	r2, r4
 8004c5e:	462b      	mov	r3, r5
 8004c60:	1891      	adds	r1, r2, r2
 8004c62:	6439      	str	r1, [r7, #64]	; 0x40
 8004c64:	415b      	adcs	r3, r3
 8004c66:	647b      	str	r3, [r7, #68]	; 0x44
 8004c68:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004c6c:	1912      	adds	r2, r2, r4
 8004c6e:	eb45 0303 	adc.w	r3, r5, r3
 8004c72:	f04f 0000 	mov.w	r0, #0
 8004c76:	f04f 0100 	mov.w	r1, #0
 8004c7a:	00d9      	lsls	r1, r3, #3
 8004c7c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004c80:	00d0      	lsls	r0, r2, #3
 8004c82:	4602      	mov	r2, r0
 8004c84:	460b      	mov	r3, r1
 8004c86:	1911      	adds	r1, r2, r4
 8004c88:	6639      	str	r1, [r7, #96]	; 0x60
 8004c8a:	416b      	adcs	r3, r5
 8004c8c:	667b      	str	r3, [r7, #100]	; 0x64
 8004c8e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004c90:	685b      	ldr	r3, [r3, #4]
 8004c92:	461a      	mov	r2, r3
 8004c94:	f04f 0300 	mov.w	r3, #0
 8004c98:	1891      	adds	r1, r2, r2
 8004c9a:	63b9      	str	r1, [r7, #56]	; 0x38
 8004c9c:	415b      	adcs	r3, r3
 8004c9e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004ca0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004ca4:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8004ca8:	f7fb faa4 	bl	80001f4 <__aeabi_uldivmod>
 8004cac:	4602      	mov	r2, r0
 8004cae:	460b      	mov	r3, r1
 8004cb0:	4ba5      	ldr	r3, [pc, #660]	; (8004f48 <UART_SetConfig+0x38c>)
 8004cb2:	fba3 2302 	umull	r2, r3, r3, r2
 8004cb6:	095b      	lsrs	r3, r3, #5
 8004cb8:	011e      	lsls	r6, r3, #4
 8004cba:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004cbc:	461c      	mov	r4, r3
 8004cbe:	f04f 0500 	mov.w	r5, #0
 8004cc2:	4622      	mov	r2, r4
 8004cc4:	462b      	mov	r3, r5
 8004cc6:	1891      	adds	r1, r2, r2
 8004cc8:	6339      	str	r1, [r7, #48]	; 0x30
 8004cca:	415b      	adcs	r3, r3
 8004ccc:	637b      	str	r3, [r7, #52]	; 0x34
 8004cce:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8004cd2:	1912      	adds	r2, r2, r4
 8004cd4:	eb45 0303 	adc.w	r3, r5, r3
 8004cd8:	f04f 0000 	mov.w	r0, #0
 8004cdc:	f04f 0100 	mov.w	r1, #0
 8004ce0:	00d9      	lsls	r1, r3, #3
 8004ce2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004ce6:	00d0      	lsls	r0, r2, #3
 8004ce8:	4602      	mov	r2, r0
 8004cea:	460b      	mov	r3, r1
 8004cec:	1911      	adds	r1, r2, r4
 8004cee:	65b9      	str	r1, [r7, #88]	; 0x58
 8004cf0:	416b      	adcs	r3, r5
 8004cf2:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004cf4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004cf6:	685b      	ldr	r3, [r3, #4]
 8004cf8:	461a      	mov	r2, r3
 8004cfa:	f04f 0300 	mov.w	r3, #0
 8004cfe:	1891      	adds	r1, r2, r2
 8004d00:	62b9      	str	r1, [r7, #40]	; 0x28
 8004d02:	415b      	adcs	r3, r3
 8004d04:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004d06:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004d0a:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8004d0e:	f7fb fa71 	bl	80001f4 <__aeabi_uldivmod>
 8004d12:	4602      	mov	r2, r0
 8004d14:	460b      	mov	r3, r1
 8004d16:	4b8c      	ldr	r3, [pc, #560]	; (8004f48 <UART_SetConfig+0x38c>)
 8004d18:	fba3 1302 	umull	r1, r3, r3, r2
 8004d1c:	095b      	lsrs	r3, r3, #5
 8004d1e:	2164      	movs	r1, #100	; 0x64
 8004d20:	fb01 f303 	mul.w	r3, r1, r3
 8004d24:	1ad3      	subs	r3, r2, r3
 8004d26:	00db      	lsls	r3, r3, #3
 8004d28:	3332      	adds	r3, #50	; 0x32
 8004d2a:	4a87      	ldr	r2, [pc, #540]	; (8004f48 <UART_SetConfig+0x38c>)
 8004d2c:	fba2 2303 	umull	r2, r3, r2, r3
 8004d30:	095b      	lsrs	r3, r3, #5
 8004d32:	005b      	lsls	r3, r3, #1
 8004d34:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004d38:	441e      	add	r6, r3
 8004d3a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004d3c:	4618      	mov	r0, r3
 8004d3e:	f04f 0100 	mov.w	r1, #0
 8004d42:	4602      	mov	r2, r0
 8004d44:	460b      	mov	r3, r1
 8004d46:	1894      	adds	r4, r2, r2
 8004d48:	623c      	str	r4, [r7, #32]
 8004d4a:	415b      	adcs	r3, r3
 8004d4c:	627b      	str	r3, [r7, #36]	; 0x24
 8004d4e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004d52:	1812      	adds	r2, r2, r0
 8004d54:	eb41 0303 	adc.w	r3, r1, r3
 8004d58:	f04f 0400 	mov.w	r4, #0
 8004d5c:	f04f 0500 	mov.w	r5, #0
 8004d60:	00dd      	lsls	r5, r3, #3
 8004d62:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004d66:	00d4      	lsls	r4, r2, #3
 8004d68:	4622      	mov	r2, r4
 8004d6a:	462b      	mov	r3, r5
 8004d6c:	1814      	adds	r4, r2, r0
 8004d6e:	653c      	str	r4, [r7, #80]	; 0x50
 8004d70:	414b      	adcs	r3, r1
 8004d72:	657b      	str	r3, [r7, #84]	; 0x54
 8004d74:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d76:	685b      	ldr	r3, [r3, #4]
 8004d78:	461a      	mov	r2, r3
 8004d7a:	f04f 0300 	mov.w	r3, #0
 8004d7e:	1891      	adds	r1, r2, r2
 8004d80:	61b9      	str	r1, [r7, #24]
 8004d82:	415b      	adcs	r3, r3
 8004d84:	61fb      	str	r3, [r7, #28]
 8004d86:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004d8a:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8004d8e:	f7fb fa31 	bl	80001f4 <__aeabi_uldivmod>
 8004d92:	4602      	mov	r2, r0
 8004d94:	460b      	mov	r3, r1
 8004d96:	4b6c      	ldr	r3, [pc, #432]	; (8004f48 <UART_SetConfig+0x38c>)
 8004d98:	fba3 1302 	umull	r1, r3, r3, r2
 8004d9c:	095b      	lsrs	r3, r3, #5
 8004d9e:	2164      	movs	r1, #100	; 0x64
 8004da0:	fb01 f303 	mul.w	r3, r1, r3
 8004da4:	1ad3      	subs	r3, r2, r3
 8004da6:	00db      	lsls	r3, r3, #3
 8004da8:	3332      	adds	r3, #50	; 0x32
 8004daa:	4a67      	ldr	r2, [pc, #412]	; (8004f48 <UART_SetConfig+0x38c>)
 8004dac:	fba2 2303 	umull	r2, r3, r2, r3
 8004db0:	095b      	lsrs	r3, r3, #5
 8004db2:	f003 0207 	and.w	r2, r3, #7
 8004db6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	4432      	add	r2, r6
 8004dbc:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004dbe:	e0b9      	b.n	8004f34 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004dc0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004dc2:	461c      	mov	r4, r3
 8004dc4:	f04f 0500 	mov.w	r5, #0
 8004dc8:	4622      	mov	r2, r4
 8004dca:	462b      	mov	r3, r5
 8004dcc:	1891      	adds	r1, r2, r2
 8004dce:	6139      	str	r1, [r7, #16]
 8004dd0:	415b      	adcs	r3, r3
 8004dd2:	617b      	str	r3, [r7, #20]
 8004dd4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004dd8:	1912      	adds	r2, r2, r4
 8004dda:	eb45 0303 	adc.w	r3, r5, r3
 8004dde:	f04f 0000 	mov.w	r0, #0
 8004de2:	f04f 0100 	mov.w	r1, #0
 8004de6:	00d9      	lsls	r1, r3, #3
 8004de8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004dec:	00d0      	lsls	r0, r2, #3
 8004dee:	4602      	mov	r2, r0
 8004df0:	460b      	mov	r3, r1
 8004df2:	eb12 0804 	adds.w	r8, r2, r4
 8004df6:	eb43 0905 	adc.w	r9, r3, r5
 8004dfa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004dfc:	685b      	ldr	r3, [r3, #4]
 8004dfe:	4618      	mov	r0, r3
 8004e00:	f04f 0100 	mov.w	r1, #0
 8004e04:	f04f 0200 	mov.w	r2, #0
 8004e08:	f04f 0300 	mov.w	r3, #0
 8004e0c:	008b      	lsls	r3, r1, #2
 8004e0e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004e12:	0082      	lsls	r2, r0, #2
 8004e14:	4640      	mov	r0, r8
 8004e16:	4649      	mov	r1, r9
 8004e18:	f7fb f9ec 	bl	80001f4 <__aeabi_uldivmod>
 8004e1c:	4602      	mov	r2, r0
 8004e1e:	460b      	mov	r3, r1
 8004e20:	4b49      	ldr	r3, [pc, #292]	; (8004f48 <UART_SetConfig+0x38c>)
 8004e22:	fba3 2302 	umull	r2, r3, r3, r2
 8004e26:	095b      	lsrs	r3, r3, #5
 8004e28:	011e      	lsls	r6, r3, #4
 8004e2a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004e2c:	4618      	mov	r0, r3
 8004e2e:	f04f 0100 	mov.w	r1, #0
 8004e32:	4602      	mov	r2, r0
 8004e34:	460b      	mov	r3, r1
 8004e36:	1894      	adds	r4, r2, r2
 8004e38:	60bc      	str	r4, [r7, #8]
 8004e3a:	415b      	adcs	r3, r3
 8004e3c:	60fb      	str	r3, [r7, #12]
 8004e3e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004e42:	1812      	adds	r2, r2, r0
 8004e44:	eb41 0303 	adc.w	r3, r1, r3
 8004e48:	f04f 0400 	mov.w	r4, #0
 8004e4c:	f04f 0500 	mov.w	r5, #0
 8004e50:	00dd      	lsls	r5, r3, #3
 8004e52:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004e56:	00d4      	lsls	r4, r2, #3
 8004e58:	4622      	mov	r2, r4
 8004e5a:	462b      	mov	r3, r5
 8004e5c:	1814      	adds	r4, r2, r0
 8004e5e:	64bc      	str	r4, [r7, #72]	; 0x48
 8004e60:	414b      	adcs	r3, r1
 8004e62:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004e64:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004e66:	685b      	ldr	r3, [r3, #4]
 8004e68:	4618      	mov	r0, r3
 8004e6a:	f04f 0100 	mov.w	r1, #0
 8004e6e:	f04f 0200 	mov.w	r2, #0
 8004e72:	f04f 0300 	mov.w	r3, #0
 8004e76:	008b      	lsls	r3, r1, #2
 8004e78:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004e7c:	0082      	lsls	r2, r0, #2
 8004e7e:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8004e82:	f7fb f9b7 	bl	80001f4 <__aeabi_uldivmod>
 8004e86:	4602      	mov	r2, r0
 8004e88:	460b      	mov	r3, r1
 8004e8a:	4b2f      	ldr	r3, [pc, #188]	; (8004f48 <UART_SetConfig+0x38c>)
 8004e8c:	fba3 1302 	umull	r1, r3, r3, r2
 8004e90:	095b      	lsrs	r3, r3, #5
 8004e92:	2164      	movs	r1, #100	; 0x64
 8004e94:	fb01 f303 	mul.w	r3, r1, r3
 8004e98:	1ad3      	subs	r3, r2, r3
 8004e9a:	011b      	lsls	r3, r3, #4
 8004e9c:	3332      	adds	r3, #50	; 0x32
 8004e9e:	4a2a      	ldr	r2, [pc, #168]	; (8004f48 <UART_SetConfig+0x38c>)
 8004ea0:	fba2 2303 	umull	r2, r3, r2, r3
 8004ea4:	095b      	lsrs	r3, r3, #5
 8004ea6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004eaa:	441e      	add	r6, r3
 8004eac:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004eae:	4618      	mov	r0, r3
 8004eb0:	f04f 0100 	mov.w	r1, #0
 8004eb4:	4602      	mov	r2, r0
 8004eb6:	460b      	mov	r3, r1
 8004eb8:	1894      	adds	r4, r2, r2
 8004eba:	603c      	str	r4, [r7, #0]
 8004ebc:	415b      	adcs	r3, r3
 8004ebe:	607b      	str	r3, [r7, #4]
 8004ec0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004ec4:	1812      	adds	r2, r2, r0
 8004ec6:	eb41 0303 	adc.w	r3, r1, r3
 8004eca:	f04f 0400 	mov.w	r4, #0
 8004ece:	f04f 0500 	mov.w	r5, #0
 8004ed2:	00dd      	lsls	r5, r3, #3
 8004ed4:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004ed8:	00d4      	lsls	r4, r2, #3
 8004eda:	4622      	mov	r2, r4
 8004edc:	462b      	mov	r3, r5
 8004ede:	eb12 0a00 	adds.w	sl, r2, r0
 8004ee2:	eb43 0b01 	adc.w	fp, r3, r1
 8004ee6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ee8:	685b      	ldr	r3, [r3, #4]
 8004eea:	4618      	mov	r0, r3
 8004eec:	f04f 0100 	mov.w	r1, #0
 8004ef0:	f04f 0200 	mov.w	r2, #0
 8004ef4:	f04f 0300 	mov.w	r3, #0
 8004ef8:	008b      	lsls	r3, r1, #2
 8004efa:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004efe:	0082      	lsls	r2, r0, #2
 8004f00:	4650      	mov	r0, sl
 8004f02:	4659      	mov	r1, fp
 8004f04:	f7fb f976 	bl	80001f4 <__aeabi_uldivmod>
 8004f08:	4602      	mov	r2, r0
 8004f0a:	460b      	mov	r3, r1
 8004f0c:	4b0e      	ldr	r3, [pc, #56]	; (8004f48 <UART_SetConfig+0x38c>)
 8004f0e:	fba3 1302 	umull	r1, r3, r3, r2
 8004f12:	095b      	lsrs	r3, r3, #5
 8004f14:	2164      	movs	r1, #100	; 0x64
 8004f16:	fb01 f303 	mul.w	r3, r1, r3
 8004f1a:	1ad3      	subs	r3, r2, r3
 8004f1c:	011b      	lsls	r3, r3, #4
 8004f1e:	3332      	adds	r3, #50	; 0x32
 8004f20:	4a09      	ldr	r2, [pc, #36]	; (8004f48 <UART_SetConfig+0x38c>)
 8004f22:	fba2 2303 	umull	r2, r3, r2, r3
 8004f26:	095b      	lsrs	r3, r3, #5
 8004f28:	f003 020f 	and.w	r2, r3, #15
 8004f2c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	4432      	add	r2, r6
 8004f32:	609a      	str	r2, [r3, #8]
}
 8004f34:	bf00      	nop
 8004f36:	377c      	adds	r7, #124	; 0x7c
 8004f38:	46bd      	mov	sp, r7
 8004f3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004f3e:	bf00      	nop
 8004f40:	40011000 	.word	0x40011000
 8004f44:	40011400 	.word	0x40011400
 8004f48:	51eb851f 	.word	0x51eb851f

08004f4c <FMC_NORSRAM_Init>:
  * @param  Device Pointer to NORSRAM device instance
  * @param  Init Pointer to NORSRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef  FMC_NORSRAM_Init(FMC_NORSRAM_TypeDef *Device, FMC_NORSRAM_InitTypeDef* Init)
{ 
 8004f4c:	b480      	push	{r7}
 8004f4e:	b085      	sub	sp, #20
 8004f50:	af00      	add	r7, sp, #0
 8004f52:	6078      	str	r0, [r7, #4]
 8004f54:	6039      	str	r1, [r7, #0]
  uint32_t tmpr = 0U;
 8004f56:	2300      	movs	r3, #0
 8004f58:	60fb      	str	r3, [r7, #12]
#if defined (STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx)
  assert_param(IS_FMC_WRITE_FIFO(Init->WriteFifo));
#endif /* STM32F446xx || STM32F469xx || STM32F479xx */

  /* Get the BTCR register value */
  tmpr = Device->BTCR[Init->NSBank];
 8004f5a:	683b      	ldr	r3, [r7, #0]
 8004f5c:	681a      	ldr	r2, [r3, #0]
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004f64:	60fb      	str	r3, [r7, #12]
                    Init->WriteBurst           |\
                    Init->ContinuousClock);
#else /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) */
  /* Clear MBKEN, MUXEN, MTYP, MWID, FACCEN, BURSTEN, WAITPOL, CPSIZE, WAITCFG, WREN,
           WAITEN, EXTMOD, ASYNCWAIT, CBURSTRW, CCLKEN and WFDIS bits */
  tmpr &= ((uint32_t)~(FMC_BCR1_MBKEN     | FMC_BCR1_MUXEN    | FMC_BCR1_MTYP     | \
 8004f66:	68fa      	ldr	r2, [r7, #12]
 8004f68:	4b2f      	ldr	r3, [pc, #188]	; (8005028 <FMC_NORSRAM_Init+0xdc>)
 8004f6a:	4013      	ands	r3, r2
 8004f6c:	60fb      	str	r3, [r7, #12]
                       FMC_BCR1_WREN      | FMC_BCR1_WAITEN   | FMC_BCR1_EXTMOD   | \
                       FMC_BCR1_ASYNCWAIT | FMC_BCR1_CBURSTRW | FMC_BCR1_CCLKEN   | \
                       FMC_BCR1_WFDIS));
  
  /* Set NORSRAM device control parameters */
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 8004f6e:	683b      	ldr	r3, [r7, #0]
 8004f70:	685a      	ldr	r2, [r3, #4]
                    Init->MemoryType           |\
 8004f72:	683b      	ldr	r3, [r7, #0]
 8004f74:	689b      	ldr	r3, [r3, #8]
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 8004f76:	431a      	orrs	r2, r3
                    Init->MemoryDataWidth      |\
 8004f78:	683b      	ldr	r3, [r7, #0]
 8004f7a:	68db      	ldr	r3, [r3, #12]
                    Init->MemoryType           |\
 8004f7c:	431a      	orrs	r2, r3
                    Init->BurstAccessMode      |\
 8004f7e:	683b      	ldr	r3, [r7, #0]
 8004f80:	691b      	ldr	r3, [r3, #16]
                    Init->MemoryDataWidth      |\
 8004f82:	431a      	orrs	r2, r3
                    Init->WaitSignalPolarity   |\
 8004f84:	683b      	ldr	r3, [r7, #0]
 8004f86:	695b      	ldr	r3, [r3, #20]
                    Init->BurstAccessMode      |\
 8004f88:	431a      	orrs	r2, r3
                    Init->WaitSignalActive     |\
 8004f8a:	683b      	ldr	r3, [r7, #0]
 8004f8c:	69db      	ldr	r3, [r3, #28]
                    Init->WaitSignalPolarity   |\
 8004f8e:	431a      	orrs	r2, r3
                    Init->WriteOperation       |\
 8004f90:	683b      	ldr	r3, [r7, #0]
 8004f92:	6a1b      	ldr	r3, [r3, #32]
                    Init->WaitSignalActive     |\
 8004f94:	431a      	orrs	r2, r3
                    Init->WaitSignal           |\
 8004f96:	683b      	ldr	r3, [r7, #0]
 8004f98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                    Init->WriteOperation       |\
 8004f9a:	431a      	orrs	r2, r3
                    Init->ExtendedMode         |\
 8004f9c:	683b      	ldr	r3, [r7, #0]
 8004f9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                    Init->WaitSignal           |\
 8004fa0:	431a      	orrs	r2, r3
                    Init->AsynchronousWait     |\
 8004fa2:	683b      	ldr	r3, [r7, #0]
 8004fa4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                    Init->ExtendedMode         |\
 8004fa6:	431a      	orrs	r2, r3
                    Init->WriteBurst           |\
 8004fa8:	683b      	ldr	r3, [r7, #0]
 8004faa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                    Init->AsynchronousWait     |\
 8004fac:	431a      	orrs	r2, r3
                    Init->ContinuousClock      |\
 8004fae:	683b      	ldr	r3, [r7, #0]
 8004fb0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
                    Init->WriteBurst           |\
 8004fb2:	431a      	orrs	r2, r3
                    Init->PageSize             |\
 8004fb4:	683b      	ldr	r3, [r7, #0]
 8004fb6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                    Init->ContinuousClock      |\
 8004fb8:	431a      	orrs	r2, r3
                    Init->WriteFifo);
 8004fba:	683b      	ldr	r3, [r7, #0]
 8004fbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                    Init->PageSize             |\
 8004fbe:	4313      	orrs	r3, r2
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 8004fc0:	68fa      	ldr	r2, [r7, #12]
 8004fc2:	4313      	orrs	r3, r2
 8004fc4:	60fb      	str	r3, [r7, #12]
#endif /*  defined(STM32F427xx) || defined(STM32F437xx) || defined(STM32F429xx) || defined(STM32F439xx) */
                    
  if(Init->MemoryType == FMC_MEMORY_TYPE_NOR)
 8004fc6:	683b      	ldr	r3, [r7, #0]
 8004fc8:	689b      	ldr	r3, [r3, #8]
 8004fca:	2b08      	cmp	r3, #8
 8004fcc:	d103      	bne.n	8004fd6 <FMC_NORSRAM_Init+0x8a>
  {
    tmpr |= (uint32_t)FMC_NORSRAM_FLASH_ACCESS_ENABLE;
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004fd4:	60fb      	str	r3, [r7, #12]
  }
  
  Device->BTCR[Init->NSBank] = tmpr;
 8004fd6:	683b      	ldr	r3, [r7, #0]
 8004fd8:	681a      	ldr	r2, [r3, #0]
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	68f9      	ldr	r1, [r7, #12]
 8004fde:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Configure synchronous mode when Continuous clock is enabled for bank2..4 */
  if((Init->ContinuousClock == FMC_CONTINUOUS_CLOCK_SYNC_ASYNC) && (Init->NSBank != FMC_NORSRAM_BANK1))
 8004fe2:	683b      	ldr	r3, [r7, #0]
 8004fe4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004fe6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004fea:	d10a      	bne.n	8005002 <FMC_NORSRAM_Init+0xb6>
 8004fec:	683b      	ldr	r3, [r7, #0]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d006      	beq.n	8005002 <FMC_NORSRAM_Init+0xb6>
  { 
    Device->BTCR[FMC_NORSRAM_BANK1] |= (uint32_t)(Init->ContinuousClock);
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681a      	ldr	r2, [r3, #0]
 8004ff8:	683b      	ldr	r3, [r7, #0]
 8004ffa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ffc:	431a      	orrs	r2, r3
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	601a      	str	r2, [r3, #0]
  }

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx)
  if(Init->NSBank != FMC_NORSRAM_BANK1)
 8005002:	683b      	ldr	r3, [r7, #0]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	2b00      	cmp	r3, #0
 8005008:	d006      	beq.n	8005018 <FMC_NORSRAM_Init+0xcc>
  {
    Device->BTCR[FMC_NORSRAM_BANK1] |= (uint32_t)(Init->WriteFifo);              
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681a      	ldr	r2, [r3, #0]
 800500e:	683b      	ldr	r3, [r7, #0]
 8005010:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005012:	431a      	orrs	r2, r3
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F446xx || STM32F469xx || STM32F479xx */
  
  return HAL_OK;
 8005018:	2300      	movs	r3, #0
}
 800501a:	4618      	mov	r0, r3
 800501c:	3714      	adds	r7, #20
 800501e:	46bd      	mov	sp, r7
 8005020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005024:	4770      	bx	lr
 8005026:	bf00      	nop
 8005028:	ffc00480 	.word	0xffc00480

0800502c <FMC_NORSRAM_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NORSRAM_Timing_Init(FMC_NORSRAM_TypeDef *Device, FMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800502c:	b480      	push	{r7}
 800502e:	b087      	sub	sp, #28
 8005030:	af00      	add	r7, sp, #0
 8005032:	60f8      	str	r0, [r7, #12]
 8005034:	60b9      	str	r1, [r7, #8]
 8005036:	607a      	str	r2, [r7, #4]
  uint32_t tmpr = 0U;
 8005038:	2300      	movs	r3, #0
 800503a:	617b      	str	r3, [r7, #20]
  assert_param(IS_FMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FMC_NORSRAM_BANK(Bank));
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Bank + 1U];
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	1c5a      	adds	r2, r3, #1
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005046:	617b      	str	r3, [r7, #20]

  /* Clear ADDSET, ADDHLD, DATAST, BUSTURN, CLKDIV, DATLAT and ACCMOD bits */
  tmpr &= ((uint32_t)~(FMC_BTR1_ADDSET  | FMC_BTR1_ADDHLD | FMC_BTR1_DATAST | \
 8005048:	697b      	ldr	r3, [r7, #20]
 800504a:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 800504e:	617b      	str	r3, [r7, #20]
                       FMC_BTR1_BUSTURN | FMC_BTR1_CLKDIV | FMC_BTR1_DATLAT | \
                       FMC_BTR1_ACCMOD));
  
  /* Set FMC_NORSRAM device timing parameters */  
  tmpr |= (uint32_t)(Timing->AddressSetupTime                   |\
 8005050:	68bb      	ldr	r3, [r7, #8]
 8005052:	681a      	ldr	r2, [r3, #0]
                    ((Timing->AddressHoldTime) << 4U)           |\
 8005054:	68bb      	ldr	r3, [r7, #8]
 8005056:	685b      	ldr	r3, [r3, #4]
 8005058:	011b      	lsls	r3, r3, #4
  tmpr |= (uint32_t)(Timing->AddressSetupTime                   |\
 800505a:	431a      	orrs	r2, r3
                    ((Timing->DataSetupTime) << 8U)             |\
 800505c:	68bb      	ldr	r3, [r7, #8]
 800505e:	689b      	ldr	r3, [r3, #8]
 8005060:	021b      	lsls	r3, r3, #8
                    ((Timing->AddressHoldTime) << 4U)           |\
 8005062:	431a      	orrs	r2, r3
                    ((Timing->BusTurnAroundDuration) << 16U)    |\
 8005064:	68bb      	ldr	r3, [r7, #8]
 8005066:	68db      	ldr	r3, [r3, #12]
 8005068:	041b      	lsls	r3, r3, #16
                    ((Timing->DataSetupTime) << 8U)             |\
 800506a:	431a      	orrs	r2, r3
                    (((Timing->CLKDivision) - 1U) << 20U)         |\
 800506c:	68bb      	ldr	r3, [r7, #8]
 800506e:	691b      	ldr	r3, [r3, #16]
 8005070:	3b01      	subs	r3, #1
 8005072:	051b      	lsls	r3, r3, #20
                    ((Timing->BusTurnAroundDuration) << 16U)    |\
 8005074:	431a      	orrs	r2, r3
                    (((Timing->DataLatency) - 2U) << 24U)         |\
 8005076:	68bb      	ldr	r3, [r7, #8]
 8005078:	695b      	ldr	r3, [r3, #20]
 800507a:	3b02      	subs	r3, #2
 800507c:	061b      	lsls	r3, r3, #24
                    (((Timing->CLKDivision) - 1U) << 20U)         |\
 800507e:	431a      	orrs	r2, r3
                    (Timing->AccessMode));
 8005080:	68bb      	ldr	r3, [r7, #8]
 8005082:	699b      	ldr	r3, [r3, #24]
  tmpr |= (uint32_t)(Timing->AddressSetupTime                   |\
 8005084:	4313      	orrs	r3, r2
 8005086:	697a      	ldr	r2, [r7, #20]
 8005088:	4313      	orrs	r3, r2
 800508a:	617b      	str	r3, [r7, #20]
  
  Device->BTCR[Bank + 1U] = tmpr;
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	1c5a      	adds	r2, r3, #1
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	6979      	ldr	r1, [r7, #20]
 8005094:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  
  /* Configure Clock division value (in NORSRAM bank 1) when continuous clock is enabled */
  if(HAL_IS_BIT_SET(Device->BTCR[FMC_NORSRAM_BANK1], FMC_BCR1_CCLKEN))
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80050a0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80050a4:	d10e      	bne.n	80050c4 <FMC_NORSRAM_Timing_Init+0x98>
  {
    tmpr = (uint32_t)(Device->BTCR[FMC_NORSRAM_BANK1 + 1U] & ~(0x0FU << 20U)); 
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	685b      	ldr	r3, [r3, #4]
 80050aa:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80050ae:	617b      	str	r3, [r7, #20]
    tmpr |= (uint32_t)(((Timing->CLKDivision) - 1U) << 20U);
 80050b0:	68bb      	ldr	r3, [r7, #8]
 80050b2:	691b      	ldr	r3, [r3, #16]
 80050b4:	3b01      	subs	r3, #1
 80050b6:	051b      	lsls	r3, r3, #20
 80050b8:	697a      	ldr	r2, [r7, #20]
 80050ba:	4313      	orrs	r3, r2
 80050bc:	617b      	str	r3, [r7, #20]
    Device->BTCR[FMC_NORSRAM_BANK1 + 1U] = tmpr;
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	697a      	ldr	r2, [r7, #20]
 80050c2:	605a      	str	r2, [r3, #4]
  }  
  
  return HAL_OK;   
 80050c4:	2300      	movs	r3, #0
}
 80050c6:	4618      	mov	r0, r3
 80050c8:	371c      	adds	r7, #28
 80050ca:	46bd      	mov	sp, r7
 80050cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d0:	4770      	bx	lr
	...

080050d4 <FMC_NORSRAM_Extended_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef  FMC_NORSRAM_Extended_Timing_Init(FMC_NORSRAM_EXTENDED_TypeDef *Device, FMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank, uint32_t ExtendedMode)
{  
 80050d4:	b480      	push	{r7}
 80050d6:	b087      	sub	sp, #28
 80050d8:	af00      	add	r7, sp, #0
 80050da:	60f8      	str	r0, [r7, #12]
 80050dc:	60b9      	str	r1, [r7, #8]
 80050de:	607a      	str	r2, [r7, #4]
 80050e0:	603b      	str	r3, [r7, #0]
  uint32_t tmpr = 0U;
 80050e2:	2300      	movs	r3, #0
 80050e4:	617b      	str	r3, [r7, #20]
 
  /* Check the parameters */
  assert_param(IS_FMC_EXTENDED_MODE(ExtendedMode));
  
  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if(ExtendedMode == FMC_EXTENDED_MODE_ENABLE)
 80050e6:	683b      	ldr	r3, [r7, #0]
 80050e8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80050ec:	d122      	bne.n	8005134 <FMC_NORSRAM_Extended_Timing_Init+0x60>
    assert_param(IS_FMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FMC_NORSRAM_BANK(Bank));  
    
    /* Get the BWTR register value */
    tmpr = Device->BWTR[Bank];
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	687a      	ldr	r2, [r7, #4]
 80050f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80050f6:	617b      	str	r3, [r7, #20]

    /* Clear ADDSET, ADDHLD, DATAST, BUSTURN and ACCMOD bits */
    tmpr &= ((uint32_t)~(FMC_BWTR1_ADDSET  | FMC_BWTR1_ADDHLD | FMC_BWTR1_DATAST | \
 80050f8:	697a      	ldr	r2, [r7, #20]
 80050fa:	4b15      	ldr	r3, [pc, #84]	; (8005150 <FMC_NORSRAM_Extended_Timing_Init+0x7c>)
 80050fc:	4013      	ands	r3, r2
 80050fe:	617b      	str	r3, [r7, #20]
                         FMC_BWTR1_BUSTURN | FMC_BWTR1_ACCMOD));
    
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8005100:	68bb      	ldr	r3, [r7, #8]
 8005102:	681a      	ldr	r2, [r3, #0]
                      ((Timing->AddressHoldTime) << 4U)          |\
 8005104:	68bb      	ldr	r3, [r7, #8]
 8005106:	685b      	ldr	r3, [r3, #4]
 8005108:	011b      	lsls	r3, r3, #4
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800510a:	431a      	orrs	r2, r3
                      ((Timing->DataSetupTime) << 8U)            |\
 800510c:	68bb      	ldr	r3, [r7, #8]
 800510e:	689b      	ldr	r3, [r3, #8]
 8005110:	021b      	lsls	r3, r3, #8
                      ((Timing->AddressHoldTime) << 4U)          |\
 8005112:	431a      	orrs	r2, r3
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 8005114:	68bb      	ldr	r3, [r7, #8]
 8005116:	68db      	ldr	r3, [r3, #12]
 8005118:	041b      	lsls	r3, r3, #16
                      ((Timing->DataSetupTime) << 8U)            |\
 800511a:	431a      	orrs	r2, r3
                      (Timing->AccessMode));
 800511c:	68bb      	ldr	r3, [r7, #8]
 800511e:	699b      	ldr	r3, [r3, #24]
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 8005120:	4313      	orrs	r3, r2
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8005122:	697a      	ldr	r2, [r7, #20]
 8005124:	4313      	orrs	r3, r2
 8005126:	617b      	str	r3, [r7, #20]

    Device->BWTR[Bank] = tmpr;
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	687a      	ldr	r2, [r7, #4]
 800512c:	6979      	ldr	r1, [r7, #20]
 800512e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8005132:	e005      	b.n	8005140 <FMC_NORSRAM_Extended_Timing_Init+0x6c>
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	687a      	ldr	r2, [r7, #4]
 8005138:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 800513c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }   
  
  return HAL_OK;  
 8005140:	2300      	movs	r3, #0
}
 8005142:	4618      	mov	r0, r3
 8005144:	371c      	adds	r7, #28
 8005146:	46bd      	mov	sp, r7
 8005148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800514c:	4770      	bx	lr
 800514e:	bf00      	nop
 8005150:	cff00000 	.word	0xcff00000

08005154 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005154:	b084      	sub	sp, #16
 8005156:	b580      	push	{r7, lr}
 8005158:	b084      	sub	sp, #16
 800515a:	af00      	add	r7, sp, #0
 800515c:	6078      	str	r0, [r7, #4]
 800515e:	f107 001c 	add.w	r0, r7, #28
 8005162:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005166:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005168:	2b01      	cmp	r3, #1
 800516a:	d122      	bne.n	80051b2 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005170:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	68db      	ldr	r3, [r3, #12]
 800517c:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8005180:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005184:	687a      	ldr	r2, [r7, #4]
 8005186:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	68db      	ldr	r3, [r3, #12]
 800518c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005194:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005196:	2b01      	cmp	r3, #1
 8005198:	d105      	bne.n	80051a6 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	68db      	ldr	r3, [r3, #12]
 800519e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80051a6:	6878      	ldr	r0, [r7, #4]
 80051a8:	f001 fb16 	bl	80067d8 <USB_CoreReset>
 80051ac:	4603      	mov	r3, r0
 80051ae:	73fb      	strb	r3, [r7, #15]
 80051b0:	e01a      	b.n	80051e8 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	68db      	ldr	r3, [r3, #12]
 80051b6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80051be:	6878      	ldr	r0, [r7, #4]
 80051c0:	f001 fb0a 	bl	80067d8 <USB_CoreReset>
 80051c4:	4603      	mov	r3, r0
 80051c6:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80051c8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d106      	bne.n	80051dc <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051d2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	639a      	str	r2, [r3, #56]	; 0x38
 80051da:	e005      	b.n	80051e8 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051e0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80051e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051ea:	2b01      	cmp	r3, #1
 80051ec:	d10b      	bne.n	8005206 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	689b      	ldr	r3, [r3, #8]
 80051f2:	f043 0206 	orr.w	r2, r3, #6
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	689b      	ldr	r3, [r3, #8]
 80051fe:	f043 0220 	orr.w	r2, r3, #32
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005206:	7bfb      	ldrb	r3, [r7, #15]
}
 8005208:	4618      	mov	r0, r3
 800520a:	3710      	adds	r7, #16
 800520c:	46bd      	mov	sp, r7
 800520e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005212:	b004      	add	sp, #16
 8005214:	4770      	bx	lr
	...

08005218 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8005218:	b480      	push	{r7}
 800521a:	b087      	sub	sp, #28
 800521c:	af00      	add	r7, sp, #0
 800521e:	60f8      	str	r0, [r7, #12]
 8005220:	60b9      	str	r1, [r7, #8]
 8005222:	4613      	mov	r3, r2
 8005224:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8005226:	79fb      	ldrb	r3, [r7, #7]
 8005228:	2b02      	cmp	r3, #2
 800522a:	d165      	bne.n	80052f8 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800522c:	68bb      	ldr	r3, [r7, #8]
 800522e:	4a41      	ldr	r2, [pc, #260]	; (8005334 <USB_SetTurnaroundTime+0x11c>)
 8005230:	4293      	cmp	r3, r2
 8005232:	d906      	bls.n	8005242 <USB_SetTurnaroundTime+0x2a>
 8005234:	68bb      	ldr	r3, [r7, #8]
 8005236:	4a40      	ldr	r2, [pc, #256]	; (8005338 <USB_SetTurnaroundTime+0x120>)
 8005238:	4293      	cmp	r3, r2
 800523a:	d202      	bcs.n	8005242 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800523c:	230f      	movs	r3, #15
 800523e:	617b      	str	r3, [r7, #20]
 8005240:	e062      	b.n	8005308 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8005242:	68bb      	ldr	r3, [r7, #8]
 8005244:	4a3c      	ldr	r2, [pc, #240]	; (8005338 <USB_SetTurnaroundTime+0x120>)
 8005246:	4293      	cmp	r3, r2
 8005248:	d306      	bcc.n	8005258 <USB_SetTurnaroundTime+0x40>
 800524a:	68bb      	ldr	r3, [r7, #8]
 800524c:	4a3b      	ldr	r2, [pc, #236]	; (800533c <USB_SetTurnaroundTime+0x124>)
 800524e:	4293      	cmp	r3, r2
 8005250:	d202      	bcs.n	8005258 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8005252:	230e      	movs	r3, #14
 8005254:	617b      	str	r3, [r7, #20]
 8005256:	e057      	b.n	8005308 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8005258:	68bb      	ldr	r3, [r7, #8]
 800525a:	4a38      	ldr	r2, [pc, #224]	; (800533c <USB_SetTurnaroundTime+0x124>)
 800525c:	4293      	cmp	r3, r2
 800525e:	d306      	bcc.n	800526e <USB_SetTurnaroundTime+0x56>
 8005260:	68bb      	ldr	r3, [r7, #8]
 8005262:	4a37      	ldr	r2, [pc, #220]	; (8005340 <USB_SetTurnaroundTime+0x128>)
 8005264:	4293      	cmp	r3, r2
 8005266:	d202      	bcs.n	800526e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8005268:	230d      	movs	r3, #13
 800526a:	617b      	str	r3, [r7, #20]
 800526c:	e04c      	b.n	8005308 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800526e:	68bb      	ldr	r3, [r7, #8]
 8005270:	4a33      	ldr	r2, [pc, #204]	; (8005340 <USB_SetTurnaroundTime+0x128>)
 8005272:	4293      	cmp	r3, r2
 8005274:	d306      	bcc.n	8005284 <USB_SetTurnaroundTime+0x6c>
 8005276:	68bb      	ldr	r3, [r7, #8]
 8005278:	4a32      	ldr	r2, [pc, #200]	; (8005344 <USB_SetTurnaroundTime+0x12c>)
 800527a:	4293      	cmp	r3, r2
 800527c:	d802      	bhi.n	8005284 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800527e:	230c      	movs	r3, #12
 8005280:	617b      	str	r3, [r7, #20]
 8005282:	e041      	b.n	8005308 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8005284:	68bb      	ldr	r3, [r7, #8]
 8005286:	4a2f      	ldr	r2, [pc, #188]	; (8005344 <USB_SetTurnaroundTime+0x12c>)
 8005288:	4293      	cmp	r3, r2
 800528a:	d906      	bls.n	800529a <USB_SetTurnaroundTime+0x82>
 800528c:	68bb      	ldr	r3, [r7, #8]
 800528e:	4a2e      	ldr	r2, [pc, #184]	; (8005348 <USB_SetTurnaroundTime+0x130>)
 8005290:	4293      	cmp	r3, r2
 8005292:	d802      	bhi.n	800529a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8005294:	230b      	movs	r3, #11
 8005296:	617b      	str	r3, [r7, #20]
 8005298:	e036      	b.n	8005308 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800529a:	68bb      	ldr	r3, [r7, #8]
 800529c:	4a2a      	ldr	r2, [pc, #168]	; (8005348 <USB_SetTurnaroundTime+0x130>)
 800529e:	4293      	cmp	r3, r2
 80052a0:	d906      	bls.n	80052b0 <USB_SetTurnaroundTime+0x98>
 80052a2:	68bb      	ldr	r3, [r7, #8]
 80052a4:	4a29      	ldr	r2, [pc, #164]	; (800534c <USB_SetTurnaroundTime+0x134>)
 80052a6:	4293      	cmp	r3, r2
 80052a8:	d802      	bhi.n	80052b0 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80052aa:	230a      	movs	r3, #10
 80052ac:	617b      	str	r3, [r7, #20]
 80052ae:	e02b      	b.n	8005308 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80052b0:	68bb      	ldr	r3, [r7, #8]
 80052b2:	4a26      	ldr	r2, [pc, #152]	; (800534c <USB_SetTurnaroundTime+0x134>)
 80052b4:	4293      	cmp	r3, r2
 80052b6:	d906      	bls.n	80052c6 <USB_SetTurnaroundTime+0xae>
 80052b8:	68bb      	ldr	r3, [r7, #8]
 80052ba:	4a25      	ldr	r2, [pc, #148]	; (8005350 <USB_SetTurnaroundTime+0x138>)
 80052bc:	4293      	cmp	r3, r2
 80052be:	d202      	bcs.n	80052c6 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80052c0:	2309      	movs	r3, #9
 80052c2:	617b      	str	r3, [r7, #20]
 80052c4:	e020      	b.n	8005308 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80052c6:	68bb      	ldr	r3, [r7, #8]
 80052c8:	4a21      	ldr	r2, [pc, #132]	; (8005350 <USB_SetTurnaroundTime+0x138>)
 80052ca:	4293      	cmp	r3, r2
 80052cc:	d306      	bcc.n	80052dc <USB_SetTurnaroundTime+0xc4>
 80052ce:	68bb      	ldr	r3, [r7, #8]
 80052d0:	4a20      	ldr	r2, [pc, #128]	; (8005354 <USB_SetTurnaroundTime+0x13c>)
 80052d2:	4293      	cmp	r3, r2
 80052d4:	d802      	bhi.n	80052dc <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80052d6:	2308      	movs	r3, #8
 80052d8:	617b      	str	r3, [r7, #20]
 80052da:	e015      	b.n	8005308 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80052dc:	68bb      	ldr	r3, [r7, #8]
 80052de:	4a1d      	ldr	r2, [pc, #116]	; (8005354 <USB_SetTurnaroundTime+0x13c>)
 80052e0:	4293      	cmp	r3, r2
 80052e2:	d906      	bls.n	80052f2 <USB_SetTurnaroundTime+0xda>
 80052e4:	68bb      	ldr	r3, [r7, #8]
 80052e6:	4a1c      	ldr	r2, [pc, #112]	; (8005358 <USB_SetTurnaroundTime+0x140>)
 80052e8:	4293      	cmp	r3, r2
 80052ea:	d202      	bcs.n	80052f2 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80052ec:	2307      	movs	r3, #7
 80052ee:	617b      	str	r3, [r7, #20]
 80052f0:	e00a      	b.n	8005308 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80052f2:	2306      	movs	r3, #6
 80052f4:	617b      	str	r3, [r7, #20]
 80052f6:	e007      	b.n	8005308 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80052f8:	79fb      	ldrb	r3, [r7, #7]
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d102      	bne.n	8005304 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80052fe:	2309      	movs	r3, #9
 8005300:	617b      	str	r3, [r7, #20]
 8005302:	e001      	b.n	8005308 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8005304:	2309      	movs	r3, #9
 8005306:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	68db      	ldr	r3, [r3, #12]
 800530c:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	68da      	ldr	r2, [r3, #12]
 8005318:	697b      	ldr	r3, [r7, #20]
 800531a:	029b      	lsls	r3, r3, #10
 800531c:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8005320:	431a      	orrs	r2, r3
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005326:	2300      	movs	r3, #0
}
 8005328:	4618      	mov	r0, r3
 800532a:	371c      	adds	r7, #28
 800532c:	46bd      	mov	sp, r7
 800532e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005332:	4770      	bx	lr
 8005334:	00d8acbf 	.word	0x00d8acbf
 8005338:	00e4e1c0 	.word	0x00e4e1c0
 800533c:	00f42400 	.word	0x00f42400
 8005340:	01067380 	.word	0x01067380
 8005344:	011a499f 	.word	0x011a499f
 8005348:	01312cff 	.word	0x01312cff
 800534c:	014ca43f 	.word	0x014ca43f
 8005350:	016e3600 	.word	0x016e3600
 8005354:	01a6ab1f 	.word	0x01a6ab1f
 8005358:	01e84800 	.word	0x01e84800

0800535c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800535c:	b480      	push	{r7}
 800535e:	b083      	sub	sp, #12
 8005360:	af00      	add	r7, sp, #0
 8005362:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	689b      	ldr	r3, [r3, #8]
 8005368:	f043 0201 	orr.w	r2, r3, #1
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005370:	2300      	movs	r3, #0
}
 8005372:	4618      	mov	r0, r3
 8005374:	370c      	adds	r7, #12
 8005376:	46bd      	mov	sp, r7
 8005378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800537c:	4770      	bx	lr

0800537e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800537e:	b480      	push	{r7}
 8005380:	b083      	sub	sp, #12
 8005382:	af00      	add	r7, sp, #0
 8005384:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	689b      	ldr	r3, [r3, #8]
 800538a:	f023 0201 	bic.w	r2, r3, #1
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005392:	2300      	movs	r3, #0
}
 8005394:	4618      	mov	r0, r3
 8005396:	370c      	adds	r7, #12
 8005398:	46bd      	mov	sp, r7
 800539a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800539e:	4770      	bx	lr

080053a0 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80053a0:	b580      	push	{r7, lr}
 80053a2:	b084      	sub	sp, #16
 80053a4:	af00      	add	r7, sp, #0
 80053a6:	6078      	str	r0, [r7, #4]
 80053a8:	460b      	mov	r3, r1
 80053aa:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80053ac:	2300      	movs	r3, #0
 80053ae:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	68db      	ldr	r3, [r3, #12]
 80053b4:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80053bc:	78fb      	ldrb	r3, [r7, #3]
 80053be:	2b01      	cmp	r3, #1
 80053c0:	d115      	bne.n	80053ee <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	68db      	ldr	r3, [r3, #12]
 80053c6:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80053ce:	2001      	movs	r0, #1
 80053d0:	f7fb fe5a 	bl	8001088 <HAL_Delay>
      ms++;
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	3301      	adds	r3, #1
 80053d8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80053da:	6878      	ldr	r0, [r7, #4]
 80053dc:	f001 f96c 	bl	80066b8 <USB_GetMode>
 80053e0:	4603      	mov	r3, r0
 80053e2:	2b01      	cmp	r3, #1
 80053e4:	d01e      	beq.n	8005424 <USB_SetCurrentMode+0x84>
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	2b31      	cmp	r3, #49	; 0x31
 80053ea:	d9f0      	bls.n	80053ce <USB_SetCurrentMode+0x2e>
 80053ec:	e01a      	b.n	8005424 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80053ee:	78fb      	ldrb	r3, [r7, #3]
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d115      	bne.n	8005420 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	68db      	ldr	r3, [r3, #12]
 80053f8:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005400:	2001      	movs	r0, #1
 8005402:	f7fb fe41 	bl	8001088 <HAL_Delay>
      ms++;
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	3301      	adds	r3, #1
 800540a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800540c:	6878      	ldr	r0, [r7, #4]
 800540e:	f001 f953 	bl	80066b8 <USB_GetMode>
 8005412:	4603      	mov	r3, r0
 8005414:	2b00      	cmp	r3, #0
 8005416:	d005      	beq.n	8005424 <USB_SetCurrentMode+0x84>
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	2b31      	cmp	r3, #49	; 0x31
 800541c:	d9f0      	bls.n	8005400 <USB_SetCurrentMode+0x60>
 800541e:	e001      	b.n	8005424 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005420:	2301      	movs	r3, #1
 8005422:	e005      	b.n	8005430 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	2b32      	cmp	r3, #50	; 0x32
 8005428:	d101      	bne.n	800542e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800542a:	2301      	movs	r3, #1
 800542c:	e000      	b.n	8005430 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800542e:	2300      	movs	r3, #0
}
 8005430:	4618      	mov	r0, r3
 8005432:	3710      	adds	r7, #16
 8005434:	46bd      	mov	sp, r7
 8005436:	bd80      	pop	{r7, pc}

08005438 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005438:	b084      	sub	sp, #16
 800543a:	b580      	push	{r7, lr}
 800543c:	b086      	sub	sp, #24
 800543e:	af00      	add	r7, sp, #0
 8005440:	6078      	str	r0, [r7, #4]
 8005442:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8005446:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800544a:	2300      	movs	r3, #0
 800544c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8005452:	2300      	movs	r3, #0
 8005454:	613b      	str	r3, [r7, #16]
 8005456:	e009      	b.n	800546c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005458:	687a      	ldr	r2, [r7, #4]
 800545a:	693b      	ldr	r3, [r7, #16]
 800545c:	3340      	adds	r3, #64	; 0x40
 800545e:	009b      	lsls	r3, r3, #2
 8005460:	4413      	add	r3, r2
 8005462:	2200      	movs	r2, #0
 8005464:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8005466:	693b      	ldr	r3, [r7, #16]
 8005468:	3301      	adds	r3, #1
 800546a:	613b      	str	r3, [r7, #16]
 800546c:	693b      	ldr	r3, [r7, #16]
 800546e:	2b0e      	cmp	r3, #14
 8005470:	d9f2      	bls.n	8005458 <USB_DevInit+0x20>
  }

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8005472:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005474:	2b00      	cmp	r3, #0
 8005476:	d11c      	bne.n	80054b2 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800547e:	685b      	ldr	r3, [r3, #4]
 8005480:	68fa      	ldr	r2, [r7, #12]
 8005482:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005486:	f043 0302 	orr.w	r3, r3, #2
 800548a:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005490:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	601a      	str	r2, [r3, #0]
 80054b0:	e005      	b.n	80054be <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054b6:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80054c4:	461a      	mov	r2, r3
 80054c6:	2300      	movs	r3, #0
 80054c8:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80054d0:	4619      	mov	r1, r3
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80054d8:	461a      	mov	r2, r3
 80054da:	680b      	ldr	r3, [r1, #0]
 80054dc:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80054de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054e0:	2b01      	cmp	r3, #1
 80054e2:	d10c      	bne.n	80054fe <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80054e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d104      	bne.n	80054f4 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80054ea:	2100      	movs	r1, #0
 80054ec:	6878      	ldr	r0, [r7, #4]
 80054ee:	f000 f945 	bl	800577c <USB_SetDevSpeed>
 80054f2:	e008      	b.n	8005506 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80054f4:	2101      	movs	r1, #1
 80054f6:	6878      	ldr	r0, [r7, #4]
 80054f8:	f000 f940 	bl	800577c <USB_SetDevSpeed>
 80054fc:	e003      	b.n	8005506 <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80054fe:	2103      	movs	r1, #3
 8005500:	6878      	ldr	r0, [r7, #4]
 8005502:	f000 f93b 	bl	800577c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005506:	2110      	movs	r1, #16
 8005508:	6878      	ldr	r0, [r7, #4]
 800550a:	f000 f8f3 	bl	80056f4 <USB_FlushTxFifo>
 800550e:	4603      	mov	r3, r0
 8005510:	2b00      	cmp	r3, #0
 8005512:	d001      	beq.n	8005518 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8005514:	2301      	movs	r3, #1
 8005516:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005518:	6878      	ldr	r0, [r7, #4]
 800551a:	f000 f90f 	bl	800573c <USB_FlushRxFifo>
 800551e:	4603      	mov	r3, r0
 8005520:	2b00      	cmp	r3, #0
 8005522:	d001      	beq.n	8005528 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8005524:	2301      	movs	r3, #1
 8005526:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800552e:	461a      	mov	r2, r3
 8005530:	2300      	movs	r3, #0
 8005532:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800553a:	461a      	mov	r2, r3
 800553c:	2300      	movs	r3, #0
 800553e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005546:	461a      	mov	r2, r3
 8005548:	2300      	movs	r3, #0
 800554a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800554c:	2300      	movs	r3, #0
 800554e:	613b      	str	r3, [r7, #16]
 8005550:	e043      	b.n	80055da <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005552:	693b      	ldr	r3, [r7, #16]
 8005554:	015a      	lsls	r2, r3, #5
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	4413      	add	r3, r2
 800555a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005564:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005568:	d118      	bne.n	800559c <USB_DevInit+0x164>
    {
      if (i == 0U)
 800556a:	693b      	ldr	r3, [r7, #16]
 800556c:	2b00      	cmp	r3, #0
 800556e:	d10a      	bne.n	8005586 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005570:	693b      	ldr	r3, [r7, #16]
 8005572:	015a      	lsls	r2, r3, #5
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	4413      	add	r3, r2
 8005578:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800557c:	461a      	mov	r2, r3
 800557e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005582:	6013      	str	r3, [r2, #0]
 8005584:	e013      	b.n	80055ae <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005586:	693b      	ldr	r3, [r7, #16]
 8005588:	015a      	lsls	r2, r3, #5
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	4413      	add	r3, r2
 800558e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005592:	461a      	mov	r2, r3
 8005594:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005598:	6013      	str	r3, [r2, #0]
 800559a:	e008      	b.n	80055ae <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800559c:	693b      	ldr	r3, [r7, #16]
 800559e:	015a      	lsls	r2, r3, #5
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	4413      	add	r3, r2
 80055a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055a8:	461a      	mov	r2, r3
 80055aa:	2300      	movs	r3, #0
 80055ac:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80055ae:	693b      	ldr	r3, [r7, #16]
 80055b0:	015a      	lsls	r2, r3, #5
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	4413      	add	r3, r2
 80055b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055ba:	461a      	mov	r2, r3
 80055bc:	2300      	movs	r3, #0
 80055be:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80055c0:	693b      	ldr	r3, [r7, #16]
 80055c2:	015a      	lsls	r2, r3, #5
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	4413      	add	r3, r2
 80055c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055cc:	461a      	mov	r2, r3
 80055ce:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80055d2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80055d4:	693b      	ldr	r3, [r7, #16]
 80055d6:	3301      	adds	r3, #1
 80055d8:	613b      	str	r3, [r7, #16]
 80055da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055dc:	693a      	ldr	r2, [r7, #16]
 80055de:	429a      	cmp	r2, r3
 80055e0:	d3b7      	bcc.n	8005552 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80055e2:	2300      	movs	r3, #0
 80055e4:	613b      	str	r3, [r7, #16]
 80055e6:	e043      	b.n	8005670 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80055e8:	693b      	ldr	r3, [r7, #16]
 80055ea:	015a      	lsls	r2, r3, #5
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	4413      	add	r3, r2
 80055f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80055fa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80055fe:	d118      	bne.n	8005632 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8005600:	693b      	ldr	r3, [r7, #16]
 8005602:	2b00      	cmp	r3, #0
 8005604:	d10a      	bne.n	800561c <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005606:	693b      	ldr	r3, [r7, #16]
 8005608:	015a      	lsls	r2, r3, #5
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	4413      	add	r3, r2
 800560e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005612:	461a      	mov	r2, r3
 8005614:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005618:	6013      	str	r3, [r2, #0]
 800561a:	e013      	b.n	8005644 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800561c:	693b      	ldr	r3, [r7, #16]
 800561e:	015a      	lsls	r2, r3, #5
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	4413      	add	r3, r2
 8005624:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005628:	461a      	mov	r2, r3
 800562a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800562e:	6013      	str	r3, [r2, #0]
 8005630:	e008      	b.n	8005644 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005632:	693b      	ldr	r3, [r7, #16]
 8005634:	015a      	lsls	r2, r3, #5
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	4413      	add	r3, r2
 800563a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800563e:	461a      	mov	r2, r3
 8005640:	2300      	movs	r3, #0
 8005642:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005644:	693b      	ldr	r3, [r7, #16]
 8005646:	015a      	lsls	r2, r3, #5
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	4413      	add	r3, r2
 800564c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005650:	461a      	mov	r2, r3
 8005652:	2300      	movs	r3, #0
 8005654:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005656:	693b      	ldr	r3, [r7, #16]
 8005658:	015a      	lsls	r2, r3, #5
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	4413      	add	r3, r2
 800565e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005662:	461a      	mov	r2, r3
 8005664:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005668:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800566a:	693b      	ldr	r3, [r7, #16]
 800566c:	3301      	adds	r3, #1
 800566e:	613b      	str	r3, [r7, #16]
 8005670:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005672:	693a      	ldr	r2, [r7, #16]
 8005674:	429a      	cmp	r2, r3
 8005676:	d3b7      	bcc.n	80055e8 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800567e:	691b      	ldr	r3, [r3, #16]
 8005680:	68fa      	ldr	r2, [r7, #12]
 8005682:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005686:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800568a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	2200      	movs	r2, #0
 8005690:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8005698:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800569a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800569c:	2b00      	cmp	r3, #0
 800569e:	d105      	bne.n	80056ac <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	699b      	ldr	r3, [r3, #24]
 80056a4:	f043 0210 	orr.w	r2, r3, #16
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	699a      	ldr	r2, [r3, #24]
 80056b0:	4b0f      	ldr	r3, [pc, #60]	; (80056f0 <USB_DevInit+0x2b8>)
 80056b2:	4313      	orrs	r3, r2
 80056b4:	687a      	ldr	r2, [r7, #4]
 80056b6:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80056b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d005      	beq.n	80056ca <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	699b      	ldr	r3, [r3, #24]
 80056c2:	f043 0208 	orr.w	r2, r3, #8
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80056ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80056cc:	2b01      	cmp	r3, #1
 80056ce:	d107      	bne.n	80056e0 <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	699b      	ldr	r3, [r3, #24]
 80056d4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80056d8:	f043 0304 	orr.w	r3, r3, #4
 80056dc:	687a      	ldr	r2, [r7, #4]
 80056de:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80056e0:	7dfb      	ldrb	r3, [r7, #23]
}
 80056e2:	4618      	mov	r0, r3
 80056e4:	3718      	adds	r7, #24
 80056e6:	46bd      	mov	sp, r7
 80056e8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80056ec:	b004      	add	sp, #16
 80056ee:	4770      	bx	lr
 80056f0:	803c3800 	.word	0x803c3800

080056f4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80056f4:	b480      	push	{r7}
 80056f6:	b085      	sub	sp, #20
 80056f8:	af00      	add	r7, sp, #0
 80056fa:	6078      	str	r0, [r7, #4]
 80056fc:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80056fe:	2300      	movs	r3, #0
 8005700:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005702:	683b      	ldr	r3, [r7, #0]
 8005704:	019b      	lsls	r3, r3, #6
 8005706:	f043 0220 	orr.w	r2, r3, #32
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	3301      	adds	r3, #1
 8005712:	60fb      	str	r3, [r7, #12]
 8005714:	4a08      	ldr	r2, [pc, #32]	; (8005738 <USB_FlushTxFifo+0x44>)
 8005716:	4293      	cmp	r3, r2
 8005718:	d901      	bls.n	800571e <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 800571a:	2303      	movs	r3, #3
 800571c:	e006      	b.n	800572c <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	691b      	ldr	r3, [r3, #16]
 8005722:	f003 0320 	and.w	r3, r3, #32
 8005726:	2b20      	cmp	r3, #32
 8005728:	d0f1      	beq.n	800570e <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800572a:	2300      	movs	r3, #0
}
 800572c:	4618      	mov	r0, r3
 800572e:	3714      	adds	r7, #20
 8005730:	46bd      	mov	sp, r7
 8005732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005736:	4770      	bx	lr
 8005738:	00030d40 	.word	0x00030d40

0800573c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800573c:	b480      	push	{r7}
 800573e:	b085      	sub	sp, #20
 8005740:	af00      	add	r7, sp, #0
 8005742:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005744:	2300      	movs	r3, #0
 8005746:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	2210      	movs	r2, #16
 800574c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	3301      	adds	r3, #1
 8005752:	60fb      	str	r3, [r7, #12]
 8005754:	4a08      	ldr	r2, [pc, #32]	; (8005778 <USB_FlushRxFifo+0x3c>)
 8005756:	4293      	cmp	r3, r2
 8005758:	d901      	bls.n	800575e <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 800575a:	2303      	movs	r3, #3
 800575c:	e006      	b.n	800576c <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	691b      	ldr	r3, [r3, #16]
 8005762:	f003 0310 	and.w	r3, r3, #16
 8005766:	2b10      	cmp	r3, #16
 8005768:	d0f1      	beq.n	800574e <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800576a:	2300      	movs	r3, #0
}
 800576c:	4618      	mov	r0, r3
 800576e:	3714      	adds	r7, #20
 8005770:	46bd      	mov	sp, r7
 8005772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005776:	4770      	bx	lr
 8005778:	00030d40 	.word	0x00030d40

0800577c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800577c:	b480      	push	{r7}
 800577e:	b085      	sub	sp, #20
 8005780:	af00      	add	r7, sp, #0
 8005782:	6078      	str	r0, [r7, #4]
 8005784:	460b      	mov	r3, r1
 8005786:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005792:	681a      	ldr	r2, [r3, #0]
 8005794:	78fb      	ldrb	r3, [r7, #3]
 8005796:	68f9      	ldr	r1, [r7, #12]
 8005798:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800579c:	4313      	orrs	r3, r2
 800579e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80057a0:	2300      	movs	r3, #0
}
 80057a2:	4618      	mov	r0, r3
 80057a4:	3714      	adds	r7, #20
 80057a6:	46bd      	mov	sp, r7
 80057a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ac:	4770      	bx	lr

080057ae <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80057ae:	b480      	push	{r7}
 80057b0:	b087      	sub	sp, #28
 80057b2:	af00      	add	r7, sp, #0
 80057b4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80057ba:	693b      	ldr	r3, [r7, #16]
 80057bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80057c0:	689b      	ldr	r3, [r3, #8]
 80057c2:	f003 0306 	and.w	r3, r3, #6
 80057c6:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d102      	bne.n	80057d4 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80057ce:	2300      	movs	r3, #0
 80057d0:	75fb      	strb	r3, [r7, #23]
 80057d2:	e00a      	b.n	80057ea <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	2b02      	cmp	r3, #2
 80057d8:	d002      	beq.n	80057e0 <USB_GetDevSpeed+0x32>
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	2b06      	cmp	r3, #6
 80057de:	d102      	bne.n	80057e6 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80057e0:	2302      	movs	r3, #2
 80057e2:	75fb      	strb	r3, [r7, #23]
 80057e4:	e001      	b.n	80057ea <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80057e6:	230f      	movs	r3, #15
 80057e8:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80057ea:	7dfb      	ldrb	r3, [r7, #23]
}
 80057ec:	4618      	mov	r0, r3
 80057ee:	371c      	adds	r7, #28
 80057f0:	46bd      	mov	sp, r7
 80057f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f6:	4770      	bx	lr

080057f8 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80057f8:	b480      	push	{r7}
 80057fa:	b085      	sub	sp, #20
 80057fc:	af00      	add	r7, sp, #0
 80057fe:	6078      	str	r0, [r7, #4]
 8005800:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005806:	683b      	ldr	r3, [r7, #0]
 8005808:	781b      	ldrb	r3, [r3, #0]
 800580a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800580c:	683b      	ldr	r3, [r7, #0]
 800580e:	785b      	ldrb	r3, [r3, #1]
 8005810:	2b01      	cmp	r3, #1
 8005812:	d13a      	bne.n	800588a <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800581a:	69da      	ldr	r2, [r3, #28]
 800581c:	683b      	ldr	r3, [r7, #0]
 800581e:	781b      	ldrb	r3, [r3, #0]
 8005820:	f003 030f 	and.w	r3, r3, #15
 8005824:	2101      	movs	r1, #1
 8005826:	fa01 f303 	lsl.w	r3, r1, r3
 800582a:	b29b      	uxth	r3, r3
 800582c:	68f9      	ldr	r1, [r7, #12]
 800582e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005832:	4313      	orrs	r3, r2
 8005834:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8005836:	68bb      	ldr	r3, [r7, #8]
 8005838:	015a      	lsls	r2, r3, #5
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	4413      	add	r3, r2
 800583e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005848:	2b00      	cmp	r3, #0
 800584a:	d155      	bne.n	80058f8 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800584c:	68bb      	ldr	r3, [r7, #8]
 800584e:	015a      	lsls	r2, r3, #5
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	4413      	add	r3, r2
 8005854:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005858:	681a      	ldr	r2, [r3, #0]
 800585a:	683b      	ldr	r3, [r7, #0]
 800585c:	689b      	ldr	r3, [r3, #8]
 800585e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005862:	683b      	ldr	r3, [r7, #0]
 8005864:	78db      	ldrb	r3, [r3, #3]
 8005866:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005868:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800586a:	68bb      	ldr	r3, [r7, #8]
 800586c:	059b      	lsls	r3, r3, #22
 800586e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005870:	4313      	orrs	r3, r2
 8005872:	68ba      	ldr	r2, [r7, #8]
 8005874:	0151      	lsls	r1, r2, #5
 8005876:	68fa      	ldr	r2, [r7, #12]
 8005878:	440a      	add	r2, r1
 800587a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800587e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005882:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005886:	6013      	str	r3, [r2, #0]
 8005888:	e036      	b.n	80058f8 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005890:	69da      	ldr	r2, [r3, #28]
 8005892:	683b      	ldr	r3, [r7, #0]
 8005894:	781b      	ldrb	r3, [r3, #0]
 8005896:	f003 030f 	and.w	r3, r3, #15
 800589a:	2101      	movs	r1, #1
 800589c:	fa01 f303 	lsl.w	r3, r1, r3
 80058a0:	041b      	lsls	r3, r3, #16
 80058a2:	68f9      	ldr	r1, [r7, #12]
 80058a4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80058a8:	4313      	orrs	r3, r2
 80058aa:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80058ac:	68bb      	ldr	r3, [r7, #8]
 80058ae:	015a      	lsls	r2, r3, #5
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	4413      	add	r3, r2
 80058b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d11a      	bne.n	80058f8 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80058c2:	68bb      	ldr	r3, [r7, #8]
 80058c4:	015a      	lsls	r2, r3, #5
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	4413      	add	r3, r2
 80058ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058ce:	681a      	ldr	r2, [r3, #0]
 80058d0:	683b      	ldr	r3, [r7, #0]
 80058d2:	689b      	ldr	r3, [r3, #8]
 80058d4:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80058d8:	683b      	ldr	r3, [r7, #0]
 80058da:	78db      	ldrb	r3, [r3, #3]
 80058dc:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80058de:	430b      	orrs	r3, r1
 80058e0:	4313      	orrs	r3, r2
 80058e2:	68ba      	ldr	r2, [r7, #8]
 80058e4:	0151      	lsls	r1, r2, #5
 80058e6:	68fa      	ldr	r2, [r7, #12]
 80058e8:	440a      	add	r2, r1
 80058ea:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80058ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80058f2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80058f6:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80058f8:	2300      	movs	r3, #0
}
 80058fa:	4618      	mov	r0, r3
 80058fc:	3714      	adds	r7, #20
 80058fe:	46bd      	mov	sp, r7
 8005900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005904:	4770      	bx	lr
	...

08005908 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005908:	b480      	push	{r7}
 800590a:	b085      	sub	sp, #20
 800590c:	af00      	add	r7, sp, #0
 800590e:	6078      	str	r0, [r7, #4]
 8005910:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005916:	683b      	ldr	r3, [r7, #0]
 8005918:	781b      	ldrb	r3, [r3, #0]
 800591a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800591c:	683b      	ldr	r3, [r7, #0]
 800591e:	785b      	ldrb	r3, [r3, #1]
 8005920:	2b01      	cmp	r3, #1
 8005922:	d161      	bne.n	80059e8 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005924:	68bb      	ldr	r3, [r7, #8]
 8005926:	015a      	lsls	r2, r3, #5
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	4413      	add	r3, r2
 800592c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005936:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800593a:	d11f      	bne.n	800597c <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800593c:	68bb      	ldr	r3, [r7, #8]
 800593e:	015a      	lsls	r2, r3, #5
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	4413      	add	r3, r2
 8005944:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	68ba      	ldr	r2, [r7, #8]
 800594c:	0151      	lsls	r1, r2, #5
 800594e:	68fa      	ldr	r2, [r7, #12]
 8005950:	440a      	add	r2, r1
 8005952:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005956:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800595a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800595c:	68bb      	ldr	r3, [r7, #8]
 800595e:	015a      	lsls	r2, r3, #5
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	4413      	add	r3, r2
 8005964:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	68ba      	ldr	r2, [r7, #8]
 800596c:	0151      	lsls	r1, r2, #5
 800596e:	68fa      	ldr	r2, [r7, #12]
 8005970:	440a      	add	r2, r1
 8005972:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005976:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800597a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005982:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005984:	683b      	ldr	r3, [r7, #0]
 8005986:	781b      	ldrb	r3, [r3, #0]
 8005988:	f003 030f 	and.w	r3, r3, #15
 800598c:	2101      	movs	r1, #1
 800598e:	fa01 f303 	lsl.w	r3, r1, r3
 8005992:	b29b      	uxth	r3, r3
 8005994:	43db      	mvns	r3, r3
 8005996:	68f9      	ldr	r1, [r7, #12]
 8005998:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800599c:	4013      	ands	r3, r2
 800599e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80059a6:	69da      	ldr	r2, [r3, #28]
 80059a8:	683b      	ldr	r3, [r7, #0]
 80059aa:	781b      	ldrb	r3, [r3, #0]
 80059ac:	f003 030f 	and.w	r3, r3, #15
 80059b0:	2101      	movs	r1, #1
 80059b2:	fa01 f303 	lsl.w	r3, r1, r3
 80059b6:	b29b      	uxth	r3, r3
 80059b8:	43db      	mvns	r3, r3
 80059ba:	68f9      	ldr	r1, [r7, #12]
 80059bc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80059c0:	4013      	ands	r3, r2
 80059c2:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80059c4:	68bb      	ldr	r3, [r7, #8]
 80059c6:	015a      	lsls	r2, r3, #5
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	4413      	add	r3, r2
 80059cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059d0:	681a      	ldr	r2, [r3, #0]
 80059d2:	68bb      	ldr	r3, [r7, #8]
 80059d4:	0159      	lsls	r1, r3, #5
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	440b      	add	r3, r1
 80059da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059de:	4619      	mov	r1, r3
 80059e0:	4b35      	ldr	r3, [pc, #212]	; (8005ab8 <USB_DeactivateEndpoint+0x1b0>)
 80059e2:	4013      	ands	r3, r2
 80059e4:	600b      	str	r3, [r1, #0]
 80059e6:	e060      	b.n	8005aaa <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80059e8:	68bb      	ldr	r3, [r7, #8]
 80059ea:	015a      	lsls	r2, r3, #5
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	4413      	add	r3, r2
 80059f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80059fa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80059fe:	d11f      	bne.n	8005a40 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005a00:	68bb      	ldr	r3, [r7, #8]
 8005a02:	015a      	lsls	r2, r3, #5
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	4413      	add	r3, r2
 8005a08:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	68ba      	ldr	r2, [r7, #8]
 8005a10:	0151      	lsls	r1, r2, #5
 8005a12:	68fa      	ldr	r2, [r7, #12]
 8005a14:	440a      	add	r2, r1
 8005a16:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005a1a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005a1e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8005a20:	68bb      	ldr	r3, [r7, #8]
 8005a22:	015a      	lsls	r2, r3, #5
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	4413      	add	r3, r2
 8005a28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	68ba      	ldr	r2, [r7, #8]
 8005a30:	0151      	lsls	r1, r2, #5
 8005a32:	68fa      	ldr	r2, [r7, #12]
 8005a34:	440a      	add	r2, r1
 8005a36:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005a3a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005a3e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a46:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005a48:	683b      	ldr	r3, [r7, #0]
 8005a4a:	781b      	ldrb	r3, [r3, #0]
 8005a4c:	f003 030f 	and.w	r3, r3, #15
 8005a50:	2101      	movs	r1, #1
 8005a52:	fa01 f303 	lsl.w	r3, r1, r3
 8005a56:	041b      	lsls	r3, r3, #16
 8005a58:	43db      	mvns	r3, r3
 8005a5a:	68f9      	ldr	r1, [r7, #12]
 8005a5c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005a60:	4013      	ands	r3, r2
 8005a62:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a6a:	69da      	ldr	r2, [r3, #28]
 8005a6c:	683b      	ldr	r3, [r7, #0]
 8005a6e:	781b      	ldrb	r3, [r3, #0]
 8005a70:	f003 030f 	and.w	r3, r3, #15
 8005a74:	2101      	movs	r1, #1
 8005a76:	fa01 f303 	lsl.w	r3, r1, r3
 8005a7a:	041b      	lsls	r3, r3, #16
 8005a7c:	43db      	mvns	r3, r3
 8005a7e:	68f9      	ldr	r1, [r7, #12]
 8005a80:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005a84:	4013      	ands	r3, r2
 8005a86:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8005a88:	68bb      	ldr	r3, [r7, #8]
 8005a8a:	015a      	lsls	r2, r3, #5
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	4413      	add	r3, r2
 8005a90:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a94:	681a      	ldr	r2, [r3, #0]
 8005a96:	68bb      	ldr	r3, [r7, #8]
 8005a98:	0159      	lsls	r1, r3, #5
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	440b      	add	r3, r1
 8005a9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005aa2:	4619      	mov	r1, r3
 8005aa4:	4b05      	ldr	r3, [pc, #20]	; (8005abc <USB_DeactivateEndpoint+0x1b4>)
 8005aa6:	4013      	ands	r3, r2
 8005aa8:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8005aaa:	2300      	movs	r3, #0
}
 8005aac:	4618      	mov	r0, r3
 8005aae:	3714      	adds	r7, #20
 8005ab0:	46bd      	mov	sp, r7
 8005ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab6:	4770      	bx	lr
 8005ab8:	ec337800 	.word	0xec337800
 8005abc:	eff37800 	.word	0xeff37800

08005ac0 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005ac0:	b580      	push	{r7, lr}
 8005ac2:	b08a      	sub	sp, #40	; 0x28
 8005ac4:	af02      	add	r7, sp, #8
 8005ac6:	60f8      	str	r0, [r7, #12]
 8005ac8:	60b9      	str	r1, [r7, #8]
 8005aca:	4613      	mov	r3, r2
 8005acc:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8005ad2:	68bb      	ldr	r3, [r7, #8]
 8005ad4:	781b      	ldrb	r3, [r3, #0]
 8005ad6:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005ad8:	68bb      	ldr	r3, [r7, #8]
 8005ada:	785b      	ldrb	r3, [r3, #1]
 8005adc:	2b01      	cmp	r3, #1
 8005ade:	f040 815c 	bne.w	8005d9a <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005ae2:	68bb      	ldr	r3, [r7, #8]
 8005ae4:	695b      	ldr	r3, [r3, #20]
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d132      	bne.n	8005b50 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005aea:	69bb      	ldr	r3, [r7, #24]
 8005aec:	015a      	lsls	r2, r3, #5
 8005aee:	69fb      	ldr	r3, [r7, #28]
 8005af0:	4413      	add	r3, r2
 8005af2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005af6:	691b      	ldr	r3, [r3, #16]
 8005af8:	69ba      	ldr	r2, [r7, #24]
 8005afa:	0151      	lsls	r1, r2, #5
 8005afc:	69fa      	ldr	r2, [r7, #28]
 8005afe:	440a      	add	r2, r1
 8005b00:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b04:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005b08:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005b0c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005b0e:	69bb      	ldr	r3, [r7, #24]
 8005b10:	015a      	lsls	r2, r3, #5
 8005b12:	69fb      	ldr	r3, [r7, #28]
 8005b14:	4413      	add	r3, r2
 8005b16:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b1a:	691b      	ldr	r3, [r3, #16]
 8005b1c:	69ba      	ldr	r2, [r7, #24]
 8005b1e:	0151      	lsls	r1, r2, #5
 8005b20:	69fa      	ldr	r2, [r7, #28]
 8005b22:	440a      	add	r2, r1
 8005b24:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b28:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005b2c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005b2e:	69bb      	ldr	r3, [r7, #24]
 8005b30:	015a      	lsls	r2, r3, #5
 8005b32:	69fb      	ldr	r3, [r7, #28]
 8005b34:	4413      	add	r3, r2
 8005b36:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b3a:	691b      	ldr	r3, [r3, #16]
 8005b3c:	69ba      	ldr	r2, [r7, #24]
 8005b3e:	0151      	lsls	r1, r2, #5
 8005b40:	69fa      	ldr	r2, [r7, #28]
 8005b42:	440a      	add	r2, r1
 8005b44:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b48:	0cdb      	lsrs	r3, r3, #19
 8005b4a:	04db      	lsls	r3, r3, #19
 8005b4c:	6113      	str	r3, [r2, #16]
 8005b4e:	e074      	b.n	8005c3a <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005b50:	69bb      	ldr	r3, [r7, #24]
 8005b52:	015a      	lsls	r2, r3, #5
 8005b54:	69fb      	ldr	r3, [r7, #28]
 8005b56:	4413      	add	r3, r2
 8005b58:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b5c:	691b      	ldr	r3, [r3, #16]
 8005b5e:	69ba      	ldr	r2, [r7, #24]
 8005b60:	0151      	lsls	r1, r2, #5
 8005b62:	69fa      	ldr	r2, [r7, #28]
 8005b64:	440a      	add	r2, r1
 8005b66:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b6a:	0cdb      	lsrs	r3, r3, #19
 8005b6c:	04db      	lsls	r3, r3, #19
 8005b6e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005b70:	69bb      	ldr	r3, [r7, #24]
 8005b72:	015a      	lsls	r2, r3, #5
 8005b74:	69fb      	ldr	r3, [r7, #28]
 8005b76:	4413      	add	r3, r2
 8005b78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b7c:	691b      	ldr	r3, [r3, #16]
 8005b7e:	69ba      	ldr	r2, [r7, #24]
 8005b80:	0151      	lsls	r1, r2, #5
 8005b82:	69fa      	ldr	r2, [r7, #28]
 8005b84:	440a      	add	r2, r1
 8005b86:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b8a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005b8e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005b92:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8005b94:	69bb      	ldr	r3, [r7, #24]
 8005b96:	015a      	lsls	r2, r3, #5
 8005b98:	69fb      	ldr	r3, [r7, #28]
 8005b9a:	4413      	add	r3, r2
 8005b9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ba0:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8005ba2:	68bb      	ldr	r3, [r7, #8]
 8005ba4:	6959      	ldr	r1, [r3, #20]
 8005ba6:	68bb      	ldr	r3, [r7, #8]
 8005ba8:	689b      	ldr	r3, [r3, #8]
 8005baa:	440b      	add	r3, r1
 8005bac:	1e59      	subs	r1, r3, #1
 8005bae:	68bb      	ldr	r3, [r7, #8]
 8005bb0:	689b      	ldr	r3, [r3, #8]
 8005bb2:	fbb1 f3f3 	udiv	r3, r1, r3
 8005bb6:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8005bb8:	4b9d      	ldr	r3, [pc, #628]	; (8005e30 <USB_EPStartXfer+0x370>)
 8005bba:	400b      	ands	r3, r1
 8005bbc:	69b9      	ldr	r1, [r7, #24]
 8005bbe:	0148      	lsls	r0, r1, #5
 8005bc0:	69f9      	ldr	r1, [r7, #28]
 8005bc2:	4401      	add	r1, r0
 8005bc4:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005bc8:	4313      	orrs	r3, r2
 8005bca:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005bcc:	69bb      	ldr	r3, [r7, #24]
 8005bce:	015a      	lsls	r2, r3, #5
 8005bd0:	69fb      	ldr	r3, [r7, #28]
 8005bd2:	4413      	add	r3, r2
 8005bd4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005bd8:	691a      	ldr	r2, [r3, #16]
 8005bda:	68bb      	ldr	r3, [r7, #8]
 8005bdc:	695b      	ldr	r3, [r3, #20]
 8005bde:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005be2:	69b9      	ldr	r1, [r7, #24]
 8005be4:	0148      	lsls	r0, r1, #5
 8005be6:	69f9      	ldr	r1, [r7, #28]
 8005be8:	4401      	add	r1, r0
 8005bea:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005bee:	4313      	orrs	r3, r2
 8005bf0:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8005bf2:	68bb      	ldr	r3, [r7, #8]
 8005bf4:	78db      	ldrb	r3, [r3, #3]
 8005bf6:	2b01      	cmp	r3, #1
 8005bf8:	d11f      	bne.n	8005c3a <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8005bfa:	69bb      	ldr	r3, [r7, #24]
 8005bfc:	015a      	lsls	r2, r3, #5
 8005bfe:	69fb      	ldr	r3, [r7, #28]
 8005c00:	4413      	add	r3, r2
 8005c02:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c06:	691b      	ldr	r3, [r3, #16]
 8005c08:	69ba      	ldr	r2, [r7, #24]
 8005c0a:	0151      	lsls	r1, r2, #5
 8005c0c:	69fa      	ldr	r2, [r7, #28]
 8005c0e:	440a      	add	r2, r1
 8005c10:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005c14:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8005c18:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8005c1a:	69bb      	ldr	r3, [r7, #24]
 8005c1c:	015a      	lsls	r2, r3, #5
 8005c1e:	69fb      	ldr	r3, [r7, #28]
 8005c20:	4413      	add	r3, r2
 8005c22:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c26:	691b      	ldr	r3, [r3, #16]
 8005c28:	69ba      	ldr	r2, [r7, #24]
 8005c2a:	0151      	lsls	r1, r2, #5
 8005c2c:	69fa      	ldr	r2, [r7, #28]
 8005c2e:	440a      	add	r2, r1
 8005c30:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005c34:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005c38:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8005c3a:	79fb      	ldrb	r3, [r7, #7]
 8005c3c:	2b01      	cmp	r3, #1
 8005c3e:	d14b      	bne.n	8005cd8 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005c40:	68bb      	ldr	r3, [r7, #8]
 8005c42:	691b      	ldr	r3, [r3, #16]
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d009      	beq.n	8005c5c <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005c48:	69bb      	ldr	r3, [r7, #24]
 8005c4a:	015a      	lsls	r2, r3, #5
 8005c4c:	69fb      	ldr	r3, [r7, #28]
 8005c4e:	4413      	add	r3, r2
 8005c50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c54:	461a      	mov	r2, r3
 8005c56:	68bb      	ldr	r3, [r7, #8]
 8005c58:	691b      	ldr	r3, [r3, #16]
 8005c5a:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8005c5c:	68bb      	ldr	r3, [r7, #8]
 8005c5e:	78db      	ldrb	r3, [r3, #3]
 8005c60:	2b01      	cmp	r3, #1
 8005c62:	d128      	bne.n	8005cb6 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005c64:	69fb      	ldr	r3, [r7, #28]
 8005c66:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c6a:	689b      	ldr	r3, [r3, #8]
 8005c6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d110      	bne.n	8005c96 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005c74:	69bb      	ldr	r3, [r7, #24]
 8005c76:	015a      	lsls	r2, r3, #5
 8005c78:	69fb      	ldr	r3, [r7, #28]
 8005c7a:	4413      	add	r3, r2
 8005c7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	69ba      	ldr	r2, [r7, #24]
 8005c84:	0151      	lsls	r1, r2, #5
 8005c86:	69fa      	ldr	r2, [r7, #28]
 8005c88:	440a      	add	r2, r1
 8005c8a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005c8e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005c92:	6013      	str	r3, [r2, #0]
 8005c94:	e00f      	b.n	8005cb6 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005c96:	69bb      	ldr	r3, [r7, #24]
 8005c98:	015a      	lsls	r2, r3, #5
 8005c9a:	69fb      	ldr	r3, [r7, #28]
 8005c9c:	4413      	add	r3, r2
 8005c9e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	69ba      	ldr	r2, [r7, #24]
 8005ca6:	0151      	lsls	r1, r2, #5
 8005ca8:	69fa      	ldr	r2, [r7, #28]
 8005caa:	440a      	add	r2, r1
 8005cac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005cb0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005cb4:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005cb6:	69bb      	ldr	r3, [r7, #24]
 8005cb8:	015a      	lsls	r2, r3, #5
 8005cba:	69fb      	ldr	r3, [r7, #28]
 8005cbc:	4413      	add	r3, r2
 8005cbe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	69ba      	ldr	r2, [r7, #24]
 8005cc6:	0151      	lsls	r1, r2, #5
 8005cc8:	69fa      	ldr	r2, [r7, #28]
 8005cca:	440a      	add	r2, r1
 8005ccc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005cd0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005cd4:	6013      	str	r3, [r2, #0]
 8005cd6:	e12f      	b.n	8005f38 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005cd8:	69bb      	ldr	r3, [r7, #24]
 8005cda:	015a      	lsls	r2, r3, #5
 8005cdc:	69fb      	ldr	r3, [r7, #28]
 8005cde:	4413      	add	r3, r2
 8005ce0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	69ba      	ldr	r2, [r7, #24]
 8005ce8:	0151      	lsls	r1, r2, #5
 8005cea:	69fa      	ldr	r2, [r7, #28]
 8005cec:	440a      	add	r2, r1
 8005cee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005cf2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005cf6:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005cf8:	68bb      	ldr	r3, [r7, #8]
 8005cfa:	78db      	ldrb	r3, [r3, #3]
 8005cfc:	2b01      	cmp	r3, #1
 8005cfe:	d015      	beq.n	8005d2c <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8005d00:	68bb      	ldr	r3, [r7, #8]
 8005d02:	695b      	ldr	r3, [r3, #20]
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	f000 8117 	beq.w	8005f38 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005d0a:	69fb      	ldr	r3, [r7, #28]
 8005d0c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d10:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005d12:	68bb      	ldr	r3, [r7, #8]
 8005d14:	781b      	ldrb	r3, [r3, #0]
 8005d16:	f003 030f 	and.w	r3, r3, #15
 8005d1a:	2101      	movs	r1, #1
 8005d1c:	fa01 f303 	lsl.w	r3, r1, r3
 8005d20:	69f9      	ldr	r1, [r7, #28]
 8005d22:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005d26:	4313      	orrs	r3, r2
 8005d28:	634b      	str	r3, [r1, #52]	; 0x34
 8005d2a:	e105      	b.n	8005f38 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005d2c:	69fb      	ldr	r3, [r7, #28]
 8005d2e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d32:	689b      	ldr	r3, [r3, #8]
 8005d34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d110      	bne.n	8005d5e <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005d3c:	69bb      	ldr	r3, [r7, #24]
 8005d3e:	015a      	lsls	r2, r3, #5
 8005d40:	69fb      	ldr	r3, [r7, #28]
 8005d42:	4413      	add	r3, r2
 8005d44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	69ba      	ldr	r2, [r7, #24]
 8005d4c:	0151      	lsls	r1, r2, #5
 8005d4e:	69fa      	ldr	r2, [r7, #28]
 8005d50:	440a      	add	r2, r1
 8005d52:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005d56:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005d5a:	6013      	str	r3, [r2, #0]
 8005d5c:	e00f      	b.n	8005d7e <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005d5e:	69bb      	ldr	r3, [r7, #24]
 8005d60:	015a      	lsls	r2, r3, #5
 8005d62:	69fb      	ldr	r3, [r7, #28]
 8005d64:	4413      	add	r3, r2
 8005d66:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	69ba      	ldr	r2, [r7, #24]
 8005d6e:	0151      	lsls	r1, r2, #5
 8005d70:	69fa      	ldr	r2, [r7, #28]
 8005d72:	440a      	add	r2, r1
 8005d74:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005d78:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005d7c:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8005d7e:	68bb      	ldr	r3, [r7, #8]
 8005d80:	68d9      	ldr	r1, [r3, #12]
 8005d82:	68bb      	ldr	r3, [r7, #8]
 8005d84:	781a      	ldrb	r2, [r3, #0]
 8005d86:	68bb      	ldr	r3, [r7, #8]
 8005d88:	695b      	ldr	r3, [r3, #20]
 8005d8a:	b298      	uxth	r0, r3
 8005d8c:	79fb      	ldrb	r3, [r7, #7]
 8005d8e:	9300      	str	r3, [sp, #0]
 8005d90:	4603      	mov	r3, r0
 8005d92:	68f8      	ldr	r0, [r7, #12]
 8005d94:	f000 fa2b 	bl	80061ee <USB_WritePacket>
 8005d98:	e0ce      	b.n	8005f38 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005d9a:	69bb      	ldr	r3, [r7, #24]
 8005d9c:	015a      	lsls	r2, r3, #5
 8005d9e:	69fb      	ldr	r3, [r7, #28]
 8005da0:	4413      	add	r3, r2
 8005da2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005da6:	691b      	ldr	r3, [r3, #16]
 8005da8:	69ba      	ldr	r2, [r7, #24]
 8005daa:	0151      	lsls	r1, r2, #5
 8005dac:	69fa      	ldr	r2, [r7, #28]
 8005dae:	440a      	add	r2, r1
 8005db0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005db4:	0cdb      	lsrs	r3, r3, #19
 8005db6:	04db      	lsls	r3, r3, #19
 8005db8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005dba:	69bb      	ldr	r3, [r7, #24]
 8005dbc:	015a      	lsls	r2, r3, #5
 8005dbe:	69fb      	ldr	r3, [r7, #28]
 8005dc0:	4413      	add	r3, r2
 8005dc2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005dc6:	691b      	ldr	r3, [r3, #16]
 8005dc8:	69ba      	ldr	r2, [r7, #24]
 8005dca:	0151      	lsls	r1, r2, #5
 8005dcc:	69fa      	ldr	r2, [r7, #28]
 8005dce:	440a      	add	r2, r1
 8005dd0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005dd4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005dd8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005ddc:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8005dde:	68bb      	ldr	r3, [r7, #8]
 8005de0:	695b      	ldr	r3, [r3, #20]
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d126      	bne.n	8005e34 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8005de6:	69bb      	ldr	r3, [r7, #24]
 8005de8:	015a      	lsls	r2, r3, #5
 8005dea:	69fb      	ldr	r3, [r7, #28]
 8005dec:	4413      	add	r3, r2
 8005dee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005df2:	691a      	ldr	r2, [r3, #16]
 8005df4:	68bb      	ldr	r3, [r7, #8]
 8005df6:	689b      	ldr	r3, [r3, #8]
 8005df8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005dfc:	69b9      	ldr	r1, [r7, #24]
 8005dfe:	0148      	lsls	r0, r1, #5
 8005e00:	69f9      	ldr	r1, [r7, #28]
 8005e02:	4401      	add	r1, r0
 8005e04:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005e08:	4313      	orrs	r3, r2
 8005e0a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005e0c:	69bb      	ldr	r3, [r7, #24]
 8005e0e:	015a      	lsls	r2, r3, #5
 8005e10:	69fb      	ldr	r3, [r7, #28]
 8005e12:	4413      	add	r3, r2
 8005e14:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e18:	691b      	ldr	r3, [r3, #16]
 8005e1a:	69ba      	ldr	r2, [r7, #24]
 8005e1c:	0151      	lsls	r1, r2, #5
 8005e1e:	69fa      	ldr	r2, [r7, #28]
 8005e20:	440a      	add	r2, r1
 8005e22:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005e26:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005e2a:	6113      	str	r3, [r2, #16]
 8005e2c:	e036      	b.n	8005e9c <USB_EPStartXfer+0x3dc>
 8005e2e:	bf00      	nop
 8005e30:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8005e34:	68bb      	ldr	r3, [r7, #8]
 8005e36:	695a      	ldr	r2, [r3, #20]
 8005e38:	68bb      	ldr	r3, [r7, #8]
 8005e3a:	689b      	ldr	r3, [r3, #8]
 8005e3c:	4413      	add	r3, r2
 8005e3e:	1e5a      	subs	r2, r3, #1
 8005e40:	68bb      	ldr	r3, [r7, #8]
 8005e42:	689b      	ldr	r3, [r3, #8]
 8005e44:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e48:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8005e4a:	69bb      	ldr	r3, [r7, #24]
 8005e4c:	015a      	lsls	r2, r3, #5
 8005e4e:	69fb      	ldr	r3, [r7, #28]
 8005e50:	4413      	add	r3, r2
 8005e52:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e56:	691a      	ldr	r2, [r3, #16]
 8005e58:	8afb      	ldrh	r3, [r7, #22]
 8005e5a:	04d9      	lsls	r1, r3, #19
 8005e5c:	4b39      	ldr	r3, [pc, #228]	; (8005f44 <USB_EPStartXfer+0x484>)
 8005e5e:	400b      	ands	r3, r1
 8005e60:	69b9      	ldr	r1, [r7, #24]
 8005e62:	0148      	lsls	r0, r1, #5
 8005e64:	69f9      	ldr	r1, [r7, #28]
 8005e66:	4401      	add	r1, r0
 8005e68:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005e6c:	4313      	orrs	r3, r2
 8005e6e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8005e70:	69bb      	ldr	r3, [r7, #24]
 8005e72:	015a      	lsls	r2, r3, #5
 8005e74:	69fb      	ldr	r3, [r7, #28]
 8005e76:	4413      	add	r3, r2
 8005e78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e7c:	691a      	ldr	r2, [r3, #16]
 8005e7e:	68bb      	ldr	r3, [r7, #8]
 8005e80:	689b      	ldr	r3, [r3, #8]
 8005e82:	8af9      	ldrh	r1, [r7, #22]
 8005e84:	fb01 f303 	mul.w	r3, r1, r3
 8005e88:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005e8c:	69b9      	ldr	r1, [r7, #24]
 8005e8e:	0148      	lsls	r0, r1, #5
 8005e90:	69f9      	ldr	r1, [r7, #28]
 8005e92:	4401      	add	r1, r0
 8005e94:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005e98:	4313      	orrs	r3, r2
 8005e9a:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005e9c:	79fb      	ldrb	r3, [r7, #7]
 8005e9e:	2b01      	cmp	r3, #1
 8005ea0:	d10d      	bne.n	8005ebe <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8005ea2:	68bb      	ldr	r3, [r7, #8]
 8005ea4:	68db      	ldr	r3, [r3, #12]
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d009      	beq.n	8005ebe <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005eaa:	68bb      	ldr	r3, [r7, #8]
 8005eac:	68d9      	ldr	r1, [r3, #12]
 8005eae:	69bb      	ldr	r3, [r7, #24]
 8005eb0:	015a      	lsls	r2, r3, #5
 8005eb2:	69fb      	ldr	r3, [r7, #28]
 8005eb4:	4413      	add	r3, r2
 8005eb6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005eba:	460a      	mov	r2, r1
 8005ebc:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8005ebe:	68bb      	ldr	r3, [r7, #8]
 8005ec0:	78db      	ldrb	r3, [r3, #3]
 8005ec2:	2b01      	cmp	r3, #1
 8005ec4:	d128      	bne.n	8005f18 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005ec6:	69fb      	ldr	r3, [r7, #28]
 8005ec8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ecc:	689b      	ldr	r3, [r3, #8]
 8005ece:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d110      	bne.n	8005ef8 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8005ed6:	69bb      	ldr	r3, [r7, #24]
 8005ed8:	015a      	lsls	r2, r3, #5
 8005eda:	69fb      	ldr	r3, [r7, #28]
 8005edc:	4413      	add	r3, r2
 8005ede:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	69ba      	ldr	r2, [r7, #24]
 8005ee6:	0151      	lsls	r1, r2, #5
 8005ee8:	69fa      	ldr	r2, [r7, #28]
 8005eea:	440a      	add	r2, r1
 8005eec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005ef0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005ef4:	6013      	str	r3, [r2, #0]
 8005ef6:	e00f      	b.n	8005f18 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8005ef8:	69bb      	ldr	r3, [r7, #24]
 8005efa:	015a      	lsls	r2, r3, #5
 8005efc:	69fb      	ldr	r3, [r7, #28]
 8005efe:	4413      	add	r3, r2
 8005f00:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	69ba      	ldr	r2, [r7, #24]
 8005f08:	0151      	lsls	r1, r2, #5
 8005f0a:	69fa      	ldr	r2, [r7, #28]
 8005f0c:	440a      	add	r2, r1
 8005f0e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005f12:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005f16:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005f18:	69bb      	ldr	r3, [r7, #24]
 8005f1a:	015a      	lsls	r2, r3, #5
 8005f1c:	69fb      	ldr	r3, [r7, #28]
 8005f1e:	4413      	add	r3, r2
 8005f20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	69ba      	ldr	r2, [r7, #24]
 8005f28:	0151      	lsls	r1, r2, #5
 8005f2a:	69fa      	ldr	r2, [r7, #28]
 8005f2c:	440a      	add	r2, r1
 8005f2e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005f32:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005f36:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005f38:	2300      	movs	r3, #0
}
 8005f3a:	4618      	mov	r0, r3
 8005f3c:	3720      	adds	r7, #32
 8005f3e:	46bd      	mov	sp, r7
 8005f40:	bd80      	pop	{r7, pc}
 8005f42:	bf00      	nop
 8005f44:	1ff80000 	.word	0x1ff80000

08005f48 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005f48:	b480      	push	{r7}
 8005f4a:	b087      	sub	sp, #28
 8005f4c:	af00      	add	r7, sp, #0
 8005f4e:	60f8      	str	r0, [r7, #12]
 8005f50:	60b9      	str	r1, [r7, #8]
 8005f52:	4613      	mov	r3, r2
 8005f54:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8005f5a:	68bb      	ldr	r3, [r7, #8]
 8005f5c:	781b      	ldrb	r3, [r3, #0]
 8005f5e:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005f60:	68bb      	ldr	r3, [r7, #8]
 8005f62:	785b      	ldrb	r3, [r3, #1]
 8005f64:	2b01      	cmp	r3, #1
 8005f66:	f040 80cd 	bne.w	8006104 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005f6a:	68bb      	ldr	r3, [r7, #8]
 8005f6c:	695b      	ldr	r3, [r3, #20]
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d132      	bne.n	8005fd8 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005f72:	693b      	ldr	r3, [r7, #16]
 8005f74:	015a      	lsls	r2, r3, #5
 8005f76:	697b      	ldr	r3, [r7, #20]
 8005f78:	4413      	add	r3, r2
 8005f7a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f7e:	691b      	ldr	r3, [r3, #16]
 8005f80:	693a      	ldr	r2, [r7, #16]
 8005f82:	0151      	lsls	r1, r2, #5
 8005f84:	697a      	ldr	r2, [r7, #20]
 8005f86:	440a      	add	r2, r1
 8005f88:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005f8c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005f90:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005f94:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005f96:	693b      	ldr	r3, [r7, #16]
 8005f98:	015a      	lsls	r2, r3, #5
 8005f9a:	697b      	ldr	r3, [r7, #20]
 8005f9c:	4413      	add	r3, r2
 8005f9e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005fa2:	691b      	ldr	r3, [r3, #16]
 8005fa4:	693a      	ldr	r2, [r7, #16]
 8005fa6:	0151      	lsls	r1, r2, #5
 8005fa8:	697a      	ldr	r2, [r7, #20]
 8005faa:	440a      	add	r2, r1
 8005fac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005fb0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005fb4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005fb6:	693b      	ldr	r3, [r7, #16]
 8005fb8:	015a      	lsls	r2, r3, #5
 8005fba:	697b      	ldr	r3, [r7, #20]
 8005fbc:	4413      	add	r3, r2
 8005fbe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005fc2:	691b      	ldr	r3, [r3, #16]
 8005fc4:	693a      	ldr	r2, [r7, #16]
 8005fc6:	0151      	lsls	r1, r2, #5
 8005fc8:	697a      	ldr	r2, [r7, #20]
 8005fca:	440a      	add	r2, r1
 8005fcc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005fd0:	0cdb      	lsrs	r3, r3, #19
 8005fd2:	04db      	lsls	r3, r3, #19
 8005fd4:	6113      	str	r3, [r2, #16]
 8005fd6:	e04e      	b.n	8006076 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005fd8:	693b      	ldr	r3, [r7, #16]
 8005fda:	015a      	lsls	r2, r3, #5
 8005fdc:	697b      	ldr	r3, [r7, #20]
 8005fde:	4413      	add	r3, r2
 8005fe0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005fe4:	691b      	ldr	r3, [r3, #16]
 8005fe6:	693a      	ldr	r2, [r7, #16]
 8005fe8:	0151      	lsls	r1, r2, #5
 8005fea:	697a      	ldr	r2, [r7, #20]
 8005fec:	440a      	add	r2, r1
 8005fee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005ff2:	0cdb      	lsrs	r3, r3, #19
 8005ff4:	04db      	lsls	r3, r3, #19
 8005ff6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005ff8:	693b      	ldr	r3, [r7, #16]
 8005ffa:	015a      	lsls	r2, r3, #5
 8005ffc:	697b      	ldr	r3, [r7, #20]
 8005ffe:	4413      	add	r3, r2
 8006000:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006004:	691b      	ldr	r3, [r3, #16]
 8006006:	693a      	ldr	r2, [r7, #16]
 8006008:	0151      	lsls	r1, r2, #5
 800600a:	697a      	ldr	r2, [r7, #20]
 800600c:	440a      	add	r2, r1
 800600e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006012:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006016:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800601a:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 800601c:	68bb      	ldr	r3, [r7, #8]
 800601e:	695a      	ldr	r2, [r3, #20]
 8006020:	68bb      	ldr	r3, [r7, #8]
 8006022:	689b      	ldr	r3, [r3, #8]
 8006024:	429a      	cmp	r2, r3
 8006026:	d903      	bls.n	8006030 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8006028:	68bb      	ldr	r3, [r7, #8]
 800602a:	689a      	ldr	r2, [r3, #8]
 800602c:	68bb      	ldr	r3, [r7, #8]
 800602e:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006030:	693b      	ldr	r3, [r7, #16]
 8006032:	015a      	lsls	r2, r3, #5
 8006034:	697b      	ldr	r3, [r7, #20]
 8006036:	4413      	add	r3, r2
 8006038:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800603c:	691b      	ldr	r3, [r3, #16]
 800603e:	693a      	ldr	r2, [r7, #16]
 8006040:	0151      	lsls	r1, r2, #5
 8006042:	697a      	ldr	r2, [r7, #20]
 8006044:	440a      	add	r2, r1
 8006046:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800604a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800604e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8006050:	693b      	ldr	r3, [r7, #16]
 8006052:	015a      	lsls	r2, r3, #5
 8006054:	697b      	ldr	r3, [r7, #20]
 8006056:	4413      	add	r3, r2
 8006058:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800605c:	691a      	ldr	r2, [r3, #16]
 800605e:	68bb      	ldr	r3, [r7, #8]
 8006060:	695b      	ldr	r3, [r3, #20]
 8006062:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006066:	6939      	ldr	r1, [r7, #16]
 8006068:	0148      	lsls	r0, r1, #5
 800606a:	6979      	ldr	r1, [r7, #20]
 800606c:	4401      	add	r1, r0
 800606e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006072:	4313      	orrs	r3, r2
 8006074:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8006076:	79fb      	ldrb	r3, [r7, #7]
 8006078:	2b01      	cmp	r3, #1
 800607a:	d11e      	bne.n	80060ba <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800607c:	68bb      	ldr	r3, [r7, #8]
 800607e:	691b      	ldr	r3, [r3, #16]
 8006080:	2b00      	cmp	r3, #0
 8006082:	d009      	beq.n	8006098 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8006084:	693b      	ldr	r3, [r7, #16]
 8006086:	015a      	lsls	r2, r3, #5
 8006088:	697b      	ldr	r3, [r7, #20]
 800608a:	4413      	add	r3, r2
 800608c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006090:	461a      	mov	r2, r3
 8006092:	68bb      	ldr	r3, [r7, #8]
 8006094:	691b      	ldr	r3, [r3, #16]
 8006096:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006098:	693b      	ldr	r3, [r7, #16]
 800609a:	015a      	lsls	r2, r3, #5
 800609c:	697b      	ldr	r3, [r7, #20]
 800609e:	4413      	add	r3, r2
 80060a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	693a      	ldr	r2, [r7, #16]
 80060a8:	0151      	lsls	r1, r2, #5
 80060aa:	697a      	ldr	r2, [r7, #20]
 80060ac:	440a      	add	r2, r1
 80060ae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80060b2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80060b6:	6013      	str	r3, [r2, #0]
 80060b8:	e092      	b.n	80061e0 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80060ba:	693b      	ldr	r3, [r7, #16]
 80060bc:	015a      	lsls	r2, r3, #5
 80060be:	697b      	ldr	r3, [r7, #20]
 80060c0:	4413      	add	r3, r2
 80060c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	693a      	ldr	r2, [r7, #16]
 80060ca:	0151      	lsls	r1, r2, #5
 80060cc:	697a      	ldr	r2, [r7, #20]
 80060ce:	440a      	add	r2, r1
 80060d0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80060d4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80060d8:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 80060da:	68bb      	ldr	r3, [r7, #8]
 80060dc:	695b      	ldr	r3, [r3, #20]
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d07e      	beq.n	80061e0 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80060e2:	697b      	ldr	r3, [r7, #20]
 80060e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80060e8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80060ea:	68bb      	ldr	r3, [r7, #8]
 80060ec:	781b      	ldrb	r3, [r3, #0]
 80060ee:	f003 030f 	and.w	r3, r3, #15
 80060f2:	2101      	movs	r1, #1
 80060f4:	fa01 f303 	lsl.w	r3, r1, r3
 80060f8:	6979      	ldr	r1, [r7, #20]
 80060fa:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80060fe:	4313      	orrs	r3, r2
 8006100:	634b      	str	r3, [r1, #52]	; 0x34
 8006102:	e06d      	b.n	80061e0 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8006104:	693b      	ldr	r3, [r7, #16]
 8006106:	015a      	lsls	r2, r3, #5
 8006108:	697b      	ldr	r3, [r7, #20]
 800610a:	4413      	add	r3, r2
 800610c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006110:	691b      	ldr	r3, [r3, #16]
 8006112:	693a      	ldr	r2, [r7, #16]
 8006114:	0151      	lsls	r1, r2, #5
 8006116:	697a      	ldr	r2, [r7, #20]
 8006118:	440a      	add	r2, r1
 800611a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800611e:	0cdb      	lsrs	r3, r3, #19
 8006120:	04db      	lsls	r3, r3, #19
 8006122:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8006124:	693b      	ldr	r3, [r7, #16]
 8006126:	015a      	lsls	r2, r3, #5
 8006128:	697b      	ldr	r3, [r7, #20]
 800612a:	4413      	add	r3, r2
 800612c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006130:	691b      	ldr	r3, [r3, #16]
 8006132:	693a      	ldr	r2, [r7, #16]
 8006134:	0151      	lsls	r1, r2, #5
 8006136:	697a      	ldr	r2, [r7, #20]
 8006138:	440a      	add	r2, r1
 800613a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800613e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006142:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006146:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8006148:	68bb      	ldr	r3, [r7, #8]
 800614a:	695b      	ldr	r3, [r3, #20]
 800614c:	2b00      	cmp	r3, #0
 800614e:	d003      	beq.n	8006158 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8006150:	68bb      	ldr	r3, [r7, #8]
 8006152:	689a      	ldr	r2, [r3, #8]
 8006154:	68bb      	ldr	r3, [r7, #8]
 8006156:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006158:	693b      	ldr	r3, [r7, #16]
 800615a:	015a      	lsls	r2, r3, #5
 800615c:	697b      	ldr	r3, [r7, #20]
 800615e:	4413      	add	r3, r2
 8006160:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006164:	691b      	ldr	r3, [r3, #16]
 8006166:	693a      	ldr	r2, [r7, #16]
 8006168:	0151      	lsls	r1, r2, #5
 800616a:	697a      	ldr	r2, [r7, #20]
 800616c:	440a      	add	r2, r1
 800616e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006172:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006176:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8006178:	693b      	ldr	r3, [r7, #16]
 800617a:	015a      	lsls	r2, r3, #5
 800617c:	697b      	ldr	r3, [r7, #20]
 800617e:	4413      	add	r3, r2
 8006180:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006184:	691a      	ldr	r2, [r3, #16]
 8006186:	68bb      	ldr	r3, [r7, #8]
 8006188:	689b      	ldr	r3, [r3, #8]
 800618a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800618e:	6939      	ldr	r1, [r7, #16]
 8006190:	0148      	lsls	r0, r1, #5
 8006192:	6979      	ldr	r1, [r7, #20]
 8006194:	4401      	add	r1, r0
 8006196:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800619a:	4313      	orrs	r3, r2
 800619c:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800619e:	79fb      	ldrb	r3, [r7, #7]
 80061a0:	2b01      	cmp	r3, #1
 80061a2:	d10d      	bne.n	80061c0 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80061a4:	68bb      	ldr	r3, [r7, #8]
 80061a6:	68db      	ldr	r3, [r3, #12]
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d009      	beq.n	80061c0 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80061ac:	68bb      	ldr	r3, [r7, #8]
 80061ae:	68d9      	ldr	r1, [r3, #12]
 80061b0:	693b      	ldr	r3, [r7, #16]
 80061b2:	015a      	lsls	r2, r3, #5
 80061b4:	697b      	ldr	r3, [r7, #20]
 80061b6:	4413      	add	r3, r2
 80061b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80061bc:	460a      	mov	r2, r1
 80061be:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80061c0:	693b      	ldr	r3, [r7, #16]
 80061c2:	015a      	lsls	r2, r3, #5
 80061c4:	697b      	ldr	r3, [r7, #20]
 80061c6:	4413      	add	r3, r2
 80061c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	693a      	ldr	r2, [r7, #16]
 80061d0:	0151      	lsls	r1, r2, #5
 80061d2:	697a      	ldr	r2, [r7, #20]
 80061d4:	440a      	add	r2, r1
 80061d6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80061da:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80061de:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80061e0:	2300      	movs	r3, #0
}
 80061e2:	4618      	mov	r0, r3
 80061e4:	371c      	adds	r7, #28
 80061e6:	46bd      	mov	sp, r7
 80061e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ec:	4770      	bx	lr

080061ee <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80061ee:	b480      	push	{r7}
 80061f0:	b089      	sub	sp, #36	; 0x24
 80061f2:	af00      	add	r7, sp, #0
 80061f4:	60f8      	str	r0, [r7, #12]
 80061f6:	60b9      	str	r1, [r7, #8]
 80061f8:	4611      	mov	r1, r2
 80061fa:	461a      	mov	r2, r3
 80061fc:	460b      	mov	r3, r1
 80061fe:	71fb      	strb	r3, [r7, #7]
 8006200:	4613      	mov	r3, r2
 8006202:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8006208:	68bb      	ldr	r3, [r7, #8]
 800620a:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800620c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8006210:	2b00      	cmp	r3, #0
 8006212:	d123      	bne.n	800625c <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8006214:	88bb      	ldrh	r3, [r7, #4]
 8006216:	3303      	adds	r3, #3
 8006218:	089b      	lsrs	r3, r3, #2
 800621a:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800621c:	2300      	movs	r3, #0
 800621e:	61bb      	str	r3, [r7, #24]
 8006220:	e018      	b.n	8006254 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8006222:	79fb      	ldrb	r3, [r7, #7]
 8006224:	031a      	lsls	r2, r3, #12
 8006226:	697b      	ldr	r3, [r7, #20]
 8006228:	4413      	add	r3, r2
 800622a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800622e:	461a      	mov	r2, r3
 8006230:	69fb      	ldr	r3, [r7, #28]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	6013      	str	r3, [r2, #0]
      pSrc++;
 8006236:	69fb      	ldr	r3, [r7, #28]
 8006238:	3301      	adds	r3, #1
 800623a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800623c:	69fb      	ldr	r3, [r7, #28]
 800623e:	3301      	adds	r3, #1
 8006240:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006242:	69fb      	ldr	r3, [r7, #28]
 8006244:	3301      	adds	r3, #1
 8006246:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006248:	69fb      	ldr	r3, [r7, #28]
 800624a:	3301      	adds	r3, #1
 800624c:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800624e:	69bb      	ldr	r3, [r7, #24]
 8006250:	3301      	adds	r3, #1
 8006252:	61bb      	str	r3, [r7, #24]
 8006254:	69ba      	ldr	r2, [r7, #24]
 8006256:	693b      	ldr	r3, [r7, #16]
 8006258:	429a      	cmp	r2, r3
 800625a:	d3e2      	bcc.n	8006222 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800625c:	2300      	movs	r3, #0
}
 800625e:	4618      	mov	r0, r3
 8006260:	3724      	adds	r7, #36	; 0x24
 8006262:	46bd      	mov	sp, r7
 8006264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006268:	4770      	bx	lr

0800626a <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800626a:	b480      	push	{r7}
 800626c:	b08b      	sub	sp, #44	; 0x2c
 800626e:	af00      	add	r7, sp, #0
 8006270:	60f8      	str	r0, [r7, #12]
 8006272:	60b9      	str	r1, [r7, #8]
 8006274:	4613      	mov	r3, r2
 8006276:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800627c:	68bb      	ldr	r3, [r7, #8]
 800627e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8006280:	88fb      	ldrh	r3, [r7, #6]
 8006282:	089b      	lsrs	r3, r3, #2
 8006284:	b29b      	uxth	r3, r3
 8006286:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8006288:	88fb      	ldrh	r3, [r7, #6]
 800628a:	f003 0303 	and.w	r3, r3, #3
 800628e:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8006290:	2300      	movs	r3, #0
 8006292:	623b      	str	r3, [r7, #32]
 8006294:	e014      	b.n	80062c0 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8006296:	69bb      	ldr	r3, [r7, #24]
 8006298:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800629c:	681a      	ldr	r2, [r3, #0]
 800629e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062a0:	601a      	str	r2, [r3, #0]
    pDest++;
 80062a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062a4:	3301      	adds	r3, #1
 80062a6:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80062a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062aa:	3301      	adds	r3, #1
 80062ac:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80062ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062b0:	3301      	adds	r3, #1
 80062b2:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80062b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062b6:	3301      	adds	r3, #1
 80062b8:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 80062ba:	6a3b      	ldr	r3, [r7, #32]
 80062bc:	3301      	adds	r3, #1
 80062be:	623b      	str	r3, [r7, #32]
 80062c0:	6a3a      	ldr	r2, [r7, #32]
 80062c2:	697b      	ldr	r3, [r7, #20]
 80062c4:	429a      	cmp	r2, r3
 80062c6:	d3e6      	bcc.n	8006296 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80062c8:	8bfb      	ldrh	r3, [r7, #30]
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d01e      	beq.n	800630c <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80062ce:	2300      	movs	r3, #0
 80062d0:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80062d2:	69bb      	ldr	r3, [r7, #24]
 80062d4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80062d8:	461a      	mov	r2, r3
 80062da:	f107 0310 	add.w	r3, r7, #16
 80062de:	6812      	ldr	r2, [r2, #0]
 80062e0:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80062e2:	693a      	ldr	r2, [r7, #16]
 80062e4:	6a3b      	ldr	r3, [r7, #32]
 80062e6:	b2db      	uxtb	r3, r3
 80062e8:	00db      	lsls	r3, r3, #3
 80062ea:	fa22 f303 	lsr.w	r3, r2, r3
 80062ee:	b2da      	uxtb	r2, r3
 80062f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062f2:	701a      	strb	r2, [r3, #0]
      i++;
 80062f4:	6a3b      	ldr	r3, [r7, #32]
 80062f6:	3301      	adds	r3, #1
 80062f8:	623b      	str	r3, [r7, #32]
      pDest++;
 80062fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062fc:	3301      	adds	r3, #1
 80062fe:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8006300:	8bfb      	ldrh	r3, [r7, #30]
 8006302:	3b01      	subs	r3, #1
 8006304:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8006306:	8bfb      	ldrh	r3, [r7, #30]
 8006308:	2b00      	cmp	r3, #0
 800630a:	d1ea      	bne.n	80062e2 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800630c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800630e:	4618      	mov	r0, r3
 8006310:	372c      	adds	r7, #44	; 0x2c
 8006312:	46bd      	mov	sp, r7
 8006314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006318:	4770      	bx	lr

0800631a <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800631a:	b480      	push	{r7}
 800631c:	b085      	sub	sp, #20
 800631e:	af00      	add	r7, sp, #0
 8006320:	6078      	str	r0, [r7, #4]
 8006322:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006328:	683b      	ldr	r3, [r7, #0]
 800632a:	781b      	ldrb	r3, [r3, #0]
 800632c:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800632e:	683b      	ldr	r3, [r7, #0]
 8006330:	785b      	ldrb	r3, [r3, #1]
 8006332:	2b01      	cmp	r3, #1
 8006334:	d12c      	bne.n	8006390 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006336:	68bb      	ldr	r3, [r7, #8]
 8006338:	015a      	lsls	r2, r3, #5
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	4413      	add	r3, r2
 800633e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	2b00      	cmp	r3, #0
 8006346:	db12      	blt.n	800636e <USB_EPSetStall+0x54>
 8006348:	68bb      	ldr	r3, [r7, #8]
 800634a:	2b00      	cmp	r3, #0
 800634c:	d00f      	beq.n	800636e <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800634e:	68bb      	ldr	r3, [r7, #8]
 8006350:	015a      	lsls	r2, r3, #5
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	4413      	add	r3, r2
 8006356:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	68ba      	ldr	r2, [r7, #8]
 800635e:	0151      	lsls	r1, r2, #5
 8006360:	68fa      	ldr	r2, [r7, #12]
 8006362:	440a      	add	r2, r1
 8006364:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006368:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800636c:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800636e:	68bb      	ldr	r3, [r7, #8]
 8006370:	015a      	lsls	r2, r3, #5
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	4413      	add	r3, r2
 8006376:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	68ba      	ldr	r2, [r7, #8]
 800637e:	0151      	lsls	r1, r2, #5
 8006380:	68fa      	ldr	r2, [r7, #12]
 8006382:	440a      	add	r2, r1
 8006384:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006388:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800638c:	6013      	str	r3, [r2, #0]
 800638e:	e02b      	b.n	80063e8 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006390:	68bb      	ldr	r3, [r7, #8]
 8006392:	015a      	lsls	r2, r3, #5
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	4413      	add	r3, r2
 8006398:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	2b00      	cmp	r3, #0
 80063a0:	db12      	blt.n	80063c8 <USB_EPSetStall+0xae>
 80063a2:	68bb      	ldr	r3, [r7, #8]
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d00f      	beq.n	80063c8 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80063a8:	68bb      	ldr	r3, [r7, #8]
 80063aa:	015a      	lsls	r2, r3, #5
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	4413      	add	r3, r2
 80063b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	68ba      	ldr	r2, [r7, #8]
 80063b8:	0151      	lsls	r1, r2, #5
 80063ba:	68fa      	ldr	r2, [r7, #12]
 80063bc:	440a      	add	r2, r1
 80063be:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80063c2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80063c6:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80063c8:	68bb      	ldr	r3, [r7, #8]
 80063ca:	015a      	lsls	r2, r3, #5
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	4413      	add	r3, r2
 80063d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	68ba      	ldr	r2, [r7, #8]
 80063d8:	0151      	lsls	r1, r2, #5
 80063da:	68fa      	ldr	r2, [r7, #12]
 80063dc:	440a      	add	r2, r1
 80063de:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80063e2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80063e6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80063e8:	2300      	movs	r3, #0
}
 80063ea:	4618      	mov	r0, r3
 80063ec:	3714      	adds	r7, #20
 80063ee:	46bd      	mov	sp, r7
 80063f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f4:	4770      	bx	lr

080063f6 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80063f6:	b480      	push	{r7}
 80063f8:	b085      	sub	sp, #20
 80063fa:	af00      	add	r7, sp, #0
 80063fc:	6078      	str	r0, [r7, #4]
 80063fe:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006404:	683b      	ldr	r3, [r7, #0]
 8006406:	781b      	ldrb	r3, [r3, #0]
 8006408:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800640a:	683b      	ldr	r3, [r7, #0]
 800640c:	785b      	ldrb	r3, [r3, #1]
 800640e:	2b01      	cmp	r3, #1
 8006410:	d128      	bne.n	8006464 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8006412:	68bb      	ldr	r3, [r7, #8]
 8006414:	015a      	lsls	r2, r3, #5
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	4413      	add	r3, r2
 800641a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	68ba      	ldr	r2, [r7, #8]
 8006422:	0151      	lsls	r1, r2, #5
 8006424:	68fa      	ldr	r2, [r7, #12]
 8006426:	440a      	add	r2, r1
 8006428:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800642c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006430:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006432:	683b      	ldr	r3, [r7, #0]
 8006434:	78db      	ldrb	r3, [r3, #3]
 8006436:	2b03      	cmp	r3, #3
 8006438:	d003      	beq.n	8006442 <USB_EPClearStall+0x4c>
 800643a:	683b      	ldr	r3, [r7, #0]
 800643c:	78db      	ldrb	r3, [r3, #3]
 800643e:	2b02      	cmp	r3, #2
 8006440:	d138      	bne.n	80064b4 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006442:	68bb      	ldr	r3, [r7, #8]
 8006444:	015a      	lsls	r2, r3, #5
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	4413      	add	r3, r2
 800644a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	68ba      	ldr	r2, [r7, #8]
 8006452:	0151      	lsls	r1, r2, #5
 8006454:	68fa      	ldr	r2, [r7, #12]
 8006456:	440a      	add	r2, r1
 8006458:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800645c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006460:	6013      	str	r3, [r2, #0]
 8006462:	e027      	b.n	80064b4 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8006464:	68bb      	ldr	r3, [r7, #8]
 8006466:	015a      	lsls	r2, r3, #5
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	4413      	add	r3, r2
 800646c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	68ba      	ldr	r2, [r7, #8]
 8006474:	0151      	lsls	r1, r2, #5
 8006476:	68fa      	ldr	r2, [r7, #12]
 8006478:	440a      	add	r2, r1
 800647a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800647e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006482:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006484:	683b      	ldr	r3, [r7, #0]
 8006486:	78db      	ldrb	r3, [r3, #3]
 8006488:	2b03      	cmp	r3, #3
 800648a:	d003      	beq.n	8006494 <USB_EPClearStall+0x9e>
 800648c:	683b      	ldr	r3, [r7, #0]
 800648e:	78db      	ldrb	r3, [r3, #3]
 8006490:	2b02      	cmp	r3, #2
 8006492:	d10f      	bne.n	80064b4 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006494:	68bb      	ldr	r3, [r7, #8]
 8006496:	015a      	lsls	r2, r3, #5
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	4413      	add	r3, r2
 800649c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	68ba      	ldr	r2, [r7, #8]
 80064a4:	0151      	lsls	r1, r2, #5
 80064a6:	68fa      	ldr	r2, [r7, #12]
 80064a8:	440a      	add	r2, r1
 80064aa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80064ae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80064b2:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80064b4:	2300      	movs	r3, #0
}
 80064b6:	4618      	mov	r0, r3
 80064b8:	3714      	adds	r7, #20
 80064ba:	46bd      	mov	sp, r7
 80064bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064c0:	4770      	bx	lr

080064c2 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80064c2:	b480      	push	{r7}
 80064c4:	b085      	sub	sp, #20
 80064c6:	af00      	add	r7, sp, #0
 80064c8:	6078      	str	r0, [r7, #4]
 80064ca:	460b      	mov	r3, r1
 80064cc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	68fa      	ldr	r2, [r7, #12]
 80064dc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80064e0:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80064e4:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80064ec:	681a      	ldr	r2, [r3, #0]
 80064ee:	78fb      	ldrb	r3, [r7, #3]
 80064f0:	011b      	lsls	r3, r3, #4
 80064f2:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 80064f6:	68f9      	ldr	r1, [r7, #12]
 80064f8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80064fc:	4313      	orrs	r3, r2
 80064fe:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8006500:	2300      	movs	r3, #0
}
 8006502:	4618      	mov	r0, r3
 8006504:	3714      	adds	r7, #20
 8006506:	46bd      	mov	sp, r7
 8006508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800650c:	4770      	bx	lr

0800650e <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800650e:	b480      	push	{r7}
 8006510:	b085      	sub	sp, #20
 8006512:	af00      	add	r7, sp, #0
 8006514:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	68fa      	ldr	r2, [r7, #12]
 8006524:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006528:	f023 0303 	bic.w	r3, r3, #3
 800652c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006534:	685b      	ldr	r3, [r3, #4]
 8006536:	68fa      	ldr	r2, [r7, #12]
 8006538:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800653c:	f023 0302 	bic.w	r3, r3, #2
 8006540:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006542:	2300      	movs	r3, #0
}
 8006544:	4618      	mov	r0, r3
 8006546:	3714      	adds	r7, #20
 8006548:	46bd      	mov	sp, r7
 800654a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800654e:	4770      	bx	lr

08006550 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006550:	b480      	push	{r7}
 8006552:	b085      	sub	sp, #20
 8006554:	af00      	add	r7, sp, #0
 8006556:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	68fa      	ldr	r2, [r7, #12]
 8006566:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800656a:	f023 0303 	bic.w	r3, r3, #3
 800656e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006576:	685b      	ldr	r3, [r3, #4]
 8006578:	68fa      	ldr	r2, [r7, #12]
 800657a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800657e:	f043 0302 	orr.w	r3, r3, #2
 8006582:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006584:	2300      	movs	r3, #0
}
 8006586:	4618      	mov	r0, r3
 8006588:	3714      	adds	r7, #20
 800658a:	46bd      	mov	sp, r7
 800658c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006590:	4770      	bx	lr

08006592 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8006592:	b480      	push	{r7}
 8006594:	b085      	sub	sp, #20
 8006596:	af00      	add	r7, sp, #0
 8006598:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	695b      	ldr	r3, [r3, #20]
 800659e:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	699b      	ldr	r3, [r3, #24]
 80065a4:	68fa      	ldr	r2, [r7, #12]
 80065a6:	4013      	ands	r3, r2
 80065a8:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80065aa:	68fb      	ldr	r3, [r7, #12]
}
 80065ac:	4618      	mov	r0, r3
 80065ae:	3714      	adds	r7, #20
 80065b0:	46bd      	mov	sp, r7
 80065b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065b6:	4770      	bx	lr

080065b8 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80065b8:	b480      	push	{r7}
 80065ba:	b085      	sub	sp, #20
 80065bc:	af00      	add	r7, sp, #0
 80065be:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80065ca:	699b      	ldr	r3, [r3, #24]
 80065cc:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80065d4:	69db      	ldr	r3, [r3, #28]
 80065d6:	68ba      	ldr	r2, [r7, #8]
 80065d8:	4013      	ands	r3, r2
 80065da:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80065dc:	68bb      	ldr	r3, [r7, #8]
 80065de:	0c1b      	lsrs	r3, r3, #16
}
 80065e0:	4618      	mov	r0, r3
 80065e2:	3714      	adds	r7, #20
 80065e4:	46bd      	mov	sp, r7
 80065e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ea:	4770      	bx	lr

080065ec <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80065ec:	b480      	push	{r7}
 80065ee:	b085      	sub	sp, #20
 80065f0:	af00      	add	r7, sp, #0
 80065f2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80065fe:	699b      	ldr	r3, [r3, #24]
 8006600:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006608:	69db      	ldr	r3, [r3, #28]
 800660a:	68ba      	ldr	r2, [r7, #8]
 800660c:	4013      	ands	r3, r2
 800660e:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8006610:	68bb      	ldr	r3, [r7, #8]
 8006612:	b29b      	uxth	r3, r3
}
 8006614:	4618      	mov	r0, r3
 8006616:	3714      	adds	r7, #20
 8006618:	46bd      	mov	sp, r7
 800661a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800661e:	4770      	bx	lr

08006620 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006620:	b480      	push	{r7}
 8006622:	b085      	sub	sp, #20
 8006624:	af00      	add	r7, sp, #0
 8006626:	6078      	str	r0, [r7, #4]
 8006628:	460b      	mov	r3, r1
 800662a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8006630:	78fb      	ldrb	r3, [r7, #3]
 8006632:	015a      	lsls	r2, r3, #5
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	4413      	add	r3, r2
 8006638:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800663c:	689b      	ldr	r3, [r3, #8]
 800663e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006646:	695b      	ldr	r3, [r3, #20]
 8006648:	68ba      	ldr	r2, [r7, #8]
 800664a:	4013      	ands	r3, r2
 800664c:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800664e:	68bb      	ldr	r3, [r7, #8]
}
 8006650:	4618      	mov	r0, r3
 8006652:	3714      	adds	r7, #20
 8006654:	46bd      	mov	sp, r7
 8006656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800665a:	4770      	bx	lr

0800665c <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800665c:	b480      	push	{r7}
 800665e:	b087      	sub	sp, #28
 8006660:	af00      	add	r7, sp, #0
 8006662:	6078      	str	r0, [r7, #4]
 8006664:	460b      	mov	r3, r1
 8006666:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800666c:	697b      	ldr	r3, [r7, #20]
 800666e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006672:	691b      	ldr	r3, [r3, #16]
 8006674:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8006676:	697b      	ldr	r3, [r7, #20]
 8006678:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800667c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800667e:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8006680:	78fb      	ldrb	r3, [r7, #3]
 8006682:	f003 030f 	and.w	r3, r3, #15
 8006686:	68fa      	ldr	r2, [r7, #12]
 8006688:	fa22 f303 	lsr.w	r3, r2, r3
 800668c:	01db      	lsls	r3, r3, #7
 800668e:	b2db      	uxtb	r3, r3
 8006690:	693a      	ldr	r2, [r7, #16]
 8006692:	4313      	orrs	r3, r2
 8006694:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8006696:	78fb      	ldrb	r3, [r7, #3]
 8006698:	015a      	lsls	r2, r3, #5
 800669a:	697b      	ldr	r3, [r7, #20]
 800669c:	4413      	add	r3, r2
 800669e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80066a2:	689b      	ldr	r3, [r3, #8]
 80066a4:	693a      	ldr	r2, [r7, #16]
 80066a6:	4013      	ands	r3, r2
 80066a8:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80066aa:	68bb      	ldr	r3, [r7, #8]
}
 80066ac:	4618      	mov	r0, r3
 80066ae:	371c      	adds	r7, #28
 80066b0:	46bd      	mov	sp, r7
 80066b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066b6:	4770      	bx	lr

080066b8 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80066b8:	b480      	push	{r7}
 80066ba:	b083      	sub	sp, #12
 80066bc:	af00      	add	r7, sp, #0
 80066be:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	695b      	ldr	r3, [r3, #20]
 80066c4:	f003 0301 	and.w	r3, r3, #1
}
 80066c8:	4618      	mov	r0, r3
 80066ca:	370c      	adds	r7, #12
 80066cc:	46bd      	mov	sp, r7
 80066ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066d2:	4770      	bx	lr

080066d4 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 80066d4:	b480      	push	{r7}
 80066d6:	b085      	sub	sp, #20
 80066d8:	af00      	add	r7, sp, #0
 80066da:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	68fa      	ldr	r2, [r7, #12]
 80066ea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80066ee:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80066f2:	f023 0307 	bic.w	r3, r3, #7
 80066f6:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80066fe:	685b      	ldr	r3, [r3, #4]
 8006700:	68fa      	ldr	r2, [r7, #12]
 8006702:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006706:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800670a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800670c:	2300      	movs	r3, #0
}
 800670e:	4618      	mov	r0, r3
 8006710:	3714      	adds	r7, #20
 8006712:	46bd      	mov	sp, r7
 8006714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006718:	4770      	bx	lr
	...

0800671c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800671c:	b480      	push	{r7}
 800671e:	b087      	sub	sp, #28
 8006720:	af00      	add	r7, sp, #0
 8006722:	60f8      	str	r0, [r7, #12]
 8006724:	460b      	mov	r3, r1
 8006726:	607a      	str	r2, [r7, #4]
 8006728:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	333c      	adds	r3, #60	; 0x3c
 8006732:	3304      	adds	r3, #4
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8006738:	693b      	ldr	r3, [r7, #16]
 800673a:	4a26      	ldr	r2, [pc, #152]	; (80067d4 <USB_EP0_OutStart+0xb8>)
 800673c:	4293      	cmp	r3, r2
 800673e:	d90a      	bls.n	8006756 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006740:	697b      	ldr	r3, [r7, #20]
 8006742:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800674c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006750:	d101      	bne.n	8006756 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8006752:	2300      	movs	r3, #0
 8006754:	e037      	b.n	80067c6 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8006756:	697b      	ldr	r3, [r7, #20]
 8006758:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800675c:	461a      	mov	r2, r3
 800675e:	2300      	movs	r3, #0
 8006760:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006762:	697b      	ldr	r3, [r7, #20]
 8006764:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006768:	691b      	ldr	r3, [r3, #16]
 800676a:	697a      	ldr	r2, [r7, #20]
 800676c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006770:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006774:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8006776:	697b      	ldr	r3, [r7, #20]
 8006778:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800677c:	691b      	ldr	r3, [r3, #16]
 800677e:	697a      	ldr	r2, [r7, #20]
 8006780:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006784:	f043 0318 	orr.w	r3, r3, #24
 8006788:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800678a:	697b      	ldr	r3, [r7, #20]
 800678c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006790:	691b      	ldr	r3, [r3, #16]
 8006792:	697a      	ldr	r2, [r7, #20]
 8006794:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006798:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800679c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800679e:	7afb      	ldrb	r3, [r7, #11]
 80067a0:	2b01      	cmp	r3, #1
 80067a2:	d10f      	bne.n	80067c4 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80067a4:	697b      	ldr	r3, [r7, #20]
 80067a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80067aa:	461a      	mov	r2, r3
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80067b0:	697b      	ldr	r3, [r7, #20]
 80067b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	697a      	ldr	r2, [r7, #20]
 80067ba:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80067be:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 80067c2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80067c4:	2300      	movs	r3, #0
}
 80067c6:	4618      	mov	r0, r3
 80067c8:	371c      	adds	r7, #28
 80067ca:	46bd      	mov	sp, r7
 80067cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067d0:	4770      	bx	lr
 80067d2:	bf00      	nop
 80067d4:	4f54300a 	.word	0x4f54300a

080067d8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80067d8:	b480      	push	{r7}
 80067da:	b085      	sub	sp, #20
 80067dc:	af00      	add	r7, sp, #0
 80067de:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80067e0:	2300      	movs	r3, #0
 80067e2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	3301      	adds	r3, #1
 80067e8:	60fb      	str	r3, [r7, #12]
 80067ea:	4a13      	ldr	r2, [pc, #76]	; (8006838 <USB_CoreReset+0x60>)
 80067ec:	4293      	cmp	r3, r2
 80067ee:	d901      	bls.n	80067f4 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 80067f0:	2303      	movs	r3, #3
 80067f2:	e01a      	b.n	800682a <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	691b      	ldr	r3, [r3, #16]
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	daf3      	bge.n	80067e4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80067fc:	2300      	movs	r3, #0
 80067fe:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	691b      	ldr	r3, [r3, #16]
 8006804:	f043 0201 	orr.w	r2, r3, #1
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	3301      	adds	r3, #1
 8006810:	60fb      	str	r3, [r7, #12]
 8006812:	4a09      	ldr	r2, [pc, #36]	; (8006838 <USB_CoreReset+0x60>)
 8006814:	4293      	cmp	r3, r2
 8006816:	d901      	bls.n	800681c <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 8006818:	2303      	movs	r3, #3
 800681a:	e006      	b.n	800682a <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	691b      	ldr	r3, [r3, #16]
 8006820:	f003 0301 	and.w	r3, r3, #1
 8006824:	2b01      	cmp	r3, #1
 8006826:	d0f1      	beq.n	800680c <USB_CoreReset+0x34>

  return HAL_OK;
 8006828:	2300      	movs	r3, #0
}
 800682a:	4618      	mov	r0, r3
 800682c:	3714      	adds	r7, #20
 800682e:	46bd      	mov	sp, r7
 8006830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006834:	4770      	bx	lr
 8006836:	bf00      	nop
 8006838:	00030d40 	.word	0x00030d40

0800683c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800683c:	b580      	push	{r7, lr}
 800683e:	b084      	sub	sp, #16
 8006840:	af00      	add	r7, sp, #0
 8006842:	6078      	str	r0, [r7, #4]
 8006844:	460b      	mov	r3, r1
 8006846:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8006848:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800684c:	f002 f9a6 	bl	8008b9c <USBD_static_malloc>
 8006850:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	2b00      	cmp	r3, #0
 8006856:	d105      	bne.n	8006864 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	2200      	movs	r2, #0
 800685c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8006860:	2302      	movs	r3, #2
 8006862:	e066      	b.n	8006932 <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	68fa      	ldr	r2, [r7, #12]
 8006868:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	7c1b      	ldrb	r3, [r3, #16]
 8006870:	2b00      	cmp	r3, #0
 8006872:	d119      	bne.n	80068a8 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8006874:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006878:	2202      	movs	r2, #2
 800687a:	2181      	movs	r1, #129	; 0x81
 800687c:	6878      	ldr	r0, [r7, #4]
 800687e:	f002 f81c 	bl	80088ba <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	2201      	movs	r2, #1
 8006886:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8006888:	f44f 7300 	mov.w	r3, #512	; 0x200
 800688c:	2202      	movs	r2, #2
 800688e:	2101      	movs	r1, #1
 8006890:	6878      	ldr	r0, [r7, #4]
 8006892:	f002 f812 	bl	80088ba <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	2201      	movs	r2, #1
 800689a:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	2210      	movs	r2, #16
 80068a2:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 80068a6:	e016      	b.n	80068d6 <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80068a8:	2340      	movs	r3, #64	; 0x40
 80068aa:	2202      	movs	r2, #2
 80068ac:	2181      	movs	r1, #129	; 0x81
 80068ae:	6878      	ldr	r0, [r7, #4]
 80068b0:	f002 f803 	bl	80088ba <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	2201      	movs	r2, #1
 80068b8:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80068ba:	2340      	movs	r3, #64	; 0x40
 80068bc:	2202      	movs	r2, #2
 80068be:	2101      	movs	r1, #1
 80068c0:	6878      	ldr	r0, [r7, #4]
 80068c2:	f001 fffa 	bl	80088ba <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	2201      	movs	r2, #1
 80068ca:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	2210      	movs	r2, #16
 80068d2:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80068d6:	2308      	movs	r3, #8
 80068d8:	2203      	movs	r2, #3
 80068da:	2182      	movs	r1, #130	; 0x82
 80068dc:	6878      	ldr	r0, [r7, #4]
 80068de:	f001 ffec 	bl	80088ba <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	2201      	movs	r2, #1
 80068e6:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	2200      	movs	r2, #0
 80068f8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	2200      	movs	r2, #0
 8006900:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	7c1b      	ldrb	r3, [r3, #16]
 8006908:	2b00      	cmp	r3, #0
 800690a:	d109      	bne.n	8006920 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006912:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006916:	2101      	movs	r1, #1
 8006918:	6878      	ldr	r0, [r7, #4]
 800691a:	f002 f8bd 	bl	8008a98 <USBD_LL_PrepareReceive>
 800691e:	e007      	b.n	8006930 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006926:	2340      	movs	r3, #64	; 0x40
 8006928:	2101      	movs	r1, #1
 800692a:	6878      	ldr	r0, [r7, #4]
 800692c:	f002 f8b4 	bl	8008a98 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006930:	2300      	movs	r3, #0
}
 8006932:	4618      	mov	r0, r3
 8006934:	3710      	adds	r7, #16
 8006936:	46bd      	mov	sp, r7
 8006938:	bd80      	pop	{r7, pc}

0800693a <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800693a:	b580      	push	{r7, lr}
 800693c:	b082      	sub	sp, #8
 800693e:	af00      	add	r7, sp, #0
 8006940:	6078      	str	r0, [r7, #4]
 8006942:	460b      	mov	r3, r1
 8006944:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8006946:	2181      	movs	r1, #129	; 0x81
 8006948:	6878      	ldr	r0, [r7, #4]
 800694a:	f001 ffdc 	bl	8008906 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	2200      	movs	r2, #0
 8006952:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8006954:	2101      	movs	r1, #1
 8006956:	6878      	ldr	r0, [r7, #4]
 8006958:	f001 ffd5 	bl	8008906 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	2200      	movs	r2, #0
 8006960:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8006964:	2182      	movs	r1, #130	; 0x82
 8006966:	6878      	ldr	r0, [r7, #4]
 8006968:	f001 ffcd 	bl	8008906 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	2200      	movs	r2, #0
 8006970:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	2200      	movs	r2, #0
 8006978:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006982:	2b00      	cmp	r3, #0
 8006984:	d00e      	beq.n	80069a4 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800698c:	685b      	ldr	r3, [r3, #4]
 800698e:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006996:	4618      	mov	r0, r3
 8006998:	f002 f90e 	bl	8008bb8 <USBD_static_free>
    pdev->pClassData = NULL;
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	2200      	movs	r2, #0
 80069a0:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 80069a4:	2300      	movs	r3, #0
}
 80069a6:	4618      	mov	r0, r3
 80069a8:	3708      	adds	r7, #8
 80069aa:	46bd      	mov	sp, r7
 80069ac:	bd80      	pop	{r7, pc}
	...

080069b0 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 80069b0:	b580      	push	{r7, lr}
 80069b2:	b086      	sub	sp, #24
 80069b4:	af00      	add	r7, sp, #0
 80069b6:	6078      	str	r0, [r7, #4]
 80069b8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80069c0:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 80069c2:	2300      	movs	r3, #0
 80069c4:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 80069c6:	2300      	movs	r3, #0
 80069c8:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 80069ca:	2300      	movs	r3, #0
 80069cc:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 80069ce:	693b      	ldr	r3, [r7, #16]
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d101      	bne.n	80069d8 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 80069d4:	2303      	movs	r3, #3
 80069d6:	e0af      	b.n	8006b38 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80069d8:	683b      	ldr	r3, [r7, #0]
 80069da:	781b      	ldrb	r3, [r3, #0]
 80069dc:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d03f      	beq.n	8006a64 <USBD_CDC_Setup+0xb4>
 80069e4:	2b20      	cmp	r3, #32
 80069e6:	f040 809f 	bne.w	8006b28 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 80069ea:	683b      	ldr	r3, [r7, #0]
 80069ec:	88db      	ldrh	r3, [r3, #6]
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d02e      	beq.n	8006a50 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 80069f2:	683b      	ldr	r3, [r7, #0]
 80069f4:	781b      	ldrb	r3, [r3, #0]
 80069f6:	b25b      	sxtb	r3, r3
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	da16      	bge.n	8006a2a <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006a02:	689b      	ldr	r3, [r3, #8]
 8006a04:	683a      	ldr	r2, [r7, #0]
 8006a06:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 8006a08:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006a0a:	683a      	ldr	r2, [r7, #0]
 8006a0c:	88d2      	ldrh	r2, [r2, #6]
 8006a0e:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8006a10:	683b      	ldr	r3, [r7, #0]
 8006a12:	88db      	ldrh	r3, [r3, #6]
 8006a14:	2b07      	cmp	r3, #7
 8006a16:	bf28      	it	cs
 8006a18:	2307      	movcs	r3, #7
 8006a1a:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8006a1c:	693b      	ldr	r3, [r7, #16]
 8006a1e:	89fa      	ldrh	r2, [r7, #14]
 8006a20:	4619      	mov	r1, r3
 8006a22:	6878      	ldr	r0, [r7, #4]
 8006a24:	f001 fb13 	bl	800804e <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 8006a28:	e085      	b.n	8006b36 <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 8006a2a:	683b      	ldr	r3, [r7, #0]
 8006a2c:	785a      	ldrb	r2, [r3, #1]
 8006a2e:	693b      	ldr	r3, [r7, #16]
 8006a30:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8006a34:	683b      	ldr	r3, [r7, #0]
 8006a36:	88db      	ldrh	r3, [r3, #6]
 8006a38:	b2da      	uxtb	r2, r3
 8006a3a:	693b      	ldr	r3, [r7, #16]
 8006a3c:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8006a40:	6939      	ldr	r1, [r7, #16]
 8006a42:	683b      	ldr	r3, [r7, #0]
 8006a44:	88db      	ldrh	r3, [r3, #6]
 8006a46:	461a      	mov	r2, r3
 8006a48:	6878      	ldr	r0, [r7, #4]
 8006a4a:	f001 fb2c 	bl	80080a6 <USBD_CtlPrepareRx>
      break;
 8006a4e:	e072      	b.n	8006b36 <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006a56:	689b      	ldr	r3, [r3, #8]
 8006a58:	683a      	ldr	r2, [r7, #0]
 8006a5a:	7850      	ldrb	r0, [r2, #1]
 8006a5c:	2200      	movs	r2, #0
 8006a5e:	6839      	ldr	r1, [r7, #0]
 8006a60:	4798      	blx	r3
      break;
 8006a62:	e068      	b.n	8006b36 <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006a64:	683b      	ldr	r3, [r7, #0]
 8006a66:	785b      	ldrb	r3, [r3, #1]
 8006a68:	2b0b      	cmp	r3, #11
 8006a6a:	d852      	bhi.n	8006b12 <USBD_CDC_Setup+0x162>
 8006a6c:	a201      	add	r2, pc, #4	; (adr r2, 8006a74 <USBD_CDC_Setup+0xc4>)
 8006a6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a72:	bf00      	nop
 8006a74:	08006aa5 	.word	0x08006aa5
 8006a78:	08006b21 	.word	0x08006b21
 8006a7c:	08006b13 	.word	0x08006b13
 8006a80:	08006b13 	.word	0x08006b13
 8006a84:	08006b13 	.word	0x08006b13
 8006a88:	08006b13 	.word	0x08006b13
 8006a8c:	08006b13 	.word	0x08006b13
 8006a90:	08006b13 	.word	0x08006b13
 8006a94:	08006b13 	.word	0x08006b13
 8006a98:	08006b13 	.word	0x08006b13
 8006a9c:	08006acf 	.word	0x08006acf
 8006aa0:	08006af9 	.word	0x08006af9
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006aaa:	b2db      	uxtb	r3, r3
 8006aac:	2b03      	cmp	r3, #3
 8006aae:	d107      	bne.n	8006ac0 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8006ab0:	f107 030a 	add.w	r3, r7, #10
 8006ab4:	2202      	movs	r2, #2
 8006ab6:	4619      	mov	r1, r3
 8006ab8:	6878      	ldr	r0, [r7, #4]
 8006aba:	f001 fac8 	bl	800804e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006abe:	e032      	b.n	8006b26 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8006ac0:	6839      	ldr	r1, [r7, #0]
 8006ac2:	6878      	ldr	r0, [r7, #4]
 8006ac4:	f001 fa52 	bl	8007f6c <USBD_CtlError>
            ret = USBD_FAIL;
 8006ac8:	2303      	movs	r3, #3
 8006aca:	75fb      	strb	r3, [r7, #23]
          break;
 8006acc:	e02b      	b.n	8006b26 <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006ad4:	b2db      	uxtb	r3, r3
 8006ad6:	2b03      	cmp	r3, #3
 8006ad8:	d107      	bne.n	8006aea <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8006ada:	f107 030d 	add.w	r3, r7, #13
 8006ade:	2201      	movs	r2, #1
 8006ae0:	4619      	mov	r1, r3
 8006ae2:	6878      	ldr	r0, [r7, #4]
 8006ae4:	f001 fab3 	bl	800804e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006ae8:	e01d      	b.n	8006b26 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8006aea:	6839      	ldr	r1, [r7, #0]
 8006aec:	6878      	ldr	r0, [r7, #4]
 8006aee:	f001 fa3d 	bl	8007f6c <USBD_CtlError>
            ret = USBD_FAIL;
 8006af2:	2303      	movs	r3, #3
 8006af4:	75fb      	strb	r3, [r7, #23]
          break;
 8006af6:	e016      	b.n	8006b26 <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006afe:	b2db      	uxtb	r3, r3
 8006b00:	2b03      	cmp	r3, #3
 8006b02:	d00f      	beq.n	8006b24 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 8006b04:	6839      	ldr	r1, [r7, #0]
 8006b06:	6878      	ldr	r0, [r7, #4]
 8006b08:	f001 fa30 	bl	8007f6c <USBD_CtlError>
            ret = USBD_FAIL;
 8006b0c:	2303      	movs	r3, #3
 8006b0e:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8006b10:	e008      	b.n	8006b24 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8006b12:	6839      	ldr	r1, [r7, #0]
 8006b14:	6878      	ldr	r0, [r7, #4]
 8006b16:	f001 fa29 	bl	8007f6c <USBD_CtlError>
          ret = USBD_FAIL;
 8006b1a:	2303      	movs	r3, #3
 8006b1c:	75fb      	strb	r3, [r7, #23]
          break;
 8006b1e:	e002      	b.n	8006b26 <USBD_CDC_Setup+0x176>
          break;
 8006b20:	bf00      	nop
 8006b22:	e008      	b.n	8006b36 <USBD_CDC_Setup+0x186>
          break;
 8006b24:	bf00      	nop
      }
      break;
 8006b26:	e006      	b.n	8006b36 <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 8006b28:	6839      	ldr	r1, [r7, #0]
 8006b2a:	6878      	ldr	r0, [r7, #4]
 8006b2c:	f001 fa1e 	bl	8007f6c <USBD_CtlError>
      ret = USBD_FAIL;
 8006b30:	2303      	movs	r3, #3
 8006b32:	75fb      	strb	r3, [r7, #23]
      break;
 8006b34:	bf00      	nop
  }

  return (uint8_t)ret;
 8006b36:	7dfb      	ldrb	r3, [r7, #23]
}
 8006b38:	4618      	mov	r0, r3
 8006b3a:	3718      	adds	r7, #24
 8006b3c:	46bd      	mov	sp, r7
 8006b3e:	bd80      	pop	{r7, pc}

08006b40 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006b40:	b580      	push	{r7, lr}
 8006b42:	b084      	sub	sp, #16
 8006b44:	af00      	add	r7, sp, #0
 8006b46:	6078      	str	r0, [r7, #4]
 8006b48:	460b      	mov	r3, r1
 8006b4a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8006b52:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d101      	bne.n	8006b62 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8006b5e:	2303      	movs	r3, #3
 8006b60:	e04f      	b.n	8006c02 <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006b68:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8006b6a:	78fa      	ldrb	r2, [r7, #3]
 8006b6c:	6879      	ldr	r1, [r7, #4]
 8006b6e:	4613      	mov	r3, r2
 8006b70:	009b      	lsls	r3, r3, #2
 8006b72:	4413      	add	r3, r2
 8006b74:	009b      	lsls	r3, r3, #2
 8006b76:	440b      	add	r3, r1
 8006b78:	3318      	adds	r3, #24
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	d029      	beq.n	8006bd4 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8006b80:	78fa      	ldrb	r2, [r7, #3]
 8006b82:	6879      	ldr	r1, [r7, #4]
 8006b84:	4613      	mov	r3, r2
 8006b86:	009b      	lsls	r3, r3, #2
 8006b88:	4413      	add	r3, r2
 8006b8a:	009b      	lsls	r3, r3, #2
 8006b8c:	440b      	add	r3, r1
 8006b8e:	3318      	adds	r3, #24
 8006b90:	681a      	ldr	r2, [r3, #0]
 8006b92:	78f9      	ldrb	r1, [r7, #3]
 8006b94:	68f8      	ldr	r0, [r7, #12]
 8006b96:	460b      	mov	r3, r1
 8006b98:	00db      	lsls	r3, r3, #3
 8006b9a:	1a5b      	subs	r3, r3, r1
 8006b9c:	009b      	lsls	r3, r3, #2
 8006b9e:	4403      	add	r3, r0
 8006ba0:	3344      	adds	r3, #68	; 0x44
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	fbb2 f1f3 	udiv	r1, r2, r3
 8006ba8:	fb03 f301 	mul.w	r3, r3, r1
 8006bac:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d110      	bne.n	8006bd4 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8006bb2:	78fa      	ldrb	r2, [r7, #3]
 8006bb4:	6879      	ldr	r1, [r7, #4]
 8006bb6:	4613      	mov	r3, r2
 8006bb8:	009b      	lsls	r3, r3, #2
 8006bba:	4413      	add	r3, r2
 8006bbc:	009b      	lsls	r3, r3, #2
 8006bbe:	440b      	add	r3, r1
 8006bc0:	3318      	adds	r3, #24
 8006bc2:	2200      	movs	r2, #0
 8006bc4:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8006bc6:	78f9      	ldrb	r1, [r7, #3]
 8006bc8:	2300      	movs	r3, #0
 8006bca:	2200      	movs	r2, #0
 8006bcc:	6878      	ldr	r0, [r7, #4]
 8006bce:	f001 ff42 	bl	8008a56 <USBD_LL_Transmit>
 8006bd2:	e015      	b.n	8006c00 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 8006bd4:	68bb      	ldr	r3, [r7, #8]
 8006bd6:	2200      	movs	r2, #0
 8006bd8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006be2:	691b      	ldr	r3, [r3, #16]
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d00b      	beq.n	8006c00 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006bee:	691b      	ldr	r3, [r3, #16]
 8006bf0:	68ba      	ldr	r2, [r7, #8]
 8006bf2:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8006bf6:	68ba      	ldr	r2, [r7, #8]
 8006bf8:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8006bfc:	78fa      	ldrb	r2, [r7, #3]
 8006bfe:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8006c00:	2300      	movs	r3, #0
}
 8006c02:	4618      	mov	r0, r3
 8006c04:	3710      	adds	r7, #16
 8006c06:	46bd      	mov	sp, r7
 8006c08:	bd80      	pop	{r7, pc}

08006c0a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006c0a:	b580      	push	{r7, lr}
 8006c0c:	b084      	sub	sp, #16
 8006c0e:	af00      	add	r7, sp, #0
 8006c10:	6078      	str	r0, [r7, #4]
 8006c12:	460b      	mov	r3, r1
 8006c14:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006c1c:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d101      	bne.n	8006c2c <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8006c28:	2303      	movs	r3, #3
 8006c2a:	e015      	b.n	8006c58 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8006c2c:	78fb      	ldrb	r3, [r7, #3]
 8006c2e:	4619      	mov	r1, r3
 8006c30:	6878      	ldr	r0, [r7, #4]
 8006c32:	f001 ff52 	bl	8008ada <USBD_LL_GetRxDataSize>
 8006c36:	4602      	mov	r2, r0
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006c44:	68db      	ldr	r3, [r3, #12]
 8006c46:	68fa      	ldr	r2, [r7, #12]
 8006c48:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8006c4c:	68fa      	ldr	r2, [r7, #12]
 8006c4e:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8006c52:	4611      	mov	r1, r2
 8006c54:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8006c56:	2300      	movs	r3, #0
}
 8006c58:	4618      	mov	r0, r3
 8006c5a:	3710      	adds	r7, #16
 8006c5c:	46bd      	mov	sp, r7
 8006c5e:	bd80      	pop	{r7, pc}

08006c60 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8006c60:	b580      	push	{r7, lr}
 8006c62:	b084      	sub	sp, #16
 8006c64:	af00      	add	r7, sp, #0
 8006c66:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006c6e:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d101      	bne.n	8006c7a <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 8006c76:	2303      	movs	r3, #3
 8006c78:	e01b      	b.n	8006cb2 <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d015      	beq.n	8006cb0 <USBD_CDC_EP0_RxReady+0x50>
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8006c8a:	2bff      	cmp	r3, #255	; 0xff
 8006c8c:	d010      	beq.n	8006cb0 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006c94:	689b      	ldr	r3, [r3, #8]
 8006c96:	68fa      	ldr	r2, [r7, #12]
 8006c98:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 8006c9c:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8006c9e:	68fa      	ldr	r2, [r7, #12]
 8006ca0:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8006ca4:	b292      	uxth	r2, r2
 8006ca6:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	22ff      	movs	r2, #255	; 0xff
 8006cac:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8006cb0:	2300      	movs	r3, #0
}
 8006cb2:	4618      	mov	r0, r3
 8006cb4:	3710      	adds	r7, #16
 8006cb6:	46bd      	mov	sp, r7
 8006cb8:	bd80      	pop	{r7, pc}
	...

08006cbc <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8006cbc:	b480      	push	{r7}
 8006cbe:	b083      	sub	sp, #12
 8006cc0:	af00      	add	r7, sp, #0
 8006cc2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	2243      	movs	r2, #67	; 0x43
 8006cc8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 8006cca:	4b03      	ldr	r3, [pc, #12]	; (8006cd8 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8006ccc:	4618      	mov	r0, r3
 8006cce:	370c      	adds	r7, #12
 8006cd0:	46bd      	mov	sp, r7
 8006cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cd6:	4770      	bx	lr
 8006cd8:	20000094 	.word	0x20000094

08006cdc <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8006cdc:	b480      	push	{r7}
 8006cde:	b083      	sub	sp, #12
 8006ce0:	af00      	add	r7, sp, #0
 8006ce2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	2243      	movs	r2, #67	; 0x43
 8006ce8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 8006cea:	4b03      	ldr	r3, [pc, #12]	; (8006cf8 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8006cec:	4618      	mov	r0, r3
 8006cee:	370c      	adds	r7, #12
 8006cf0:	46bd      	mov	sp, r7
 8006cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cf6:	4770      	bx	lr
 8006cf8:	20000050 	.word	0x20000050

08006cfc <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8006cfc:	b480      	push	{r7}
 8006cfe:	b083      	sub	sp, #12
 8006d00:	af00      	add	r7, sp, #0
 8006d02:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	2243      	movs	r2, #67	; 0x43
 8006d08:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 8006d0a:	4b03      	ldr	r3, [pc, #12]	; (8006d18 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8006d0c:	4618      	mov	r0, r3
 8006d0e:	370c      	adds	r7, #12
 8006d10:	46bd      	mov	sp, r7
 8006d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d16:	4770      	bx	lr
 8006d18:	200000d8 	.word	0x200000d8

08006d1c <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8006d1c:	b480      	push	{r7}
 8006d1e:	b083      	sub	sp, #12
 8006d20:	af00      	add	r7, sp, #0
 8006d22:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	220a      	movs	r2, #10
 8006d28:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8006d2a:	4b03      	ldr	r3, [pc, #12]	; (8006d38 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8006d2c:	4618      	mov	r0, r3
 8006d2e:	370c      	adds	r7, #12
 8006d30:	46bd      	mov	sp, r7
 8006d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d36:	4770      	bx	lr
 8006d38:	2000000c 	.word	0x2000000c

08006d3c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8006d3c:	b480      	push	{r7}
 8006d3e:	b083      	sub	sp, #12
 8006d40:	af00      	add	r7, sp, #0
 8006d42:	6078      	str	r0, [r7, #4]
 8006d44:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8006d46:	683b      	ldr	r3, [r7, #0]
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d101      	bne.n	8006d50 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8006d4c:	2303      	movs	r3, #3
 8006d4e:	e004      	b.n	8006d5a <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	683a      	ldr	r2, [r7, #0]
 8006d54:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8006d58:	2300      	movs	r3, #0
}
 8006d5a:	4618      	mov	r0, r3
 8006d5c:	370c      	adds	r7, #12
 8006d5e:	46bd      	mov	sp, r7
 8006d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d64:	4770      	bx	lr

08006d66 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8006d66:	b480      	push	{r7}
 8006d68:	b087      	sub	sp, #28
 8006d6a:	af00      	add	r7, sp, #0
 8006d6c:	60f8      	str	r0, [r7, #12]
 8006d6e:	60b9      	str	r1, [r7, #8]
 8006d70:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006d78:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8006d7a:	697b      	ldr	r3, [r7, #20]
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	d101      	bne.n	8006d84 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8006d80:	2303      	movs	r3, #3
 8006d82:	e008      	b.n	8006d96 <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 8006d84:	697b      	ldr	r3, [r7, #20]
 8006d86:	68ba      	ldr	r2, [r7, #8]
 8006d88:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8006d8c:	697b      	ldr	r3, [r7, #20]
 8006d8e:	687a      	ldr	r2, [r7, #4]
 8006d90:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8006d94:	2300      	movs	r3, #0
}
 8006d96:	4618      	mov	r0, r3
 8006d98:	371c      	adds	r7, #28
 8006d9a:	46bd      	mov	sp, r7
 8006d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006da0:	4770      	bx	lr

08006da2 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8006da2:	b480      	push	{r7}
 8006da4:	b085      	sub	sp, #20
 8006da6:	af00      	add	r7, sp, #0
 8006da8:	6078      	str	r0, [r7, #4]
 8006daa:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006db2:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d101      	bne.n	8006dbe <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 8006dba:	2303      	movs	r3, #3
 8006dbc:	e004      	b.n	8006dc8 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	683a      	ldr	r2, [r7, #0]
 8006dc2:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8006dc6:	2300      	movs	r3, #0
}
 8006dc8:	4618      	mov	r0, r3
 8006dca:	3714      	adds	r7, #20
 8006dcc:	46bd      	mov	sp, r7
 8006dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dd2:	4770      	bx	lr

08006dd4 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8006dd4:	b580      	push	{r7, lr}
 8006dd6:	b084      	sub	sp, #16
 8006dd8:	af00      	add	r7, sp, #0
 8006dda:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006de2:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d101      	bne.n	8006df2 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8006dee:	2303      	movs	r3, #3
 8006df0:	e016      	b.n	8006e20 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	7c1b      	ldrb	r3, [r3, #16]
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d109      	bne.n	8006e0e <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006e00:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006e04:	2101      	movs	r1, #1
 8006e06:	6878      	ldr	r0, [r7, #4]
 8006e08:	f001 fe46 	bl	8008a98 <USBD_LL_PrepareReceive>
 8006e0c:	e007      	b.n	8006e1e <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006e14:	2340      	movs	r3, #64	; 0x40
 8006e16:	2101      	movs	r1, #1
 8006e18:	6878      	ldr	r0, [r7, #4]
 8006e1a:	f001 fe3d 	bl	8008a98 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006e1e:	2300      	movs	r3, #0
}
 8006e20:	4618      	mov	r0, r3
 8006e22:	3710      	adds	r7, #16
 8006e24:	46bd      	mov	sp, r7
 8006e26:	bd80      	pop	{r7, pc}

08006e28 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006e28:	b580      	push	{r7, lr}
 8006e2a:	b086      	sub	sp, #24
 8006e2c:	af00      	add	r7, sp, #0
 8006e2e:	60f8      	str	r0, [r7, #12]
 8006e30:	60b9      	str	r1, [r7, #8]
 8006e32:	4613      	mov	r3, r2
 8006e34:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	d101      	bne.n	8006e40 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8006e3c:	2303      	movs	r3, #3
 8006e3e:	e01f      	b.n	8006e80 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	2200      	movs	r2, #0
 8006e44:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	2200      	movs	r2, #0
 8006e4c:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	2200      	movs	r2, #0
 8006e54:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8006e58:	68bb      	ldr	r3, [r7, #8]
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d003      	beq.n	8006e66 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	68ba      	ldr	r2, [r7, #8]
 8006e62:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	2201      	movs	r2, #1
 8006e6a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	79fa      	ldrb	r2, [r7, #7]
 8006e72:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8006e74:	68f8      	ldr	r0, [r7, #12]
 8006e76:	f001 fcb9 	bl	80087ec <USBD_LL_Init>
 8006e7a:	4603      	mov	r3, r0
 8006e7c:	75fb      	strb	r3, [r7, #23]

  return ret;
 8006e7e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006e80:	4618      	mov	r0, r3
 8006e82:	3718      	adds	r7, #24
 8006e84:	46bd      	mov	sp, r7
 8006e86:	bd80      	pop	{r7, pc}

08006e88 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8006e88:	b580      	push	{r7, lr}
 8006e8a:	b084      	sub	sp, #16
 8006e8c:	af00      	add	r7, sp, #0
 8006e8e:	6078      	str	r0, [r7, #4]
 8006e90:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006e92:	2300      	movs	r3, #0
 8006e94:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8006e96:	683b      	ldr	r3, [r7, #0]
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d101      	bne.n	8006ea0 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8006e9c:	2303      	movs	r3, #3
 8006e9e:	e016      	b.n	8006ece <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	683a      	ldr	r2, [r7, #0]
 8006ea4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006eae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d00b      	beq.n	8006ecc <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006eba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ebc:	f107 020e 	add.w	r2, r7, #14
 8006ec0:	4610      	mov	r0, r2
 8006ec2:	4798      	blx	r3
 8006ec4:	4602      	mov	r2, r0
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8006ecc:	2300      	movs	r3, #0
}
 8006ece:	4618      	mov	r0, r3
 8006ed0:	3710      	adds	r7, #16
 8006ed2:	46bd      	mov	sp, r7
 8006ed4:	bd80      	pop	{r7, pc}

08006ed6 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8006ed6:	b580      	push	{r7, lr}
 8006ed8:	b082      	sub	sp, #8
 8006eda:	af00      	add	r7, sp, #0
 8006edc:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8006ede:	6878      	ldr	r0, [r7, #4]
 8006ee0:	f001 fcd0 	bl	8008884 <USBD_LL_Start>
 8006ee4:	4603      	mov	r3, r0
}
 8006ee6:	4618      	mov	r0, r3
 8006ee8:	3708      	adds	r7, #8
 8006eea:	46bd      	mov	sp, r7
 8006eec:	bd80      	pop	{r7, pc}

08006eee <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8006eee:	b480      	push	{r7}
 8006ef0:	b083      	sub	sp, #12
 8006ef2:	af00      	add	r7, sp, #0
 8006ef4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006ef6:	2300      	movs	r3, #0
}
 8006ef8:	4618      	mov	r0, r3
 8006efa:	370c      	adds	r7, #12
 8006efc:	46bd      	mov	sp, r7
 8006efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f02:	4770      	bx	lr

08006f04 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006f04:	b580      	push	{r7, lr}
 8006f06:	b084      	sub	sp, #16
 8006f08:	af00      	add	r7, sp, #0
 8006f0a:	6078      	str	r0, [r7, #4]
 8006f0c:	460b      	mov	r3, r1
 8006f0e:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8006f10:	2303      	movs	r3, #3
 8006f12:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d009      	beq.n	8006f32 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	78fa      	ldrb	r2, [r7, #3]
 8006f28:	4611      	mov	r1, r2
 8006f2a:	6878      	ldr	r0, [r7, #4]
 8006f2c:	4798      	blx	r3
 8006f2e:	4603      	mov	r3, r0
 8006f30:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8006f32:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f34:	4618      	mov	r0, r3
 8006f36:	3710      	adds	r7, #16
 8006f38:	46bd      	mov	sp, r7
 8006f3a:	bd80      	pop	{r7, pc}

08006f3c <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006f3c:	b580      	push	{r7, lr}
 8006f3e:	b082      	sub	sp, #8
 8006f40:	af00      	add	r7, sp, #0
 8006f42:	6078      	str	r0, [r7, #4]
 8006f44:	460b      	mov	r3, r1
 8006f46:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d007      	beq.n	8006f62 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006f58:	685b      	ldr	r3, [r3, #4]
 8006f5a:	78fa      	ldrb	r2, [r7, #3]
 8006f5c:	4611      	mov	r1, r2
 8006f5e:	6878      	ldr	r0, [r7, #4]
 8006f60:	4798      	blx	r3
  }

  return USBD_OK;
 8006f62:	2300      	movs	r3, #0
}
 8006f64:	4618      	mov	r0, r3
 8006f66:	3708      	adds	r7, #8
 8006f68:	46bd      	mov	sp, r7
 8006f6a:	bd80      	pop	{r7, pc}

08006f6c <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8006f6c:	b580      	push	{r7, lr}
 8006f6e:	b084      	sub	sp, #16
 8006f70:	af00      	add	r7, sp, #0
 8006f72:	6078      	str	r0, [r7, #4]
 8006f74:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006f7c:	6839      	ldr	r1, [r7, #0]
 8006f7e:	4618      	mov	r0, r3
 8006f80:	f000 ffba 	bl	8007ef8 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	2201      	movs	r2, #1
 8006f88:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8006f92:	461a      	mov	r2, r3
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006fa0:	f003 031f 	and.w	r3, r3, #31
 8006fa4:	2b02      	cmp	r3, #2
 8006fa6:	d01a      	beq.n	8006fde <USBD_LL_SetupStage+0x72>
 8006fa8:	2b02      	cmp	r3, #2
 8006faa:	d822      	bhi.n	8006ff2 <USBD_LL_SetupStage+0x86>
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d002      	beq.n	8006fb6 <USBD_LL_SetupStage+0x4a>
 8006fb0:	2b01      	cmp	r3, #1
 8006fb2:	d00a      	beq.n	8006fca <USBD_LL_SetupStage+0x5e>
 8006fb4:	e01d      	b.n	8006ff2 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006fbc:	4619      	mov	r1, r3
 8006fbe:	6878      	ldr	r0, [r7, #4]
 8006fc0:	f000 fa62 	bl	8007488 <USBD_StdDevReq>
 8006fc4:	4603      	mov	r3, r0
 8006fc6:	73fb      	strb	r3, [r7, #15]
      break;
 8006fc8:	e020      	b.n	800700c <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006fd0:	4619      	mov	r1, r3
 8006fd2:	6878      	ldr	r0, [r7, #4]
 8006fd4:	f000 fac6 	bl	8007564 <USBD_StdItfReq>
 8006fd8:	4603      	mov	r3, r0
 8006fda:	73fb      	strb	r3, [r7, #15]
      break;
 8006fdc:	e016      	b.n	800700c <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006fe4:	4619      	mov	r1, r3
 8006fe6:	6878      	ldr	r0, [r7, #4]
 8006fe8:	f000 fb05 	bl	80075f6 <USBD_StdEPReq>
 8006fec:	4603      	mov	r3, r0
 8006fee:	73fb      	strb	r3, [r7, #15]
      break;
 8006ff0:	e00c      	b.n	800700c <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006ff8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006ffc:	b2db      	uxtb	r3, r3
 8006ffe:	4619      	mov	r1, r3
 8007000:	6878      	ldr	r0, [r7, #4]
 8007002:	f001 fc9f 	bl	8008944 <USBD_LL_StallEP>
 8007006:	4603      	mov	r3, r0
 8007008:	73fb      	strb	r3, [r7, #15]
      break;
 800700a:	bf00      	nop
  }

  return ret;
 800700c:	7bfb      	ldrb	r3, [r7, #15]
}
 800700e:	4618      	mov	r0, r3
 8007010:	3710      	adds	r7, #16
 8007012:	46bd      	mov	sp, r7
 8007014:	bd80      	pop	{r7, pc}

08007016 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007016:	b580      	push	{r7, lr}
 8007018:	b086      	sub	sp, #24
 800701a:	af00      	add	r7, sp, #0
 800701c:	60f8      	str	r0, [r7, #12]
 800701e:	460b      	mov	r3, r1
 8007020:	607a      	str	r2, [r7, #4]
 8007022:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8007024:	7afb      	ldrb	r3, [r7, #11]
 8007026:	2b00      	cmp	r3, #0
 8007028:	d138      	bne.n	800709c <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8007030:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007038:	2b03      	cmp	r3, #3
 800703a:	d14a      	bne.n	80070d2 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800703c:	693b      	ldr	r3, [r7, #16]
 800703e:	689a      	ldr	r2, [r3, #8]
 8007040:	693b      	ldr	r3, [r7, #16]
 8007042:	68db      	ldr	r3, [r3, #12]
 8007044:	429a      	cmp	r2, r3
 8007046:	d913      	bls.n	8007070 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8007048:	693b      	ldr	r3, [r7, #16]
 800704a:	689a      	ldr	r2, [r3, #8]
 800704c:	693b      	ldr	r3, [r7, #16]
 800704e:	68db      	ldr	r3, [r3, #12]
 8007050:	1ad2      	subs	r2, r2, r3
 8007052:	693b      	ldr	r3, [r7, #16]
 8007054:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8007056:	693b      	ldr	r3, [r7, #16]
 8007058:	68da      	ldr	r2, [r3, #12]
 800705a:	693b      	ldr	r3, [r7, #16]
 800705c:	689b      	ldr	r3, [r3, #8]
 800705e:	4293      	cmp	r3, r2
 8007060:	bf28      	it	cs
 8007062:	4613      	movcs	r3, r2
 8007064:	461a      	mov	r2, r3
 8007066:	6879      	ldr	r1, [r7, #4]
 8007068:	68f8      	ldr	r0, [r7, #12]
 800706a:	f001 f839 	bl	80080e0 <USBD_CtlContinueRx>
 800706e:	e030      	b.n	80070d2 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007076:	b2db      	uxtb	r3, r3
 8007078:	2b03      	cmp	r3, #3
 800707a:	d10b      	bne.n	8007094 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007082:	691b      	ldr	r3, [r3, #16]
 8007084:	2b00      	cmp	r3, #0
 8007086:	d005      	beq.n	8007094 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800708e:	691b      	ldr	r3, [r3, #16]
 8007090:	68f8      	ldr	r0, [r7, #12]
 8007092:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8007094:	68f8      	ldr	r0, [r7, #12]
 8007096:	f001 f834 	bl	8008102 <USBD_CtlSendStatus>
 800709a:	e01a      	b.n	80070d2 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80070a2:	b2db      	uxtb	r3, r3
 80070a4:	2b03      	cmp	r3, #3
 80070a6:	d114      	bne.n	80070d2 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80070ae:	699b      	ldr	r3, [r3, #24]
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	d00e      	beq.n	80070d2 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80070ba:	699b      	ldr	r3, [r3, #24]
 80070bc:	7afa      	ldrb	r2, [r7, #11]
 80070be:	4611      	mov	r1, r2
 80070c0:	68f8      	ldr	r0, [r7, #12]
 80070c2:	4798      	blx	r3
 80070c4:	4603      	mov	r3, r0
 80070c6:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 80070c8:	7dfb      	ldrb	r3, [r7, #23]
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d001      	beq.n	80070d2 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 80070ce:	7dfb      	ldrb	r3, [r7, #23]
 80070d0:	e000      	b.n	80070d4 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 80070d2:	2300      	movs	r3, #0
}
 80070d4:	4618      	mov	r0, r3
 80070d6:	3718      	adds	r7, #24
 80070d8:	46bd      	mov	sp, r7
 80070da:	bd80      	pop	{r7, pc}

080070dc <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80070dc:	b580      	push	{r7, lr}
 80070de:	b086      	sub	sp, #24
 80070e0:	af00      	add	r7, sp, #0
 80070e2:	60f8      	str	r0, [r7, #12]
 80070e4:	460b      	mov	r3, r1
 80070e6:	607a      	str	r2, [r7, #4]
 80070e8:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80070ea:	7afb      	ldrb	r3, [r7, #11]
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	d16b      	bne.n	80071c8 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	3314      	adds	r3, #20
 80070f4:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80070fc:	2b02      	cmp	r3, #2
 80070fe:	d156      	bne.n	80071ae <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 8007100:	693b      	ldr	r3, [r7, #16]
 8007102:	689a      	ldr	r2, [r3, #8]
 8007104:	693b      	ldr	r3, [r7, #16]
 8007106:	68db      	ldr	r3, [r3, #12]
 8007108:	429a      	cmp	r2, r3
 800710a:	d914      	bls.n	8007136 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800710c:	693b      	ldr	r3, [r7, #16]
 800710e:	689a      	ldr	r2, [r3, #8]
 8007110:	693b      	ldr	r3, [r7, #16]
 8007112:	68db      	ldr	r3, [r3, #12]
 8007114:	1ad2      	subs	r2, r2, r3
 8007116:	693b      	ldr	r3, [r7, #16]
 8007118:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800711a:	693b      	ldr	r3, [r7, #16]
 800711c:	689b      	ldr	r3, [r3, #8]
 800711e:	461a      	mov	r2, r3
 8007120:	6879      	ldr	r1, [r7, #4]
 8007122:	68f8      	ldr	r0, [r7, #12]
 8007124:	f000 ffae 	bl	8008084 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007128:	2300      	movs	r3, #0
 800712a:	2200      	movs	r2, #0
 800712c:	2100      	movs	r1, #0
 800712e:	68f8      	ldr	r0, [r7, #12]
 8007130:	f001 fcb2 	bl	8008a98 <USBD_LL_PrepareReceive>
 8007134:	e03b      	b.n	80071ae <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8007136:	693b      	ldr	r3, [r7, #16]
 8007138:	68da      	ldr	r2, [r3, #12]
 800713a:	693b      	ldr	r3, [r7, #16]
 800713c:	689b      	ldr	r3, [r3, #8]
 800713e:	429a      	cmp	r2, r3
 8007140:	d11c      	bne.n	800717c <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8007142:	693b      	ldr	r3, [r7, #16]
 8007144:	685a      	ldr	r2, [r3, #4]
 8007146:	693b      	ldr	r3, [r7, #16]
 8007148:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800714a:	429a      	cmp	r2, r3
 800714c:	d316      	bcc.n	800717c <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800714e:	693b      	ldr	r3, [r7, #16]
 8007150:	685a      	ldr	r2, [r3, #4]
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8007158:	429a      	cmp	r2, r3
 800715a:	d20f      	bcs.n	800717c <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800715c:	2200      	movs	r2, #0
 800715e:	2100      	movs	r1, #0
 8007160:	68f8      	ldr	r0, [r7, #12]
 8007162:	f000 ff8f 	bl	8008084 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	2200      	movs	r2, #0
 800716a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800716e:	2300      	movs	r3, #0
 8007170:	2200      	movs	r2, #0
 8007172:	2100      	movs	r1, #0
 8007174:	68f8      	ldr	r0, [r7, #12]
 8007176:	f001 fc8f 	bl	8008a98 <USBD_LL_PrepareReceive>
 800717a:	e018      	b.n	80071ae <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007182:	b2db      	uxtb	r3, r3
 8007184:	2b03      	cmp	r3, #3
 8007186:	d10b      	bne.n	80071a0 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800718e:	68db      	ldr	r3, [r3, #12]
 8007190:	2b00      	cmp	r3, #0
 8007192:	d005      	beq.n	80071a0 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800719a:	68db      	ldr	r3, [r3, #12]
 800719c:	68f8      	ldr	r0, [r7, #12]
 800719e:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80071a0:	2180      	movs	r1, #128	; 0x80
 80071a2:	68f8      	ldr	r0, [r7, #12]
 80071a4:	f001 fbce 	bl	8008944 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80071a8:	68f8      	ldr	r0, [r7, #12]
 80071aa:	f000 ffbd 	bl	8008128 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80071b4:	2b01      	cmp	r3, #1
 80071b6:	d122      	bne.n	80071fe <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 80071b8:	68f8      	ldr	r0, [r7, #12]
 80071ba:	f7ff fe98 	bl	8006eee <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	2200      	movs	r2, #0
 80071c2:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80071c6:	e01a      	b.n	80071fe <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80071ce:	b2db      	uxtb	r3, r3
 80071d0:	2b03      	cmp	r3, #3
 80071d2:	d114      	bne.n	80071fe <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80071da:	695b      	ldr	r3, [r3, #20]
 80071dc:	2b00      	cmp	r3, #0
 80071de:	d00e      	beq.n	80071fe <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80071e6:	695b      	ldr	r3, [r3, #20]
 80071e8:	7afa      	ldrb	r2, [r7, #11]
 80071ea:	4611      	mov	r1, r2
 80071ec:	68f8      	ldr	r0, [r7, #12]
 80071ee:	4798      	blx	r3
 80071f0:	4603      	mov	r3, r0
 80071f2:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 80071f4:	7dfb      	ldrb	r3, [r7, #23]
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	d001      	beq.n	80071fe <USBD_LL_DataInStage+0x122>
        {
          return ret;
 80071fa:	7dfb      	ldrb	r3, [r7, #23]
 80071fc:	e000      	b.n	8007200 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 80071fe:	2300      	movs	r3, #0
}
 8007200:	4618      	mov	r0, r3
 8007202:	3718      	adds	r7, #24
 8007204:	46bd      	mov	sp, r7
 8007206:	bd80      	pop	{r7, pc}

08007208 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8007208:	b580      	push	{r7, lr}
 800720a:	b082      	sub	sp, #8
 800720c:	af00      	add	r7, sp, #0
 800720e:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	2201      	movs	r2, #1
 8007214:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	2200      	movs	r2, #0
 800721c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	2200      	movs	r2, #0
 8007224:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	2200      	movs	r2, #0
 800722a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007234:	2b00      	cmp	r3, #0
 8007236:	d101      	bne.n	800723c <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 8007238:	2303      	movs	r3, #3
 800723a:	e02f      	b.n	800729c <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007242:	2b00      	cmp	r3, #0
 8007244:	d00f      	beq.n	8007266 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800724c:	685b      	ldr	r3, [r3, #4]
 800724e:	2b00      	cmp	r3, #0
 8007250:	d009      	beq.n	8007266 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007258:	685b      	ldr	r3, [r3, #4]
 800725a:	687a      	ldr	r2, [r7, #4]
 800725c:	6852      	ldr	r2, [r2, #4]
 800725e:	b2d2      	uxtb	r2, r2
 8007260:	4611      	mov	r1, r2
 8007262:	6878      	ldr	r0, [r7, #4]
 8007264:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007266:	2340      	movs	r3, #64	; 0x40
 8007268:	2200      	movs	r2, #0
 800726a:	2100      	movs	r1, #0
 800726c:	6878      	ldr	r0, [r7, #4]
 800726e:	f001 fb24 	bl	80088ba <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	2201      	movs	r2, #1
 8007276:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	2240      	movs	r2, #64	; 0x40
 800727e:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007282:	2340      	movs	r3, #64	; 0x40
 8007284:	2200      	movs	r2, #0
 8007286:	2180      	movs	r1, #128	; 0x80
 8007288:	6878      	ldr	r0, [r7, #4]
 800728a:	f001 fb16 	bl	80088ba <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	2201      	movs	r2, #1
 8007292:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	2240      	movs	r2, #64	; 0x40
 8007298:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800729a:	2300      	movs	r3, #0
}
 800729c:	4618      	mov	r0, r3
 800729e:	3708      	adds	r7, #8
 80072a0:	46bd      	mov	sp, r7
 80072a2:	bd80      	pop	{r7, pc}

080072a4 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80072a4:	b480      	push	{r7}
 80072a6:	b083      	sub	sp, #12
 80072a8:	af00      	add	r7, sp, #0
 80072aa:	6078      	str	r0, [r7, #4]
 80072ac:	460b      	mov	r3, r1
 80072ae:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	78fa      	ldrb	r2, [r7, #3]
 80072b4:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80072b6:	2300      	movs	r3, #0
}
 80072b8:	4618      	mov	r0, r3
 80072ba:	370c      	adds	r7, #12
 80072bc:	46bd      	mov	sp, r7
 80072be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072c2:	4770      	bx	lr

080072c4 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80072c4:	b480      	push	{r7}
 80072c6:	b083      	sub	sp, #12
 80072c8:	af00      	add	r7, sp, #0
 80072ca:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80072d2:	b2da      	uxtb	r2, r3
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	2204      	movs	r2, #4
 80072de:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80072e2:	2300      	movs	r3, #0
}
 80072e4:	4618      	mov	r0, r3
 80072e6:	370c      	adds	r7, #12
 80072e8:	46bd      	mov	sp, r7
 80072ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ee:	4770      	bx	lr

080072f0 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80072f0:	b480      	push	{r7}
 80072f2:	b083      	sub	sp, #12
 80072f4:	af00      	add	r7, sp, #0
 80072f6:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80072fe:	b2db      	uxtb	r3, r3
 8007300:	2b04      	cmp	r3, #4
 8007302:	d106      	bne.n	8007312 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800730a:	b2da      	uxtb	r2, r3
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8007312:	2300      	movs	r3, #0
}
 8007314:	4618      	mov	r0, r3
 8007316:	370c      	adds	r7, #12
 8007318:	46bd      	mov	sp, r7
 800731a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800731e:	4770      	bx	lr

08007320 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8007320:	b580      	push	{r7, lr}
 8007322:	b082      	sub	sp, #8
 8007324:	af00      	add	r7, sp, #0
 8007326:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800732e:	2b00      	cmp	r3, #0
 8007330:	d101      	bne.n	8007336 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 8007332:	2303      	movs	r3, #3
 8007334:	e012      	b.n	800735c <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800733c:	b2db      	uxtb	r3, r3
 800733e:	2b03      	cmp	r3, #3
 8007340:	d10b      	bne.n	800735a <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007348:	69db      	ldr	r3, [r3, #28]
 800734a:	2b00      	cmp	r3, #0
 800734c:	d005      	beq.n	800735a <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007354:	69db      	ldr	r3, [r3, #28]
 8007356:	6878      	ldr	r0, [r7, #4]
 8007358:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800735a:	2300      	movs	r3, #0
}
 800735c:	4618      	mov	r0, r3
 800735e:	3708      	adds	r7, #8
 8007360:	46bd      	mov	sp, r7
 8007362:	bd80      	pop	{r7, pc}

08007364 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8007364:	b580      	push	{r7, lr}
 8007366:	b082      	sub	sp, #8
 8007368:	af00      	add	r7, sp, #0
 800736a:	6078      	str	r0, [r7, #4]
 800736c:	460b      	mov	r3, r1
 800736e:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007376:	2b00      	cmp	r3, #0
 8007378:	d101      	bne.n	800737e <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 800737a:	2303      	movs	r3, #3
 800737c:	e014      	b.n	80073a8 <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007384:	b2db      	uxtb	r3, r3
 8007386:	2b03      	cmp	r3, #3
 8007388:	d10d      	bne.n	80073a6 <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007390:	6a1b      	ldr	r3, [r3, #32]
 8007392:	2b00      	cmp	r3, #0
 8007394:	d007      	beq.n	80073a6 <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800739c:	6a1b      	ldr	r3, [r3, #32]
 800739e:	78fa      	ldrb	r2, [r7, #3]
 80073a0:	4611      	mov	r1, r2
 80073a2:	6878      	ldr	r0, [r7, #4]
 80073a4:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80073a6:	2300      	movs	r3, #0
}
 80073a8:	4618      	mov	r0, r3
 80073aa:	3708      	adds	r7, #8
 80073ac:	46bd      	mov	sp, r7
 80073ae:	bd80      	pop	{r7, pc}

080073b0 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80073b0:	b580      	push	{r7, lr}
 80073b2:	b082      	sub	sp, #8
 80073b4:	af00      	add	r7, sp, #0
 80073b6:	6078      	str	r0, [r7, #4]
 80073b8:	460b      	mov	r3, r1
 80073ba:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	d101      	bne.n	80073ca <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 80073c6:	2303      	movs	r3, #3
 80073c8:	e014      	b.n	80073f4 <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80073d0:	b2db      	uxtb	r3, r3
 80073d2:	2b03      	cmp	r3, #3
 80073d4:	d10d      	bne.n	80073f2 <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80073dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073de:	2b00      	cmp	r3, #0
 80073e0:	d007      	beq.n	80073f2 <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80073e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073ea:	78fa      	ldrb	r2, [r7, #3]
 80073ec:	4611      	mov	r1, r2
 80073ee:	6878      	ldr	r0, [r7, #4]
 80073f0:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80073f2:	2300      	movs	r3, #0
}
 80073f4:	4618      	mov	r0, r3
 80073f6:	3708      	adds	r7, #8
 80073f8:	46bd      	mov	sp, r7
 80073fa:	bd80      	pop	{r7, pc}

080073fc <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80073fc:	b480      	push	{r7}
 80073fe:	b083      	sub	sp, #12
 8007400:	af00      	add	r7, sp, #0
 8007402:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007404:	2300      	movs	r3, #0
}
 8007406:	4618      	mov	r0, r3
 8007408:	370c      	adds	r7, #12
 800740a:	46bd      	mov	sp, r7
 800740c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007410:	4770      	bx	lr

08007412 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8007412:	b580      	push	{r7, lr}
 8007414:	b082      	sub	sp, #8
 8007416:	af00      	add	r7, sp, #0
 8007418:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	2201      	movs	r2, #1
 800741e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007428:	2b00      	cmp	r3, #0
 800742a:	d009      	beq.n	8007440 <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007432:	685b      	ldr	r3, [r3, #4]
 8007434:	687a      	ldr	r2, [r7, #4]
 8007436:	6852      	ldr	r2, [r2, #4]
 8007438:	b2d2      	uxtb	r2, r2
 800743a:	4611      	mov	r1, r2
 800743c:	6878      	ldr	r0, [r7, #4]
 800743e:	4798      	blx	r3
  }

  return USBD_OK;
 8007440:	2300      	movs	r3, #0
}
 8007442:	4618      	mov	r0, r3
 8007444:	3708      	adds	r7, #8
 8007446:	46bd      	mov	sp, r7
 8007448:	bd80      	pop	{r7, pc}

0800744a <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800744a:	b480      	push	{r7}
 800744c:	b087      	sub	sp, #28
 800744e:	af00      	add	r7, sp, #0
 8007450:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8007456:	697b      	ldr	r3, [r7, #20]
 8007458:	781b      	ldrb	r3, [r3, #0]
 800745a:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800745c:	697b      	ldr	r3, [r7, #20]
 800745e:	3301      	adds	r3, #1
 8007460:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8007462:	697b      	ldr	r3, [r7, #20]
 8007464:	781b      	ldrb	r3, [r3, #0]
 8007466:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8007468:	8a3b      	ldrh	r3, [r7, #16]
 800746a:	021b      	lsls	r3, r3, #8
 800746c:	b21a      	sxth	r2, r3
 800746e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8007472:	4313      	orrs	r3, r2
 8007474:	b21b      	sxth	r3, r3
 8007476:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8007478:	89fb      	ldrh	r3, [r7, #14]
}
 800747a:	4618      	mov	r0, r3
 800747c:	371c      	adds	r7, #28
 800747e:	46bd      	mov	sp, r7
 8007480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007484:	4770      	bx	lr
	...

08007488 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007488:	b580      	push	{r7, lr}
 800748a:	b084      	sub	sp, #16
 800748c:	af00      	add	r7, sp, #0
 800748e:	6078      	str	r0, [r7, #4]
 8007490:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007492:	2300      	movs	r3, #0
 8007494:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007496:	683b      	ldr	r3, [r7, #0]
 8007498:	781b      	ldrb	r3, [r3, #0]
 800749a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800749e:	2b40      	cmp	r3, #64	; 0x40
 80074a0:	d005      	beq.n	80074ae <USBD_StdDevReq+0x26>
 80074a2:	2b40      	cmp	r3, #64	; 0x40
 80074a4:	d853      	bhi.n	800754e <USBD_StdDevReq+0xc6>
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d00b      	beq.n	80074c2 <USBD_StdDevReq+0x3a>
 80074aa:	2b20      	cmp	r3, #32
 80074ac:	d14f      	bne.n	800754e <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80074b4:	689b      	ldr	r3, [r3, #8]
 80074b6:	6839      	ldr	r1, [r7, #0]
 80074b8:	6878      	ldr	r0, [r7, #4]
 80074ba:	4798      	blx	r3
 80074bc:	4603      	mov	r3, r0
 80074be:	73fb      	strb	r3, [r7, #15]
      break;
 80074c0:	e04a      	b.n	8007558 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80074c2:	683b      	ldr	r3, [r7, #0]
 80074c4:	785b      	ldrb	r3, [r3, #1]
 80074c6:	2b09      	cmp	r3, #9
 80074c8:	d83b      	bhi.n	8007542 <USBD_StdDevReq+0xba>
 80074ca:	a201      	add	r2, pc, #4	; (adr r2, 80074d0 <USBD_StdDevReq+0x48>)
 80074cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074d0:	08007525 	.word	0x08007525
 80074d4:	08007539 	.word	0x08007539
 80074d8:	08007543 	.word	0x08007543
 80074dc:	0800752f 	.word	0x0800752f
 80074e0:	08007543 	.word	0x08007543
 80074e4:	08007503 	.word	0x08007503
 80074e8:	080074f9 	.word	0x080074f9
 80074ec:	08007543 	.word	0x08007543
 80074f0:	0800751b 	.word	0x0800751b
 80074f4:	0800750d 	.word	0x0800750d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80074f8:	6839      	ldr	r1, [r7, #0]
 80074fa:	6878      	ldr	r0, [r7, #4]
 80074fc:	f000 f9de 	bl	80078bc <USBD_GetDescriptor>
          break;
 8007500:	e024      	b.n	800754c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8007502:	6839      	ldr	r1, [r7, #0]
 8007504:	6878      	ldr	r0, [r7, #4]
 8007506:	f000 fb6d 	bl	8007be4 <USBD_SetAddress>
          break;
 800750a:	e01f      	b.n	800754c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800750c:	6839      	ldr	r1, [r7, #0]
 800750e:	6878      	ldr	r0, [r7, #4]
 8007510:	f000 fbac 	bl	8007c6c <USBD_SetConfig>
 8007514:	4603      	mov	r3, r0
 8007516:	73fb      	strb	r3, [r7, #15]
          break;
 8007518:	e018      	b.n	800754c <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800751a:	6839      	ldr	r1, [r7, #0]
 800751c:	6878      	ldr	r0, [r7, #4]
 800751e:	f000 fc4b 	bl	8007db8 <USBD_GetConfig>
          break;
 8007522:	e013      	b.n	800754c <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8007524:	6839      	ldr	r1, [r7, #0]
 8007526:	6878      	ldr	r0, [r7, #4]
 8007528:	f000 fc7c 	bl	8007e24 <USBD_GetStatus>
          break;
 800752c:	e00e      	b.n	800754c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800752e:	6839      	ldr	r1, [r7, #0]
 8007530:	6878      	ldr	r0, [r7, #4]
 8007532:	f000 fcab 	bl	8007e8c <USBD_SetFeature>
          break;
 8007536:	e009      	b.n	800754c <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8007538:	6839      	ldr	r1, [r7, #0]
 800753a:	6878      	ldr	r0, [r7, #4]
 800753c:	f000 fcba 	bl	8007eb4 <USBD_ClrFeature>
          break;
 8007540:	e004      	b.n	800754c <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 8007542:	6839      	ldr	r1, [r7, #0]
 8007544:	6878      	ldr	r0, [r7, #4]
 8007546:	f000 fd11 	bl	8007f6c <USBD_CtlError>
          break;
 800754a:	bf00      	nop
      }
      break;
 800754c:	e004      	b.n	8007558 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800754e:	6839      	ldr	r1, [r7, #0]
 8007550:	6878      	ldr	r0, [r7, #4]
 8007552:	f000 fd0b 	bl	8007f6c <USBD_CtlError>
      break;
 8007556:	bf00      	nop
  }

  return ret;
 8007558:	7bfb      	ldrb	r3, [r7, #15]
}
 800755a:	4618      	mov	r0, r3
 800755c:	3710      	adds	r7, #16
 800755e:	46bd      	mov	sp, r7
 8007560:	bd80      	pop	{r7, pc}
 8007562:	bf00      	nop

08007564 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007564:	b580      	push	{r7, lr}
 8007566:	b084      	sub	sp, #16
 8007568:	af00      	add	r7, sp, #0
 800756a:	6078      	str	r0, [r7, #4]
 800756c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800756e:	2300      	movs	r3, #0
 8007570:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007572:	683b      	ldr	r3, [r7, #0]
 8007574:	781b      	ldrb	r3, [r3, #0]
 8007576:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800757a:	2b40      	cmp	r3, #64	; 0x40
 800757c:	d005      	beq.n	800758a <USBD_StdItfReq+0x26>
 800757e:	2b40      	cmp	r3, #64	; 0x40
 8007580:	d82f      	bhi.n	80075e2 <USBD_StdItfReq+0x7e>
 8007582:	2b00      	cmp	r3, #0
 8007584:	d001      	beq.n	800758a <USBD_StdItfReq+0x26>
 8007586:	2b20      	cmp	r3, #32
 8007588:	d12b      	bne.n	80075e2 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007590:	b2db      	uxtb	r3, r3
 8007592:	3b01      	subs	r3, #1
 8007594:	2b02      	cmp	r3, #2
 8007596:	d81d      	bhi.n	80075d4 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8007598:	683b      	ldr	r3, [r7, #0]
 800759a:	889b      	ldrh	r3, [r3, #4]
 800759c:	b2db      	uxtb	r3, r3
 800759e:	2b01      	cmp	r3, #1
 80075a0:	d813      	bhi.n	80075ca <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80075a8:	689b      	ldr	r3, [r3, #8]
 80075aa:	6839      	ldr	r1, [r7, #0]
 80075ac:	6878      	ldr	r0, [r7, #4]
 80075ae:	4798      	blx	r3
 80075b0:	4603      	mov	r3, r0
 80075b2:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80075b4:	683b      	ldr	r3, [r7, #0]
 80075b6:	88db      	ldrh	r3, [r3, #6]
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	d110      	bne.n	80075de <USBD_StdItfReq+0x7a>
 80075bc:	7bfb      	ldrb	r3, [r7, #15]
 80075be:	2b00      	cmp	r3, #0
 80075c0:	d10d      	bne.n	80075de <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 80075c2:	6878      	ldr	r0, [r7, #4]
 80075c4:	f000 fd9d 	bl	8008102 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80075c8:	e009      	b.n	80075de <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 80075ca:	6839      	ldr	r1, [r7, #0]
 80075cc:	6878      	ldr	r0, [r7, #4]
 80075ce:	f000 fccd 	bl	8007f6c <USBD_CtlError>
          break;
 80075d2:	e004      	b.n	80075de <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 80075d4:	6839      	ldr	r1, [r7, #0]
 80075d6:	6878      	ldr	r0, [r7, #4]
 80075d8:	f000 fcc8 	bl	8007f6c <USBD_CtlError>
          break;
 80075dc:	e000      	b.n	80075e0 <USBD_StdItfReq+0x7c>
          break;
 80075de:	bf00      	nop
      }
      break;
 80075e0:	e004      	b.n	80075ec <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 80075e2:	6839      	ldr	r1, [r7, #0]
 80075e4:	6878      	ldr	r0, [r7, #4]
 80075e6:	f000 fcc1 	bl	8007f6c <USBD_CtlError>
      break;
 80075ea:	bf00      	nop
  }

  return ret;
 80075ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80075ee:	4618      	mov	r0, r3
 80075f0:	3710      	adds	r7, #16
 80075f2:	46bd      	mov	sp, r7
 80075f4:	bd80      	pop	{r7, pc}

080075f6 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80075f6:	b580      	push	{r7, lr}
 80075f8:	b084      	sub	sp, #16
 80075fa:	af00      	add	r7, sp, #0
 80075fc:	6078      	str	r0, [r7, #4]
 80075fe:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8007600:	2300      	movs	r3, #0
 8007602:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8007604:	683b      	ldr	r3, [r7, #0]
 8007606:	889b      	ldrh	r3, [r3, #4]
 8007608:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800760a:	683b      	ldr	r3, [r7, #0]
 800760c:	781b      	ldrb	r3, [r3, #0]
 800760e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007612:	2b40      	cmp	r3, #64	; 0x40
 8007614:	d007      	beq.n	8007626 <USBD_StdEPReq+0x30>
 8007616:	2b40      	cmp	r3, #64	; 0x40
 8007618:	f200 8145 	bhi.w	80078a6 <USBD_StdEPReq+0x2b0>
 800761c:	2b00      	cmp	r3, #0
 800761e:	d00c      	beq.n	800763a <USBD_StdEPReq+0x44>
 8007620:	2b20      	cmp	r3, #32
 8007622:	f040 8140 	bne.w	80078a6 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800762c:	689b      	ldr	r3, [r3, #8]
 800762e:	6839      	ldr	r1, [r7, #0]
 8007630:	6878      	ldr	r0, [r7, #4]
 8007632:	4798      	blx	r3
 8007634:	4603      	mov	r3, r0
 8007636:	73fb      	strb	r3, [r7, #15]
      break;
 8007638:	e13a      	b.n	80078b0 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800763a:	683b      	ldr	r3, [r7, #0]
 800763c:	785b      	ldrb	r3, [r3, #1]
 800763e:	2b03      	cmp	r3, #3
 8007640:	d007      	beq.n	8007652 <USBD_StdEPReq+0x5c>
 8007642:	2b03      	cmp	r3, #3
 8007644:	f300 8129 	bgt.w	800789a <USBD_StdEPReq+0x2a4>
 8007648:	2b00      	cmp	r3, #0
 800764a:	d07f      	beq.n	800774c <USBD_StdEPReq+0x156>
 800764c:	2b01      	cmp	r3, #1
 800764e:	d03c      	beq.n	80076ca <USBD_StdEPReq+0xd4>
 8007650:	e123      	b.n	800789a <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007658:	b2db      	uxtb	r3, r3
 800765a:	2b02      	cmp	r3, #2
 800765c:	d002      	beq.n	8007664 <USBD_StdEPReq+0x6e>
 800765e:	2b03      	cmp	r3, #3
 8007660:	d016      	beq.n	8007690 <USBD_StdEPReq+0x9a>
 8007662:	e02c      	b.n	80076be <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007664:	7bbb      	ldrb	r3, [r7, #14]
 8007666:	2b00      	cmp	r3, #0
 8007668:	d00d      	beq.n	8007686 <USBD_StdEPReq+0x90>
 800766a:	7bbb      	ldrb	r3, [r7, #14]
 800766c:	2b80      	cmp	r3, #128	; 0x80
 800766e:	d00a      	beq.n	8007686 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007670:	7bbb      	ldrb	r3, [r7, #14]
 8007672:	4619      	mov	r1, r3
 8007674:	6878      	ldr	r0, [r7, #4]
 8007676:	f001 f965 	bl	8008944 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800767a:	2180      	movs	r1, #128	; 0x80
 800767c:	6878      	ldr	r0, [r7, #4]
 800767e:	f001 f961 	bl	8008944 <USBD_LL_StallEP>
 8007682:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007684:	e020      	b.n	80076c8 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 8007686:	6839      	ldr	r1, [r7, #0]
 8007688:	6878      	ldr	r0, [r7, #4]
 800768a:	f000 fc6f 	bl	8007f6c <USBD_CtlError>
              break;
 800768e:	e01b      	b.n	80076c8 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007690:	683b      	ldr	r3, [r7, #0]
 8007692:	885b      	ldrh	r3, [r3, #2]
 8007694:	2b00      	cmp	r3, #0
 8007696:	d10e      	bne.n	80076b6 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007698:	7bbb      	ldrb	r3, [r7, #14]
 800769a:	2b00      	cmp	r3, #0
 800769c:	d00b      	beq.n	80076b6 <USBD_StdEPReq+0xc0>
 800769e:	7bbb      	ldrb	r3, [r7, #14]
 80076a0:	2b80      	cmp	r3, #128	; 0x80
 80076a2:	d008      	beq.n	80076b6 <USBD_StdEPReq+0xc0>
 80076a4:	683b      	ldr	r3, [r7, #0]
 80076a6:	88db      	ldrh	r3, [r3, #6]
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	d104      	bne.n	80076b6 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80076ac:	7bbb      	ldrb	r3, [r7, #14]
 80076ae:	4619      	mov	r1, r3
 80076b0:	6878      	ldr	r0, [r7, #4]
 80076b2:	f001 f947 	bl	8008944 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80076b6:	6878      	ldr	r0, [r7, #4]
 80076b8:	f000 fd23 	bl	8008102 <USBD_CtlSendStatus>

              break;
 80076bc:	e004      	b.n	80076c8 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 80076be:	6839      	ldr	r1, [r7, #0]
 80076c0:	6878      	ldr	r0, [r7, #4]
 80076c2:	f000 fc53 	bl	8007f6c <USBD_CtlError>
              break;
 80076c6:	bf00      	nop
          }
          break;
 80076c8:	e0ec      	b.n	80078a4 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80076d0:	b2db      	uxtb	r3, r3
 80076d2:	2b02      	cmp	r3, #2
 80076d4:	d002      	beq.n	80076dc <USBD_StdEPReq+0xe6>
 80076d6:	2b03      	cmp	r3, #3
 80076d8:	d016      	beq.n	8007708 <USBD_StdEPReq+0x112>
 80076da:	e030      	b.n	800773e <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80076dc:	7bbb      	ldrb	r3, [r7, #14]
 80076de:	2b00      	cmp	r3, #0
 80076e0:	d00d      	beq.n	80076fe <USBD_StdEPReq+0x108>
 80076e2:	7bbb      	ldrb	r3, [r7, #14]
 80076e4:	2b80      	cmp	r3, #128	; 0x80
 80076e6:	d00a      	beq.n	80076fe <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80076e8:	7bbb      	ldrb	r3, [r7, #14]
 80076ea:	4619      	mov	r1, r3
 80076ec:	6878      	ldr	r0, [r7, #4]
 80076ee:	f001 f929 	bl	8008944 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80076f2:	2180      	movs	r1, #128	; 0x80
 80076f4:	6878      	ldr	r0, [r7, #4]
 80076f6:	f001 f925 	bl	8008944 <USBD_LL_StallEP>
 80076fa:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80076fc:	e025      	b.n	800774a <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 80076fe:	6839      	ldr	r1, [r7, #0]
 8007700:	6878      	ldr	r0, [r7, #4]
 8007702:	f000 fc33 	bl	8007f6c <USBD_CtlError>
              break;
 8007706:	e020      	b.n	800774a <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007708:	683b      	ldr	r3, [r7, #0]
 800770a:	885b      	ldrh	r3, [r3, #2]
 800770c:	2b00      	cmp	r3, #0
 800770e:	d11b      	bne.n	8007748 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8007710:	7bbb      	ldrb	r3, [r7, #14]
 8007712:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007716:	2b00      	cmp	r3, #0
 8007718:	d004      	beq.n	8007724 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800771a:	7bbb      	ldrb	r3, [r7, #14]
 800771c:	4619      	mov	r1, r3
 800771e:	6878      	ldr	r0, [r7, #4]
 8007720:	f001 f92f 	bl	8008982 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8007724:	6878      	ldr	r0, [r7, #4]
 8007726:	f000 fcec 	bl	8008102 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007730:	689b      	ldr	r3, [r3, #8]
 8007732:	6839      	ldr	r1, [r7, #0]
 8007734:	6878      	ldr	r0, [r7, #4]
 8007736:	4798      	blx	r3
 8007738:	4603      	mov	r3, r0
 800773a:	73fb      	strb	r3, [r7, #15]
              }
              break;
 800773c:	e004      	b.n	8007748 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 800773e:	6839      	ldr	r1, [r7, #0]
 8007740:	6878      	ldr	r0, [r7, #4]
 8007742:	f000 fc13 	bl	8007f6c <USBD_CtlError>
              break;
 8007746:	e000      	b.n	800774a <USBD_StdEPReq+0x154>
              break;
 8007748:	bf00      	nop
          }
          break;
 800774a:	e0ab      	b.n	80078a4 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007752:	b2db      	uxtb	r3, r3
 8007754:	2b02      	cmp	r3, #2
 8007756:	d002      	beq.n	800775e <USBD_StdEPReq+0x168>
 8007758:	2b03      	cmp	r3, #3
 800775a:	d032      	beq.n	80077c2 <USBD_StdEPReq+0x1cc>
 800775c:	e097      	b.n	800788e <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800775e:	7bbb      	ldrb	r3, [r7, #14]
 8007760:	2b00      	cmp	r3, #0
 8007762:	d007      	beq.n	8007774 <USBD_StdEPReq+0x17e>
 8007764:	7bbb      	ldrb	r3, [r7, #14]
 8007766:	2b80      	cmp	r3, #128	; 0x80
 8007768:	d004      	beq.n	8007774 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 800776a:	6839      	ldr	r1, [r7, #0]
 800776c:	6878      	ldr	r0, [r7, #4]
 800776e:	f000 fbfd 	bl	8007f6c <USBD_CtlError>
                break;
 8007772:	e091      	b.n	8007898 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007774:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007778:	2b00      	cmp	r3, #0
 800777a:	da0b      	bge.n	8007794 <USBD_StdEPReq+0x19e>
 800777c:	7bbb      	ldrb	r3, [r7, #14]
 800777e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007782:	4613      	mov	r3, r2
 8007784:	009b      	lsls	r3, r3, #2
 8007786:	4413      	add	r3, r2
 8007788:	009b      	lsls	r3, r3, #2
 800778a:	3310      	adds	r3, #16
 800778c:	687a      	ldr	r2, [r7, #4]
 800778e:	4413      	add	r3, r2
 8007790:	3304      	adds	r3, #4
 8007792:	e00b      	b.n	80077ac <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007794:	7bbb      	ldrb	r3, [r7, #14]
 8007796:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800779a:	4613      	mov	r3, r2
 800779c:	009b      	lsls	r3, r3, #2
 800779e:	4413      	add	r3, r2
 80077a0:	009b      	lsls	r3, r3, #2
 80077a2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80077a6:	687a      	ldr	r2, [r7, #4]
 80077a8:	4413      	add	r3, r2
 80077aa:	3304      	adds	r3, #4
 80077ac:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80077ae:	68bb      	ldr	r3, [r7, #8]
 80077b0:	2200      	movs	r2, #0
 80077b2:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80077b4:	68bb      	ldr	r3, [r7, #8]
 80077b6:	2202      	movs	r2, #2
 80077b8:	4619      	mov	r1, r3
 80077ba:	6878      	ldr	r0, [r7, #4]
 80077bc:	f000 fc47 	bl	800804e <USBD_CtlSendData>
              break;
 80077c0:	e06a      	b.n	8007898 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80077c2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	da11      	bge.n	80077ee <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80077ca:	7bbb      	ldrb	r3, [r7, #14]
 80077cc:	f003 020f 	and.w	r2, r3, #15
 80077d0:	6879      	ldr	r1, [r7, #4]
 80077d2:	4613      	mov	r3, r2
 80077d4:	009b      	lsls	r3, r3, #2
 80077d6:	4413      	add	r3, r2
 80077d8:	009b      	lsls	r3, r3, #2
 80077da:	440b      	add	r3, r1
 80077dc:	3324      	adds	r3, #36	; 0x24
 80077de:	881b      	ldrh	r3, [r3, #0]
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d117      	bne.n	8007814 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 80077e4:	6839      	ldr	r1, [r7, #0]
 80077e6:	6878      	ldr	r0, [r7, #4]
 80077e8:	f000 fbc0 	bl	8007f6c <USBD_CtlError>
                  break;
 80077ec:	e054      	b.n	8007898 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80077ee:	7bbb      	ldrb	r3, [r7, #14]
 80077f0:	f003 020f 	and.w	r2, r3, #15
 80077f4:	6879      	ldr	r1, [r7, #4]
 80077f6:	4613      	mov	r3, r2
 80077f8:	009b      	lsls	r3, r3, #2
 80077fa:	4413      	add	r3, r2
 80077fc:	009b      	lsls	r3, r3, #2
 80077fe:	440b      	add	r3, r1
 8007800:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8007804:	881b      	ldrh	r3, [r3, #0]
 8007806:	2b00      	cmp	r3, #0
 8007808:	d104      	bne.n	8007814 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800780a:	6839      	ldr	r1, [r7, #0]
 800780c:	6878      	ldr	r0, [r7, #4]
 800780e:	f000 fbad 	bl	8007f6c <USBD_CtlError>
                  break;
 8007812:	e041      	b.n	8007898 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007814:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007818:	2b00      	cmp	r3, #0
 800781a:	da0b      	bge.n	8007834 <USBD_StdEPReq+0x23e>
 800781c:	7bbb      	ldrb	r3, [r7, #14]
 800781e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007822:	4613      	mov	r3, r2
 8007824:	009b      	lsls	r3, r3, #2
 8007826:	4413      	add	r3, r2
 8007828:	009b      	lsls	r3, r3, #2
 800782a:	3310      	adds	r3, #16
 800782c:	687a      	ldr	r2, [r7, #4]
 800782e:	4413      	add	r3, r2
 8007830:	3304      	adds	r3, #4
 8007832:	e00b      	b.n	800784c <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007834:	7bbb      	ldrb	r3, [r7, #14]
 8007836:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800783a:	4613      	mov	r3, r2
 800783c:	009b      	lsls	r3, r3, #2
 800783e:	4413      	add	r3, r2
 8007840:	009b      	lsls	r3, r3, #2
 8007842:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007846:	687a      	ldr	r2, [r7, #4]
 8007848:	4413      	add	r3, r2
 800784a:	3304      	adds	r3, #4
 800784c:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800784e:	7bbb      	ldrb	r3, [r7, #14]
 8007850:	2b00      	cmp	r3, #0
 8007852:	d002      	beq.n	800785a <USBD_StdEPReq+0x264>
 8007854:	7bbb      	ldrb	r3, [r7, #14]
 8007856:	2b80      	cmp	r3, #128	; 0x80
 8007858:	d103      	bne.n	8007862 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 800785a:	68bb      	ldr	r3, [r7, #8]
 800785c:	2200      	movs	r2, #0
 800785e:	601a      	str	r2, [r3, #0]
 8007860:	e00e      	b.n	8007880 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8007862:	7bbb      	ldrb	r3, [r7, #14]
 8007864:	4619      	mov	r1, r3
 8007866:	6878      	ldr	r0, [r7, #4]
 8007868:	f001 f8aa 	bl	80089c0 <USBD_LL_IsStallEP>
 800786c:	4603      	mov	r3, r0
 800786e:	2b00      	cmp	r3, #0
 8007870:	d003      	beq.n	800787a <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 8007872:	68bb      	ldr	r3, [r7, #8]
 8007874:	2201      	movs	r2, #1
 8007876:	601a      	str	r2, [r3, #0]
 8007878:	e002      	b.n	8007880 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 800787a:	68bb      	ldr	r3, [r7, #8]
 800787c:	2200      	movs	r2, #0
 800787e:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007880:	68bb      	ldr	r3, [r7, #8]
 8007882:	2202      	movs	r2, #2
 8007884:	4619      	mov	r1, r3
 8007886:	6878      	ldr	r0, [r7, #4]
 8007888:	f000 fbe1 	bl	800804e <USBD_CtlSendData>
              break;
 800788c:	e004      	b.n	8007898 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 800788e:	6839      	ldr	r1, [r7, #0]
 8007890:	6878      	ldr	r0, [r7, #4]
 8007892:	f000 fb6b 	bl	8007f6c <USBD_CtlError>
              break;
 8007896:	bf00      	nop
          }
          break;
 8007898:	e004      	b.n	80078a4 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 800789a:	6839      	ldr	r1, [r7, #0]
 800789c:	6878      	ldr	r0, [r7, #4]
 800789e:	f000 fb65 	bl	8007f6c <USBD_CtlError>
          break;
 80078a2:	bf00      	nop
      }
      break;
 80078a4:	e004      	b.n	80078b0 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 80078a6:	6839      	ldr	r1, [r7, #0]
 80078a8:	6878      	ldr	r0, [r7, #4]
 80078aa:	f000 fb5f 	bl	8007f6c <USBD_CtlError>
      break;
 80078ae:	bf00      	nop
  }

  return ret;
 80078b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80078b2:	4618      	mov	r0, r3
 80078b4:	3710      	adds	r7, #16
 80078b6:	46bd      	mov	sp, r7
 80078b8:	bd80      	pop	{r7, pc}
	...

080078bc <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80078bc:	b580      	push	{r7, lr}
 80078be:	b084      	sub	sp, #16
 80078c0:	af00      	add	r7, sp, #0
 80078c2:	6078      	str	r0, [r7, #4]
 80078c4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80078c6:	2300      	movs	r3, #0
 80078c8:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80078ca:	2300      	movs	r3, #0
 80078cc:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80078ce:	2300      	movs	r3, #0
 80078d0:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80078d2:	683b      	ldr	r3, [r7, #0]
 80078d4:	885b      	ldrh	r3, [r3, #2]
 80078d6:	0a1b      	lsrs	r3, r3, #8
 80078d8:	b29b      	uxth	r3, r3
 80078da:	3b01      	subs	r3, #1
 80078dc:	2b0e      	cmp	r3, #14
 80078de:	f200 8152 	bhi.w	8007b86 <USBD_GetDescriptor+0x2ca>
 80078e2:	a201      	add	r2, pc, #4	; (adr r2, 80078e8 <USBD_GetDescriptor+0x2c>)
 80078e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078e8:	08007959 	.word	0x08007959
 80078ec:	08007971 	.word	0x08007971
 80078f0:	080079b1 	.word	0x080079b1
 80078f4:	08007b87 	.word	0x08007b87
 80078f8:	08007b87 	.word	0x08007b87
 80078fc:	08007b27 	.word	0x08007b27
 8007900:	08007b53 	.word	0x08007b53
 8007904:	08007b87 	.word	0x08007b87
 8007908:	08007b87 	.word	0x08007b87
 800790c:	08007b87 	.word	0x08007b87
 8007910:	08007b87 	.word	0x08007b87
 8007914:	08007b87 	.word	0x08007b87
 8007918:	08007b87 	.word	0x08007b87
 800791c:	08007b87 	.word	0x08007b87
 8007920:	08007925 	.word	0x08007925
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800792a:	69db      	ldr	r3, [r3, #28]
 800792c:	2b00      	cmp	r3, #0
 800792e:	d00b      	beq.n	8007948 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007936:	69db      	ldr	r3, [r3, #28]
 8007938:	687a      	ldr	r2, [r7, #4]
 800793a:	7c12      	ldrb	r2, [r2, #16]
 800793c:	f107 0108 	add.w	r1, r7, #8
 8007940:	4610      	mov	r0, r2
 8007942:	4798      	blx	r3
 8007944:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007946:	e126      	b.n	8007b96 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8007948:	6839      	ldr	r1, [r7, #0]
 800794a:	6878      	ldr	r0, [r7, #4]
 800794c:	f000 fb0e 	bl	8007f6c <USBD_CtlError>
        err++;
 8007950:	7afb      	ldrb	r3, [r7, #11]
 8007952:	3301      	adds	r3, #1
 8007954:	72fb      	strb	r3, [r7, #11]
      break;
 8007956:	e11e      	b.n	8007b96 <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	687a      	ldr	r2, [r7, #4]
 8007962:	7c12      	ldrb	r2, [r2, #16]
 8007964:	f107 0108 	add.w	r1, r7, #8
 8007968:	4610      	mov	r0, r2
 800796a:	4798      	blx	r3
 800796c:	60f8      	str	r0, [r7, #12]
      break;
 800796e:	e112      	b.n	8007b96 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	7c1b      	ldrb	r3, [r3, #16]
 8007974:	2b00      	cmp	r3, #0
 8007976:	d10d      	bne.n	8007994 <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800797e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007980:	f107 0208 	add.w	r2, r7, #8
 8007984:	4610      	mov	r0, r2
 8007986:	4798      	blx	r3
 8007988:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	3301      	adds	r3, #1
 800798e:	2202      	movs	r2, #2
 8007990:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8007992:	e100      	b.n	8007b96 <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800799a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800799c:	f107 0208 	add.w	r2, r7, #8
 80079a0:	4610      	mov	r0, r2
 80079a2:	4798      	blx	r3
 80079a4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	3301      	adds	r3, #1
 80079aa:	2202      	movs	r2, #2
 80079ac:	701a      	strb	r2, [r3, #0]
      break;
 80079ae:	e0f2      	b.n	8007b96 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80079b0:	683b      	ldr	r3, [r7, #0]
 80079b2:	885b      	ldrh	r3, [r3, #2]
 80079b4:	b2db      	uxtb	r3, r3
 80079b6:	2b05      	cmp	r3, #5
 80079b8:	f200 80ac 	bhi.w	8007b14 <USBD_GetDescriptor+0x258>
 80079bc:	a201      	add	r2, pc, #4	; (adr r2, 80079c4 <USBD_GetDescriptor+0x108>)
 80079be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079c2:	bf00      	nop
 80079c4:	080079dd 	.word	0x080079dd
 80079c8:	08007a11 	.word	0x08007a11
 80079cc:	08007a45 	.word	0x08007a45
 80079d0:	08007a79 	.word	0x08007a79
 80079d4:	08007aad 	.word	0x08007aad
 80079d8:	08007ae1 	.word	0x08007ae1
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80079e2:	685b      	ldr	r3, [r3, #4]
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	d00b      	beq.n	8007a00 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80079ee:	685b      	ldr	r3, [r3, #4]
 80079f0:	687a      	ldr	r2, [r7, #4]
 80079f2:	7c12      	ldrb	r2, [r2, #16]
 80079f4:	f107 0108 	add.w	r1, r7, #8
 80079f8:	4610      	mov	r0, r2
 80079fa:	4798      	blx	r3
 80079fc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80079fe:	e091      	b.n	8007b24 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8007a00:	6839      	ldr	r1, [r7, #0]
 8007a02:	6878      	ldr	r0, [r7, #4]
 8007a04:	f000 fab2 	bl	8007f6c <USBD_CtlError>
            err++;
 8007a08:	7afb      	ldrb	r3, [r7, #11]
 8007a0a:	3301      	adds	r3, #1
 8007a0c:	72fb      	strb	r3, [r7, #11]
          break;
 8007a0e:	e089      	b.n	8007b24 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007a16:	689b      	ldr	r3, [r3, #8]
 8007a18:	2b00      	cmp	r3, #0
 8007a1a:	d00b      	beq.n	8007a34 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007a22:	689b      	ldr	r3, [r3, #8]
 8007a24:	687a      	ldr	r2, [r7, #4]
 8007a26:	7c12      	ldrb	r2, [r2, #16]
 8007a28:	f107 0108 	add.w	r1, r7, #8
 8007a2c:	4610      	mov	r0, r2
 8007a2e:	4798      	blx	r3
 8007a30:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007a32:	e077      	b.n	8007b24 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8007a34:	6839      	ldr	r1, [r7, #0]
 8007a36:	6878      	ldr	r0, [r7, #4]
 8007a38:	f000 fa98 	bl	8007f6c <USBD_CtlError>
            err++;
 8007a3c:	7afb      	ldrb	r3, [r7, #11]
 8007a3e:	3301      	adds	r3, #1
 8007a40:	72fb      	strb	r3, [r7, #11]
          break;
 8007a42:	e06f      	b.n	8007b24 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007a4a:	68db      	ldr	r3, [r3, #12]
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	d00b      	beq.n	8007a68 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007a56:	68db      	ldr	r3, [r3, #12]
 8007a58:	687a      	ldr	r2, [r7, #4]
 8007a5a:	7c12      	ldrb	r2, [r2, #16]
 8007a5c:	f107 0108 	add.w	r1, r7, #8
 8007a60:	4610      	mov	r0, r2
 8007a62:	4798      	blx	r3
 8007a64:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007a66:	e05d      	b.n	8007b24 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8007a68:	6839      	ldr	r1, [r7, #0]
 8007a6a:	6878      	ldr	r0, [r7, #4]
 8007a6c:	f000 fa7e 	bl	8007f6c <USBD_CtlError>
            err++;
 8007a70:	7afb      	ldrb	r3, [r7, #11]
 8007a72:	3301      	adds	r3, #1
 8007a74:	72fb      	strb	r3, [r7, #11]
          break;
 8007a76:	e055      	b.n	8007b24 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007a7e:	691b      	ldr	r3, [r3, #16]
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	d00b      	beq.n	8007a9c <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007a8a:	691b      	ldr	r3, [r3, #16]
 8007a8c:	687a      	ldr	r2, [r7, #4]
 8007a8e:	7c12      	ldrb	r2, [r2, #16]
 8007a90:	f107 0108 	add.w	r1, r7, #8
 8007a94:	4610      	mov	r0, r2
 8007a96:	4798      	blx	r3
 8007a98:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007a9a:	e043      	b.n	8007b24 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8007a9c:	6839      	ldr	r1, [r7, #0]
 8007a9e:	6878      	ldr	r0, [r7, #4]
 8007aa0:	f000 fa64 	bl	8007f6c <USBD_CtlError>
            err++;
 8007aa4:	7afb      	ldrb	r3, [r7, #11]
 8007aa6:	3301      	adds	r3, #1
 8007aa8:	72fb      	strb	r3, [r7, #11]
          break;
 8007aaa:	e03b      	b.n	8007b24 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007ab2:	695b      	ldr	r3, [r3, #20]
 8007ab4:	2b00      	cmp	r3, #0
 8007ab6:	d00b      	beq.n	8007ad0 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007abe:	695b      	ldr	r3, [r3, #20]
 8007ac0:	687a      	ldr	r2, [r7, #4]
 8007ac2:	7c12      	ldrb	r2, [r2, #16]
 8007ac4:	f107 0108 	add.w	r1, r7, #8
 8007ac8:	4610      	mov	r0, r2
 8007aca:	4798      	blx	r3
 8007acc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007ace:	e029      	b.n	8007b24 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8007ad0:	6839      	ldr	r1, [r7, #0]
 8007ad2:	6878      	ldr	r0, [r7, #4]
 8007ad4:	f000 fa4a 	bl	8007f6c <USBD_CtlError>
            err++;
 8007ad8:	7afb      	ldrb	r3, [r7, #11]
 8007ada:	3301      	adds	r3, #1
 8007adc:	72fb      	strb	r3, [r7, #11]
          break;
 8007ade:	e021      	b.n	8007b24 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007ae6:	699b      	ldr	r3, [r3, #24]
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	d00b      	beq.n	8007b04 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007af2:	699b      	ldr	r3, [r3, #24]
 8007af4:	687a      	ldr	r2, [r7, #4]
 8007af6:	7c12      	ldrb	r2, [r2, #16]
 8007af8:	f107 0108 	add.w	r1, r7, #8
 8007afc:	4610      	mov	r0, r2
 8007afe:	4798      	blx	r3
 8007b00:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007b02:	e00f      	b.n	8007b24 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8007b04:	6839      	ldr	r1, [r7, #0]
 8007b06:	6878      	ldr	r0, [r7, #4]
 8007b08:	f000 fa30 	bl	8007f6c <USBD_CtlError>
            err++;
 8007b0c:	7afb      	ldrb	r3, [r7, #11]
 8007b0e:	3301      	adds	r3, #1
 8007b10:	72fb      	strb	r3, [r7, #11]
          break;
 8007b12:	e007      	b.n	8007b24 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8007b14:	6839      	ldr	r1, [r7, #0]
 8007b16:	6878      	ldr	r0, [r7, #4]
 8007b18:	f000 fa28 	bl	8007f6c <USBD_CtlError>
          err++;
 8007b1c:	7afb      	ldrb	r3, [r7, #11]
 8007b1e:	3301      	adds	r3, #1
 8007b20:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 8007b22:	bf00      	nop
      }
      break;
 8007b24:	e037      	b.n	8007b96 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	7c1b      	ldrb	r3, [r3, #16]
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	d109      	bne.n	8007b42 <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007b36:	f107 0208 	add.w	r2, r7, #8
 8007b3a:	4610      	mov	r0, r2
 8007b3c:	4798      	blx	r3
 8007b3e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007b40:	e029      	b.n	8007b96 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8007b42:	6839      	ldr	r1, [r7, #0]
 8007b44:	6878      	ldr	r0, [r7, #4]
 8007b46:	f000 fa11 	bl	8007f6c <USBD_CtlError>
        err++;
 8007b4a:	7afb      	ldrb	r3, [r7, #11]
 8007b4c:	3301      	adds	r3, #1
 8007b4e:	72fb      	strb	r3, [r7, #11]
      break;
 8007b50:	e021      	b.n	8007b96 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	7c1b      	ldrb	r3, [r3, #16]
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	d10d      	bne.n	8007b76 <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b62:	f107 0208 	add.w	r2, r7, #8
 8007b66:	4610      	mov	r0, r2
 8007b68:	4798      	blx	r3
 8007b6a:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	3301      	adds	r3, #1
 8007b70:	2207      	movs	r2, #7
 8007b72:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007b74:	e00f      	b.n	8007b96 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8007b76:	6839      	ldr	r1, [r7, #0]
 8007b78:	6878      	ldr	r0, [r7, #4]
 8007b7a:	f000 f9f7 	bl	8007f6c <USBD_CtlError>
        err++;
 8007b7e:	7afb      	ldrb	r3, [r7, #11]
 8007b80:	3301      	adds	r3, #1
 8007b82:	72fb      	strb	r3, [r7, #11]
      break;
 8007b84:	e007      	b.n	8007b96 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 8007b86:	6839      	ldr	r1, [r7, #0]
 8007b88:	6878      	ldr	r0, [r7, #4]
 8007b8a:	f000 f9ef 	bl	8007f6c <USBD_CtlError>
      err++;
 8007b8e:	7afb      	ldrb	r3, [r7, #11]
 8007b90:	3301      	adds	r3, #1
 8007b92:	72fb      	strb	r3, [r7, #11]
      break;
 8007b94:	bf00      	nop
  }

  if (err != 0U)
 8007b96:	7afb      	ldrb	r3, [r7, #11]
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	d11e      	bne.n	8007bda <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 8007b9c:	683b      	ldr	r3, [r7, #0]
 8007b9e:	88db      	ldrh	r3, [r3, #6]
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	d016      	beq.n	8007bd2 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 8007ba4:	893b      	ldrh	r3, [r7, #8]
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	d00e      	beq.n	8007bc8 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 8007baa:	683b      	ldr	r3, [r7, #0]
 8007bac:	88da      	ldrh	r2, [r3, #6]
 8007bae:	893b      	ldrh	r3, [r7, #8]
 8007bb0:	4293      	cmp	r3, r2
 8007bb2:	bf28      	it	cs
 8007bb4:	4613      	movcs	r3, r2
 8007bb6:	b29b      	uxth	r3, r3
 8007bb8:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8007bba:	893b      	ldrh	r3, [r7, #8]
 8007bbc:	461a      	mov	r2, r3
 8007bbe:	68f9      	ldr	r1, [r7, #12]
 8007bc0:	6878      	ldr	r0, [r7, #4]
 8007bc2:	f000 fa44 	bl	800804e <USBD_CtlSendData>
 8007bc6:	e009      	b.n	8007bdc <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8007bc8:	6839      	ldr	r1, [r7, #0]
 8007bca:	6878      	ldr	r0, [r7, #4]
 8007bcc:	f000 f9ce 	bl	8007f6c <USBD_CtlError>
 8007bd0:	e004      	b.n	8007bdc <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8007bd2:	6878      	ldr	r0, [r7, #4]
 8007bd4:	f000 fa95 	bl	8008102 <USBD_CtlSendStatus>
 8007bd8:	e000      	b.n	8007bdc <USBD_GetDescriptor+0x320>
    return;
 8007bda:	bf00      	nop
  }
}
 8007bdc:	3710      	adds	r7, #16
 8007bde:	46bd      	mov	sp, r7
 8007be0:	bd80      	pop	{r7, pc}
 8007be2:	bf00      	nop

08007be4 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007be4:	b580      	push	{r7, lr}
 8007be6:	b084      	sub	sp, #16
 8007be8:	af00      	add	r7, sp, #0
 8007bea:	6078      	str	r0, [r7, #4]
 8007bec:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8007bee:	683b      	ldr	r3, [r7, #0]
 8007bf0:	889b      	ldrh	r3, [r3, #4]
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	d131      	bne.n	8007c5a <USBD_SetAddress+0x76>
 8007bf6:	683b      	ldr	r3, [r7, #0]
 8007bf8:	88db      	ldrh	r3, [r3, #6]
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	d12d      	bne.n	8007c5a <USBD_SetAddress+0x76>
 8007bfe:	683b      	ldr	r3, [r7, #0]
 8007c00:	885b      	ldrh	r3, [r3, #2]
 8007c02:	2b7f      	cmp	r3, #127	; 0x7f
 8007c04:	d829      	bhi.n	8007c5a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8007c06:	683b      	ldr	r3, [r7, #0]
 8007c08:	885b      	ldrh	r3, [r3, #2]
 8007c0a:	b2db      	uxtb	r3, r3
 8007c0c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007c10:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007c18:	b2db      	uxtb	r3, r3
 8007c1a:	2b03      	cmp	r3, #3
 8007c1c:	d104      	bne.n	8007c28 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8007c1e:	6839      	ldr	r1, [r7, #0]
 8007c20:	6878      	ldr	r0, [r7, #4]
 8007c22:	f000 f9a3 	bl	8007f6c <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007c26:	e01d      	b.n	8007c64 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	7bfa      	ldrb	r2, [r7, #15]
 8007c2c:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007c30:	7bfb      	ldrb	r3, [r7, #15]
 8007c32:	4619      	mov	r1, r3
 8007c34:	6878      	ldr	r0, [r7, #4]
 8007c36:	f000 feef 	bl	8008a18 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8007c3a:	6878      	ldr	r0, [r7, #4]
 8007c3c:	f000 fa61 	bl	8008102 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007c40:	7bfb      	ldrb	r3, [r7, #15]
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	d004      	beq.n	8007c50 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	2202      	movs	r2, #2
 8007c4a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007c4e:	e009      	b.n	8007c64 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	2201      	movs	r2, #1
 8007c54:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007c58:	e004      	b.n	8007c64 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007c5a:	6839      	ldr	r1, [r7, #0]
 8007c5c:	6878      	ldr	r0, [r7, #4]
 8007c5e:	f000 f985 	bl	8007f6c <USBD_CtlError>
  }
}
 8007c62:	bf00      	nop
 8007c64:	bf00      	nop
 8007c66:	3710      	adds	r7, #16
 8007c68:	46bd      	mov	sp, r7
 8007c6a:	bd80      	pop	{r7, pc}

08007c6c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007c6c:	b580      	push	{r7, lr}
 8007c6e:	b084      	sub	sp, #16
 8007c70:	af00      	add	r7, sp, #0
 8007c72:	6078      	str	r0, [r7, #4]
 8007c74:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007c76:	2300      	movs	r3, #0
 8007c78:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8007c7a:	683b      	ldr	r3, [r7, #0]
 8007c7c:	885b      	ldrh	r3, [r3, #2]
 8007c7e:	b2da      	uxtb	r2, r3
 8007c80:	4b4c      	ldr	r3, [pc, #304]	; (8007db4 <USBD_SetConfig+0x148>)
 8007c82:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007c84:	4b4b      	ldr	r3, [pc, #300]	; (8007db4 <USBD_SetConfig+0x148>)
 8007c86:	781b      	ldrb	r3, [r3, #0]
 8007c88:	2b01      	cmp	r3, #1
 8007c8a:	d905      	bls.n	8007c98 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8007c8c:	6839      	ldr	r1, [r7, #0]
 8007c8e:	6878      	ldr	r0, [r7, #4]
 8007c90:	f000 f96c 	bl	8007f6c <USBD_CtlError>
    return USBD_FAIL;
 8007c94:	2303      	movs	r3, #3
 8007c96:	e088      	b.n	8007daa <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007c9e:	b2db      	uxtb	r3, r3
 8007ca0:	2b02      	cmp	r3, #2
 8007ca2:	d002      	beq.n	8007caa <USBD_SetConfig+0x3e>
 8007ca4:	2b03      	cmp	r3, #3
 8007ca6:	d025      	beq.n	8007cf4 <USBD_SetConfig+0x88>
 8007ca8:	e071      	b.n	8007d8e <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8007caa:	4b42      	ldr	r3, [pc, #264]	; (8007db4 <USBD_SetConfig+0x148>)
 8007cac:	781b      	ldrb	r3, [r3, #0]
 8007cae:	2b00      	cmp	r3, #0
 8007cb0:	d01c      	beq.n	8007cec <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 8007cb2:	4b40      	ldr	r3, [pc, #256]	; (8007db4 <USBD_SetConfig+0x148>)
 8007cb4:	781b      	ldrb	r3, [r3, #0]
 8007cb6:	461a      	mov	r2, r3
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007cbc:	4b3d      	ldr	r3, [pc, #244]	; (8007db4 <USBD_SetConfig+0x148>)
 8007cbe:	781b      	ldrb	r3, [r3, #0]
 8007cc0:	4619      	mov	r1, r3
 8007cc2:	6878      	ldr	r0, [r7, #4]
 8007cc4:	f7ff f91e 	bl	8006f04 <USBD_SetClassConfig>
 8007cc8:	4603      	mov	r3, r0
 8007cca:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8007ccc:	7bfb      	ldrb	r3, [r7, #15]
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	d004      	beq.n	8007cdc <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 8007cd2:	6839      	ldr	r1, [r7, #0]
 8007cd4:	6878      	ldr	r0, [r7, #4]
 8007cd6:	f000 f949 	bl	8007f6c <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007cda:	e065      	b.n	8007da8 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8007cdc:	6878      	ldr	r0, [r7, #4]
 8007cde:	f000 fa10 	bl	8008102 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	2203      	movs	r2, #3
 8007ce6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8007cea:	e05d      	b.n	8007da8 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8007cec:	6878      	ldr	r0, [r7, #4]
 8007cee:	f000 fa08 	bl	8008102 <USBD_CtlSendStatus>
      break;
 8007cf2:	e059      	b.n	8007da8 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8007cf4:	4b2f      	ldr	r3, [pc, #188]	; (8007db4 <USBD_SetConfig+0x148>)
 8007cf6:	781b      	ldrb	r3, [r3, #0]
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	d112      	bne.n	8007d22 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	2202      	movs	r2, #2
 8007d00:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8007d04:	4b2b      	ldr	r3, [pc, #172]	; (8007db4 <USBD_SetConfig+0x148>)
 8007d06:	781b      	ldrb	r3, [r3, #0]
 8007d08:	461a      	mov	r2, r3
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007d0e:	4b29      	ldr	r3, [pc, #164]	; (8007db4 <USBD_SetConfig+0x148>)
 8007d10:	781b      	ldrb	r3, [r3, #0]
 8007d12:	4619      	mov	r1, r3
 8007d14:	6878      	ldr	r0, [r7, #4]
 8007d16:	f7ff f911 	bl	8006f3c <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8007d1a:	6878      	ldr	r0, [r7, #4]
 8007d1c:	f000 f9f1 	bl	8008102 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007d20:	e042      	b.n	8007da8 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 8007d22:	4b24      	ldr	r3, [pc, #144]	; (8007db4 <USBD_SetConfig+0x148>)
 8007d24:	781b      	ldrb	r3, [r3, #0]
 8007d26:	461a      	mov	r2, r3
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	685b      	ldr	r3, [r3, #4]
 8007d2c:	429a      	cmp	r2, r3
 8007d2e:	d02a      	beq.n	8007d86 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	685b      	ldr	r3, [r3, #4]
 8007d34:	b2db      	uxtb	r3, r3
 8007d36:	4619      	mov	r1, r3
 8007d38:	6878      	ldr	r0, [r7, #4]
 8007d3a:	f7ff f8ff 	bl	8006f3c <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8007d3e:	4b1d      	ldr	r3, [pc, #116]	; (8007db4 <USBD_SetConfig+0x148>)
 8007d40:	781b      	ldrb	r3, [r3, #0]
 8007d42:	461a      	mov	r2, r3
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007d48:	4b1a      	ldr	r3, [pc, #104]	; (8007db4 <USBD_SetConfig+0x148>)
 8007d4a:	781b      	ldrb	r3, [r3, #0]
 8007d4c:	4619      	mov	r1, r3
 8007d4e:	6878      	ldr	r0, [r7, #4]
 8007d50:	f7ff f8d8 	bl	8006f04 <USBD_SetClassConfig>
 8007d54:	4603      	mov	r3, r0
 8007d56:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8007d58:	7bfb      	ldrb	r3, [r7, #15]
 8007d5a:	2b00      	cmp	r3, #0
 8007d5c:	d00f      	beq.n	8007d7e <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 8007d5e:	6839      	ldr	r1, [r7, #0]
 8007d60:	6878      	ldr	r0, [r7, #4]
 8007d62:	f000 f903 	bl	8007f6c <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	685b      	ldr	r3, [r3, #4]
 8007d6a:	b2db      	uxtb	r3, r3
 8007d6c:	4619      	mov	r1, r3
 8007d6e:	6878      	ldr	r0, [r7, #4]
 8007d70:	f7ff f8e4 	bl	8006f3c <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	2202      	movs	r2, #2
 8007d78:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8007d7c:	e014      	b.n	8007da8 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8007d7e:	6878      	ldr	r0, [r7, #4]
 8007d80:	f000 f9bf 	bl	8008102 <USBD_CtlSendStatus>
      break;
 8007d84:	e010      	b.n	8007da8 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8007d86:	6878      	ldr	r0, [r7, #4]
 8007d88:	f000 f9bb 	bl	8008102 <USBD_CtlSendStatus>
      break;
 8007d8c:	e00c      	b.n	8007da8 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8007d8e:	6839      	ldr	r1, [r7, #0]
 8007d90:	6878      	ldr	r0, [r7, #4]
 8007d92:	f000 f8eb 	bl	8007f6c <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007d96:	4b07      	ldr	r3, [pc, #28]	; (8007db4 <USBD_SetConfig+0x148>)
 8007d98:	781b      	ldrb	r3, [r3, #0]
 8007d9a:	4619      	mov	r1, r3
 8007d9c:	6878      	ldr	r0, [r7, #4]
 8007d9e:	f7ff f8cd 	bl	8006f3c <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8007da2:	2303      	movs	r3, #3
 8007da4:	73fb      	strb	r3, [r7, #15]
      break;
 8007da6:	bf00      	nop
  }

  return ret;
 8007da8:	7bfb      	ldrb	r3, [r7, #15]
}
 8007daa:	4618      	mov	r0, r3
 8007dac:	3710      	adds	r7, #16
 8007dae:	46bd      	mov	sp, r7
 8007db0:	bd80      	pop	{r7, pc}
 8007db2:	bf00      	nop
 8007db4:	200001b0 	.word	0x200001b0

08007db8 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007db8:	b580      	push	{r7, lr}
 8007dba:	b082      	sub	sp, #8
 8007dbc:	af00      	add	r7, sp, #0
 8007dbe:	6078      	str	r0, [r7, #4]
 8007dc0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8007dc2:	683b      	ldr	r3, [r7, #0]
 8007dc4:	88db      	ldrh	r3, [r3, #6]
 8007dc6:	2b01      	cmp	r3, #1
 8007dc8:	d004      	beq.n	8007dd4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8007dca:	6839      	ldr	r1, [r7, #0]
 8007dcc:	6878      	ldr	r0, [r7, #4]
 8007dce:	f000 f8cd 	bl	8007f6c <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8007dd2:	e023      	b.n	8007e1c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007dda:	b2db      	uxtb	r3, r3
 8007ddc:	2b02      	cmp	r3, #2
 8007dde:	dc02      	bgt.n	8007de6 <USBD_GetConfig+0x2e>
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	dc03      	bgt.n	8007dec <USBD_GetConfig+0x34>
 8007de4:	e015      	b.n	8007e12 <USBD_GetConfig+0x5a>
 8007de6:	2b03      	cmp	r3, #3
 8007de8:	d00b      	beq.n	8007e02 <USBD_GetConfig+0x4a>
 8007dea:	e012      	b.n	8007e12 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	2200      	movs	r2, #0
 8007df0:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	3308      	adds	r3, #8
 8007df6:	2201      	movs	r2, #1
 8007df8:	4619      	mov	r1, r3
 8007dfa:	6878      	ldr	r0, [r7, #4]
 8007dfc:	f000 f927 	bl	800804e <USBD_CtlSendData>
        break;
 8007e00:	e00c      	b.n	8007e1c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	3304      	adds	r3, #4
 8007e06:	2201      	movs	r2, #1
 8007e08:	4619      	mov	r1, r3
 8007e0a:	6878      	ldr	r0, [r7, #4]
 8007e0c:	f000 f91f 	bl	800804e <USBD_CtlSendData>
        break;
 8007e10:	e004      	b.n	8007e1c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8007e12:	6839      	ldr	r1, [r7, #0]
 8007e14:	6878      	ldr	r0, [r7, #4]
 8007e16:	f000 f8a9 	bl	8007f6c <USBD_CtlError>
        break;
 8007e1a:	bf00      	nop
}
 8007e1c:	bf00      	nop
 8007e1e:	3708      	adds	r7, #8
 8007e20:	46bd      	mov	sp, r7
 8007e22:	bd80      	pop	{r7, pc}

08007e24 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007e24:	b580      	push	{r7, lr}
 8007e26:	b082      	sub	sp, #8
 8007e28:	af00      	add	r7, sp, #0
 8007e2a:	6078      	str	r0, [r7, #4]
 8007e2c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007e34:	b2db      	uxtb	r3, r3
 8007e36:	3b01      	subs	r3, #1
 8007e38:	2b02      	cmp	r3, #2
 8007e3a:	d81e      	bhi.n	8007e7a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8007e3c:	683b      	ldr	r3, [r7, #0]
 8007e3e:	88db      	ldrh	r3, [r3, #6]
 8007e40:	2b02      	cmp	r3, #2
 8007e42:	d004      	beq.n	8007e4e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8007e44:	6839      	ldr	r1, [r7, #0]
 8007e46:	6878      	ldr	r0, [r7, #4]
 8007e48:	f000 f890 	bl	8007f6c <USBD_CtlError>
        break;
 8007e4c:	e01a      	b.n	8007e84 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	2201      	movs	r2, #1
 8007e52:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8007e5a:	2b00      	cmp	r3, #0
 8007e5c:	d005      	beq.n	8007e6a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	68db      	ldr	r3, [r3, #12]
 8007e62:	f043 0202 	orr.w	r2, r3, #2
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	330c      	adds	r3, #12
 8007e6e:	2202      	movs	r2, #2
 8007e70:	4619      	mov	r1, r3
 8007e72:	6878      	ldr	r0, [r7, #4]
 8007e74:	f000 f8eb 	bl	800804e <USBD_CtlSendData>
      break;
 8007e78:	e004      	b.n	8007e84 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8007e7a:	6839      	ldr	r1, [r7, #0]
 8007e7c:	6878      	ldr	r0, [r7, #4]
 8007e7e:	f000 f875 	bl	8007f6c <USBD_CtlError>
      break;
 8007e82:	bf00      	nop
  }
}
 8007e84:	bf00      	nop
 8007e86:	3708      	adds	r7, #8
 8007e88:	46bd      	mov	sp, r7
 8007e8a:	bd80      	pop	{r7, pc}

08007e8c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007e8c:	b580      	push	{r7, lr}
 8007e8e:	b082      	sub	sp, #8
 8007e90:	af00      	add	r7, sp, #0
 8007e92:	6078      	str	r0, [r7, #4]
 8007e94:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007e96:	683b      	ldr	r3, [r7, #0]
 8007e98:	885b      	ldrh	r3, [r3, #2]
 8007e9a:	2b01      	cmp	r3, #1
 8007e9c:	d106      	bne.n	8007eac <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	2201      	movs	r2, #1
 8007ea2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8007ea6:	6878      	ldr	r0, [r7, #4]
 8007ea8:	f000 f92b 	bl	8008102 <USBD_CtlSendStatus>
  }
}
 8007eac:	bf00      	nop
 8007eae:	3708      	adds	r7, #8
 8007eb0:	46bd      	mov	sp, r7
 8007eb2:	bd80      	pop	{r7, pc}

08007eb4 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007eb4:	b580      	push	{r7, lr}
 8007eb6:	b082      	sub	sp, #8
 8007eb8:	af00      	add	r7, sp, #0
 8007eba:	6078      	str	r0, [r7, #4]
 8007ebc:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007ec4:	b2db      	uxtb	r3, r3
 8007ec6:	3b01      	subs	r3, #1
 8007ec8:	2b02      	cmp	r3, #2
 8007eca:	d80b      	bhi.n	8007ee4 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007ecc:	683b      	ldr	r3, [r7, #0]
 8007ece:	885b      	ldrh	r3, [r3, #2]
 8007ed0:	2b01      	cmp	r3, #1
 8007ed2:	d10c      	bne.n	8007eee <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	2200      	movs	r2, #0
 8007ed8:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8007edc:	6878      	ldr	r0, [r7, #4]
 8007ede:	f000 f910 	bl	8008102 <USBD_CtlSendStatus>
      }
      break;
 8007ee2:	e004      	b.n	8007eee <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8007ee4:	6839      	ldr	r1, [r7, #0]
 8007ee6:	6878      	ldr	r0, [r7, #4]
 8007ee8:	f000 f840 	bl	8007f6c <USBD_CtlError>
      break;
 8007eec:	e000      	b.n	8007ef0 <USBD_ClrFeature+0x3c>
      break;
 8007eee:	bf00      	nop
  }
}
 8007ef0:	bf00      	nop
 8007ef2:	3708      	adds	r7, #8
 8007ef4:	46bd      	mov	sp, r7
 8007ef6:	bd80      	pop	{r7, pc}

08007ef8 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8007ef8:	b580      	push	{r7, lr}
 8007efa:	b084      	sub	sp, #16
 8007efc:	af00      	add	r7, sp, #0
 8007efe:	6078      	str	r0, [r7, #4]
 8007f00:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8007f02:	683b      	ldr	r3, [r7, #0]
 8007f04:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8007f06:	68fb      	ldr	r3, [r7, #12]
 8007f08:	781a      	ldrb	r2, [r3, #0]
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8007f0e:	68fb      	ldr	r3, [r7, #12]
 8007f10:	3301      	adds	r3, #1
 8007f12:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8007f14:	68fb      	ldr	r3, [r7, #12]
 8007f16:	781a      	ldrb	r2, [r3, #0]
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	3301      	adds	r3, #1
 8007f20:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8007f22:	68f8      	ldr	r0, [r7, #12]
 8007f24:	f7ff fa91 	bl	800744a <SWAPBYTE>
 8007f28:	4603      	mov	r3, r0
 8007f2a:	461a      	mov	r2, r3
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8007f30:	68fb      	ldr	r3, [r7, #12]
 8007f32:	3301      	adds	r3, #1
 8007f34:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007f36:	68fb      	ldr	r3, [r7, #12]
 8007f38:	3301      	adds	r3, #1
 8007f3a:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8007f3c:	68f8      	ldr	r0, [r7, #12]
 8007f3e:	f7ff fa84 	bl	800744a <SWAPBYTE>
 8007f42:	4603      	mov	r3, r0
 8007f44:	461a      	mov	r2, r3
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8007f4a:	68fb      	ldr	r3, [r7, #12]
 8007f4c:	3301      	adds	r3, #1
 8007f4e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	3301      	adds	r3, #1
 8007f54:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8007f56:	68f8      	ldr	r0, [r7, #12]
 8007f58:	f7ff fa77 	bl	800744a <SWAPBYTE>
 8007f5c:	4603      	mov	r3, r0
 8007f5e:	461a      	mov	r2, r3
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	80da      	strh	r2, [r3, #6]
}
 8007f64:	bf00      	nop
 8007f66:	3710      	adds	r7, #16
 8007f68:	46bd      	mov	sp, r7
 8007f6a:	bd80      	pop	{r7, pc}

08007f6c <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007f6c:	b580      	push	{r7, lr}
 8007f6e:	b082      	sub	sp, #8
 8007f70:	af00      	add	r7, sp, #0
 8007f72:	6078      	str	r0, [r7, #4]
 8007f74:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8007f76:	2180      	movs	r1, #128	; 0x80
 8007f78:	6878      	ldr	r0, [r7, #4]
 8007f7a:	f000 fce3 	bl	8008944 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8007f7e:	2100      	movs	r1, #0
 8007f80:	6878      	ldr	r0, [r7, #4]
 8007f82:	f000 fcdf 	bl	8008944 <USBD_LL_StallEP>
}
 8007f86:	bf00      	nop
 8007f88:	3708      	adds	r7, #8
 8007f8a:	46bd      	mov	sp, r7
 8007f8c:	bd80      	pop	{r7, pc}

08007f8e <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8007f8e:	b580      	push	{r7, lr}
 8007f90:	b086      	sub	sp, #24
 8007f92:	af00      	add	r7, sp, #0
 8007f94:	60f8      	str	r0, [r7, #12]
 8007f96:	60b9      	str	r1, [r7, #8]
 8007f98:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8007f9a:	2300      	movs	r3, #0
 8007f9c:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8007f9e:	68fb      	ldr	r3, [r7, #12]
 8007fa0:	2b00      	cmp	r3, #0
 8007fa2:	d036      	beq.n	8008012 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8007fa8:	6938      	ldr	r0, [r7, #16]
 8007faa:	f000 f836 	bl	800801a <USBD_GetLen>
 8007fae:	4603      	mov	r3, r0
 8007fb0:	3301      	adds	r3, #1
 8007fb2:	b29b      	uxth	r3, r3
 8007fb4:	005b      	lsls	r3, r3, #1
 8007fb6:	b29a      	uxth	r2, r3
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8007fbc:	7dfb      	ldrb	r3, [r7, #23]
 8007fbe:	68ba      	ldr	r2, [r7, #8]
 8007fc0:	4413      	add	r3, r2
 8007fc2:	687a      	ldr	r2, [r7, #4]
 8007fc4:	7812      	ldrb	r2, [r2, #0]
 8007fc6:	701a      	strb	r2, [r3, #0]
  idx++;
 8007fc8:	7dfb      	ldrb	r3, [r7, #23]
 8007fca:	3301      	adds	r3, #1
 8007fcc:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8007fce:	7dfb      	ldrb	r3, [r7, #23]
 8007fd0:	68ba      	ldr	r2, [r7, #8]
 8007fd2:	4413      	add	r3, r2
 8007fd4:	2203      	movs	r2, #3
 8007fd6:	701a      	strb	r2, [r3, #0]
  idx++;
 8007fd8:	7dfb      	ldrb	r3, [r7, #23]
 8007fda:	3301      	adds	r3, #1
 8007fdc:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8007fde:	e013      	b.n	8008008 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8007fe0:	7dfb      	ldrb	r3, [r7, #23]
 8007fe2:	68ba      	ldr	r2, [r7, #8]
 8007fe4:	4413      	add	r3, r2
 8007fe6:	693a      	ldr	r2, [r7, #16]
 8007fe8:	7812      	ldrb	r2, [r2, #0]
 8007fea:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8007fec:	693b      	ldr	r3, [r7, #16]
 8007fee:	3301      	adds	r3, #1
 8007ff0:	613b      	str	r3, [r7, #16]
    idx++;
 8007ff2:	7dfb      	ldrb	r3, [r7, #23]
 8007ff4:	3301      	adds	r3, #1
 8007ff6:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8007ff8:	7dfb      	ldrb	r3, [r7, #23]
 8007ffa:	68ba      	ldr	r2, [r7, #8]
 8007ffc:	4413      	add	r3, r2
 8007ffe:	2200      	movs	r2, #0
 8008000:	701a      	strb	r2, [r3, #0]
    idx++;
 8008002:	7dfb      	ldrb	r3, [r7, #23]
 8008004:	3301      	adds	r3, #1
 8008006:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8008008:	693b      	ldr	r3, [r7, #16]
 800800a:	781b      	ldrb	r3, [r3, #0]
 800800c:	2b00      	cmp	r3, #0
 800800e:	d1e7      	bne.n	8007fe0 <USBD_GetString+0x52>
 8008010:	e000      	b.n	8008014 <USBD_GetString+0x86>
    return;
 8008012:	bf00      	nop
  }
}
 8008014:	3718      	adds	r7, #24
 8008016:	46bd      	mov	sp, r7
 8008018:	bd80      	pop	{r7, pc}

0800801a <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800801a:	b480      	push	{r7}
 800801c:	b085      	sub	sp, #20
 800801e:	af00      	add	r7, sp, #0
 8008020:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8008022:	2300      	movs	r3, #0
 8008024:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800802a:	e005      	b.n	8008038 <USBD_GetLen+0x1e>
  {
    len++;
 800802c:	7bfb      	ldrb	r3, [r7, #15]
 800802e:	3301      	adds	r3, #1
 8008030:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8008032:	68bb      	ldr	r3, [r7, #8]
 8008034:	3301      	adds	r3, #1
 8008036:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8008038:	68bb      	ldr	r3, [r7, #8]
 800803a:	781b      	ldrb	r3, [r3, #0]
 800803c:	2b00      	cmp	r3, #0
 800803e:	d1f5      	bne.n	800802c <USBD_GetLen+0x12>
  }

  return len;
 8008040:	7bfb      	ldrb	r3, [r7, #15]
}
 8008042:	4618      	mov	r0, r3
 8008044:	3714      	adds	r7, #20
 8008046:	46bd      	mov	sp, r7
 8008048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800804c:	4770      	bx	lr

0800804e <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800804e:	b580      	push	{r7, lr}
 8008050:	b084      	sub	sp, #16
 8008052:	af00      	add	r7, sp, #0
 8008054:	60f8      	str	r0, [r7, #12]
 8008056:	60b9      	str	r1, [r7, #8]
 8008058:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800805a:	68fb      	ldr	r3, [r7, #12]
 800805c:	2202      	movs	r2, #2
 800805e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8008062:	68fb      	ldr	r3, [r7, #12]
 8008064:	687a      	ldr	r2, [r7, #4]
 8008066:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8008068:	68fb      	ldr	r3, [r7, #12]
 800806a:	687a      	ldr	r2, [r7, #4]
 800806c:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	68ba      	ldr	r2, [r7, #8]
 8008072:	2100      	movs	r1, #0
 8008074:	68f8      	ldr	r0, [r7, #12]
 8008076:	f000 fcee 	bl	8008a56 <USBD_LL_Transmit>

  return USBD_OK;
 800807a:	2300      	movs	r3, #0
}
 800807c:	4618      	mov	r0, r3
 800807e:	3710      	adds	r7, #16
 8008080:	46bd      	mov	sp, r7
 8008082:	bd80      	pop	{r7, pc}

08008084 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8008084:	b580      	push	{r7, lr}
 8008086:	b084      	sub	sp, #16
 8008088:	af00      	add	r7, sp, #0
 800808a:	60f8      	str	r0, [r7, #12]
 800808c:	60b9      	str	r1, [r7, #8]
 800808e:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	68ba      	ldr	r2, [r7, #8]
 8008094:	2100      	movs	r1, #0
 8008096:	68f8      	ldr	r0, [r7, #12]
 8008098:	f000 fcdd 	bl	8008a56 <USBD_LL_Transmit>

  return USBD_OK;
 800809c:	2300      	movs	r3, #0
}
 800809e:	4618      	mov	r0, r3
 80080a0:	3710      	adds	r7, #16
 80080a2:	46bd      	mov	sp, r7
 80080a4:	bd80      	pop	{r7, pc}

080080a6 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80080a6:	b580      	push	{r7, lr}
 80080a8:	b084      	sub	sp, #16
 80080aa:	af00      	add	r7, sp, #0
 80080ac:	60f8      	str	r0, [r7, #12]
 80080ae:	60b9      	str	r1, [r7, #8]
 80080b0:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80080b2:	68fb      	ldr	r3, [r7, #12]
 80080b4:	2203      	movs	r2, #3
 80080b6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 80080ba:	68fb      	ldr	r3, [r7, #12]
 80080bc:	687a      	ldr	r2, [r7, #4]
 80080be:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 80080c2:	68fb      	ldr	r3, [r7, #12]
 80080c4:	687a      	ldr	r2, [r7, #4]
 80080c6:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	68ba      	ldr	r2, [r7, #8]
 80080ce:	2100      	movs	r1, #0
 80080d0:	68f8      	ldr	r0, [r7, #12]
 80080d2:	f000 fce1 	bl	8008a98 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80080d6:	2300      	movs	r3, #0
}
 80080d8:	4618      	mov	r0, r3
 80080da:	3710      	adds	r7, #16
 80080dc:	46bd      	mov	sp, r7
 80080de:	bd80      	pop	{r7, pc}

080080e0 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80080e0:	b580      	push	{r7, lr}
 80080e2:	b084      	sub	sp, #16
 80080e4:	af00      	add	r7, sp, #0
 80080e6:	60f8      	str	r0, [r7, #12]
 80080e8:	60b9      	str	r1, [r7, #8]
 80080ea:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	68ba      	ldr	r2, [r7, #8]
 80080f0:	2100      	movs	r1, #0
 80080f2:	68f8      	ldr	r0, [r7, #12]
 80080f4:	f000 fcd0 	bl	8008a98 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80080f8:	2300      	movs	r3, #0
}
 80080fa:	4618      	mov	r0, r3
 80080fc:	3710      	adds	r7, #16
 80080fe:	46bd      	mov	sp, r7
 8008100:	bd80      	pop	{r7, pc}

08008102 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8008102:	b580      	push	{r7, lr}
 8008104:	b082      	sub	sp, #8
 8008106:	af00      	add	r7, sp, #0
 8008108:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	2204      	movs	r2, #4
 800810e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8008112:	2300      	movs	r3, #0
 8008114:	2200      	movs	r2, #0
 8008116:	2100      	movs	r1, #0
 8008118:	6878      	ldr	r0, [r7, #4]
 800811a:	f000 fc9c 	bl	8008a56 <USBD_LL_Transmit>

  return USBD_OK;
 800811e:	2300      	movs	r3, #0
}
 8008120:	4618      	mov	r0, r3
 8008122:	3708      	adds	r7, #8
 8008124:	46bd      	mov	sp, r7
 8008126:	bd80      	pop	{r7, pc}

08008128 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8008128:	b580      	push	{r7, lr}
 800812a:	b082      	sub	sp, #8
 800812c:	af00      	add	r7, sp, #0
 800812e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	2205      	movs	r2, #5
 8008134:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008138:	2300      	movs	r3, #0
 800813a:	2200      	movs	r2, #0
 800813c:	2100      	movs	r1, #0
 800813e:	6878      	ldr	r0, [r7, #4]
 8008140:	f000 fcaa 	bl	8008a98 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008144:	2300      	movs	r3, #0
}
 8008146:	4618      	mov	r0, r3
 8008148:	3708      	adds	r7, #8
 800814a:	46bd      	mov	sp, r7
 800814c:	bd80      	pop	{r7, pc}
	...

08008150 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8008150:	b580      	push	{r7, lr}
 8008152:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8008154:	2200      	movs	r2, #0
 8008156:	4912      	ldr	r1, [pc, #72]	; (80081a0 <MX_USB_DEVICE_Init+0x50>)
 8008158:	4812      	ldr	r0, [pc, #72]	; (80081a4 <MX_USB_DEVICE_Init+0x54>)
 800815a:	f7fe fe65 	bl	8006e28 <USBD_Init>
 800815e:	4603      	mov	r3, r0
 8008160:	2b00      	cmp	r3, #0
 8008162:	d001      	beq.n	8008168 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8008164:	f7f8 fc62 	bl	8000a2c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8008168:	490f      	ldr	r1, [pc, #60]	; (80081a8 <MX_USB_DEVICE_Init+0x58>)
 800816a:	480e      	ldr	r0, [pc, #56]	; (80081a4 <MX_USB_DEVICE_Init+0x54>)
 800816c:	f7fe fe8c 	bl	8006e88 <USBD_RegisterClass>
 8008170:	4603      	mov	r3, r0
 8008172:	2b00      	cmp	r3, #0
 8008174:	d001      	beq.n	800817a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8008176:	f7f8 fc59 	bl	8000a2c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800817a:	490c      	ldr	r1, [pc, #48]	; (80081ac <MX_USB_DEVICE_Init+0x5c>)
 800817c:	4809      	ldr	r0, [pc, #36]	; (80081a4 <MX_USB_DEVICE_Init+0x54>)
 800817e:	f7fe fddd 	bl	8006d3c <USBD_CDC_RegisterInterface>
 8008182:	4603      	mov	r3, r0
 8008184:	2b00      	cmp	r3, #0
 8008186:	d001      	beq.n	800818c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8008188:	f7f8 fc50 	bl	8000a2c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800818c:	4805      	ldr	r0, [pc, #20]	; (80081a4 <MX_USB_DEVICE_Init+0x54>)
 800818e:	f7fe fea2 	bl	8006ed6 <USBD_Start>
 8008192:	4603      	mov	r3, r0
 8008194:	2b00      	cmp	r3, #0
 8008196:	d001      	beq.n	800819c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8008198:	f7f8 fc48 	bl	8000a2c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800819c:	bf00      	nop
 800819e:	bd80      	pop	{r7, pc}
 80081a0:	20000130 	.word	0x20000130
 80081a4:	20000518 	.word	0x20000518
 80081a8:	20000018 	.word	0x20000018
 80081ac:	2000011c 	.word	0x2000011c

080081b0 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80081b0:	b580      	push	{r7, lr}
 80081b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80081b4:	2200      	movs	r2, #0
 80081b6:	4905      	ldr	r1, [pc, #20]	; (80081cc <CDC_Init_FS+0x1c>)
 80081b8:	4805      	ldr	r0, [pc, #20]	; (80081d0 <CDC_Init_FS+0x20>)
 80081ba:	f7fe fdd4 	bl	8006d66 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80081be:	4905      	ldr	r1, [pc, #20]	; (80081d4 <CDC_Init_FS+0x24>)
 80081c0:	4803      	ldr	r0, [pc, #12]	; (80081d0 <CDC_Init_FS+0x20>)
 80081c2:	f7fe fdee 	bl	8006da2 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80081c6:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80081c8:	4618      	mov	r0, r3
 80081ca:	bd80      	pop	{r7, pc}
 80081cc:	20000fe8 	.word	0x20000fe8
 80081d0:	20000518 	.word	0x20000518
 80081d4:	200007e8 	.word	0x200007e8

080081d8 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80081d8:	b480      	push	{r7}
 80081da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80081dc:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80081de:	4618      	mov	r0, r3
 80081e0:	46bd      	mov	sp, r7
 80081e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081e6:	4770      	bx	lr

080081e8 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80081e8:	b480      	push	{r7}
 80081ea:	b083      	sub	sp, #12
 80081ec:	af00      	add	r7, sp, #0
 80081ee:	4603      	mov	r3, r0
 80081f0:	6039      	str	r1, [r7, #0]
 80081f2:	71fb      	strb	r3, [r7, #7]
 80081f4:	4613      	mov	r3, r2
 80081f6:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80081f8:	79fb      	ldrb	r3, [r7, #7]
 80081fa:	2b23      	cmp	r3, #35	; 0x23
 80081fc:	d84a      	bhi.n	8008294 <CDC_Control_FS+0xac>
 80081fe:	a201      	add	r2, pc, #4	; (adr r2, 8008204 <CDC_Control_FS+0x1c>)
 8008200:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008204:	08008295 	.word	0x08008295
 8008208:	08008295 	.word	0x08008295
 800820c:	08008295 	.word	0x08008295
 8008210:	08008295 	.word	0x08008295
 8008214:	08008295 	.word	0x08008295
 8008218:	08008295 	.word	0x08008295
 800821c:	08008295 	.word	0x08008295
 8008220:	08008295 	.word	0x08008295
 8008224:	08008295 	.word	0x08008295
 8008228:	08008295 	.word	0x08008295
 800822c:	08008295 	.word	0x08008295
 8008230:	08008295 	.word	0x08008295
 8008234:	08008295 	.word	0x08008295
 8008238:	08008295 	.word	0x08008295
 800823c:	08008295 	.word	0x08008295
 8008240:	08008295 	.word	0x08008295
 8008244:	08008295 	.word	0x08008295
 8008248:	08008295 	.word	0x08008295
 800824c:	08008295 	.word	0x08008295
 8008250:	08008295 	.word	0x08008295
 8008254:	08008295 	.word	0x08008295
 8008258:	08008295 	.word	0x08008295
 800825c:	08008295 	.word	0x08008295
 8008260:	08008295 	.word	0x08008295
 8008264:	08008295 	.word	0x08008295
 8008268:	08008295 	.word	0x08008295
 800826c:	08008295 	.word	0x08008295
 8008270:	08008295 	.word	0x08008295
 8008274:	08008295 	.word	0x08008295
 8008278:	08008295 	.word	0x08008295
 800827c:	08008295 	.word	0x08008295
 8008280:	08008295 	.word	0x08008295
 8008284:	08008295 	.word	0x08008295
 8008288:	08008295 	.word	0x08008295
 800828c:	08008295 	.word	0x08008295
 8008290:	08008295 	.word	0x08008295
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8008294:	bf00      	nop
  }

  return (USBD_OK);
 8008296:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8008298:	4618      	mov	r0, r3
 800829a:	370c      	adds	r7, #12
 800829c:	46bd      	mov	sp, r7
 800829e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082a2:	4770      	bx	lr

080082a4 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80082a4:	b580      	push	{r7, lr}
 80082a6:	b082      	sub	sp, #8
 80082a8:	af00      	add	r7, sp, #0
 80082aa:	6078      	str	r0, [r7, #4]
 80082ac:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80082ae:	6879      	ldr	r1, [r7, #4]
 80082b0:	4805      	ldr	r0, [pc, #20]	; (80082c8 <CDC_Receive_FS+0x24>)
 80082b2:	f7fe fd76 	bl	8006da2 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80082b6:	4804      	ldr	r0, [pc, #16]	; (80082c8 <CDC_Receive_FS+0x24>)
 80082b8:	f7fe fd8c 	bl	8006dd4 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 80082bc:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80082be:	4618      	mov	r0, r3
 80082c0:	3708      	adds	r7, #8
 80082c2:	46bd      	mov	sp, r7
 80082c4:	bd80      	pop	{r7, pc}
 80082c6:	bf00      	nop
 80082c8:	20000518 	.word	0x20000518

080082cc <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 80082cc:	b480      	push	{r7}
 80082ce:	b087      	sub	sp, #28
 80082d0:	af00      	add	r7, sp, #0
 80082d2:	60f8      	str	r0, [r7, #12]
 80082d4:	60b9      	str	r1, [r7, #8]
 80082d6:	4613      	mov	r3, r2
 80082d8:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 80082da:	2300      	movs	r3, #0
 80082dc:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 80082de:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80082e2:	4618      	mov	r0, r3
 80082e4:	371c      	adds	r7, #28
 80082e6:	46bd      	mov	sp, r7
 80082e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ec:	4770      	bx	lr
	...

080082f0 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80082f0:	b480      	push	{r7}
 80082f2:	b083      	sub	sp, #12
 80082f4:	af00      	add	r7, sp, #0
 80082f6:	4603      	mov	r3, r0
 80082f8:	6039      	str	r1, [r7, #0]
 80082fa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80082fc:	683b      	ldr	r3, [r7, #0]
 80082fe:	2212      	movs	r2, #18
 8008300:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8008302:	4b03      	ldr	r3, [pc, #12]	; (8008310 <USBD_FS_DeviceDescriptor+0x20>)
}
 8008304:	4618      	mov	r0, r3
 8008306:	370c      	adds	r7, #12
 8008308:	46bd      	mov	sp, r7
 800830a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800830e:	4770      	bx	lr
 8008310:	20000150 	.word	0x20000150

08008314 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008314:	b480      	push	{r7}
 8008316:	b083      	sub	sp, #12
 8008318:	af00      	add	r7, sp, #0
 800831a:	4603      	mov	r3, r0
 800831c:	6039      	str	r1, [r7, #0]
 800831e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8008320:	683b      	ldr	r3, [r7, #0]
 8008322:	2204      	movs	r2, #4
 8008324:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8008326:	4b03      	ldr	r3, [pc, #12]	; (8008334 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8008328:	4618      	mov	r0, r3
 800832a:	370c      	adds	r7, #12
 800832c:	46bd      	mov	sp, r7
 800832e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008332:	4770      	bx	lr
 8008334:	20000170 	.word	0x20000170

08008338 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008338:	b580      	push	{r7, lr}
 800833a:	b082      	sub	sp, #8
 800833c:	af00      	add	r7, sp, #0
 800833e:	4603      	mov	r3, r0
 8008340:	6039      	str	r1, [r7, #0]
 8008342:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008344:	79fb      	ldrb	r3, [r7, #7]
 8008346:	2b00      	cmp	r3, #0
 8008348:	d105      	bne.n	8008356 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800834a:	683a      	ldr	r2, [r7, #0]
 800834c:	4907      	ldr	r1, [pc, #28]	; (800836c <USBD_FS_ProductStrDescriptor+0x34>)
 800834e:	4808      	ldr	r0, [pc, #32]	; (8008370 <USBD_FS_ProductStrDescriptor+0x38>)
 8008350:	f7ff fe1d 	bl	8007f8e <USBD_GetString>
 8008354:	e004      	b.n	8008360 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008356:	683a      	ldr	r2, [r7, #0]
 8008358:	4904      	ldr	r1, [pc, #16]	; (800836c <USBD_FS_ProductStrDescriptor+0x34>)
 800835a:	4805      	ldr	r0, [pc, #20]	; (8008370 <USBD_FS_ProductStrDescriptor+0x38>)
 800835c:	f7ff fe17 	bl	8007f8e <USBD_GetString>
  }
  return USBD_StrDesc;
 8008360:	4b02      	ldr	r3, [pc, #8]	; (800836c <USBD_FS_ProductStrDescriptor+0x34>)
}
 8008362:	4618      	mov	r0, r3
 8008364:	3708      	adds	r7, #8
 8008366:	46bd      	mov	sp, r7
 8008368:	bd80      	pop	{r7, pc}
 800836a:	bf00      	nop
 800836c:	200017e8 	.word	0x200017e8
 8008370:	08008c94 	.word	0x08008c94

08008374 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008374:	b580      	push	{r7, lr}
 8008376:	b082      	sub	sp, #8
 8008378:	af00      	add	r7, sp, #0
 800837a:	4603      	mov	r3, r0
 800837c:	6039      	str	r1, [r7, #0]
 800837e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8008380:	683a      	ldr	r2, [r7, #0]
 8008382:	4904      	ldr	r1, [pc, #16]	; (8008394 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8008384:	4804      	ldr	r0, [pc, #16]	; (8008398 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8008386:	f7ff fe02 	bl	8007f8e <USBD_GetString>
  return USBD_StrDesc;
 800838a:	4b02      	ldr	r3, [pc, #8]	; (8008394 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800838c:	4618      	mov	r0, r3
 800838e:	3708      	adds	r7, #8
 8008390:	46bd      	mov	sp, r7
 8008392:	bd80      	pop	{r7, pc}
 8008394:	200017e8 	.word	0x200017e8
 8008398:	08008cac 	.word	0x08008cac

0800839c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800839c:	b580      	push	{r7, lr}
 800839e:	b082      	sub	sp, #8
 80083a0:	af00      	add	r7, sp, #0
 80083a2:	4603      	mov	r3, r0
 80083a4:	6039      	str	r1, [r7, #0]
 80083a6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80083a8:	683b      	ldr	r3, [r7, #0]
 80083aa:	221a      	movs	r2, #26
 80083ac:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80083ae:	f000 f855 	bl	800845c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80083b2:	4b02      	ldr	r3, [pc, #8]	; (80083bc <USBD_FS_SerialStrDescriptor+0x20>)
}
 80083b4:	4618      	mov	r0, r3
 80083b6:	3708      	adds	r7, #8
 80083b8:	46bd      	mov	sp, r7
 80083ba:	bd80      	pop	{r7, pc}
 80083bc:	20000174 	.word	0x20000174

080083c0 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80083c0:	b580      	push	{r7, lr}
 80083c2:	b082      	sub	sp, #8
 80083c4:	af00      	add	r7, sp, #0
 80083c6:	4603      	mov	r3, r0
 80083c8:	6039      	str	r1, [r7, #0]
 80083ca:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80083cc:	79fb      	ldrb	r3, [r7, #7]
 80083ce:	2b00      	cmp	r3, #0
 80083d0:	d105      	bne.n	80083de <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80083d2:	683a      	ldr	r2, [r7, #0]
 80083d4:	4907      	ldr	r1, [pc, #28]	; (80083f4 <USBD_FS_ConfigStrDescriptor+0x34>)
 80083d6:	4808      	ldr	r0, [pc, #32]	; (80083f8 <USBD_FS_ConfigStrDescriptor+0x38>)
 80083d8:	f7ff fdd9 	bl	8007f8e <USBD_GetString>
 80083dc:	e004      	b.n	80083e8 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80083de:	683a      	ldr	r2, [r7, #0]
 80083e0:	4904      	ldr	r1, [pc, #16]	; (80083f4 <USBD_FS_ConfigStrDescriptor+0x34>)
 80083e2:	4805      	ldr	r0, [pc, #20]	; (80083f8 <USBD_FS_ConfigStrDescriptor+0x38>)
 80083e4:	f7ff fdd3 	bl	8007f8e <USBD_GetString>
  }
  return USBD_StrDesc;
 80083e8:	4b02      	ldr	r3, [pc, #8]	; (80083f4 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80083ea:	4618      	mov	r0, r3
 80083ec:	3708      	adds	r7, #8
 80083ee:	46bd      	mov	sp, r7
 80083f0:	bd80      	pop	{r7, pc}
 80083f2:	bf00      	nop
 80083f4:	200017e8 	.word	0x200017e8
 80083f8:	08008cc0 	.word	0x08008cc0

080083fc <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80083fc:	b580      	push	{r7, lr}
 80083fe:	b082      	sub	sp, #8
 8008400:	af00      	add	r7, sp, #0
 8008402:	4603      	mov	r3, r0
 8008404:	6039      	str	r1, [r7, #0]
 8008406:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008408:	79fb      	ldrb	r3, [r7, #7]
 800840a:	2b00      	cmp	r3, #0
 800840c:	d105      	bne.n	800841a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800840e:	683a      	ldr	r2, [r7, #0]
 8008410:	4907      	ldr	r1, [pc, #28]	; (8008430 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008412:	4808      	ldr	r0, [pc, #32]	; (8008434 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008414:	f7ff fdbb 	bl	8007f8e <USBD_GetString>
 8008418:	e004      	b.n	8008424 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800841a:	683a      	ldr	r2, [r7, #0]
 800841c:	4904      	ldr	r1, [pc, #16]	; (8008430 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800841e:	4805      	ldr	r0, [pc, #20]	; (8008434 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008420:	f7ff fdb5 	bl	8007f8e <USBD_GetString>
  }
  return USBD_StrDesc;
 8008424:	4b02      	ldr	r3, [pc, #8]	; (8008430 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8008426:	4618      	mov	r0, r3
 8008428:	3708      	adds	r7, #8
 800842a:	46bd      	mov	sp, r7
 800842c:	bd80      	pop	{r7, pc}
 800842e:	bf00      	nop
 8008430:	200017e8 	.word	0x200017e8
 8008434:	08008ccc 	.word	0x08008ccc

08008438 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008438:	b480      	push	{r7}
 800843a:	b083      	sub	sp, #12
 800843c:	af00      	add	r7, sp, #0
 800843e:	4603      	mov	r3, r0
 8008440:	6039      	str	r1, [r7, #0]
 8008442:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 8008444:	683b      	ldr	r3, [r7, #0]
 8008446:	220c      	movs	r2, #12
 8008448:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 800844a:	4b03      	ldr	r3, [pc, #12]	; (8008458 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 800844c:	4618      	mov	r0, r3
 800844e:	370c      	adds	r7, #12
 8008450:	46bd      	mov	sp, r7
 8008452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008456:	4770      	bx	lr
 8008458:	20000164 	.word	0x20000164

0800845c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800845c:	b580      	push	{r7, lr}
 800845e:	b084      	sub	sp, #16
 8008460:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8008462:	4b0f      	ldr	r3, [pc, #60]	; (80084a0 <Get_SerialNum+0x44>)
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8008468:	4b0e      	ldr	r3, [pc, #56]	; (80084a4 <Get_SerialNum+0x48>)
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800846e:	4b0e      	ldr	r3, [pc, #56]	; (80084a8 <Get_SerialNum+0x4c>)
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8008474:	68fa      	ldr	r2, [r7, #12]
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	4413      	add	r3, r2
 800847a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800847c:	68fb      	ldr	r3, [r7, #12]
 800847e:	2b00      	cmp	r3, #0
 8008480:	d009      	beq.n	8008496 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8008482:	2208      	movs	r2, #8
 8008484:	4909      	ldr	r1, [pc, #36]	; (80084ac <Get_SerialNum+0x50>)
 8008486:	68f8      	ldr	r0, [r7, #12]
 8008488:	f000 f814 	bl	80084b4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800848c:	2204      	movs	r2, #4
 800848e:	4908      	ldr	r1, [pc, #32]	; (80084b0 <Get_SerialNum+0x54>)
 8008490:	68b8      	ldr	r0, [r7, #8]
 8008492:	f000 f80f 	bl	80084b4 <IntToUnicode>
  }
}
 8008496:	bf00      	nop
 8008498:	3710      	adds	r7, #16
 800849a:	46bd      	mov	sp, r7
 800849c:	bd80      	pop	{r7, pc}
 800849e:	bf00      	nop
 80084a0:	1fff7a10 	.word	0x1fff7a10
 80084a4:	1fff7a14 	.word	0x1fff7a14
 80084a8:	1fff7a18 	.word	0x1fff7a18
 80084ac:	20000176 	.word	0x20000176
 80084b0:	20000186 	.word	0x20000186

080084b4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80084b4:	b480      	push	{r7}
 80084b6:	b087      	sub	sp, #28
 80084b8:	af00      	add	r7, sp, #0
 80084ba:	60f8      	str	r0, [r7, #12]
 80084bc:	60b9      	str	r1, [r7, #8]
 80084be:	4613      	mov	r3, r2
 80084c0:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80084c2:	2300      	movs	r3, #0
 80084c4:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80084c6:	2300      	movs	r3, #0
 80084c8:	75fb      	strb	r3, [r7, #23]
 80084ca:	e027      	b.n	800851c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80084cc:	68fb      	ldr	r3, [r7, #12]
 80084ce:	0f1b      	lsrs	r3, r3, #28
 80084d0:	2b09      	cmp	r3, #9
 80084d2:	d80b      	bhi.n	80084ec <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80084d4:	68fb      	ldr	r3, [r7, #12]
 80084d6:	0f1b      	lsrs	r3, r3, #28
 80084d8:	b2da      	uxtb	r2, r3
 80084da:	7dfb      	ldrb	r3, [r7, #23]
 80084dc:	005b      	lsls	r3, r3, #1
 80084de:	4619      	mov	r1, r3
 80084e0:	68bb      	ldr	r3, [r7, #8]
 80084e2:	440b      	add	r3, r1
 80084e4:	3230      	adds	r2, #48	; 0x30
 80084e6:	b2d2      	uxtb	r2, r2
 80084e8:	701a      	strb	r2, [r3, #0]
 80084ea:	e00a      	b.n	8008502 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80084ec:	68fb      	ldr	r3, [r7, #12]
 80084ee:	0f1b      	lsrs	r3, r3, #28
 80084f0:	b2da      	uxtb	r2, r3
 80084f2:	7dfb      	ldrb	r3, [r7, #23]
 80084f4:	005b      	lsls	r3, r3, #1
 80084f6:	4619      	mov	r1, r3
 80084f8:	68bb      	ldr	r3, [r7, #8]
 80084fa:	440b      	add	r3, r1
 80084fc:	3237      	adds	r2, #55	; 0x37
 80084fe:	b2d2      	uxtb	r2, r2
 8008500:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8008502:	68fb      	ldr	r3, [r7, #12]
 8008504:	011b      	lsls	r3, r3, #4
 8008506:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8008508:	7dfb      	ldrb	r3, [r7, #23]
 800850a:	005b      	lsls	r3, r3, #1
 800850c:	3301      	adds	r3, #1
 800850e:	68ba      	ldr	r2, [r7, #8]
 8008510:	4413      	add	r3, r2
 8008512:	2200      	movs	r2, #0
 8008514:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8008516:	7dfb      	ldrb	r3, [r7, #23]
 8008518:	3301      	adds	r3, #1
 800851a:	75fb      	strb	r3, [r7, #23]
 800851c:	7dfa      	ldrb	r2, [r7, #23]
 800851e:	79fb      	ldrb	r3, [r7, #7]
 8008520:	429a      	cmp	r2, r3
 8008522:	d3d3      	bcc.n	80084cc <IntToUnicode+0x18>
  }
}
 8008524:	bf00      	nop
 8008526:	bf00      	nop
 8008528:	371c      	adds	r7, #28
 800852a:	46bd      	mov	sp, r7
 800852c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008530:	4770      	bx	lr
	...

08008534 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8008534:	b580      	push	{r7, lr}
 8008536:	b098      	sub	sp, #96	; 0x60
 8008538:	af00      	add	r7, sp, #0
 800853a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800853c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8008540:	2200      	movs	r2, #0
 8008542:	601a      	str	r2, [r3, #0]
 8008544:	605a      	str	r2, [r3, #4]
 8008546:	609a      	str	r2, [r3, #8]
 8008548:	60da      	str	r2, [r3, #12]
 800854a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800854c:	f107 0310 	add.w	r3, r7, #16
 8008550:	223c      	movs	r2, #60	; 0x3c
 8008552:	2100      	movs	r1, #0
 8008554:	4618      	mov	r0, r3
 8008556:	f000 fb89 	bl	8008c6c <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008562:	d148      	bne.n	80085f6 <HAL_PCD_MspInit+0xc2>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8008564:	2380      	movs	r3, #128	; 0x80
 8008566:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 8008568:	2300      	movs	r3, #0
 800856a:	647b      	str	r3, [r7, #68]	; 0x44
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800856c:	f107 0310 	add.w	r3, r7, #16
 8008570:	4618      	mov	r0, r3
 8008572:	f7fb f81d 	bl	80035b0 <HAL_RCCEx_PeriphCLKConfig>
 8008576:	4603      	mov	r3, r0
 8008578:	2b00      	cmp	r3, #0
 800857a:	d001      	beq.n	8008580 <HAL_PCD_MspInit+0x4c>
    {
      Error_Handler();
 800857c:	f7f8 fa56 	bl	8000a2c <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008580:	2300      	movs	r3, #0
 8008582:	60fb      	str	r3, [r7, #12]
 8008584:	4b1e      	ldr	r3, [pc, #120]	; (8008600 <HAL_PCD_MspInit+0xcc>)
 8008586:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008588:	4a1d      	ldr	r2, [pc, #116]	; (8008600 <HAL_PCD_MspInit+0xcc>)
 800858a:	f043 0301 	orr.w	r3, r3, #1
 800858e:	6313      	str	r3, [r2, #48]	; 0x30
 8008590:	4b1b      	ldr	r3, [pc, #108]	; (8008600 <HAL_PCD_MspInit+0xcc>)
 8008592:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008594:	f003 0301 	and.w	r3, r3, #1
 8008598:	60fb      	str	r3, [r7, #12]
 800859a:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800859c:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80085a0:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80085a2:	2302      	movs	r3, #2
 80085a4:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80085a6:	2300      	movs	r3, #0
 80085a8:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80085aa:	2303      	movs	r3, #3
 80085ac:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80085ae:	230a      	movs	r3, #10
 80085b0:	65fb      	str	r3, [r7, #92]	; 0x5c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80085b2:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80085b6:	4619      	mov	r1, r3
 80085b8:	4812      	ldr	r0, [pc, #72]	; (8008604 <HAL_PCD_MspInit+0xd0>)
 80085ba:	f7f8 ff2d 	bl	8001418 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80085be:	4b10      	ldr	r3, [pc, #64]	; (8008600 <HAL_PCD_MspInit+0xcc>)
 80085c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80085c2:	4a0f      	ldr	r2, [pc, #60]	; (8008600 <HAL_PCD_MspInit+0xcc>)
 80085c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80085c8:	6353      	str	r3, [r2, #52]	; 0x34
 80085ca:	2300      	movs	r3, #0
 80085cc:	60bb      	str	r3, [r7, #8]
 80085ce:	4b0c      	ldr	r3, [pc, #48]	; (8008600 <HAL_PCD_MspInit+0xcc>)
 80085d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80085d2:	4a0b      	ldr	r2, [pc, #44]	; (8008600 <HAL_PCD_MspInit+0xcc>)
 80085d4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80085d8:	6453      	str	r3, [r2, #68]	; 0x44
 80085da:	4b09      	ldr	r3, [pc, #36]	; (8008600 <HAL_PCD_MspInit+0xcc>)
 80085dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80085de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80085e2:	60bb      	str	r3, [r7, #8]
 80085e4:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80085e6:	2200      	movs	r2, #0
 80085e8:	2100      	movs	r1, #0
 80085ea:	2043      	movs	r0, #67	; 0x43
 80085ec:	f7f8 fe4b 	bl	8001286 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80085f0:	2043      	movs	r0, #67	; 0x43
 80085f2:	f7f8 fe64 	bl	80012be <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80085f6:	bf00      	nop
 80085f8:	3760      	adds	r7, #96	; 0x60
 80085fa:	46bd      	mov	sp, r7
 80085fc:	bd80      	pop	{r7, pc}
 80085fe:	bf00      	nop
 8008600:	40023800 	.word	0x40023800
 8008604:	40020000 	.word	0x40020000

08008608 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008608:	b580      	push	{r7, lr}
 800860a:	b082      	sub	sp, #8
 800860c:	af00      	add	r7, sp, #0
 800860e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800861c:	4619      	mov	r1, r3
 800861e:	4610      	mov	r0, r2
 8008620:	f7fe fca4 	bl	8006f6c <USBD_LL_SetupStage>
}
 8008624:	bf00      	nop
 8008626:	3708      	adds	r7, #8
 8008628:	46bd      	mov	sp, r7
 800862a:	bd80      	pop	{r7, pc}

0800862c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800862c:	b580      	push	{r7, lr}
 800862e:	b082      	sub	sp, #8
 8008630:	af00      	add	r7, sp, #0
 8008632:	6078      	str	r0, [r7, #4]
 8008634:	460b      	mov	r3, r1
 8008636:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800863e:	78fa      	ldrb	r2, [r7, #3]
 8008640:	6879      	ldr	r1, [r7, #4]
 8008642:	4613      	mov	r3, r2
 8008644:	00db      	lsls	r3, r3, #3
 8008646:	1a9b      	subs	r3, r3, r2
 8008648:	009b      	lsls	r3, r3, #2
 800864a:	440b      	add	r3, r1
 800864c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8008650:	681a      	ldr	r2, [r3, #0]
 8008652:	78fb      	ldrb	r3, [r7, #3]
 8008654:	4619      	mov	r1, r3
 8008656:	f7fe fcde 	bl	8007016 <USBD_LL_DataOutStage>
}
 800865a:	bf00      	nop
 800865c:	3708      	adds	r7, #8
 800865e:	46bd      	mov	sp, r7
 8008660:	bd80      	pop	{r7, pc}

08008662 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008662:	b580      	push	{r7, lr}
 8008664:	b082      	sub	sp, #8
 8008666:	af00      	add	r7, sp, #0
 8008668:	6078      	str	r0, [r7, #4]
 800866a:	460b      	mov	r3, r1
 800866c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8008674:	78fa      	ldrb	r2, [r7, #3]
 8008676:	6879      	ldr	r1, [r7, #4]
 8008678:	4613      	mov	r3, r2
 800867a:	00db      	lsls	r3, r3, #3
 800867c:	1a9b      	subs	r3, r3, r2
 800867e:	009b      	lsls	r3, r3, #2
 8008680:	440b      	add	r3, r1
 8008682:	3348      	adds	r3, #72	; 0x48
 8008684:	681a      	ldr	r2, [r3, #0]
 8008686:	78fb      	ldrb	r3, [r7, #3]
 8008688:	4619      	mov	r1, r3
 800868a:	f7fe fd27 	bl	80070dc <USBD_LL_DataInStage>
}
 800868e:	bf00      	nop
 8008690:	3708      	adds	r7, #8
 8008692:	46bd      	mov	sp, r7
 8008694:	bd80      	pop	{r7, pc}

08008696 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008696:	b580      	push	{r7, lr}
 8008698:	b082      	sub	sp, #8
 800869a:	af00      	add	r7, sp, #0
 800869c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80086a4:	4618      	mov	r0, r3
 80086a6:	f7fe fe3b 	bl	8007320 <USBD_LL_SOF>
}
 80086aa:	bf00      	nop
 80086ac:	3708      	adds	r7, #8
 80086ae:	46bd      	mov	sp, r7
 80086b0:	bd80      	pop	{r7, pc}

080086b2 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80086b2:	b580      	push	{r7, lr}
 80086b4:	b084      	sub	sp, #16
 80086b6:	af00      	add	r7, sp, #0
 80086b8:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80086ba:	2301      	movs	r3, #1
 80086bc:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	68db      	ldr	r3, [r3, #12]
 80086c2:	2b00      	cmp	r3, #0
 80086c4:	d102      	bne.n	80086cc <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 80086c6:	2300      	movs	r3, #0
 80086c8:	73fb      	strb	r3, [r7, #15]
 80086ca:	e008      	b.n	80086de <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	68db      	ldr	r3, [r3, #12]
 80086d0:	2b02      	cmp	r3, #2
 80086d2:	d102      	bne.n	80086da <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 80086d4:	2301      	movs	r3, #1
 80086d6:	73fb      	strb	r3, [r7, #15]
 80086d8:	e001      	b.n	80086de <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 80086da:	f7f8 f9a7 	bl	8000a2c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80086e4:	7bfa      	ldrb	r2, [r7, #15]
 80086e6:	4611      	mov	r1, r2
 80086e8:	4618      	mov	r0, r3
 80086ea:	f7fe fddb 	bl	80072a4 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80086f4:	4618      	mov	r0, r3
 80086f6:	f7fe fd87 	bl	8007208 <USBD_LL_Reset>
}
 80086fa:	bf00      	nop
 80086fc:	3710      	adds	r7, #16
 80086fe:	46bd      	mov	sp, r7
 8008700:	bd80      	pop	{r7, pc}
	...

08008704 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008704:	b580      	push	{r7, lr}
 8008706:	b082      	sub	sp, #8
 8008708:	af00      	add	r7, sp, #0
 800870a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008712:	4618      	mov	r0, r3
 8008714:	f7fe fdd6 	bl	80072c4 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	687a      	ldr	r2, [r7, #4]
 8008724:	6812      	ldr	r2, [r2, #0]
 8008726:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800872a:	f043 0301 	orr.w	r3, r3, #1
 800872e:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	6a1b      	ldr	r3, [r3, #32]
 8008734:	2b00      	cmp	r3, #0
 8008736:	d005      	beq.n	8008744 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008738:	4b04      	ldr	r3, [pc, #16]	; (800874c <HAL_PCD_SuspendCallback+0x48>)
 800873a:	691b      	ldr	r3, [r3, #16]
 800873c:	4a03      	ldr	r2, [pc, #12]	; (800874c <HAL_PCD_SuspendCallback+0x48>)
 800873e:	f043 0306 	orr.w	r3, r3, #6
 8008742:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8008744:	bf00      	nop
 8008746:	3708      	adds	r7, #8
 8008748:	46bd      	mov	sp, r7
 800874a:	bd80      	pop	{r7, pc}
 800874c:	e000ed00 	.word	0xe000ed00

08008750 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008750:	b580      	push	{r7, lr}
 8008752:	b082      	sub	sp, #8
 8008754:	af00      	add	r7, sp, #0
 8008756:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800875e:	4618      	mov	r0, r3
 8008760:	f7fe fdc6 	bl	80072f0 <USBD_LL_Resume>
}
 8008764:	bf00      	nop
 8008766:	3708      	adds	r7, #8
 8008768:	46bd      	mov	sp, r7
 800876a:	bd80      	pop	{r7, pc}

0800876c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800876c:	b580      	push	{r7, lr}
 800876e:	b082      	sub	sp, #8
 8008770:	af00      	add	r7, sp, #0
 8008772:	6078      	str	r0, [r7, #4]
 8008774:	460b      	mov	r3, r1
 8008776:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800877e:	78fa      	ldrb	r2, [r7, #3]
 8008780:	4611      	mov	r1, r2
 8008782:	4618      	mov	r0, r3
 8008784:	f7fe fe14 	bl	80073b0 <USBD_LL_IsoOUTIncomplete>
}
 8008788:	bf00      	nop
 800878a:	3708      	adds	r7, #8
 800878c:	46bd      	mov	sp, r7
 800878e:	bd80      	pop	{r7, pc}

08008790 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008790:	b580      	push	{r7, lr}
 8008792:	b082      	sub	sp, #8
 8008794:	af00      	add	r7, sp, #0
 8008796:	6078      	str	r0, [r7, #4]
 8008798:	460b      	mov	r3, r1
 800879a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80087a2:	78fa      	ldrb	r2, [r7, #3]
 80087a4:	4611      	mov	r1, r2
 80087a6:	4618      	mov	r0, r3
 80087a8:	f7fe fddc 	bl	8007364 <USBD_LL_IsoINIncomplete>
}
 80087ac:	bf00      	nop
 80087ae:	3708      	adds	r7, #8
 80087b0:	46bd      	mov	sp, r7
 80087b2:	bd80      	pop	{r7, pc}

080087b4 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80087b4:	b580      	push	{r7, lr}
 80087b6:	b082      	sub	sp, #8
 80087b8:	af00      	add	r7, sp, #0
 80087ba:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80087c2:	4618      	mov	r0, r3
 80087c4:	f7fe fe1a 	bl	80073fc <USBD_LL_DevConnected>
}
 80087c8:	bf00      	nop
 80087ca:	3708      	adds	r7, #8
 80087cc:	46bd      	mov	sp, r7
 80087ce:	bd80      	pop	{r7, pc}

080087d0 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80087d0:	b580      	push	{r7, lr}
 80087d2:	b082      	sub	sp, #8
 80087d4:	af00      	add	r7, sp, #0
 80087d6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80087de:	4618      	mov	r0, r3
 80087e0:	f7fe fe17 	bl	8007412 <USBD_LL_DevDisconnected>
}
 80087e4:	bf00      	nop
 80087e6:	3708      	adds	r7, #8
 80087e8:	46bd      	mov	sp, r7
 80087ea:	bd80      	pop	{r7, pc}

080087ec <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80087ec:	b580      	push	{r7, lr}
 80087ee:	b082      	sub	sp, #8
 80087f0:	af00      	add	r7, sp, #0
 80087f2:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	781b      	ldrb	r3, [r3, #0]
 80087f8:	2b00      	cmp	r3, #0
 80087fa:	d13c      	bne.n	8008876 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 80087fc:	4a20      	ldr	r2, [pc, #128]	; (8008880 <USBD_LL_Init+0x94>)
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	4a1e      	ldr	r2, [pc, #120]	; (8008880 <USBD_LL_Init+0x94>)
 8008808:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800880c:	4b1c      	ldr	r3, [pc, #112]	; (8008880 <USBD_LL_Init+0x94>)
 800880e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8008812:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8008814:	4b1a      	ldr	r3, [pc, #104]	; (8008880 <USBD_LL_Init+0x94>)
 8008816:	2206      	movs	r2, #6
 8008818:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800881a:	4b19      	ldr	r3, [pc, #100]	; (8008880 <USBD_LL_Init+0x94>)
 800881c:	2202      	movs	r2, #2
 800881e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8008820:	4b17      	ldr	r3, [pc, #92]	; (8008880 <USBD_LL_Init+0x94>)
 8008822:	2200      	movs	r2, #0
 8008824:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8008826:	4b16      	ldr	r3, [pc, #88]	; (8008880 <USBD_LL_Init+0x94>)
 8008828:	2202      	movs	r2, #2
 800882a:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800882c:	4b14      	ldr	r3, [pc, #80]	; (8008880 <USBD_LL_Init+0x94>)
 800882e:	2200      	movs	r2, #0
 8008830:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8008832:	4b13      	ldr	r3, [pc, #76]	; (8008880 <USBD_LL_Init+0x94>)
 8008834:	2200      	movs	r2, #0
 8008836:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8008838:	4b11      	ldr	r3, [pc, #68]	; (8008880 <USBD_LL_Init+0x94>)
 800883a:	2200      	movs	r2, #0
 800883c:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800883e:	4b10      	ldr	r3, [pc, #64]	; (8008880 <USBD_LL_Init+0x94>)
 8008840:	2200      	movs	r2, #0
 8008842:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8008844:	4b0e      	ldr	r3, [pc, #56]	; (8008880 <USBD_LL_Init+0x94>)
 8008846:	2200      	movs	r2, #0
 8008848:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800884a:	480d      	ldr	r0, [pc, #52]	; (8008880 <USBD_LL_Init+0x94>)
 800884c:	f7f9 fb11 	bl	8001e72 <HAL_PCD_Init>
 8008850:	4603      	mov	r3, r0
 8008852:	2b00      	cmp	r3, #0
 8008854:	d001      	beq.n	800885a <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8008856:	f7f8 f8e9 	bl	8000a2c <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800885a:	2180      	movs	r1, #128	; 0x80
 800885c:	4808      	ldr	r0, [pc, #32]	; (8008880 <USBD_LL_Init+0x94>)
 800885e:	f7fa fca2 	bl	80031a6 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8008862:	2240      	movs	r2, #64	; 0x40
 8008864:	2100      	movs	r1, #0
 8008866:	4806      	ldr	r0, [pc, #24]	; (8008880 <USBD_LL_Init+0x94>)
 8008868:	f7fa fc56 	bl	8003118 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800886c:	2280      	movs	r2, #128	; 0x80
 800886e:	2101      	movs	r1, #1
 8008870:	4803      	ldr	r0, [pc, #12]	; (8008880 <USBD_LL_Init+0x94>)
 8008872:	f7fa fc51 	bl	8003118 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8008876:	2300      	movs	r3, #0
}
 8008878:	4618      	mov	r0, r3
 800887a:	3708      	adds	r7, #8
 800887c:	46bd      	mov	sp, r7
 800887e:	bd80      	pop	{r7, pc}
 8008880:	200019e8 	.word	0x200019e8

08008884 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8008884:	b580      	push	{r7, lr}
 8008886:	b084      	sub	sp, #16
 8008888:	af00      	add	r7, sp, #0
 800888a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800888c:	2300      	movs	r3, #0
 800888e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008890:	2300      	movs	r3, #0
 8008892:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800889a:	4618      	mov	r0, r3
 800889c:	f7f9 fc0d 	bl	80020ba <HAL_PCD_Start>
 80088a0:	4603      	mov	r3, r0
 80088a2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80088a4:	7bfb      	ldrb	r3, [r7, #15]
 80088a6:	4618      	mov	r0, r3
 80088a8:	f000 f990 	bl	8008bcc <USBD_Get_USB_Status>
 80088ac:	4603      	mov	r3, r0
 80088ae:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80088b0:	7bbb      	ldrb	r3, [r7, #14]
}
 80088b2:	4618      	mov	r0, r3
 80088b4:	3710      	adds	r7, #16
 80088b6:	46bd      	mov	sp, r7
 80088b8:	bd80      	pop	{r7, pc}

080088ba <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80088ba:	b580      	push	{r7, lr}
 80088bc:	b084      	sub	sp, #16
 80088be:	af00      	add	r7, sp, #0
 80088c0:	6078      	str	r0, [r7, #4]
 80088c2:	4608      	mov	r0, r1
 80088c4:	4611      	mov	r1, r2
 80088c6:	461a      	mov	r2, r3
 80088c8:	4603      	mov	r3, r0
 80088ca:	70fb      	strb	r3, [r7, #3]
 80088cc:	460b      	mov	r3, r1
 80088ce:	70bb      	strb	r3, [r7, #2]
 80088d0:	4613      	mov	r3, r2
 80088d2:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80088d4:	2300      	movs	r3, #0
 80088d6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80088d8:	2300      	movs	r3, #0
 80088da:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80088e2:	78bb      	ldrb	r3, [r7, #2]
 80088e4:	883a      	ldrh	r2, [r7, #0]
 80088e6:	78f9      	ldrb	r1, [r7, #3]
 80088e8:	f7fa f81e 	bl	8002928 <HAL_PCD_EP_Open>
 80088ec:	4603      	mov	r3, r0
 80088ee:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80088f0:	7bfb      	ldrb	r3, [r7, #15]
 80088f2:	4618      	mov	r0, r3
 80088f4:	f000 f96a 	bl	8008bcc <USBD_Get_USB_Status>
 80088f8:	4603      	mov	r3, r0
 80088fa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80088fc:	7bbb      	ldrb	r3, [r7, #14]
}
 80088fe:	4618      	mov	r0, r3
 8008900:	3710      	adds	r7, #16
 8008902:	46bd      	mov	sp, r7
 8008904:	bd80      	pop	{r7, pc}

08008906 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008906:	b580      	push	{r7, lr}
 8008908:	b084      	sub	sp, #16
 800890a:	af00      	add	r7, sp, #0
 800890c:	6078      	str	r0, [r7, #4]
 800890e:	460b      	mov	r3, r1
 8008910:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008912:	2300      	movs	r3, #0
 8008914:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008916:	2300      	movs	r3, #0
 8008918:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008920:	78fa      	ldrb	r2, [r7, #3]
 8008922:	4611      	mov	r1, r2
 8008924:	4618      	mov	r0, r3
 8008926:	f7fa f867 	bl	80029f8 <HAL_PCD_EP_Close>
 800892a:	4603      	mov	r3, r0
 800892c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800892e:	7bfb      	ldrb	r3, [r7, #15]
 8008930:	4618      	mov	r0, r3
 8008932:	f000 f94b 	bl	8008bcc <USBD_Get_USB_Status>
 8008936:	4603      	mov	r3, r0
 8008938:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800893a:	7bbb      	ldrb	r3, [r7, #14]
}
 800893c:	4618      	mov	r0, r3
 800893e:	3710      	adds	r7, #16
 8008940:	46bd      	mov	sp, r7
 8008942:	bd80      	pop	{r7, pc}

08008944 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008944:	b580      	push	{r7, lr}
 8008946:	b084      	sub	sp, #16
 8008948:	af00      	add	r7, sp, #0
 800894a:	6078      	str	r0, [r7, #4]
 800894c:	460b      	mov	r3, r1
 800894e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008950:	2300      	movs	r3, #0
 8008952:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008954:	2300      	movs	r3, #0
 8008956:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800895e:	78fa      	ldrb	r2, [r7, #3]
 8008960:	4611      	mov	r1, r2
 8008962:	4618      	mov	r0, r3
 8008964:	f7fa f93f 	bl	8002be6 <HAL_PCD_EP_SetStall>
 8008968:	4603      	mov	r3, r0
 800896a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800896c:	7bfb      	ldrb	r3, [r7, #15]
 800896e:	4618      	mov	r0, r3
 8008970:	f000 f92c 	bl	8008bcc <USBD_Get_USB_Status>
 8008974:	4603      	mov	r3, r0
 8008976:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008978:	7bbb      	ldrb	r3, [r7, #14]
}
 800897a:	4618      	mov	r0, r3
 800897c:	3710      	adds	r7, #16
 800897e:	46bd      	mov	sp, r7
 8008980:	bd80      	pop	{r7, pc}

08008982 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008982:	b580      	push	{r7, lr}
 8008984:	b084      	sub	sp, #16
 8008986:	af00      	add	r7, sp, #0
 8008988:	6078      	str	r0, [r7, #4]
 800898a:	460b      	mov	r3, r1
 800898c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800898e:	2300      	movs	r3, #0
 8008990:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008992:	2300      	movs	r3, #0
 8008994:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800899c:	78fa      	ldrb	r2, [r7, #3]
 800899e:	4611      	mov	r1, r2
 80089a0:	4618      	mov	r0, r3
 80089a2:	f7fa f984 	bl	8002cae <HAL_PCD_EP_ClrStall>
 80089a6:	4603      	mov	r3, r0
 80089a8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80089aa:	7bfb      	ldrb	r3, [r7, #15]
 80089ac:	4618      	mov	r0, r3
 80089ae:	f000 f90d 	bl	8008bcc <USBD_Get_USB_Status>
 80089b2:	4603      	mov	r3, r0
 80089b4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80089b6:	7bbb      	ldrb	r3, [r7, #14]
}
 80089b8:	4618      	mov	r0, r3
 80089ba:	3710      	adds	r7, #16
 80089bc:	46bd      	mov	sp, r7
 80089be:	bd80      	pop	{r7, pc}

080089c0 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80089c0:	b480      	push	{r7}
 80089c2:	b085      	sub	sp, #20
 80089c4:	af00      	add	r7, sp, #0
 80089c6:	6078      	str	r0, [r7, #4]
 80089c8:	460b      	mov	r3, r1
 80089ca:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80089d2:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80089d4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80089d8:	2b00      	cmp	r3, #0
 80089da:	da0b      	bge.n	80089f4 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80089dc:	78fb      	ldrb	r3, [r7, #3]
 80089de:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80089e2:	68f9      	ldr	r1, [r7, #12]
 80089e4:	4613      	mov	r3, r2
 80089e6:	00db      	lsls	r3, r3, #3
 80089e8:	1a9b      	subs	r3, r3, r2
 80089ea:	009b      	lsls	r3, r3, #2
 80089ec:	440b      	add	r3, r1
 80089ee:	333e      	adds	r3, #62	; 0x3e
 80089f0:	781b      	ldrb	r3, [r3, #0]
 80089f2:	e00b      	b.n	8008a0c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80089f4:	78fb      	ldrb	r3, [r7, #3]
 80089f6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80089fa:	68f9      	ldr	r1, [r7, #12]
 80089fc:	4613      	mov	r3, r2
 80089fe:	00db      	lsls	r3, r3, #3
 8008a00:	1a9b      	subs	r3, r3, r2
 8008a02:	009b      	lsls	r3, r3, #2
 8008a04:	440b      	add	r3, r1
 8008a06:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8008a0a:	781b      	ldrb	r3, [r3, #0]
  }
}
 8008a0c:	4618      	mov	r0, r3
 8008a0e:	3714      	adds	r7, #20
 8008a10:	46bd      	mov	sp, r7
 8008a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a16:	4770      	bx	lr

08008a18 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8008a18:	b580      	push	{r7, lr}
 8008a1a:	b084      	sub	sp, #16
 8008a1c:	af00      	add	r7, sp, #0
 8008a1e:	6078      	str	r0, [r7, #4]
 8008a20:	460b      	mov	r3, r1
 8008a22:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008a24:	2300      	movs	r3, #0
 8008a26:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008a28:	2300      	movs	r3, #0
 8008a2a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008a32:	78fa      	ldrb	r2, [r7, #3]
 8008a34:	4611      	mov	r1, r2
 8008a36:	4618      	mov	r0, r3
 8008a38:	f7f9 ff51 	bl	80028de <HAL_PCD_SetAddress>
 8008a3c:	4603      	mov	r3, r0
 8008a3e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008a40:	7bfb      	ldrb	r3, [r7, #15]
 8008a42:	4618      	mov	r0, r3
 8008a44:	f000 f8c2 	bl	8008bcc <USBD_Get_USB_Status>
 8008a48:	4603      	mov	r3, r0
 8008a4a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008a4c:	7bbb      	ldrb	r3, [r7, #14]
}
 8008a4e:	4618      	mov	r0, r3
 8008a50:	3710      	adds	r7, #16
 8008a52:	46bd      	mov	sp, r7
 8008a54:	bd80      	pop	{r7, pc}

08008a56 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008a56:	b580      	push	{r7, lr}
 8008a58:	b086      	sub	sp, #24
 8008a5a:	af00      	add	r7, sp, #0
 8008a5c:	60f8      	str	r0, [r7, #12]
 8008a5e:	607a      	str	r2, [r7, #4]
 8008a60:	603b      	str	r3, [r7, #0]
 8008a62:	460b      	mov	r3, r1
 8008a64:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008a66:	2300      	movs	r3, #0
 8008a68:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008a6a:	2300      	movs	r3, #0
 8008a6c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8008a6e:	68fb      	ldr	r3, [r7, #12]
 8008a70:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8008a74:	7af9      	ldrb	r1, [r7, #11]
 8008a76:	683b      	ldr	r3, [r7, #0]
 8008a78:	687a      	ldr	r2, [r7, #4]
 8008a7a:	f7fa f86a 	bl	8002b52 <HAL_PCD_EP_Transmit>
 8008a7e:	4603      	mov	r3, r0
 8008a80:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008a82:	7dfb      	ldrb	r3, [r7, #23]
 8008a84:	4618      	mov	r0, r3
 8008a86:	f000 f8a1 	bl	8008bcc <USBD_Get_USB_Status>
 8008a8a:	4603      	mov	r3, r0
 8008a8c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008a8e:	7dbb      	ldrb	r3, [r7, #22]
}
 8008a90:	4618      	mov	r0, r3
 8008a92:	3718      	adds	r7, #24
 8008a94:	46bd      	mov	sp, r7
 8008a96:	bd80      	pop	{r7, pc}

08008a98 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008a98:	b580      	push	{r7, lr}
 8008a9a:	b086      	sub	sp, #24
 8008a9c:	af00      	add	r7, sp, #0
 8008a9e:	60f8      	str	r0, [r7, #12]
 8008aa0:	607a      	str	r2, [r7, #4]
 8008aa2:	603b      	str	r3, [r7, #0]
 8008aa4:	460b      	mov	r3, r1
 8008aa6:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008aa8:	2300      	movs	r3, #0
 8008aaa:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008aac:	2300      	movs	r3, #0
 8008aae:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8008ab0:	68fb      	ldr	r3, [r7, #12]
 8008ab2:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8008ab6:	7af9      	ldrb	r1, [r7, #11]
 8008ab8:	683b      	ldr	r3, [r7, #0]
 8008aba:	687a      	ldr	r2, [r7, #4]
 8008abc:	f7f9 ffe6 	bl	8002a8c <HAL_PCD_EP_Receive>
 8008ac0:	4603      	mov	r3, r0
 8008ac2:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008ac4:	7dfb      	ldrb	r3, [r7, #23]
 8008ac6:	4618      	mov	r0, r3
 8008ac8:	f000 f880 	bl	8008bcc <USBD_Get_USB_Status>
 8008acc:	4603      	mov	r3, r0
 8008ace:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008ad0:	7dbb      	ldrb	r3, [r7, #22]
}
 8008ad2:	4618      	mov	r0, r3
 8008ad4:	3718      	adds	r7, #24
 8008ad6:	46bd      	mov	sp, r7
 8008ad8:	bd80      	pop	{r7, pc}

08008ada <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008ada:	b580      	push	{r7, lr}
 8008adc:	b082      	sub	sp, #8
 8008ade:	af00      	add	r7, sp, #0
 8008ae0:	6078      	str	r0, [r7, #4]
 8008ae2:	460b      	mov	r3, r1
 8008ae4:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008aec:	78fa      	ldrb	r2, [r7, #3]
 8008aee:	4611      	mov	r1, r2
 8008af0:	4618      	mov	r0, r3
 8008af2:	f7fa f816 	bl	8002b22 <HAL_PCD_EP_GetRxCount>
 8008af6:	4603      	mov	r3, r0
}
 8008af8:	4618      	mov	r0, r3
 8008afa:	3708      	adds	r7, #8
 8008afc:	46bd      	mov	sp, r7
 8008afe:	bd80      	pop	{r7, pc}

08008b00 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8008b00:	b580      	push	{r7, lr}
 8008b02:	b082      	sub	sp, #8
 8008b04:	af00      	add	r7, sp, #0
 8008b06:	6078      	str	r0, [r7, #4]
 8008b08:	460b      	mov	r3, r1
 8008b0a:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 8008b0c:	78fb      	ldrb	r3, [r7, #3]
 8008b0e:	2b00      	cmp	r3, #0
 8008b10:	d002      	beq.n	8008b18 <HAL_PCDEx_LPM_Callback+0x18>
 8008b12:	2b01      	cmp	r3, #1
 8008b14:	d01f      	beq.n	8008b56 <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 8008b16:	e03b      	b.n	8008b90 <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	6a1b      	ldr	r3, [r3, #32]
 8008b1c:	2b00      	cmp	r3, #0
 8008b1e:	d007      	beq.n	8008b30 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClock_Config();
 8008b20:	f7f7 fcfe 	bl	8000520 <SystemClock_Config>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008b24:	4b1c      	ldr	r3, [pc, #112]	; (8008b98 <HAL_PCDEx_LPM_Callback+0x98>)
 8008b26:	691b      	ldr	r3, [r3, #16]
 8008b28:	4a1b      	ldr	r2, [pc, #108]	; (8008b98 <HAL_PCDEx_LPM_Callback+0x98>)
 8008b2a:	f023 0306 	bic.w	r3, r3, #6
 8008b2e:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	681b      	ldr	r3, [r3, #0]
 8008b34:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	687a      	ldr	r2, [r7, #4]
 8008b3c:	6812      	ldr	r2, [r2, #0]
 8008b3e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008b42:	f023 0301 	bic.w	r3, r3, #1
 8008b46:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008b4e:	4618      	mov	r0, r3
 8008b50:	f7fe fbce 	bl	80072f0 <USBD_LL_Resume>
    break;
 8008b54:	e01c      	b.n	8008b90 <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	681b      	ldr	r3, [r3, #0]
 8008b5a:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008b5e:	681b      	ldr	r3, [r3, #0]
 8008b60:	687a      	ldr	r2, [r7, #4]
 8008b62:	6812      	ldr	r2, [r2, #0]
 8008b64:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008b68:	f043 0301 	orr.w	r3, r3, #1
 8008b6c:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008b74:	4618      	mov	r0, r3
 8008b76:	f7fe fba5 	bl	80072c4 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	6a1b      	ldr	r3, [r3, #32]
 8008b7e:	2b00      	cmp	r3, #0
 8008b80:	d005      	beq.n	8008b8e <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008b82:	4b05      	ldr	r3, [pc, #20]	; (8008b98 <HAL_PCDEx_LPM_Callback+0x98>)
 8008b84:	691b      	ldr	r3, [r3, #16]
 8008b86:	4a04      	ldr	r2, [pc, #16]	; (8008b98 <HAL_PCDEx_LPM_Callback+0x98>)
 8008b88:	f043 0306 	orr.w	r3, r3, #6
 8008b8c:	6113      	str	r3, [r2, #16]
    break;
 8008b8e:	bf00      	nop
}
 8008b90:	bf00      	nop
 8008b92:	3708      	adds	r7, #8
 8008b94:	46bd      	mov	sp, r7
 8008b96:	bd80      	pop	{r7, pc}
 8008b98:	e000ed00 	.word	0xe000ed00

08008b9c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8008b9c:	b480      	push	{r7}
 8008b9e:	b083      	sub	sp, #12
 8008ba0:	af00      	add	r7, sp, #0
 8008ba2:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8008ba4:	4b03      	ldr	r3, [pc, #12]	; (8008bb4 <USBD_static_malloc+0x18>)
}
 8008ba6:	4618      	mov	r0, r3
 8008ba8:	370c      	adds	r7, #12
 8008baa:	46bd      	mov	sp, r7
 8008bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bb0:	4770      	bx	lr
 8008bb2:	bf00      	nop
 8008bb4:	200001b4 	.word	0x200001b4

08008bb8 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8008bb8:	b480      	push	{r7}
 8008bba:	b083      	sub	sp, #12
 8008bbc:	af00      	add	r7, sp, #0
 8008bbe:	6078      	str	r0, [r7, #4]

}
 8008bc0:	bf00      	nop
 8008bc2:	370c      	adds	r7, #12
 8008bc4:	46bd      	mov	sp, r7
 8008bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bca:	4770      	bx	lr

08008bcc <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008bcc:	b480      	push	{r7}
 8008bce:	b085      	sub	sp, #20
 8008bd0:	af00      	add	r7, sp, #0
 8008bd2:	4603      	mov	r3, r0
 8008bd4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008bd6:	2300      	movs	r3, #0
 8008bd8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008bda:	79fb      	ldrb	r3, [r7, #7]
 8008bdc:	2b03      	cmp	r3, #3
 8008bde:	d817      	bhi.n	8008c10 <USBD_Get_USB_Status+0x44>
 8008be0:	a201      	add	r2, pc, #4	; (adr r2, 8008be8 <USBD_Get_USB_Status+0x1c>)
 8008be2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008be6:	bf00      	nop
 8008be8:	08008bf9 	.word	0x08008bf9
 8008bec:	08008bff 	.word	0x08008bff
 8008bf0:	08008c05 	.word	0x08008c05
 8008bf4:	08008c0b 	.word	0x08008c0b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8008bf8:	2300      	movs	r3, #0
 8008bfa:	73fb      	strb	r3, [r7, #15]
    break;
 8008bfc:	e00b      	b.n	8008c16 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008bfe:	2303      	movs	r3, #3
 8008c00:	73fb      	strb	r3, [r7, #15]
    break;
 8008c02:	e008      	b.n	8008c16 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008c04:	2301      	movs	r3, #1
 8008c06:	73fb      	strb	r3, [r7, #15]
    break;
 8008c08:	e005      	b.n	8008c16 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008c0a:	2303      	movs	r3, #3
 8008c0c:	73fb      	strb	r3, [r7, #15]
    break;
 8008c0e:	e002      	b.n	8008c16 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8008c10:	2303      	movs	r3, #3
 8008c12:	73fb      	strb	r3, [r7, #15]
    break;
 8008c14:	bf00      	nop
  }
  return usb_status;
 8008c16:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c18:	4618      	mov	r0, r3
 8008c1a:	3714      	adds	r7, #20
 8008c1c:	46bd      	mov	sp, r7
 8008c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c22:	4770      	bx	lr

08008c24 <__libc_init_array>:
 8008c24:	b570      	push	{r4, r5, r6, lr}
 8008c26:	4d0d      	ldr	r5, [pc, #52]	; (8008c5c <__libc_init_array+0x38>)
 8008c28:	4c0d      	ldr	r4, [pc, #52]	; (8008c60 <__libc_init_array+0x3c>)
 8008c2a:	1b64      	subs	r4, r4, r5
 8008c2c:	10a4      	asrs	r4, r4, #2
 8008c2e:	2600      	movs	r6, #0
 8008c30:	42a6      	cmp	r6, r4
 8008c32:	d109      	bne.n	8008c48 <__libc_init_array+0x24>
 8008c34:	4d0b      	ldr	r5, [pc, #44]	; (8008c64 <__libc_init_array+0x40>)
 8008c36:	4c0c      	ldr	r4, [pc, #48]	; (8008c68 <__libc_init_array+0x44>)
 8008c38:	f000 f820 	bl	8008c7c <_init>
 8008c3c:	1b64      	subs	r4, r4, r5
 8008c3e:	10a4      	asrs	r4, r4, #2
 8008c40:	2600      	movs	r6, #0
 8008c42:	42a6      	cmp	r6, r4
 8008c44:	d105      	bne.n	8008c52 <__libc_init_array+0x2e>
 8008c46:	bd70      	pop	{r4, r5, r6, pc}
 8008c48:	f855 3b04 	ldr.w	r3, [r5], #4
 8008c4c:	4798      	blx	r3
 8008c4e:	3601      	adds	r6, #1
 8008c50:	e7ee      	b.n	8008c30 <__libc_init_array+0xc>
 8008c52:	f855 3b04 	ldr.w	r3, [r5], #4
 8008c56:	4798      	blx	r3
 8008c58:	3601      	adds	r6, #1
 8008c5a:	e7f2      	b.n	8008c42 <__libc_init_array+0x1e>
 8008c5c:	08008cfc 	.word	0x08008cfc
 8008c60:	08008cfc 	.word	0x08008cfc
 8008c64:	08008cfc 	.word	0x08008cfc
 8008c68:	08008d00 	.word	0x08008d00

08008c6c <memset>:
 8008c6c:	4402      	add	r2, r0
 8008c6e:	4603      	mov	r3, r0
 8008c70:	4293      	cmp	r3, r2
 8008c72:	d100      	bne.n	8008c76 <memset+0xa>
 8008c74:	4770      	bx	lr
 8008c76:	f803 1b01 	strb.w	r1, [r3], #1
 8008c7a:	e7f9      	b.n	8008c70 <memset+0x4>

08008c7c <_init>:
 8008c7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c7e:	bf00      	nop
 8008c80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008c82:	bc08      	pop	{r3}
 8008c84:	469e      	mov	lr, r3
 8008c86:	4770      	bx	lr

08008c88 <_fini>:
 8008c88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c8a:	bf00      	nop
 8008c8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008c8e:	bc08      	pop	{r3}
 8008c90:	469e      	mov	lr, r3
 8008c92:	4770      	bx	lr
