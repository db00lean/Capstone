
UniversalConverter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001b4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008068  080001b4  080001b4  000101b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000068  0800821c  0800821c  0001821c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008284  08008284  00020190  2**0
                  CONTENTS
  4 .ARM          00000008  08008284  08008284  00018284  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800828c  0800828c  00020190  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800828c  0800828c  0001828c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008290  08008290  00018290  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000190  20000000  08008294  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020190  2**0
                  CONTENTS
 10 .bss          00001c5c  20000190  20000190  00020190  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20001dec  20001dec  00020190  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020190  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001b373  00000000  00000000  000201c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000038de  00000000  00000000  0003b533  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000010c0  00000000  00000000  0003ee18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000f68  00000000  00000000  0003fed8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002cd38  00000000  00000000  00040e40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001620e  00000000  00000000  0006db78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000fab94  00000000  00000000  00083d86  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0017e91a  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000044e8  00000000  00000000  0017e970  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b4 <__do_global_dtors_aux>:
 80001b4:	b510      	push	{r4, lr}
 80001b6:	4c05      	ldr	r4, [pc, #20]	; (80001cc <__do_global_dtors_aux+0x18>)
 80001b8:	7823      	ldrb	r3, [r4, #0]
 80001ba:	b933      	cbnz	r3, 80001ca <__do_global_dtors_aux+0x16>
 80001bc:	4b04      	ldr	r3, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x1c>)
 80001be:	b113      	cbz	r3, 80001c6 <__do_global_dtors_aux+0x12>
 80001c0:	4804      	ldr	r0, [pc, #16]	; (80001d4 <__do_global_dtors_aux+0x20>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	2301      	movs	r3, #1
 80001c8:	7023      	strb	r3, [r4, #0]
 80001ca:	bd10      	pop	{r4, pc}
 80001cc:	20000190 	.word	0x20000190
 80001d0:	00000000 	.word	0x00000000
 80001d4:	08008204 	.word	0x08008204

080001d8 <frame_dummy>:
 80001d8:	b508      	push	{r3, lr}
 80001da:	4b03      	ldr	r3, [pc, #12]	; (80001e8 <frame_dummy+0x10>)
 80001dc:	b11b      	cbz	r3, 80001e6 <frame_dummy+0xe>
 80001de:	4903      	ldr	r1, [pc, #12]	; (80001ec <frame_dummy+0x14>)
 80001e0:	4803      	ldr	r0, [pc, #12]	; (80001f0 <frame_dummy+0x18>)
 80001e2:	f3af 8000 	nop.w
 80001e6:	bd08      	pop	{r3, pc}
 80001e8:	00000000 	.word	0x00000000
 80001ec:	20000194 	.word	0x20000194
 80001f0:	08008204 	.word	0x08008204

080001f4 <__aeabi_uldivmod>:
 80001f4:	b953      	cbnz	r3, 800020c <__aeabi_uldivmod+0x18>
 80001f6:	b94a      	cbnz	r2, 800020c <__aeabi_uldivmod+0x18>
 80001f8:	2900      	cmp	r1, #0
 80001fa:	bf08      	it	eq
 80001fc:	2800      	cmpeq	r0, #0
 80001fe:	bf1c      	itt	ne
 8000200:	f04f 31ff 	movne.w	r1, #4294967295
 8000204:	f04f 30ff 	movne.w	r0, #4294967295
 8000208:	f000 b96e 	b.w	80004e8 <__aeabi_idiv0>
 800020c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000210:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000214:	f000 f806 	bl	8000224 <__udivmoddi4>
 8000218:	f8dd e004 	ldr.w	lr, [sp, #4]
 800021c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000220:	b004      	add	sp, #16
 8000222:	4770      	bx	lr

08000224 <__udivmoddi4>:
 8000224:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000228:	9d08      	ldr	r5, [sp, #32]
 800022a:	4604      	mov	r4, r0
 800022c:	468c      	mov	ip, r1
 800022e:	2b00      	cmp	r3, #0
 8000230:	f040 8083 	bne.w	800033a <__udivmoddi4+0x116>
 8000234:	428a      	cmp	r2, r1
 8000236:	4617      	mov	r7, r2
 8000238:	d947      	bls.n	80002ca <__udivmoddi4+0xa6>
 800023a:	fab2 f282 	clz	r2, r2
 800023e:	b142      	cbz	r2, 8000252 <__udivmoddi4+0x2e>
 8000240:	f1c2 0020 	rsb	r0, r2, #32
 8000244:	fa24 f000 	lsr.w	r0, r4, r0
 8000248:	4091      	lsls	r1, r2
 800024a:	4097      	lsls	r7, r2
 800024c:	ea40 0c01 	orr.w	ip, r0, r1
 8000250:	4094      	lsls	r4, r2
 8000252:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000256:	0c23      	lsrs	r3, r4, #16
 8000258:	fbbc f6f8 	udiv	r6, ip, r8
 800025c:	fa1f fe87 	uxth.w	lr, r7
 8000260:	fb08 c116 	mls	r1, r8, r6, ip
 8000264:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000268:	fb06 f10e 	mul.w	r1, r6, lr
 800026c:	4299      	cmp	r1, r3
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x60>
 8000270:	18fb      	adds	r3, r7, r3
 8000272:	f106 30ff 	add.w	r0, r6, #4294967295
 8000276:	f080 8119 	bcs.w	80004ac <__udivmoddi4+0x288>
 800027a:	4299      	cmp	r1, r3
 800027c:	f240 8116 	bls.w	80004ac <__udivmoddi4+0x288>
 8000280:	3e02      	subs	r6, #2
 8000282:	443b      	add	r3, r7
 8000284:	1a5b      	subs	r3, r3, r1
 8000286:	b2a4      	uxth	r4, r4
 8000288:	fbb3 f0f8 	udiv	r0, r3, r8
 800028c:	fb08 3310 	mls	r3, r8, r0, r3
 8000290:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000294:	fb00 fe0e 	mul.w	lr, r0, lr
 8000298:	45a6      	cmp	lr, r4
 800029a:	d909      	bls.n	80002b0 <__udivmoddi4+0x8c>
 800029c:	193c      	adds	r4, r7, r4
 800029e:	f100 33ff 	add.w	r3, r0, #4294967295
 80002a2:	f080 8105 	bcs.w	80004b0 <__udivmoddi4+0x28c>
 80002a6:	45a6      	cmp	lr, r4
 80002a8:	f240 8102 	bls.w	80004b0 <__udivmoddi4+0x28c>
 80002ac:	3802      	subs	r0, #2
 80002ae:	443c      	add	r4, r7
 80002b0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002b4:	eba4 040e 	sub.w	r4, r4, lr
 80002b8:	2600      	movs	r6, #0
 80002ba:	b11d      	cbz	r5, 80002c4 <__udivmoddi4+0xa0>
 80002bc:	40d4      	lsrs	r4, r2
 80002be:	2300      	movs	r3, #0
 80002c0:	e9c5 4300 	strd	r4, r3, [r5]
 80002c4:	4631      	mov	r1, r6
 80002c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ca:	b902      	cbnz	r2, 80002ce <__udivmoddi4+0xaa>
 80002cc:	deff      	udf	#255	; 0xff
 80002ce:	fab2 f282 	clz	r2, r2
 80002d2:	2a00      	cmp	r2, #0
 80002d4:	d150      	bne.n	8000378 <__udivmoddi4+0x154>
 80002d6:	1bcb      	subs	r3, r1, r7
 80002d8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002dc:	fa1f f887 	uxth.w	r8, r7
 80002e0:	2601      	movs	r6, #1
 80002e2:	fbb3 fcfe 	udiv	ip, r3, lr
 80002e6:	0c21      	lsrs	r1, r4, #16
 80002e8:	fb0e 331c 	mls	r3, lr, ip, r3
 80002ec:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002f0:	fb08 f30c 	mul.w	r3, r8, ip
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d907      	bls.n	8000308 <__udivmoddi4+0xe4>
 80002f8:	1879      	adds	r1, r7, r1
 80002fa:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002fe:	d202      	bcs.n	8000306 <__udivmoddi4+0xe2>
 8000300:	428b      	cmp	r3, r1
 8000302:	f200 80e9 	bhi.w	80004d8 <__udivmoddi4+0x2b4>
 8000306:	4684      	mov	ip, r0
 8000308:	1ac9      	subs	r1, r1, r3
 800030a:	b2a3      	uxth	r3, r4
 800030c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000310:	fb0e 1110 	mls	r1, lr, r0, r1
 8000314:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000318:	fb08 f800 	mul.w	r8, r8, r0
 800031c:	45a0      	cmp	r8, r4
 800031e:	d907      	bls.n	8000330 <__udivmoddi4+0x10c>
 8000320:	193c      	adds	r4, r7, r4
 8000322:	f100 33ff 	add.w	r3, r0, #4294967295
 8000326:	d202      	bcs.n	800032e <__udivmoddi4+0x10a>
 8000328:	45a0      	cmp	r8, r4
 800032a:	f200 80d9 	bhi.w	80004e0 <__udivmoddi4+0x2bc>
 800032e:	4618      	mov	r0, r3
 8000330:	eba4 0408 	sub.w	r4, r4, r8
 8000334:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000338:	e7bf      	b.n	80002ba <__udivmoddi4+0x96>
 800033a:	428b      	cmp	r3, r1
 800033c:	d909      	bls.n	8000352 <__udivmoddi4+0x12e>
 800033e:	2d00      	cmp	r5, #0
 8000340:	f000 80b1 	beq.w	80004a6 <__udivmoddi4+0x282>
 8000344:	2600      	movs	r6, #0
 8000346:	e9c5 0100 	strd	r0, r1, [r5]
 800034a:	4630      	mov	r0, r6
 800034c:	4631      	mov	r1, r6
 800034e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000352:	fab3 f683 	clz	r6, r3
 8000356:	2e00      	cmp	r6, #0
 8000358:	d14a      	bne.n	80003f0 <__udivmoddi4+0x1cc>
 800035a:	428b      	cmp	r3, r1
 800035c:	d302      	bcc.n	8000364 <__udivmoddi4+0x140>
 800035e:	4282      	cmp	r2, r0
 8000360:	f200 80b8 	bhi.w	80004d4 <__udivmoddi4+0x2b0>
 8000364:	1a84      	subs	r4, r0, r2
 8000366:	eb61 0103 	sbc.w	r1, r1, r3
 800036a:	2001      	movs	r0, #1
 800036c:	468c      	mov	ip, r1
 800036e:	2d00      	cmp	r5, #0
 8000370:	d0a8      	beq.n	80002c4 <__udivmoddi4+0xa0>
 8000372:	e9c5 4c00 	strd	r4, ip, [r5]
 8000376:	e7a5      	b.n	80002c4 <__udivmoddi4+0xa0>
 8000378:	f1c2 0320 	rsb	r3, r2, #32
 800037c:	fa20 f603 	lsr.w	r6, r0, r3
 8000380:	4097      	lsls	r7, r2
 8000382:	fa01 f002 	lsl.w	r0, r1, r2
 8000386:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800038a:	40d9      	lsrs	r1, r3
 800038c:	4330      	orrs	r0, r6
 800038e:	0c03      	lsrs	r3, r0, #16
 8000390:	fbb1 f6fe 	udiv	r6, r1, lr
 8000394:	fa1f f887 	uxth.w	r8, r7
 8000398:	fb0e 1116 	mls	r1, lr, r6, r1
 800039c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003a0:	fb06 f108 	mul.w	r1, r6, r8
 80003a4:	4299      	cmp	r1, r3
 80003a6:	fa04 f402 	lsl.w	r4, r4, r2
 80003aa:	d909      	bls.n	80003c0 <__udivmoddi4+0x19c>
 80003ac:	18fb      	adds	r3, r7, r3
 80003ae:	f106 3cff 	add.w	ip, r6, #4294967295
 80003b2:	f080 808d 	bcs.w	80004d0 <__udivmoddi4+0x2ac>
 80003b6:	4299      	cmp	r1, r3
 80003b8:	f240 808a 	bls.w	80004d0 <__udivmoddi4+0x2ac>
 80003bc:	3e02      	subs	r6, #2
 80003be:	443b      	add	r3, r7
 80003c0:	1a5b      	subs	r3, r3, r1
 80003c2:	b281      	uxth	r1, r0
 80003c4:	fbb3 f0fe 	udiv	r0, r3, lr
 80003c8:	fb0e 3310 	mls	r3, lr, r0, r3
 80003cc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003d0:	fb00 f308 	mul.w	r3, r0, r8
 80003d4:	428b      	cmp	r3, r1
 80003d6:	d907      	bls.n	80003e8 <__udivmoddi4+0x1c4>
 80003d8:	1879      	adds	r1, r7, r1
 80003da:	f100 3cff 	add.w	ip, r0, #4294967295
 80003de:	d273      	bcs.n	80004c8 <__udivmoddi4+0x2a4>
 80003e0:	428b      	cmp	r3, r1
 80003e2:	d971      	bls.n	80004c8 <__udivmoddi4+0x2a4>
 80003e4:	3802      	subs	r0, #2
 80003e6:	4439      	add	r1, r7
 80003e8:	1acb      	subs	r3, r1, r3
 80003ea:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003ee:	e778      	b.n	80002e2 <__udivmoddi4+0xbe>
 80003f0:	f1c6 0c20 	rsb	ip, r6, #32
 80003f4:	fa03 f406 	lsl.w	r4, r3, r6
 80003f8:	fa22 f30c 	lsr.w	r3, r2, ip
 80003fc:	431c      	orrs	r4, r3
 80003fe:	fa20 f70c 	lsr.w	r7, r0, ip
 8000402:	fa01 f306 	lsl.w	r3, r1, r6
 8000406:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 800040a:	fa21 f10c 	lsr.w	r1, r1, ip
 800040e:	431f      	orrs	r7, r3
 8000410:	0c3b      	lsrs	r3, r7, #16
 8000412:	fbb1 f9fe 	udiv	r9, r1, lr
 8000416:	fa1f f884 	uxth.w	r8, r4
 800041a:	fb0e 1119 	mls	r1, lr, r9, r1
 800041e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000422:	fb09 fa08 	mul.w	sl, r9, r8
 8000426:	458a      	cmp	sl, r1
 8000428:	fa02 f206 	lsl.w	r2, r2, r6
 800042c:	fa00 f306 	lsl.w	r3, r0, r6
 8000430:	d908      	bls.n	8000444 <__udivmoddi4+0x220>
 8000432:	1861      	adds	r1, r4, r1
 8000434:	f109 30ff 	add.w	r0, r9, #4294967295
 8000438:	d248      	bcs.n	80004cc <__udivmoddi4+0x2a8>
 800043a:	458a      	cmp	sl, r1
 800043c:	d946      	bls.n	80004cc <__udivmoddi4+0x2a8>
 800043e:	f1a9 0902 	sub.w	r9, r9, #2
 8000442:	4421      	add	r1, r4
 8000444:	eba1 010a 	sub.w	r1, r1, sl
 8000448:	b2bf      	uxth	r7, r7
 800044a:	fbb1 f0fe 	udiv	r0, r1, lr
 800044e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000452:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000456:	fb00 f808 	mul.w	r8, r0, r8
 800045a:	45b8      	cmp	r8, r7
 800045c:	d907      	bls.n	800046e <__udivmoddi4+0x24a>
 800045e:	19e7      	adds	r7, r4, r7
 8000460:	f100 31ff 	add.w	r1, r0, #4294967295
 8000464:	d22e      	bcs.n	80004c4 <__udivmoddi4+0x2a0>
 8000466:	45b8      	cmp	r8, r7
 8000468:	d92c      	bls.n	80004c4 <__udivmoddi4+0x2a0>
 800046a:	3802      	subs	r0, #2
 800046c:	4427      	add	r7, r4
 800046e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000472:	eba7 0708 	sub.w	r7, r7, r8
 8000476:	fba0 8902 	umull	r8, r9, r0, r2
 800047a:	454f      	cmp	r7, r9
 800047c:	46c6      	mov	lr, r8
 800047e:	4649      	mov	r1, r9
 8000480:	d31a      	bcc.n	80004b8 <__udivmoddi4+0x294>
 8000482:	d017      	beq.n	80004b4 <__udivmoddi4+0x290>
 8000484:	b15d      	cbz	r5, 800049e <__udivmoddi4+0x27a>
 8000486:	ebb3 020e 	subs.w	r2, r3, lr
 800048a:	eb67 0701 	sbc.w	r7, r7, r1
 800048e:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000492:	40f2      	lsrs	r2, r6
 8000494:	ea4c 0202 	orr.w	r2, ip, r2
 8000498:	40f7      	lsrs	r7, r6
 800049a:	e9c5 2700 	strd	r2, r7, [r5]
 800049e:	2600      	movs	r6, #0
 80004a0:	4631      	mov	r1, r6
 80004a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004a6:	462e      	mov	r6, r5
 80004a8:	4628      	mov	r0, r5
 80004aa:	e70b      	b.n	80002c4 <__udivmoddi4+0xa0>
 80004ac:	4606      	mov	r6, r0
 80004ae:	e6e9      	b.n	8000284 <__udivmoddi4+0x60>
 80004b0:	4618      	mov	r0, r3
 80004b2:	e6fd      	b.n	80002b0 <__udivmoddi4+0x8c>
 80004b4:	4543      	cmp	r3, r8
 80004b6:	d2e5      	bcs.n	8000484 <__udivmoddi4+0x260>
 80004b8:	ebb8 0e02 	subs.w	lr, r8, r2
 80004bc:	eb69 0104 	sbc.w	r1, r9, r4
 80004c0:	3801      	subs	r0, #1
 80004c2:	e7df      	b.n	8000484 <__udivmoddi4+0x260>
 80004c4:	4608      	mov	r0, r1
 80004c6:	e7d2      	b.n	800046e <__udivmoddi4+0x24a>
 80004c8:	4660      	mov	r0, ip
 80004ca:	e78d      	b.n	80003e8 <__udivmoddi4+0x1c4>
 80004cc:	4681      	mov	r9, r0
 80004ce:	e7b9      	b.n	8000444 <__udivmoddi4+0x220>
 80004d0:	4666      	mov	r6, ip
 80004d2:	e775      	b.n	80003c0 <__udivmoddi4+0x19c>
 80004d4:	4630      	mov	r0, r6
 80004d6:	e74a      	b.n	800036e <__udivmoddi4+0x14a>
 80004d8:	f1ac 0c02 	sub.w	ip, ip, #2
 80004dc:	4439      	add	r1, r7
 80004de:	e713      	b.n	8000308 <__udivmoddi4+0xe4>
 80004e0:	3802      	subs	r0, #2
 80004e2:	443c      	add	r4, r7
 80004e4:	e724      	b.n	8000330 <__udivmoddi4+0x10c>
 80004e6:	bf00      	nop

080004e8 <__aeabi_idiv0>:
 80004e8:	4770      	bx	lr
 80004ea:	bf00      	nop

080004ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004ec:	b580      	push	{r7, lr}
 80004ee:	b082      	sub	sp, #8
 80004f0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004f2:	f000 fd5f 	bl	8000fb4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004f6:	f000 f823 	bl	8000540 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004fa:	f000 f9cd 	bl	8000898 <MX_GPIO_Init>
  MX_FMC_Init();
 80004fe:	f000 f969 	bl	80007d4 <MX_FMC_Init>
  MX_USB_DEVICE_Init();
 8000502:	f007 f8e9 	bl	80076d8 <MX_USB_DEVICE_Init>
  MX_LTDC_Init();
 8000506:	f000 f889 	bl	800061c <MX_LTDC_Init>
  MX_USART3_UART_Init();
 800050a:	f000 f939 	bl	8000780 <MX_USART3_UART_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	uint8_t tx_buff[] = {"test\r\n"};
 800050e:	4a0a      	ldr	r2, [pc, #40]	; (8000538 <main+0x4c>)
 8000510:	463b      	mov	r3, r7
 8000512:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000516:	6018      	str	r0, [r3, #0]
 8000518:	3304      	adds	r3, #4
 800051a:	8019      	strh	r1, [r3, #0]
 800051c:	3302      	adds	r3, #2
 800051e:	0c0a      	lsrs	r2, r1, #16
 8000520:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit(&huart3, tx_buff, sizeof(tx_buff), 100);
 8000522:	4639      	mov	r1, r7
 8000524:	2364      	movs	r3, #100	; 0x64
 8000526:	2207      	movs	r2, #7
 8000528:	4804      	ldr	r0, [pc, #16]	; (800053c <main+0x50>)
 800052a:	f003 fd0a 	bl	8003f42 <HAL_UART_Transmit>
	HAL_Delay(1000);
 800052e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000532:	f000 fdb1 	bl	8001098 <HAL_Delay>
  {
 8000536:	e7ea      	b.n	800050e <main+0x22>
 8000538:	0800821c 	.word	0x0800821c
 800053c:	200003d4 	.word	0x200003d4

08000540 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000540:	b580      	push	{r7, lr}
 8000542:	b094      	sub	sp, #80	; 0x50
 8000544:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000546:	f107 031c 	add.w	r3, r7, #28
 800054a:	2234      	movs	r2, #52	; 0x34
 800054c:	2100      	movs	r1, #0
 800054e:	4618      	mov	r0, r3
 8000550:	f007 fe50 	bl	80081f4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000554:	f107 0308 	add.w	r3, r7, #8
 8000558:	2200      	movs	r2, #0
 800055a:	601a      	str	r2, [r3, #0]
 800055c:	605a      	str	r2, [r3, #4]
 800055e:	609a      	str	r2, [r3, #8]
 8000560:	60da      	str	r2, [r3, #12]
 8000562:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000564:	2300      	movs	r3, #0
 8000566:	607b      	str	r3, [r7, #4]
 8000568:	4b2a      	ldr	r3, [pc, #168]	; (8000614 <SystemClock_Config+0xd4>)
 800056a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800056c:	4a29      	ldr	r2, [pc, #164]	; (8000614 <SystemClock_Config+0xd4>)
 800056e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000572:	6413      	str	r3, [r2, #64]	; 0x40
 8000574:	4b27      	ldr	r3, [pc, #156]	; (8000614 <SystemClock_Config+0xd4>)
 8000576:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000578:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800057c:	607b      	str	r3, [r7, #4]
 800057e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000580:	2300      	movs	r3, #0
 8000582:	603b      	str	r3, [r7, #0]
 8000584:	4b24      	ldr	r3, [pc, #144]	; (8000618 <SystemClock_Config+0xd8>)
 8000586:	681b      	ldr	r3, [r3, #0]
 8000588:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800058c:	4a22      	ldr	r2, [pc, #136]	; (8000618 <SystemClock_Config+0xd8>)
 800058e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000592:	6013      	str	r3, [r2, #0]
 8000594:	4b20      	ldr	r3, [pc, #128]	; (8000618 <SystemClock_Config+0xd8>)
 8000596:	681b      	ldr	r3, [r3, #0]
 8000598:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800059c:	603b      	str	r3, [r7, #0]
 800059e:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005a0:	2301      	movs	r3, #1
 80005a2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005a4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80005a8:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005aa:	2302      	movs	r3, #2
 80005ac:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005ae:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80005b2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 25;
 80005b4:	2319      	movs	r3, #25
 80005b6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 192;
 80005b8:	23c0      	movs	r3, #192	; 0xc0
 80005ba:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005bc:	2302      	movs	r3, #2
 80005be:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80005c0:	2304      	movs	r3, #4
 80005c2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80005c4:	2302      	movs	r3, #2
 80005c6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005c8:	f107 031c 	add.w	r3, r7, #28
 80005cc:	4618      	mov	r0, r3
 80005ce:	f003 f9a3 	bl	8003918 <HAL_RCC_OscConfig>
 80005d2:	4603      	mov	r3, r0
 80005d4:	2b00      	cmp	r3, #0
 80005d6:	d001      	beq.n	80005dc <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80005d8:	f000 fa20 	bl	8000a1c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005dc:	230f      	movs	r3, #15
 80005de:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005e0:	2302      	movs	r3, #2
 80005e2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 80005e4:	2380      	movs	r3, #128	; 0x80
 80005e6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80005e8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80005ec:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80005ee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005f2:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80005f4:	f107 0308 	add.w	r3, r7, #8
 80005f8:	2101      	movs	r1, #1
 80005fa:	4618      	mov	r0, r3
 80005fc:	f002 fd7e 	bl	80030fc <HAL_RCC_ClockConfig>
 8000600:	4603      	mov	r3, r0
 8000602:	2b00      	cmp	r3, #0
 8000604:	d001      	beq.n	800060a <SystemClock_Config+0xca>
  {
    Error_Handler();
 8000606:	f000 fa09 	bl	8000a1c <Error_Handler>
  }
}
 800060a:	bf00      	nop
 800060c:	3750      	adds	r7, #80	; 0x50
 800060e:	46bd      	mov	sp, r7
 8000610:	bd80      	pop	{r7, pc}
 8000612:	bf00      	nop
 8000614:	40023800 	.word	0x40023800
 8000618:	40007000 	.word	0x40007000

0800061c <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	b09a      	sub	sp, #104	; 0x68
 8000620:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8000622:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000626:	2234      	movs	r2, #52	; 0x34
 8000628:	2100      	movs	r1, #0
 800062a:	4618      	mov	r0, r3
 800062c:	f007 fde2 	bl	80081f4 <memset>
  LTDC_LayerCfgTypeDef pLayerCfg1 = {0};
 8000630:	463b      	mov	r3, r7
 8000632:	2234      	movs	r2, #52	; 0x34
 8000634:	2100      	movs	r1, #0
 8000636:	4618      	mov	r0, r3
 8000638:	f007 fddc 	bl	80081f4 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 800063c:	4b4e      	ldr	r3, [pc, #312]	; (8000778 <MX_LTDC_Init+0x15c>)
 800063e:	4a4f      	ldr	r2, [pc, #316]	; (800077c <MX_LTDC_Init+0x160>)
 8000640:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8000642:	4b4d      	ldr	r3, [pc, #308]	; (8000778 <MX_LTDC_Init+0x15c>)
 8000644:	2200      	movs	r2, #0
 8000646:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8000648:	4b4b      	ldr	r3, [pc, #300]	; (8000778 <MX_LTDC_Init+0x15c>)
 800064a:	2200      	movs	r2, #0
 800064c:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 800064e:	4b4a      	ldr	r3, [pc, #296]	; (8000778 <MX_LTDC_Init+0x15c>)
 8000650:	2200      	movs	r2, #0
 8000652:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8000654:	4b48      	ldr	r3, [pc, #288]	; (8000778 <MX_LTDC_Init+0x15c>)
 8000656:	2200      	movs	r2, #0
 8000658:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 47;
 800065a:	4b47      	ldr	r3, [pc, #284]	; (8000778 <MX_LTDC_Init+0x15c>)
 800065c:	222f      	movs	r2, #47	; 0x2f
 800065e:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 0;
 8000660:	4b45      	ldr	r3, [pc, #276]	; (8000778 <MX_LTDC_Init+0x15c>)
 8000662:	2200      	movs	r2, #0
 8000664:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 87;
 8000666:	4b44      	ldr	r3, [pc, #272]	; (8000778 <MX_LTDC_Init+0x15c>)
 8000668:	2257      	movs	r2, #87	; 0x57
 800066a:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 31;
 800066c:	4b42      	ldr	r3, [pc, #264]	; (8000778 <MX_LTDC_Init+0x15c>)
 800066e:	221f      	movs	r2, #31
 8000670:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 887;
 8000672:	4b41      	ldr	r3, [pc, #260]	; (8000778 <MX_LTDC_Init+0x15c>)
 8000674:	f240 3277 	movw	r2, #887	; 0x377
 8000678:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 511;
 800067a:	4b3f      	ldr	r3, [pc, #252]	; (8000778 <MX_LTDC_Init+0x15c>)
 800067c:	f240 12ff 	movw	r2, #511	; 0x1ff
 8000680:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 927;
 8000682:	4b3d      	ldr	r3, [pc, #244]	; (8000778 <MX_LTDC_Init+0x15c>)
 8000684:	f240 329f 	movw	r2, #927	; 0x39f
 8000688:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 524;
 800068a:	4b3b      	ldr	r3, [pc, #236]	; (8000778 <MX_LTDC_Init+0x15c>)
 800068c:	f44f 7203 	mov.w	r2, #524	; 0x20c
 8000690:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 50;
 8000692:	4b39      	ldr	r3, [pc, #228]	; (8000778 <MX_LTDC_Init+0x15c>)
 8000694:	2232      	movs	r2, #50	; 0x32
 8000696:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 120;
 800069a:	4b37      	ldr	r3, [pc, #220]	; (8000778 <MX_LTDC_Init+0x15c>)
 800069c:	2278      	movs	r2, #120	; 0x78
 800069e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 255;
 80006a2:	4b35      	ldr	r3, [pc, #212]	; (8000778 <MX_LTDC_Init+0x15c>)
 80006a4:	22ff      	movs	r2, #255	; 0xff
 80006a6:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 80006aa:	4833      	ldr	r0, [pc, #204]	; (8000778 <MX_LTDC_Init+0x15c>)
 80006ac:	f000 fff0 	bl	8001690 <HAL_LTDC_Init>
 80006b0:	4603      	mov	r3, r0
 80006b2:	2b00      	cmp	r3, #0
 80006b4:	d001      	beq.n	80006ba <MX_LTDC_Init+0x9e>
  {
    Error_Handler();
 80006b6:	f000 f9b1 	bl	8000a1c <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 80006ba:	2300      	movs	r3, #0
 80006bc:	637b      	str	r3, [r7, #52]	; 0x34
  pLayerCfg.WindowX1 = 0;
 80006be:	2300      	movs	r3, #0
 80006c0:	63bb      	str	r3, [r7, #56]	; 0x38
  pLayerCfg.WindowY0 = 0;
 80006c2:	2300      	movs	r3, #0
 80006c4:	63fb      	str	r3, [r7, #60]	; 0x3c
  pLayerCfg.WindowY1 = 0;
 80006c6:	2300      	movs	r3, #0
 80006c8:	643b      	str	r3, [r7, #64]	; 0x40
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 80006ca:	2300      	movs	r3, #0
 80006cc:	647b      	str	r3, [r7, #68]	; 0x44
  pLayerCfg.Alpha = 0;
 80006ce:	2300      	movs	r3, #0
 80006d0:	64bb      	str	r3, [r7, #72]	; 0x48
  pLayerCfg.Alpha0 = 0;
 80006d2:	2300      	movs	r3, #0
 80006d4:	64fb      	str	r3, [r7, #76]	; 0x4c
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 80006d6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80006da:	653b      	str	r3, [r7, #80]	; 0x50
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 80006dc:	2305      	movs	r3, #5
 80006de:	657b      	str	r3, [r7, #84]	; 0x54
  pLayerCfg.FBStartAdress = 0;
 80006e0:	2300      	movs	r3, #0
 80006e2:	65bb      	str	r3, [r7, #88]	; 0x58
  pLayerCfg.ImageWidth = 0;
 80006e4:	2300      	movs	r3, #0
 80006e6:	65fb      	str	r3, [r7, #92]	; 0x5c
  pLayerCfg.ImageHeight = 0;
 80006e8:	2300      	movs	r3, #0
 80006ea:	663b      	str	r3, [r7, #96]	; 0x60
  pLayerCfg.Backcolor.Blue = 0;
 80006ec:	2300      	movs	r3, #0
 80006ee:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  pLayerCfg.Backcolor.Green = 0;
 80006f2:	2300      	movs	r3, #0
 80006f4:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
  pLayerCfg.Backcolor.Red = 0;
 80006f8:	2300      	movs	r3, #0
 80006fa:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 80006fe:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000702:	2200      	movs	r2, #0
 8000704:	4619      	mov	r1, r3
 8000706:	481c      	ldr	r0, [pc, #112]	; (8000778 <MX_LTDC_Init+0x15c>)
 8000708:	f001 f954 	bl	80019b4 <HAL_LTDC_ConfigLayer>
 800070c:	4603      	mov	r3, r0
 800070e:	2b00      	cmp	r3, #0
 8000710:	d001      	beq.n	8000716 <MX_LTDC_Init+0xfa>
  {
    Error_Handler();
 8000712:	f000 f983 	bl	8000a1c <Error_Handler>
  }
  pLayerCfg1.WindowX0 = 0;
 8000716:	2300      	movs	r3, #0
 8000718:	603b      	str	r3, [r7, #0]
  pLayerCfg1.WindowX1 = 0;
 800071a:	2300      	movs	r3, #0
 800071c:	607b      	str	r3, [r7, #4]
  pLayerCfg1.WindowY0 = 0;
 800071e:	2300      	movs	r3, #0
 8000720:	60bb      	str	r3, [r7, #8]
  pLayerCfg1.WindowY1 = 0;
 8000722:	2300      	movs	r3, #0
 8000724:	60fb      	str	r3, [r7, #12]
  pLayerCfg1.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8000726:	2300      	movs	r3, #0
 8000728:	613b      	str	r3, [r7, #16]
  pLayerCfg1.Alpha = 0;
 800072a:	2300      	movs	r3, #0
 800072c:	617b      	str	r3, [r7, #20]
  pLayerCfg1.Alpha0 = 0;
 800072e:	2300      	movs	r3, #0
 8000730:	61bb      	str	r3, [r7, #24]
  pLayerCfg1.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8000732:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000736:	61fb      	str	r3, [r7, #28]
  pLayerCfg1.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8000738:	2305      	movs	r3, #5
 800073a:	623b      	str	r3, [r7, #32]
  pLayerCfg1.FBStartAdress = 0;
 800073c:	2300      	movs	r3, #0
 800073e:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg1.ImageWidth = 0;
 8000740:	2300      	movs	r3, #0
 8000742:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg1.ImageHeight = 0;
 8000744:	2300      	movs	r3, #0
 8000746:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg1.Backcolor.Blue = 0;
 8000748:	2300      	movs	r3, #0
 800074a:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  pLayerCfg1.Backcolor.Green = 0;
 800074e:	2300      	movs	r3, #0
 8000750:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  pLayerCfg1.Backcolor.Red = 0;
 8000754:	2300      	movs	r3, #0
 8000756:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg1, 1) != HAL_OK)
 800075a:	463b      	mov	r3, r7
 800075c:	2201      	movs	r2, #1
 800075e:	4619      	mov	r1, r3
 8000760:	4805      	ldr	r0, [pc, #20]	; (8000778 <MX_LTDC_Init+0x15c>)
 8000762:	f001 f927 	bl	80019b4 <HAL_LTDC_ConfigLayer>
 8000766:	4603      	mov	r3, r0
 8000768:	2b00      	cmp	r3, #0
 800076a:	d001      	beq.n	8000770 <MX_LTDC_Init+0x154>
  {
    Error_Handler();
 800076c:	f000 f956 	bl	8000a1c <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8000770:	bf00      	nop
 8000772:	3768      	adds	r7, #104	; 0x68
 8000774:	46bd      	mov	sp, r7
 8000776:	bd80      	pop	{r7, pc}
 8000778:	20000468 	.word	0x20000468
 800077c:	40016800 	.word	0x40016800

08000780 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000784:	4b11      	ldr	r3, [pc, #68]	; (80007cc <MX_USART3_UART_Init+0x4c>)
 8000786:	4a12      	ldr	r2, [pc, #72]	; (80007d0 <MX_USART3_UART_Init+0x50>)
 8000788:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 800078a:	4b10      	ldr	r3, [pc, #64]	; (80007cc <MX_USART3_UART_Init+0x4c>)
 800078c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000790:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000792:	4b0e      	ldr	r3, [pc, #56]	; (80007cc <MX_USART3_UART_Init+0x4c>)
 8000794:	2200      	movs	r2, #0
 8000796:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000798:	4b0c      	ldr	r3, [pc, #48]	; (80007cc <MX_USART3_UART_Init+0x4c>)
 800079a:	2200      	movs	r2, #0
 800079c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800079e:	4b0b      	ldr	r3, [pc, #44]	; (80007cc <MX_USART3_UART_Init+0x4c>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80007a4:	4b09      	ldr	r3, [pc, #36]	; (80007cc <MX_USART3_UART_Init+0x4c>)
 80007a6:	220c      	movs	r2, #12
 80007a8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007aa:	4b08      	ldr	r3, [pc, #32]	; (80007cc <MX_USART3_UART_Init+0x4c>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80007b0:	4b06      	ldr	r3, [pc, #24]	; (80007cc <MX_USART3_UART_Init+0x4c>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80007b6:	4805      	ldr	r0, [pc, #20]	; (80007cc <MX_USART3_UART_Init+0x4c>)
 80007b8:	f003 fb76 	bl	8003ea8 <HAL_UART_Init>
 80007bc:	4603      	mov	r3, r0
 80007be:	2b00      	cmp	r3, #0
 80007c0:	d001      	beq.n	80007c6 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80007c2:	f000 f92b 	bl	8000a1c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80007c6:	bf00      	nop
 80007c8:	bd80      	pop	{r7, pc}
 80007ca:	bf00      	nop
 80007cc:	200003d4 	.word	0x200003d4
 80007d0:	40004800 	.word	0x40004800

080007d4 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	b088      	sub	sp, #32
 80007d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_NORSRAM_TimingTypeDef Timing = {0};
 80007da:	1d3b      	adds	r3, r7, #4
 80007dc:	2200      	movs	r2, #0
 80007de:	601a      	str	r2, [r3, #0]
 80007e0:	605a      	str	r2, [r3, #4]
 80007e2:	609a      	str	r2, [r3, #8]
 80007e4:	60da      	str	r2, [r3, #12]
 80007e6:	611a      	str	r2, [r3, #16]
 80007e8:	615a      	str	r2, [r3, #20]
 80007ea:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FMC_NORSRAM_DEVICE;
 80007ec:	4b28      	ldr	r3, [pc, #160]	; (8000890 <MX_FMC_Init+0xbc>)
 80007ee:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 80007f2:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FMC_NORSRAM_EXTENDED_DEVICE;
 80007f4:	4b26      	ldr	r3, [pc, #152]	; (8000890 <MX_FMC_Init+0xbc>)
 80007f6:	4a27      	ldr	r2, [pc, #156]	; (8000894 <MX_FMC_Init+0xc0>)
 80007f8:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FMC_NORSRAM_BANK2;
 80007fa:	4b25      	ldr	r3, [pc, #148]	; (8000890 <MX_FMC_Init+0xbc>)
 80007fc:	2202      	movs	r2, #2
 80007fe:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FMC_DATA_ADDRESS_MUX_DISABLE;
 8000800:	4b23      	ldr	r3, [pc, #140]	; (8000890 <MX_FMC_Init+0xbc>)
 8000802:	2200      	movs	r2, #0
 8000804:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FMC_MEMORY_TYPE_SRAM;
 8000806:	4b22      	ldr	r3, [pc, #136]	; (8000890 <MX_FMC_Init+0xbc>)
 8000808:	2200      	movs	r2, #0
 800080a:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FMC_NORSRAM_MEM_BUS_WIDTH_16;
 800080c:	4b20      	ldr	r3, [pc, #128]	; (8000890 <MX_FMC_Init+0xbc>)
 800080e:	2210      	movs	r2, #16
 8000810:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FMC_BURST_ACCESS_MODE_DISABLE;
 8000812:	4b1f      	ldr	r3, [pc, #124]	; (8000890 <MX_FMC_Init+0xbc>)
 8000814:	2200      	movs	r2, #0
 8000816:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FMC_WAIT_SIGNAL_POLARITY_LOW;
 8000818:	4b1d      	ldr	r3, [pc, #116]	; (8000890 <MX_FMC_Init+0xbc>)
 800081a:	2200      	movs	r2, #0
 800081c:	61da      	str	r2, [r3, #28]
  hsram1.Init.WaitSignalActive = FMC_WAIT_TIMING_BEFORE_WS;
 800081e:	4b1c      	ldr	r3, [pc, #112]	; (8000890 <MX_FMC_Init+0xbc>)
 8000820:	2200      	movs	r2, #0
 8000822:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WriteOperation = FMC_WRITE_OPERATION_DISABLE;
 8000824:	4b1a      	ldr	r3, [pc, #104]	; (8000890 <MX_FMC_Init+0xbc>)
 8000826:	2200      	movs	r2, #0
 8000828:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.WaitSignal = FMC_WAIT_SIGNAL_DISABLE;
 800082a:	4b19      	ldr	r3, [pc, #100]	; (8000890 <MX_FMC_Init+0xbc>)
 800082c:	2200      	movs	r2, #0
 800082e:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.ExtendedMode = FMC_EXTENDED_MODE_DISABLE;
 8000830:	4b17      	ldr	r3, [pc, #92]	; (8000890 <MX_FMC_Init+0xbc>)
 8000832:	2200      	movs	r2, #0
 8000834:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.AsynchronousWait = FMC_ASYNCHRONOUS_WAIT_DISABLE;
 8000836:	4b16      	ldr	r3, [pc, #88]	; (8000890 <MX_FMC_Init+0xbc>)
 8000838:	2200      	movs	r2, #0
 800083a:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.WriteBurst = FMC_WRITE_BURST_DISABLE;
 800083c:	4b14      	ldr	r3, [pc, #80]	; (8000890 <MX_FMC_Init+0xbc>)
 800083e:	2200      	movs	r2, #0
 8000840:	639a      	str	r2, [r3, #56]	; 0x38
  hsram1.Init.ContinuousClock = FMC_CONTINUOUS_CLOCK_SYNC_ONLY;
 8000842:	4b13      	ldr	r3, [pc, #76]	; (8000890 <MX_FMC_Init+0xbc>)
 8000844:	2200      	movs	r2, #0
 8000846:	63da      	str	r2, [r3, #60]	; 0x3c
  hsram1.Init.WriteFifo = FMC_WRITE_FIFO_DISABLE;
 8000848:	4b11      	ldr	r3, [pc, #68]	; (8000890 <MX_FMC_Init+0xbc>)
 800084a:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800084e:	641a      	str	r2, [r3, #64]	; 0x40
  hsram1.Init.PageSize = FMC_PAGE_SIZE_NONE;
 8000850:	4b0f      	ldr	r3, [pc, #60]	; (8000890 <MX_FMC_Init+0xbc>)
 8000852:	2200      	movs	r2, #0
 8000854:	645a      	str	r2, [r3, #68]	; 0x44
  /* Timing */
  Timing.AddressSetupTime = 10;
 8000856:	230a      	movs	r3, #10
 8000858:	607b      	str	r3, [r7, #4]
  Timing.AddressHoldTime = 15;
 800085a:	230f      	movs	r3, #15
 800085c:	60bb      	str	r3, [r7, #8]
  Timing.DataSetupTime = 10;
 800085e:	230a      	movs	r3, #10
 8000860:	60fb      	str	r3, [r7, #12]
  Timing.BusTurnAroundDuration = 2;
 8000862:	2302      	movs	r3, #2
 8000864:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 8000866:	2310      	movs	r3, #16
 8000868:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 800086a:	2311      	movs	r3, #17
 800086c:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FMC_ACCESS_MODE_A;
 800086e:	2300      	movs	r3, #0
 8000870:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK)
 8000872:	1d3b      	adds	r3, r7, #4
 8000874:	2200      	movs	r2, #0
 8000876:	4619      	mov	r1, r3
 8000878:	4805      	ldr	r0, [pc, #20]	; (8000890 <MX_FMC_Init+0xbc>)
 800087a:	f003 fad1 	bl	8003e20 <HAL_SRAM_Init>
 800087e:	4603      	mov	r3, r0
 8000880:	2b00      	cmp	r3, #0
 8000882:	d001      	beq.n	8000888 <MX_FMC_Init+0xb4>
  {
    Error_Handler( );
 8000884:	f000 f8ca 	bl	8000a1c <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8000888:	bf00      	nop
 800088a:	3720      	adds	r7, #32
 800088c:	46bd      	mov	sp, r7
 800088e:	bd80      	pop	{r7, pc}
 8000890:	20000418 	.word	0x20000418
 8000894:	a0000104 	.word	0xa0000104

08000898 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	b090      	sub	sp, #64	; 0x40
 800089c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800089e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80008a2:	2200      	movs	r2, #0
 80008a4:	601a      	str	r2, [r3, #0]
 80008a6:	605a      	str	r2, [r3, #4]
 80008a8:	609a      	str	r2, [r3, #8]
 80008aa:	60da      	str	r2, [r3, #12]
 80008ac:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80008ae:	2300      	movs	r3, #0
 80008b0:	62bb      	str	r3, [r7, #40]	; 0x28
 80008b2:	4b58      	ldr	r3, [pc, #352]	; (8000a14 <MX_GPIO_Init+0x17c>)
 80008b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008b6:	4a57      	ldr	r2, [pc, #348]	; (8000a14 <MX_GPIO_Init+0x17c>)
 80008b8:	f043 0310 	orr.w	r3, r3, #16
 80008bc:	6313      	str	r3, [r2, #48]	; 0x30
 80008be:	4b55      	ldr	r3, [pc, #340]	; (8000a14 <MX_GPIO_Init+0x17c>)
 80008c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008c2:	f003 0310 	and.w	r3, r3, #16
 80008c6:	62bb      	str	r3, [r7, #40]	; 0x28
 80008c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008ca:	2300      	movs	r3, #0
 80008cc:	627b      	str	r3, [r7, #36]	; 0x24
 80008ce:	4b51      	ldr	r3, [pc, #324]	; (8000a14 <MX_GPIO_Init+0x17c>)
 80008d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008d2:	4a50      	ldr	r2, [pc, #320]	; (8000a14 <MX_GPIO_Init+0x17c>)
 80008d4:	f043 0304 	orr.w	r3, r3, #4
 80008d8:	6313      	str	r3, [r2, #48]	; 0x30
 80008da:	4b4e      	ldr	r3, [pc, #312]	; (8000a14 <MX_GPIO_Init+0x17c>)
 80008dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008de:	f003 0304 	and.w	r3, r3, #4
 80008e2:	627b      	str	r3, [r7, #36]	; 0x24
 80008e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOI_CLK_ENABLE();
 80008e6:	2300      	movs	r3, #0
 80008e8:	623b      	str	r3, [r7, #32]
 80008ea:	4b4a      	ldr	r3, [pc, #296]	; (8000a14 <MX_GPIO_Init+0x17c>)
 80008ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ee:	4a49      	ldr	r2, [pc, #292]	; (8000a14 <MX_GPIO_Init+0x17c>)
 80008f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80008f4:	6313      	str	r3, [r2, #48]	; 0x30
 80008f6:	4b47      	ldr	r3, [pc, #284]	; (8000a14 <MX_GPIO_Init+0x17c>)
 80008f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80008fe:	623b      	str	r3, [r7, #32]
 8000900:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000902:	2300      	movs	r3, #0
 8000904:	61fb      	str	r3, [r7, #28]
 8000906:	4b43      	ldr	r3, [pc, #268]	; (8000a14 <MX_GPIO_Init+0x17c>)
 8000908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800090a:	4a42      	ldr	r2, [pc, #264]	; (8000a14 <MX_GPIO_Init+0x17c>)
 800090c:	f043 0320 	orr.w	r3, r3, #32
 8000910:	6313      	str	r3, [r2, #48]	; 0x30
 8000912:	4b40      	ldr	r3, [pc, #256]	; (8000a14 <MX_GPIO_Init+0x17c>)
 8000914:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000916:	f003 0320 	and.w	r3, r3, #32
 800091a:	61fb      	str	r3, [r7, #28]
 800091c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800091e:	2300      	movs	r3, #0
 8000920:	61bb      	str	r3, [r7, #24]
 8000922:	4b3c      	ldr	r3, [pc, #240]	; (8000a14 <MX_GPIO_Init+0x17c>)
 8000924:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000926:	4a3b      	ldr	r2, [pc, #236]	; (8000a14 <MX_GPIO_Init+0x17c>)
 8000928:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800092c:	6313      	str	r3, [r2, #48]	; 0x30
 800092e:	4b39      	ldr	r3, [pc, #228]	; (8000a14 <MX_GPIO_Init+0x17c>)
 8000930:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000932:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000936:	61bb      	str	r3, [r7, #24]
 8000938:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800093a:	2300      	movs	r3, #0
 800093c:	617b      	str	r3, [r7, #20]
 800093e:	4b35      	ldr	r3, [pc, #212]	; (8000a14 <MX_GPIO_Init+0x17c>)
 8000940:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000942:	4a34      	ldr	r2, [pc, #208]	; (8000a14 <MX_GPIO_Init+0x17c>)
 8000944:	f043 0302 	orr.w	r3, r3, #2
 8000948:	6313      	str	r3, [r2, #48]	; 0x30
 800094a:	4b32      	ldr	r3, [pc, #200]	; (8000a14 <MX_GPIO_Init+0x17c>)
 800094c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800094e:	f003 0302 	and.w	r3, r3, #2
 8000952:	617b      	str	r3, [r7, #20]
 8000954:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8000956:	2300      	movs	r3, #0
 8000958:	613b      	str	r3, [r7, #16]
 800095a:	4b2e      	ldr	r3, [pc, #184]	; (8000a14 <MX_GPIO_Init+0x17c>)
 800095c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800095e:	4a2d      	ldr	r2, [pc, #180]	; (8000a14 <MX_GPIO_Init+0x17c>)
 8000960:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000964:	6313      	str	r3, [r2, #48]	; 0x30
 8000966:	4b2b      	ldr	r3, [pc, #172]	; (8000a14 <MX_GPIO_Init+0x17c>)
 8000968:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800096a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800096e:	613b      	str	r3, [r7, #16]
 8000970:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000972:	2300      	movs	r3, #0
 8000974:	60fb      	str	r3, [r7, #12]
 8000976:	4b27      	ldr	r3, [pc, #156]	; (8000a14 <MX_GPIO_Init+0x17c>)
 8000978:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800097a:	4a26      	ldr	r2, [pc, #152]	; (8000a14 <MX_GPIO_Init+0x17c>)
 800097c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000980:	6313      	str	r3, [r2, #48]	; 0x30
 8000982:	4b24      	ldr	r3, [pc, #144]	; (8000a14 <MX_GPIO_Init+0x17c>)
 8000984:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000986:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800098a:	60fb      	str	r3, [r7, #12]
 800098c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800098e:	2300      	movs	r3, #0
 8000990:	60bb      	str	r3, [r7, #8]
 8000992:	4b20      	ldr	r3, [pc, #128]	; (8000a14 <MX_GPIO_Init+0x17c>)
 8000994:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000996:	4a1f      	ldr	r2, [pc, #124]	; (8000a14 <MX_GPIO_Init+0x17c>)
 8000998:	f043 0308 	orr.w	r3, r3, #8
 800099c:	6313      	str	r3, [r2, #48]	; 0x30
 800099e:	4b1d      	ldr	r3, [pc, #116]	; (8000a14 <MX_GPIO_Init+0x17c>)
 80009a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009a2:	f003 0308 	and.w	r3, r3, #8
 80009a6:	60bb      	str	r3, [r7, #8]
 80009a8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009aa:	2300      	movs	r3, #0
 80009ac:	607b      	str	r3, [r7, #4]
 80009ae:	4b19      	ldr	r3, [pc, #100]	; (8000a14 <MX_GPIO_Init+0x17c>)
 80009b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009b2:	4a18      	ldr	r2, [pc, #96]	; (8000a14 <MX_GPIO_Init+0x17c>)
 80009b4:	f043 0301 	orr.w	r3, r3, #1
 80009b8:	6313      	str	r3, [r2, #48]	; 0x30
 80009ba:	4b16      	ldr	r3, [pc, #88]	; (8000a14 <MX_GPIO_Init+0x17c>)
 80009bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009be:	f003 0301 	and.w	r3, r3, #1
 80009c2:	607b      	str	r3, [r7, #4]
 80009c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 80009c6:	2300      	movs	r3, #0
 80009c8:	603b      	str	r3, [r7, #0]
 80009ca:	4b12      	ldr	r3, [pc, #72]	; (8000a14 <MX_GPIO_Init+0x17c>)
 80009cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ce:	4a11      	ldr	r2, [pc, #68]	; (8000a14 <MX_GPIO_Init+0x17c>)
 80009d0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80009d4:	6313      	str	r3, [r2, #48]	; 0x30
 80009d6:	4b0f      	ldr	r3, [pc, #60]	; (8000a14 <MX_GPIO_Init+0x17c>)
 80009d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009da:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80009de:	603b      	str	r3, [r7, #0]
 80009e0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_SET);
 80009e2:	2201      	movs	r2, #1
 80009e4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80009e8:	480b      	ldr	r0, [pc, #44]	; (8000a18 <MX_GPIO_Init+0x180>)
 80009ea:	f000 fe37 	bl	800165c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 80009ee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80009f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009f4:	2301      	movs	r3, #1
 80009f6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80009f8:	2301      	movs	r3, #1
 80009fa:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009fc:	2300      	movs	r3, #0
 80009fe:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a00:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000a04:	4619      	mov	r1, r3
 8000a06:	4804      	ldr	r0, [pc, #16]	; (8000a18 <MX_GPIO_Init+0x180>)
 8000a08:	f000 fc7c 	bl	8001304 <HAL_GPIO_Init>

}
 8000a0c:	bf00      	nop
 8000a0e:	3740      	adds	r7, #64	; 0x40
 8000a10:	46bd      	mov	sp, r7
 8000a12:	bd80      	pop	{r7, pc}
 8000a14:	40023800 	.word	0x40023800
 8000a18:	40020400 	.word	0x40020400

08000a1c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a1c:	b480      	push	{r7}
 8000a1e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a20:	b672      	cpsid	i
}
 8000a22:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a24:	e7fe      	b.n	8000a24 <Error_Handler+0x8>
	...

08000a28 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a28:	b480      	push	{r7}
 8000a2a:	b083      	sub	sp, #12
 8000a2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a2e:	2300      	movs	r3, #0
 8000a30:	607b      	str	r3, [r7, #4]
 8000a32:	4b10      	ldr	r3, [pc, #64]	; (8000a74 <HAL_MspInit+0x4c>)
 8000a34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a36:	4a0f      	ldr	r2, [pc, #60]	; (8000a74 <HAL_MspInit+0x4c>)
 8000a38:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a3c:	6453      	str	r3, [r2, #68]	; 0x44
 8000a3e:	4b0d      	ldr	r3, [pc, #52]	; (8000a74 <HAL_MspInit+0x4c>)
 8000a40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a42:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a46:	607b      	str	r3, [r7, #4]
 8000a48:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	603b      	str	r3, [r7, #0]
 8000a4e:	4b09      	ldr	r3, [pc, #36]	; (8000a74 <HAL_MspInit+0x4c>)
 8000a50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a52:	4a08      	ldr	r2, [pc, #32]	; (8000a74 <HAL_MspInit+0x4c>)
 8000a54:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a58:	6413      	str	r3, [r2, #64]	; 0x40
 8000a5a:	4b06      	ldr	r3, [pc, #24]	; (8000a74 <HAL_MspInit+0x4c>)
 8000a5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a62:	603b      	str	r3, [r7, #0]
 8000a64:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a66:	bf00      	nop
 8000a68:	370c      	adds	r7, #12
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a70:	4770      	bx	lr
 8000a72:	bf00      	nop
 8000a74:	40023800 	.word	0x40023800

08000a78 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b09e      	sub	sp, #120	; 0x78
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a80:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000a84:	2200      	movs	r2, #0
 8000a86:	601a      	str	r2, [r3, #0]
 8000a88:	605a      	str	r2, [r3, #4]
 8000a8a:	609a      	str	r2, [r3, #8]
 8000a8c:	60da      	str	r2, [r3, #12]
 8000a8e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000a90:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000a94:	223c      	movs	r2, #60	; 0x3c
 8000a96:	2100      	movs	r1, #0
 8000a98:	4618      	mov	r0, r3
 8000a9a:	f007 fbab 	bl	80081f4 <memset>
  if(hltdc->Instance==LTDC)
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	681b      	ldr	r3, [r3, #0]
 8000aa2:	4a8d      	ldr	r2, [pc, #564]	; (8000cd8 <HAL_LTDC_MspInit+0x260>)
 8000aa4:	4293      	cmp	r3, r2
 8000aa6:	f040 8112 	bne.w	8000cce <HAL_LTDC_MspInit+0x256>
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8000aaa:	2308      	movs	r3, #8
 8000aac:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 8000aae:	23c0      	movs	r3, #192	; 0xc0
 8000ab0:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 8000ab2:	2302      	movs	r3, #2
 8000ab4:	647b      	str	r3, [r7, #68]	; 0x44
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000aba:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000abe:	4618      	mov	r0, r3
 8000ac0:	f002 fcec 	bl	800349c <HAL_RCCEx_PeriphCLKConfig>
 8000ac4:	4603      	mov	r3, r0
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	d001      	beq.n	8000ace <HAL_LTDC_MspInit+0x56>
    {
      Error_Handler();
 8000aca:	f7ff ffa7 	bl	8000a1c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8000ace:	2300      	movs	r3, #0
 8000ad0:	627b      	str	r3, [r7, #36]	; 0x24
 8000ad2:	4b82      	ldr	r3, [pc, #520]	; (8000cdc <HAL_LTDC_MspInit+0x264>)
 8000ad4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ad6:	4a81      	ldr	r2, [pc, #516]	; (8000cdc <HAL_LTDC_MspInit+0x264>)
 8000ad8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000adc:	6453      	str	r3, [r2, #68]	; 0x44
 8000ade:	4b7f      	ldr	r3, [pc, #508]	; (8000cdc <HAL_LTDC_MspInit+0x264>)
 8000ae0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ae2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000ae6:	627b      	str	r3, [r7, #36]	; 0x24
 8000ae8:	6a7b      	ldr	r3, [r7, #36]	; 0x24

    __HAL_RCC_GPIOI_CLK_ENABLE();
 8000aea:	2300      	movs	r3, #0
 8000aec:	623b      	str	r3, [r7, #32]
 8000aee:	4b7b      	ldr	r3, [pc, #492]	; (8000cdc <HAL_LTDC_MspInit+0x264>)
 8000af0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000af2:	4a7a      	ldr	r2, [pc, #488]	; (8000cdc <HAL_LTDC_MspInit+0x264>)
 8000af4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000af8:	6313      	str	r3, [r2, #48]	; 0x30
 8000afa:	4b78      	ldr	r3, [pc, #480]	; (8000cdc <HAL_LTDC_MspInit+0x264>)
 8000afc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000afe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000b02:	623b      	str	r3, [r7, #32]
 8000b04:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b06:	2300      	movs	r3, #0
 8000b08:	61fb      	str	r3, [r7, #28]
 8000b0a:	4b74      	ldr	r3, [pc, #464]	; (8000cdc <HAL_LTDC_MspInit+0x264>)
 8000b0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b0e:	4a73      	ldr	r2, [pc, #460]	; (8000cdc <HAL_LTDC_MspInit+0x264>)
 8000b10:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b14:	6313      	str	r3, [r2, #48]	; 0x30
 8000b16:	4b71      	ldr	r3, [pc, #452]	; (8000cdc <HAL_LTDC_MspInit+0x264>)
 8000b18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b1e:	61fb      	str	r3, [r7, #28]
 8000b20:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b22:	2300      	movs	r3, #0
 8000b24:	61bb      	str	r3, [r7, #24]
 8000b26:	4b6d      	ldr	r3, [pc, #436]	; (8000cdc <HAL_LTDC_MspInit+0x264>)
 8000b28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b2a:	4a6c      	ldr	r2, [pc, #432]	; (8000cdc <HAL_LTDC_MspInit+0x264>)
 8000b2c:	f043 0302 	orr.w	r3, r3, #2
 8000b30:	6313      	str	r3, [r2, #48]	; 0x30
 8000b32:	4b6a      	ldr	r3, [pc, #424]	; (8000cdc <HAL_LTDC_MspInit+0x264>)
 8000b34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b36:	f003 0302 	and.w	r3, r3, #2
 8000b3a:	61bb      	str	r3, [r7, #24]
 8000b3c:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8000b3e:	2300      	movs	r3, #0
 8000b40:	617b      	str	r3, [r7, #20]
 8000b42:	4b66      	ldr	r3, [pc, #408]	; (8000cdc <HAL_LTDC_MspInit+0x264>)
 8000b44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b46:	4a65      	ldr	r2, [pc, #404]	; (8000cdc <HAL_LTDC_MspInit+0x264>)
 8000b48:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000b4c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b4e:	4b63      	ldr	r3, [pc, #396]	; (8000cdc <HAL_LTDC_MspInit+0x264>)
 8000b50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b52:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000b56:	617b      	str	r3, [r7, #20]
 8000b58:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	613b      	str	r3, [r7, #16]
 8000b5e:	4b5f      	ldr	r3, [pc, #380]	; (8000cdc <HAL_LTDC_MspInit+0x264>)
 8000b60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b62:	4a5e      	ldr	r2, [pc, #376]	; (8000cdc <HAL_LTDC_MspInit+0x264>)
 8000b64:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000b68:	6313      	str	r3, [r2, #48]	; 0x30
 8000b6a:	4b5c      	ldr	r3, [pc, #368]	; (8000cdc <HAL_LTDC_MspInit+0x264>)
 8000b6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000b72:	613b      	str	r3, [r7, #16]
 8000b74:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOK_CLK_ENABLE();
 8000b76:	2300      	movs	r3, #0
 8000b78:	60fb      	str	r3, [r7, #12]
 8000b7a:	4b58      	ldr	r3, [pc, #352]	; (8000cdc <HAL_LTDC_MspInit+0x264>)
 8000b7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b7e:	4a57      	ldr	r2, [pc, #348]	; (8000cdc <HAL_LTDC_MspInit+0x264>)
 8000b80:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000b84:	6313      	str	r3, [r2, #48]	; 0x30
 8000b86:	4b55      	ldr	r3, [pc, #340]	; (8000cdc <HAL_LTDC_MspInit+0x264>)
 8000b88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b8a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000b8e:	60fb      	str	r3, [r7, #12]
 8000b90:	68fb      	ldr	r3, [r7, #12]
    PK5     ------> LTDC_B6
    PK6     ------> LTDC_B7
    PK7     ------> LTDC_DE
    PB5     ------> LTDC_G7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_15;
 8000b92:	f44f 4308 	mov.w	r3, #34816	; 0x8800
 8000b96:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b98:	2302      	movs	r3, #2
 8000b9a:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ba0:	2303      	movs	r3, #3
 8000ba2:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8000ba4:	2309      	movs	r3, #9
 8000ba6:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000ba8:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000bac:	4619      	mov	r1, r3
 8000bae:	484c      	ldr	r0, [pc, #304]	; (8000ce0 <HAL_LTDC_MspInit+0x268>)
 8000bb0:	f000 fba8 	bl	8001304 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14;
 8000bb4:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 8000bb8:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bba:	2302      	movs	r3, #2
 8000bbc:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bc2:	2303      	movs	r3, #3
 8000bc4:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000bc6:	230e      	movs	r3, #14
 8000bc8:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000bca:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000bce:	4619      	mov	r1, r3
 8000bd0:	4843      	ldr	r0, [pc, #268]	; (8000ce0 <HAL_LTDC_MspInit+0x268>)
 8000bd2:	f000 fb97 	bl	8001304 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000bd6:	2310      	movs	r3, #16
 8000bd8:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bda:	2302      	movs	r3, #2
 8000bdc:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bde:	2300      	movs	r3, #0
 8000be0:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000be2:	2303      	movs	r3, #3
 8000be4:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8000be6:	2309      	movs	r3, #9
 8000be8:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000bea:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000bee:	4619      	mov	r1, r3
 8000bf0:	483c      	ldr	r0, [pc, #240]	; (8000ce4 <HAL_LTDC_MspInit+0x26c>)
 8000bf2:	f000 fb87 	bl	8001304 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_5;
 8000bf6:	2323      	movs	r3, #35	; 0x23
 8000bf8:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bfa:	2302      	movs	r3, #2
 8000bfc:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bfe:	2300      	movs	r3, #0
 8000c00:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c02:	2303      	movs	r3, #3
 8000c04:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000c06:	230e      	movs	r3, #14
 8000c08:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c0a:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000c0e:	4619      	mov	r1, r3
 8000c10:	4835      	ldr	r0, [pc, #212]	; (8000ce8 <HAL_LTDC_MspInit+0x270>)
 8000c12:	f000 fb77 	bl	8001304 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000c16:	f24d 033f 	movw	r3, #53311	; 0xd03f
 8000c1a:	667b      	str	r3, [r7, #100]	; 0x64
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_12|GPIO_PIN_14
                          |GPIO_PIN_15;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c1c:	2302      	movs	r3, #2
 8000c1e:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c20:	2300      	movs	r3, #0
 8000c22:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c24:	2303      	movs	r3, #3
 8000c26:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000c28:	230e      	movs	r3, #14
 8000c2a:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8000c2c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000c30:	4619      	mov	r1, r3
 8000c32:	482e      	ldr	r0, [pc, #184]	; (8000cec <HAL_LTDC_MspInit+0x274>)
 8000c34:	f000 fb66 	bl	8001304 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_12|GPIO_PIN_13;
 8000c38:	f44f 5341 	mov.w	r3, #12352	; 0x3040
 8000c3c:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c3e:	2302      	movs	r3, #2
 8000c40:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c42:	2300      	movs	r3, #0
 8000c44:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c46:	2303      	movs	r3, #3
 8000c48:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000c4a:	230e      	movs	r3, #14
 8000c4c:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000c4e:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000c52:	4619      	mov	r1, r3
 8000c54:	4826      	ldr	r0, [pc, #152]	; (8000cf0 <HAL_LTDC_MspInit+0x278>)
 8000c56:	f000 fb55 	bl	8001304 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000c5a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c5e:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c60:	2302      	movs	r3, #2
 8000c62:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c64:	2300      	movs	r3, #0
 8000c66:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c68:	2303      	movs	r3, #3
 8000c6a:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8000c6c:	2309      	movs	r3, #9
 8000c6e:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8000c70:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000c74:	4619      	mov	r1, r3
 8000c76:	481d      	ldr	r0, [pc, #116]	; (8000cec <HAL_LTDC_MspInit+0x274>)
 8000c78:	f000 fb44 	bl	8001304 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000c7c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c80:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c82:	2302      	movs	r3, #2
 8000c84:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c86:	2300      	movs	r3, #0
 8000c88:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c8a:	2303      	movs	r3, #3
 8000c8c:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8000c8e:	2309      	movs	r3, #9
 8000c90:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000c92:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000c96:	4619      	mov	r1, r3
 8000c98:	4815      	ldr	r0, [pc, #84]	; (8000cf0 <HAL_LTDC_MspInit+0x278>)
 8000c9a:	f000 fb33 	bl	8001304 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
 8000c9e:	23f8      	movs	r3, #248	; 0xf8
 8000ca0:	667b      	str	r3, [r7, #100]	; 0x64
                          |GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ca2:	2302      	movs	r3, #2
 8000ca4:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000caa:	2303      	movs	r3, #3
 8000cac:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000cae:	230e      	movs	r3, #14
 8000cb0:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8000cb2:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000cb6:	4619      	mov	r1, r3
 8000cb8:	480e      	ldr	r0, [pc, #56]	; (8000cf4 <HAL_LTDC_MspInit+0x27c>)
 8000cba:	f000 fb23 	bl	8001304 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 0, 0);
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	2100      	movs	r1, #0
 8000cc2:	2058      	movs	r0, #88	; 0x58
 8000cc4:	f000 fae7 	bl	8001296 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8000cc8:	2058      	movs	r0, #88	; 0x58
 8000cca:	f000 fb00 	bl	80012ce <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 8000cce:	bf00      	nop
 8000cd0:	3778      	adds	r7, #120	; 0x78
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	bd80      	pop	{r7, pc}
 8000cd6:	bf00      	nop
 8000cd8:	40016800 	.word	0x40016800
 8000cdc:	40023800 	.word	0x40023800
 8000ce0:	40022000 	.word	0x40022000
 8000ce4:	40021c00 	.word	0x40021c00
 8000ce8:	40020400 	.word	0x40020400
 8000cec:	40022400 	.word	0x40022400
 8000cf0:	40021800 	.word	0x40021800
 8000cf4:	40022800 	.word	0x40022800

08000cf8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b08a      	sub	sp, #40	; 0x28
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d00:	f107 0314 	add.w	r3, r7, #20
 8000d04:	2200      	movs	r2, #0
 8000d06:	601a      	str	r2, [r3, #0]
 8000d08:	605a      	str	r2, [r3, #4]
 8000d0a:	609a      	str	r2, [r3, #8]
 8000d0c:	60da      	str	r2, [r3, #12]
 8000d0e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	4a29      	ldr	r2, [pc, #164]	; (8000dbc <HAL_UART_MspInit+0xc4>)
 8000d16:	4293      	cmp	r3, r2
 8000d18:	d14b      	bne.n	8000db2 <HAL_UART_MspInit+0xba>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	613b      	str	r3, [r7, #16]
 8000d1e:	4b28      	ldr	r3, [pc, #160]	; (8000dc0 <HAL_UART_MspInit+0xc8>)
 8000d20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d22:	4a27      	ldr	r2, [pc, #156]	; (8000dc0 <HAL_UART_MspInit+0xc8>)
 8000d24:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000d28:	6413      	str	r3, [r2, #64]	; 0x40
 8000d2a:	4b25      	ldr	r3, [pc, #148]	; (8000dc0 <HAL_UART_MspInit+0xc8>)
 8000d2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d2e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000d32:	613b      	str	r3, [r7, #16]
 8000d34:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d36:	2300      	movs	r3, #0
 8000d38:	60fb      	str	r3, [r7, #12]
 8000d3a:	4b21      	ldr	r3, [pc, #132]	; (8000dc0 <HAL_UART_MspInit+0xc8>)
 8000d3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d3e:	4a20      	ldr	r2, [pc, #128]	; (8000dc0 <HAL_UART_MspInit+0xc8>)
 8000d40:	f043 0302 	orr.w	r3, r3, #2
 8000d44:	6313      	str	r3, [r2, #48]	; 0x30
 8000d46:	4b1e      	ldr	r3, [pc, #120]	; (8000dc0 <HAL_UART_MspInit+0xc8>)
 8000d48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d4a:	f003 0302 	and.w	r3, r3, #2
 8000d4e:	60fb      	str	r3, [r7, #12]
 8000d50:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d52:	2300      	movs	r3, #0
 8000d54:	60bb      	str	r3, [r7, #8]
 8000d56:	4b1a      	ldr	r3, [pc, #104]	; (8000dc0 <HAL_UART_MspInit+0xc8>)
 8000d58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d5a:	4a19      	ldr	r2, [pc, #100]	; (8000dc0 <HAL_UART_MspInit+0xc8>)
 8000d5c:	f043 0304 	orr.w	r3, r3, #4
 8000d60:	6313      	str	r3, [r2, #48]	; 0x30
 8000d62:	4b17      	ldr	r3, [pc, #92]	; (8000dc0 <HAL_UART_MspInit+0xc8>)
 8000d64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d66:	f003 0304 	and.w	r3, r3, #4
 8000d6a:	60bb      	str	r3, [r7, #8]
 8000d6c:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PB11     ------> USART3_RX
    PC10     ------> USART3_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000d6e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000d72:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d74:	2302      	movs	r3, #2
 8000d76:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d78:	2300      	movs	r3, #0
 8000d7a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d7c:	2303      	movs	r3, #3
 8000d7e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000d80:	2307      	movs	r3, #7
 8000d82:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d84:	f107 0314 	add.w	r3, r7, #20
 8000d88:	4619      	mov	r1, r3
 8000d8a:	480e      	ldr	r0, [pc, #56]	; (8000dc4 <HAL_UART_MspInit+0xcc>)
 8000d8c:	f000 faba 	bl	8001304 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000d90:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d94:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d96:	2302      	movs	r3, #2
 8000d98:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d9e:	2303      	movs	r3, #3
 8000da0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000da2:	2307      	movs	r3, #7
 8000da4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000da6:	f107 0314 	add.w	r3, r7, #20
 8000daa:	4619      	mov	r1, r3
 8000dac:	4806      	ldr	r0, [pc, #24]	; (8000dc8 <HAL_UART_MspInit+0xd0>)
 8000dae:	f000 faa9 	bl	8001304 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000db2:	bf00      	nop
 8000db4:	3728      	adds	r7, #40	; 0x28
 8000db6:	46bd      	mov	sp, r7
 8000db8:	bd80      	pop	{r7, pc}
 8000dba:	bf00      	nop
 8000dbc:	40004800 	.word	0x40004800
 8000dc0:	40023800 	.word	0x40023800
 8000dc4:	40020400 	.word	0x40020400
 8000dc8:	40020800 	.word	0x40020800

08000dcc <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b086      	sub	sp, #24
 8000dd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8000dd2:	1d3b      	adds	r3, r7, #4
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	601a      	str	r2, [r3, #0]
 8000dd8:	605a      	str	r2, [r3, #4]
 8000dda:	609a      	str	r2, [r3, #8]
 8000ddc:	60da      	str	r2, [r3, #12]
 8000dde:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8000de0:	4b2c      	ldr	r3, [pc, #176]	; (8000e94 <HAL_FMC_MspInit+0xc8>)
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d151      	bne.n	8000e8c <HAL_FMC_MspInit+0xc0>
    return;
  }
  FMC_Initialized = 1;
 8000de8:	4b2a      	ldr	r3, [pc, #168]	; (8000e94 <HAL_FMC_MspInit+0xc8>)
 8000dea:	2201      	movs	r2, #1
 8000dec:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8000dee:	2300      	movs	r3, #0
 8000df0:	603b      	str	r3, [r7, #0]
 8000df2:	4b29      	ldr	r3, [pc, #164]	; (8000e98 <HAL_FMC_MspInit+0xcc>)
 8000df4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000df6:	4a28      	ldr	r2, [pc, #160]	; (8000e98 <HAL_FMC_MspInit+0xcc>)
 8000df8:	f043 0301 	orr.w	r3, r3, #1
 8000dfc:	6393      	str	r3, [r2, #56]	; 0x38
 8000dfe:	4b26      	ldr	r3, [pc, #152]	; (8000e98 <HAL_FMC_MspInit+0xcc>)
 8000e00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000e02:	f003 0301 	and.w	r3, r3, #1
 8000e06:	603b      	str	r3, [r7, #0]
 8000e08:	683b      	ldr	r3, [r7, #0]
  PD5   ------> FMC_NWE
  PG9   ------> FMC_NE2
  PE0   ------> FMC_NBL0
  PE1   ------> FMC_NBL1
  */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_7|GPIO_PIN_8
 8000e0a:	f64f 739b 	movw	r3, #65435	; 0xff9b
 8000e0e:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0
                          |GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e10:	2302      	movs	r3, #2
 8000e12:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e14:	2301      	movs	r3, #1
 8000e16:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e18:	2303      	movs	r3, #3
 8000e1a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000e1c:	230c      	movs	r3, #12
 8000e1e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000e20:	1d3b      	adds	r3, r7, #4
 8000e22:	4619      	mov	r1, r3
 8000e24:	481d      	ldr	r0, [pc, #116]	; (8000e9c <HAL_FMC_MspInit+0xd0>)
 8000e26:	f000 fa6d 	bl	8001304 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000e2a:	f24f 033f 	movw	r3, #61503	; 0xf03f
 8000e2e:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_12|GPIO_PIN_13
                          |GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e30:	2302      	movs	r3, #2
 8000e32:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e34:	2301      	movs	r3, #1
 8000e36:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e38:	2303      	movs	r3, #3
 8000e3a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000e3c:	230c      	movs	r3, #12
 8000e3e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000e40:	1d3b      	adds	r3, r7, #4
 8000e42:	4619      	mov	r1, r3
 8000e44:	4816      	ldr	r0, [pc, #88]	; (8000ea0 <HAL_FMC_MspInit+0xd4>)
 8000e46:	f000 fa5d 	bl	8001304 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000e4a:	f240 233f 	movw	r3, #575	; 0x23f
 8000e4e:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e50:	2302      	movs	r3, #2
 8000e52:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e54:	2301      	movs	r3, #1
 8000e56:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e58:	2303      	movs	r3, #3
 8000e5a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000e5c:	230c      	movs	r3, #12
 8000e5e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000e60:	1d3b      	adds	r3, r7, #4
 8000e62:	4619      	mov	r1, r3
 8000e64:	480f      	ldr	r0, [pc, #60]	; (8000ea4 <HAL_FMC_MspInit+0xd8>)
 8000e66:	f000 fa4d 	bl	8001304 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8000e6a:	f64f 7333 	movw	r3, #65331	; 0xff33
 8000e6e:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
                          |GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e70:	2302      	movs	r3, #2
 8000e72:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e74:	2301      	movs	r3, #1
 8000e76:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e78:	2303      	movs	r3, #3
 8000e7a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000e7c:	230c      	movs	r3, #12
 8000e7e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e80:	1d3b      	adds	r3, r7, #4
 8000e82:	4619      	mov	r1, r3
 8000e84:	4808      	ldr	r0, [pc, #32]	; (8000ea8 <HAL_FMC_MspInit+0xdc>)
 8000e86:	f000 fa3d 	bl	8001304 <HAL_GPIO_Init>
 8000e8a:	e000      	b.n	8000e8e <HAL_FMC_MspInit+0xc2>
    return;
 8000e8c:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8000e8e:	3718      	adds	r7, #24
 8000e90:	46bd      	mov	sp, r7
 8000e92:	bd80      	pop	{r7, pc}
 8000e94:	200001ac 	.word	0x200001ac
 8000e98:	40023800 	.word	0x40023800
 8000e9c:	40021000 	.word	0x40021000
 8000ea0:	40021400 	.word	0x40021400
 8000ea4:	40021800 	.word	0x40021800
 8000ea8:	40020c00 	.word	0x40020c00

08000eac <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* hsram){
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b082      	sub	sp, #8
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8000eb4:	f7ff ff8a 	bl	8000dcc <HAL_FMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 8000eb8:	bf00      	nop
 8000eba:	3708      	adds	r7, #8
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	bd80      	pop	{r7, pc}

08000ec0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ec0:	b480      	push	{r7}
 8000ec2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ec4:	e7fe      	b.n	8000ec4 <NMI_Handler+0x4>

08000ec6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ec6:	b480      	push	{r7}
 8000ec8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000eca:	e7fe      	b.n	8000eca <HardFault_Handler+0x4>

08000ecc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ecc:	b480      	push	{r7}
 8000ece:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ed0:	e7fe      	b.n	8000ed0 <MemManage_Handler+0x4>

08000ed2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ed2:	b480      	push	{r7}
 8000ed4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ed6:	e7fe      	b.n	8000ed6 <BusFault_Handler+0x4>

08000ed8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ed8:	b480      	push	{r7}
 8000eda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000edc:	e7fe      	b.n	8000edc <UsageFault_Handler+0x4>

08000ede <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ede:	b480      	push	{r7}
 8000ee0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ee2:	bf00      	nop
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eea:	4770      	bx	lr

08000eec <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000eec:	b480      	push	{r7}
 8000eee:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ef0:	bf00      	nop
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef8:	4770      	bx	lr

08000efa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000efa:	b480      	push	{r7}
 8000efc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000efe:	bf00      	nop
 8000f00:	46bd      	mov	sp, r7
 8000f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f06:	4770      	bx	lr

08000f08 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f0c:	f000 f8a4 	bl	8001058 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f10:	bf00      	nop
 8000f12:	bd80      	pop	{r7, pc}

08000f14 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000f18:	4802      	ldr	r0, [pc, #8]	; (8000f24 <OTG_FS_IRQHandler+0x10>)
 8000f1a:	f001 f877 	bl	800200c <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000f1e:	bf00      	nop
 8000f20:	bd80      	pop	{r7, pc}
 8000f22:	bf00      	nop
 8000f24:	200019e4 	.word	0x200019e4

08000f28 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8000f2c:	4802      	ldr	r0, [pc, #8]	; (8000f38 <LTDC_IRQHandler+0x10>)
 8000f2e:	f000 fc7f 	bl	8001830 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 8000f32:	bf00      	nop
 8000f34:	bd80      	pop	{r7, pc}
 8000f36:	bf00      	nop
 8000f38:	20000468 	.word	0x20000468

08000f3c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f3c:	b480      	push	{r7}
 8000f3e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f40:	4b06      	ldr	r3, [pc, #24]	; (8000f5c <SystemInit+0x20>)
 8000f42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f46:	4a05      	ldr	r2, [pc, #20]	; (8000f5c <SystemInit+0x20>)
 8000f48:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f4c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f50:	bf00      	nop
 8000f52:	46bd      	mov	sp, r7
 8000f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f58:	4770      	bx	lr
 8000f5a:	bf00      	nop
 8000f5c:	e000ed00 	.word	0xe000ed00

08000f60 <Reset_Handler>:
 8000f60:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f98 <LoopFillZerobss+0x12>
 8000f64:	480d      	ldr	r0, [pc, #52]	; (8000f9c <LoopFillZerobss+0x16>)
 8000f66:	490e      	ldr	r1, [pc, #56]	; (8000fa0 <LoopFillZerobss+0x1a>)
 8000f68:	4a0e      	ldr	r2, [pc, #56]	; (8000fa4 <LoopFillZerobss+0x1e>)
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	e002      	b.n	8000f74 <LoopCopyDataInit>

08000f6e <CopyDataInit>:
 8000f6e:	58d4      	ldr	r4, [r2, r3]
 8000f70:	50c4      	str	r4, [r0, r3]
 8000f72:	3304      	adds	r3, #4

08000f74 <LoopCopyDataInit>:
 8000f74:	18c4      	adds	r4, r0, r3
 8000f76:	428c      	cmp	r4, r1
 8000f78:	d3f9      	bcc.n	8000f6e <CopyDataInit>
 8000f7a:	4a0b      	ldr	r2, [pc, #44]	; (8000fa8 <LoopFillZerobss+0x22>)
 8000f7c:	4c0b      	ldr	r4, [pc, #44]	; (8000fac <LoopFillZerobss+0x26>)
 8000f7e:	2300      	movs	r3, #0
 8000f80:	e001      	b.n	8000f86 <LoopFillZerobss>

08000f82 <FillZerobss>:
 8000f82:	6013      	str	r3, [r2, #0]
 8000f84:	3204      	adds	r2, #4

08000f86 <LoopFillZerobss>:
 8000f86:	42a2      	cmp	r2, r4
 8000f88:	d3fb      	bcc.n	8000f82 <FillZerobss>
 8000f8a:	f7ff ffd7 	bl	8000f3c <SystemInit>
 8000f8e:	f007 f90d 	bl	80081ac <__libc_init_array>
 8000f92:	f7ff faab 	bl	80004ec <main>
 8000f96:	4770      	bx	lr
 8000f98:	20050000 	.word	0x20050000
 8000f9c:	20000000 	.word	0x20000000
 8000fa0:	20000190 	.word	0x20000190
 8000fa4:	08008294 	.word	0x08008294
 8000fa8:	20000190 	.word	0x20000190
 8000fac:	20001dec 	.word	0x20001dec

08000fb0 <ADC_IRQHandler>:
 8000fb0:	e7fe      	b.n	8000fb0 <ADC_IRQHandler>
	...

08000fb4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000fb8:	4b0e      	ldr	r3, [pc, #56]	; (8000ff4 <HAL_Init+0x40>)
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	4a0d      	ldr	r2, [pc, #52]	; (8000ff4 <HAL_Init+0x40>)
 8000fbe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000fc2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000fc4:	4b0b      	ldr	r3, [pc, #44]	; (8000ff4 <HAL_Init+0x40>)
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	4a0a      	ldr	r2, [pc, #40]	; (8000ff4 <HAL_Init+0x40>)
 8000fca:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000fce:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000fd0:	4b08      	ldr	r3, [pc, #32]	; (8000ff4 <HAL_Init+0x40>)
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	4a07      	ldr	r2, [pc, #28]	; (8000ff4 <HAL_Init+0x40>)
 8000fd6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000fda:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fdc:	2003      	movs	r0, #3
 8000fde:	f000 f94f 	bl	8001280 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000fe2:	2000      	movs	r0, #0
 8000fe4:	f000 f808 	bl	8000ff8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000fe8:	f7ff fd1e 	bl	8000a28 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000fec:	2300      	movs	r3, #0
}
 8000fee:	4618      	mov	r0, r3
 8000ff0:	bd80      	pop	{r7, pc}
 8000ff2:	bf00      	nop
 8000ff4:	40023c00 	.word	0x40023c00

08000ff8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b082      	sub	sp, #8
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001000:	4b12      	ldr	r3, [pc, #72]	; (800104c <HAL_InitTick+0x54>)
 8001002:	681a      	ldr	r2, [r3, #0]
 8001004:	4b12      	ldr	r3, [pc, #72]	; (8001050 <HAL_InitTick+0x58>)
 8001006:	781b      	ldrb	r3, [r3, #0]
 8001008:	4619      	mov	r1, r3
 800100a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800100e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001012:	fbb2 f3f3 	udiv	r3, r2, r3
 8001016:	4618      	mov	r0, r3
 8001018:	f000 f967 	bl	80012ea <HAL_SYSTICK_Config>
 800101c:	4603      	mov	r3, r0
 800101e:	2b00      	cmp	r3, #0
 8001020:	d001      	beq.n	8001026 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001022:	2301      	movs	r3, #1
 8001024:	e00e      	b.n	8001044 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	2b0f      	cmp	r3, #15
 800102a:	d80a      	bhi.n	8001042 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800102c:	2200      	movs	r2, #0
 800102e:	6879      	ldr	r1, [r7, #4]
 8001030:	f04f 30ff 	mov.w	r0, #4294967295
 8001034:	f000 f92f 	bl	8001296 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001038:	4a06      	ldr	r2, [pc, #24]	; (8001054 <HAL_InitTick+0x5c>)
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800103e:	2300      	movs	r3, #0
 8001040:	e000      	b.n	8001044 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001042:	2301      	movs	r3, #1
}
 8001044:	4618      	mov	r0, r3
 8001046:	3708      	adds	r7, #8
 8001048:	46bd      	mov	sp, r7
 800104a:	bd80      	pop	{r7, pc}
 800104c:	20000000 	.word	0x20000000
 8001050:	20000008 	.word	0x20000008
 8001054:	20000004 	.word	0x20000004

08001058 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001058:	b480      	push	{r7}
 800105a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800105c:	4b06      	ldr	r3, [pc, #24]	; (8001078 <HAL_IncTick+0x20>)
 800105e:	781b      	ldrb	r3, [r3, #0]
 8001060:	461a      	mov	r2, r3
 8001062:	4b06      	ldr	r3, [pc, #24]	; (800107c <HAL_IncTick+0x24>)
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	4413      	add	r3, r2
 8001068:	4a04      	ldr	r2, [pc, #16]	; (800107c <HAL_IncTick+0x24>)
 800106a:	6013      	str	r3, [r2, #0]
}
 800106c:	bf00      	nop
 800106e:	46bd      	mov	sp, r7
 8001070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001074:	4770      	bx	lr
 8001076:	bf00      	nop
 8001078:	20000008 	.word	0x20000008
 800107c:	20000510 	.word	0x20000510

08001080 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001080:	b480      	push	{r7}
 8001082:	af00      	add	r7, sp, #0
  return uwTick;
 8001084:	4b03      	ldr	r3, [pc, #12]	; (8001094 <HAL_GetTick+0x14>)
 8001086:	681b      	ldr	r3, [r3, #0]
}
 8001088:	4618      	mov	r0, r3
 800108a:	46bd      	mov	sp, r7
 800108c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001090:	4770      	bx	lr
 8001092:	bf00      	nop
 8001094:	20000510 	.word	0x20000510

08001098 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b084      	sub	sp, #16
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80010a0:	f7ff ffee 	bl	8001080 <HAL_GetTick>
 80010a4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80010aa:	68fb      	ldr	r3, [r7, #12]
 80010ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80010b0:	d005      	beq.n	80010be <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80010b2:	4b0a      	ldr	r3, [pc, #40]	; (80010dc <HAL_Delay+0x44>)
 80010b4:	781b      	ldrb	r3, [r3, #0]
 80010b6:	461a      	mov	r2, r3
 80010b8:	68fb      	ldr	r3, [r7, #12]
 80010ba:	4413      	add	r3, r2
 80010bc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80010be:	bf00      	nop
 80010c0:	f7ff ffde 	bl	8001080 <HAL_GetTick>
 80010c4:	4602      	mov	r2, r0
 80010c6:	68bb      	ldr	r3, [r7, #8]
 80010c8:	1ad3      	subs	r3, r2, r3
 80010ca:	68fa      	ldr	r2, [r7, #12]
 80010cc:	429a      	cmp	r2, r3
 80010ce:	d8f7      	bhi.n	80010c0 <HAL_Delay+0x28>
  {
  }
}
 80010d0:	bf00      	nop
 80010d2:	bf00      	nop
 80010d4:	3710      	adds	r7, #16
 80010d6:	46bd      	mov	sp, r7
 80010d8:	bd80      	pop	{r7, pc}
 80010da:	bf00      	nop
 80010dc:	20000008 	.word	0x20000008

080010e0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010e0:	b480      	push	{r7}
 80010e2:	b085      	sub	sp, #20
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	f003 0307 	and.w	r3, r3, #7
 80010ee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010f0:	4b0c      	ldr	r3, [pc, #48]	; (8001124 <__NVIC_SetPriorityGrouping+0x44>)
 80010f2:	68db      	ldr	r3, [r3, #12]
 80010f4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010f6:	68ba      	ldr	r2, [r7, #8]
 80010f8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80010fc:	4013      	ands	r3, r2
 80010fe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001100:	68fb      	ldr	r3, [r7, #12]
 8001102:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001104:	68bb      	ldr	r3, [r7, #8]
 8001106:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001108:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800110c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001110:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001112:	4a04      	ldr	r2, [pc, #16]	; (8001124 <__NVIC_SetPriorityGrouping+0x44>)
 8001114:	68bb      	ldr	r3, [r7, #8]
 8001116:	60d3      	str	r3, [r2, #12]
}
 8001118:	bf00      	nop
 800111a:	3714      	adds	r7, #20
 800111c:	46bd      	mov	sp, r7
 800111e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001122:	4770      	bx	lr
 8001124:	e000ed00 	.word	0xe000ed00

08001128 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001128:	b480      	push	{r7}
 800112a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800112c:	4b04      	ldr	r3, [pc, #16]	; (8001140 <__NVIC_GetPriorityGrouping+0x18>)
 800112e:	68db      	ldr	r3, [r3, #12]
 8001130:	0a1b      	lsrs	r3, r3, #8
 8001132:	f003 0307 	and.w	r3, r3, #7
}
 8001136:	4618      	mov	r0, r3
 8001138:	46bd      	mov	sp, r7
 800113a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113e:	4770      	bx	lr
 8001140:	e000ed00 	.word	0xe000ed00

08001144 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001144:	b480      	push	{r7}
 8001146:	b083      	sub	sp, #12
 8001148:	af00      	add	r7, sp, #0
 800114a:	4603      	mov	r3, r0
 800114c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800114e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001152:	2b00      	cmp	r3, #0
 8001154:	db0b      	blt.n	800116e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001156:	79fb      	ldrb	r3, [r7, #7]
 8001158:	f003 021f 	and.w	r2, r3, #31
 800115c:	4907      	ldr	r1, [pc, #28]	; (800117c <__NVIC_EnableIRQ+0x38>)
 800115e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001162:	095b      	lsrs	r3, r3, #5
 8001164:	2001      	movs	r0, #1
 8001166:	fa00 f202 	lsl.w	r2, r0, r2
 800116a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800116e:	bf00      	nop
 8001170:	370c      	adds	r7, #12
 8001172:	46bd      	mov	sp, r7
 8001174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001178:	4770      	bx	lr
 800117a:	bf00      	nop
 800117c:	e000e100 	.word	0xe000e100

08001180 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001180:	b480      	push	{r7}
 8001182:	b083      	sub	sp, #12
 8001184:	af00      	add	r7, sp, #0
 8001186:	4603      	mov	r3, r0
 8001188:	6039      	str	r1, [r7, #0]
 800118a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800118c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001190:	2b00      	cmp	r3, #0
 8001192:	db0a      	blt.n	80011aa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001194:	683b      	ldr	r3, [r7, #0]
 8001196:	b2da      	uxtb	r2, r3
 8001198:	490c      	ldr	r1, [pc, #48]	; (80011cc <__NVIC_SetPriority+0x4c>)
 800119a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800119e:	0112      	lsls	r2, r2, #4
 80011a0:	b2d2      	uxtb	r2, r2
 80011a2:	440b      	add	r3, r1
 80011a4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80011a8:	e00a      	b.n	80011c0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011aa:	683b      	ldr	r3, [r7, #0]
 80011ac:	b2da      	uxtb	r2, r3
 80011ae:	4908      	ldr	r1, [pc, #32]	; (80011d0 <__NVIC_SetPriority+0x50>)
 80011b0:	79fb      	ldrb	r3, [r7, #7]
 80011b2:	f003 030f 	and.w	r3, r3, #15
 80011b6:	3b04      	subs	r3, #4
 80011b8:	0112      	lsls	r2, r2, #4
 80011ba:	b2d2      	uxtb	r2, r2
 80011bc:	440b      	add	r3, r1
 80011be:	761a      	strb	r2, [r3, #24]
}
 80011c0:	bf00      	nop
 80011c2:	370c      	adds	r7, #12
 80011c4:	46bd      	mov	sp, r7
 80011c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ca:	4770      	bx	lr
 80011cc:	e000e100 	.word	0xe000e100
 80011d0:	e000ed00 	.word	0xe000ed00

080011d4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011d4:	b480      	push	{r7}
 80011d6:	b089      	sub	sp, #36	; 0x24
 80011d8:	af00      	add	r7, sp, #0
 80011da:	60f8      	str	r0, [r7, #12]
 80011dc:	60b9      	str	r1, [r7, #8]
 80011de:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80011e0:	68fb      	ldr	r3, [r7, #12]
 80011e2:	f003 0307 	and.w	r3, r3, #7
 80011e6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011e8:	69fb      	ldr	r3, [r7, #28]
 80011ea:	f1c3 0307 	rsb	r3, r3, #7
 80011ee:	2b04      	cmp	r3, #4
 80011f0:	bf28      	it	cs
 80011f2:	2304      	movcs	r3, #4
 80011f4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011f6:	69fb      	ldr	r3, [r7, #28]
 80011f8:	3304      	adds	r3, #4
 80011fa:	2b06      	cmp	r3, #6
 80011fc:	d902      	bls.n	8001204 <NVIC_EncodePriority+0x30>
 80011fe:	69fb      	ldr	r3, [r7, #28]
 8001200:	3b03      	subs	r3, #3
 8001202:	e000      	b.n	8001206 <NVIC_EncodePriority+0x32>
 8001204:	2300      	movs	r3, #0
 8001206:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001208:	f04f 32ff 	mov.w	r2, #4294967295
 800120c:	69bb      	ldr	r3, [r7, #24]
 800120e:	fa02 f303 	lsl.w	r3, r2, r3
 8001212:	43da      	mvns	r2, r3
 8001214:	68bb      	ldr	r3, [r7, #8]
 8001216:	401a      	ands	r2, r3
 8001218:	697b      	ldr	r3, [r7, #20]
 800121a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800121c:	f04f 31ff 	mov.w	r1, #4294967295
 8001220:	697b      	ldr	r3, [r7, #20]
 8001222:	fa01 f303 	lsl.w	r3, r1, r3
 8001226:	43d9      	mvns	r1, r3
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800122c:	4313      	orrs	r3, r2
         );
}
 800122e:	4618      	mov	r0, r3
 8001230:	3724      	adds	r7, #36	; 0x24
 8001232:	46bd      	mov	sp, r7
 8001234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001238:	4770      	bx	lr
	...

0800123c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	b082      	sub	sp, #8
 8001240:	af00      	add	r7, sp, #0
 8001242:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	3b01      	subs	r3, #1
 8001248:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800124c:	d301      	bcc.n	8001252 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800124e:	2301      	movs	r3, #1
 8001250:	e00f      	b.n	8001272 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001252:	4a0a      	ldr	r2, [pc, #40]	; (800127c <SysTick_Config+0x40>)
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	3b01      	subs	r3, #1
 8001258:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800125a:	210f      	movs	r1, #15
 800125c:	f04f 30ff 	mov.w	r0, #4294967295
 8001260:	f7ff ff8e 	bl	8001180 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001264:	4b05      	ldr	r3, [pc, #20]	; (800127c <SysTick_Config+0x40>)
 8001266:	2200      	movs	r2, #0
 8001268:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800126a:	4b04      	ldr	r3, [pc, #16]	; (800127c <SysTick_Config+0x40>)
 800126c:	2207      	movs	r2, #7
 800126e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001270:	2300      	movs	r3, #0
}
 8001272:	4618      	mov	r0, r3
 8001274:	3708      	adds	r7, #8
 8001276:	46bd      	mov	sp, r7
 8001278:	bd80      	pop	{r7, pc}
 800127a:	bf00      	nop
 800127c:	e000e010 	.word	0xe000e010

08001280 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	b082      	sub	sp, #8
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001288:	6878      	ldr	r0, [r7, #4]
 800128a:	f7ff ff29 	bl	80010e0 <__NVIC_SetPriorityGrouping>
}
 800128e:	bf00      	nop
 8001290:	3708      	adds	r7, #8
 8001292:	46bd      	mov	sp, r7
 8001294:	bd80      	pop	{r7, pc}

08001296 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001296:	b580      	push	{r7, lr}
 8001298:	b086      	sub	sp, #24
 800129a:	af00      	add	r7, sp, #0
 800129c:	4603      	mov	r3, r0
 800129e:	60b9      	str	r1, [r7, #8]
 80012a0:	607a      	str	r2, [r7, #4]
 80012a2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80012a4:	2300      	movs	r3, #0
 80012a6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80012a8:	f7ff ff3e 	bl	8001128 <__NVIC_GetPriorityGrouping>
 80012ac:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80012ae:	687a      	ldr	r2, [r7, #4]
 80012b0:	68b9      	ldr	r1, [r7, #8]
 80012b2:	6978      	ldr	r0, [r7, #20]
 80012b4:	f7ff ff8e 	bl	80011d4 <NVIC_EncodePriority>
 80012b8:	4602      	mov	r2, r0
 80012ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012be:	4611      	mov	r1, r2
 80012c0:	4618      	mov	r0, r3
 80012c2:	f7ff ff5d 	bl	8001180 <__NVIC_SetPriority>
}
 80012c6:	bf00      	nop
 80012c8:	3718      	adds	r7, #24
 80012ca:	46bd      	mov	sp, r7
 80012cc:	bd80      	pop	{r7, pc}

080012ce <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012ce:	b580      	push	{r7, lr}
 80012d0:	b082      	sub	sp, #8
 80012d2:	af00      	add	r7, sp, #0
 80012d4:	4603      	mov	r3, r0
 80012d6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80012d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012dc:	4618      	mov	r0, r3
 80012de:	f7ff ff31 	bl	8001144 <__NVIC_EnableIRQ>
}
 80012e2:	bf00      	nop
 80012e4:	3708      	adds	r7, #8
 80012e6:	46bd      	mov	sp, r7
 80012e8:	bd80      	pop	{r7, pc}

080012ea <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80012ea:	b580      	push	{r7, lr}
 80012ec:	b082      	sub	sp, #8
 80012ee:	af00      	add	r7, sp, #0
 80012f0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80012f2:	6878      	ldr	r0, [r7, #4]
 80012f4:	f7ff ffa2 	bl	800123c <SysTick_Config>
 80012f8:	4603      	mov	r3, r0
}
 80012fa:	4618      	mov	r0, r3
 80012fc:	3708      	adds	r7, #8
 80012fe:	46bd      	mov	sp, r7
 8001300:	bd80      	pop	{r7, pc}
	...

08001304 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001304:	b480      	push	{r7}
 8001306:	b089      	sub	sp, #36	; 0x24
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]
 800130c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800130e:	2300      	movs	r3, #0
 8001310:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001312:	2300      	movs	r3, #0
 8001314:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001316:	2300      	movs	r3, #0
 8001318:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800131a:	2300      	movs	r3, #0
 800131c:	61fb      	str	r3, [r7, #28]
 800131e:	e177      	b.n	8001610 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001320:	2201      	movs	r2, #1
 8001322:	69fb      	ldr	r3, [r7, #28]
 8001324:	fa02 f303 	lsl.w	r3, r2, r3
 8001328:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800132a:	683b      	ldr	r3, [r7, #0]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	697a      	ldr	r2, [r7, #20]
 8001330:	4013      	ands	r3, r2
 8001332:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001334:	693a      	ldr	r2, [r7, #16]
 8001336:	697b      	ldr	r3, [r7, #20]
 8001338:	429a      	cmp	r2, r3
 800133a:	f040 8166 	bne.w	800160a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800133e:	683b      	ldr	r3, [r7, #0]
 8001340:	685b      	ldr	r3, [r3, #4]
 8001342:	f003 0303 	and.w	r3, r3, #3
 8001346:	2b01      	cmp	r3, #1
 8001348:	d005      	beq.n	8001356 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800134a:	683b      	ldr	r3, [r7, #0]
 800134c:	685b      	ldr	r3, [r3, #4]
 800134e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001352:	2b02      	cmp	r3, #2
 8001354:	d130      	bne.n	80013b8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	689b      	ldr	r3, [r3, #8]
 800135a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800135c:	69fb      	ldr	r3, [r7, #28]
 800135e:	005b      	lsls	r3, r3, #1
 8001360:	2203      	movs	r2, #3
 8001362:	fa02 f303 	lsl.w	r3, r2, r3
 8001366:	43db      	mvns	r3, r3
 8001368:	69ba      	ldr	r2, [r7, #24]
 800136a:	4013      	ands	r3, r2
 800136c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800136e:	683b      	ldr	r3, [r7, #0]
 8001370:	68da      	ldr	r2, [r3, #12]
 8001372:	69fb      	ldr	r3, [r7, #28]
 8001374:	005b      	lsls	r3, r3, #1
 8001376:	fa02 f303 	lsl.w	r3, r2, r3
 800137a:	69ba      	ldr	r2, [r7, #24]
 800137c:	4313      	orrs	r3, r2
 800137e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	69ba      	ldr	r2, [r7, #24]
 8001384:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	685b      	ldr	r3, [r3, #4]
 800138a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800138c:	2201      	movs	r2, #1
 800138e:	69fb      	ldr	r3, [r7, #28]
 8001390:	fa02 f303 	lsl.w	r3, r2, r3
 8001394:	43db      	mvns	r3, r3
 8001396:	69ba      	ldr	r2, [r7, #24]
 8001398:	4013      	ands	r3, r2
 800139a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800139c:	683b      	ldr	r3, [r7, #0]
 800139e:	685b      	ldr	r3, [r3, #4]
 80013a0:	091b      	lsrs	r3, r3, #4
 80013a2:	f003 0201 	and.w	r2, r3, #1
 80013a6:	69fb      	ldr	r3, [r7, #28]
 80013a8:	fa02 f303 	lsl.w	r3, r2, r3
 80013ac:	69ba      	ldr	r2, [r7, #24]
 80013ae:	4313      	orrs	r3, r2
 80013b0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	69ba      	ldr	r2, [r7, #24]
 80013b6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80013b8:	683b      	ldr	r3, [r7, #0]
 80013ba:	685b      	ldr	r3, [r3, #4]
 80013bc:	f003 0303 	and.w	r3, r3, #3
 80013c0:	2b03      	cmp	r3, #3
 80013c2:	d017      	beq.n	80013f4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	68db      	ldr	r3, [r3, #12]
 80013c8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80013ca:	69fb      	ldr	r3, [r7, #28]
 80013cc:	005b      	lsls	r3, r3, #1
 80013ce:	2203      	movs	r2, #3
 80013d0:	fa02 f303 	lsl.w	r3, r2, r3
 80013d4:	43db      	mvns	r3, r3
 80013d6:	69ba      	ldr	r2, [r7, #24]
 80013d8:	4013      	ands	r3, r2
 80013da:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80013dc:	683b      	ldr	r3, [r7, #0]
 80013de:	689a      	ldr	r2, [r3, #8]
 80013e0:	69fb      	ldr	r3, [r7, #28]
 80013e2:	005b      	lsls	r3, r3, #1
 80013e4:	fa02 f303 	lsl.w	r3, r2, r3
 80013e8:	69ba      	ldr	r2, [r7, #24]
 80013ea:	4313      	orrs	r3, r2
 80013ec:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	69ba      	ldr	r2, [r7, #24]
 80013f2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80013f4:	683b      	ldr	r3, [r7, #0]
 80013f6:	685b      	ldr	r3, [r3, #4]
 80013f8:	f003 0303 	and.w	r3, r3, #3
 80013fc:	2b02      	cmp	r3, #2
 80013fe:	d123      	bne.n	8001448 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001400:	69fb      	ldr	r3, [r7, #28]
 8001402:	08da      	lsrs	r2, r3, #3
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	3208      	adds	r2, #8
 8001408:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800140c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800140e:	69fb      	ldr	r3, [r7, #28]
 8001410:	f003 0307 	and.w	r3, r3, #7
 8001414:	009b      	lsls	r3, r3, #2
 8001416:	220f      	movs	r2, #15
 8001418:	fa02 f303 	lsl.w	r3, r2, r3
 800141c:	43db      	mvns	r3, r3
 800141e:	69ba      	ldr	r2, [r7, #24]
 8001420:	4013      	ands	r3, r2
 8001422:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001424:	683b      	ldr	r3, [r7, #0]
 8001426:	691a      	ldr	r2, [r3, #16]
 8001428:	69fb      	ldr	r3, [r7, #28]
 800142a:	f003 0307 	and.w	r3, r3, #7
 800142e:	009b      	lsls	r3, r3, #2
 8001430:	fa02 f303 	lsl.w	r3, r2, r3
 8001434:	69ba      	ldr	r2, [r7, #24]
 8001436:	4313      	orrs	r3, r2
 8001438:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800143a:	69fb      	ldr	r3, [r7, #28]
 800143c:	08da      	lsrs	r2, r3, #3
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	3208      	adds	r2, #8
 8001442:	69b9      	ldr	r1, [r7, #24]
 8001444:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800144e:	69fb      	ldr	r3, [r7, #28]
 8001450:	005b      	lsls	r3, r3, #1
 8001452:	2203      	movs	r2, #3
 8001454:	fa02 f303 	lsl.w	r3, r2, r3
 8001458:	43db      	mvns	r3, r3
 800145a:	69ba      	ldr	r2, [r7, #24]
 800145c:	4013      	ands	r3, r2
 800145e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001460:	683b      	ldr	r3, [r7, #0]
 8001462:	685b      	ldr	r3, [r3, #4]
 8001464:	f003 0203 	and.w	r2, r3, #3
 8001468:	69fb      	ldr	r3, [r7, #28]
 800146a:	005b      	lsls	r3, r3, #1
 800146c:	fa02 f303 	lsl.w	r3, r2, r3
 8001470:	69ba      	ldr	r2, [r7, #24]
 8001472:	4313      	orrs	r3, r2
 8001474:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	69ba      	ldr	r2, [r7, #24]
 800147a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800147c:	683b      	ldr	r3, [r7, #0]
 800147e:	685b      	ldr	r3, [r3, #4]
 8001480:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001484:	2b00      	cmp	r3, #0
 8001486:	f000 80c0 	beq.w	800160a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800148a:	2300      	movs	r3, #0
 800148c:	60fb      	str	r3, [r7, #12]
 800148e:	4b66      	ldr	r3, [pc, #408]	; (8001628 <HAL_GPIO_Init+0x324>)
 8001490:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001492:	4a65      	ldr	r2, [pc, #404]	; (8001628 <HAL_GPIO_Init+0x324>)
 8001494:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001498:	6453      	str	r3, [r2, #68]	; 0x44
 800149a:	4b63      	ldr	r3, [pc, #396]	; (8001628 <HAL_GPIO_Init+0x324>)
 800149c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800149e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80014a2:	60fb      	str	r3, [r7, #12]
 80014a4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80014a6:	4a61      	ldr	r2, [pc, #388]	; (800162c <HAL_GPIO_Init+0x328>)
 80014a8:	69fb      	ldr	r3, [r7, #28]
 80014aa:	089b      	lsrs	r3, r3, #2
 80014ac:	3302      	adds	r3, #2
 80014ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80014b4:	69fb      	ldr	r3, [r7, #28]
 80014b6:	f003 0303 	and.w	r3, r3, #3
 80014ba:	009b      	lsls	r3, r3, #2
 80014bc:	220f      	movs	r2, #15
 80014be:	fa02 f303 	lsl.w	r3, r2, r3
 80014c2:	43db      	mvns	r3, r3
 80014c4:	69ba      	ldr	r2, [r7, #24]
 80014c6:	4013      	ands	r3, r2
 80014c8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	4a58      	ldr	r2, [pc, #352]	; (8001630 <HAL_GPIO_Init+0x32c>)
 80014ce:	4293      	cmp	r3, r2
 80014d0:	d037      	beq.n	8001542 <HAL_GPIO_Init+0x23e>
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	4a57      	ldr	r2, [pc, #348]	; (8001634 <HAL_GPIO_Init+0x330>)
 80014d6:	4293      	cmp	r3, r2
 80014d8:	d031      	beq.n	800153e <HAL_GPIO_Init+0x23a>
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	4a56      	ldr	r2, [pc, #344]	; (8001638 <HAL_GPIO_Init+0x334>)
 80014de:	4293      	cmp	r3, r2
 80014e0:	d02b      	beq.n	800153a <HAL_GPIO_Init+0x236>
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	4a55      	ldr	r2, [pc, #340]	; (800163c <HAL_GPIO_Init+0x338>)
 80014e6:	4293      	cmp	r3, r2
 80014e8:	d025      	beq.n	8001536 <HAL_GPIO_Init+0x232>
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	4a54      	ldr	r2, [pc, #336]	; (8001640 <HAL_GPIO_Init+0x33c>)
 80014ee:	4293      	cmp	r3, r2
 80014f0:	d01f      	beq.n	8001532 <HAL_GPIO_Init+0x22e>
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	4a53      	ldr	r2, [pc, #332]	; (8001644 <HAL_GPIO_Init+0x340>)
 80014f6:	4293      	cmp	r3, r2
 80014f8:	d019      	beq.n	800152e <HAL_GPIO_Init+0x22a>
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	4a52      	ldr	r2, [pc, #328]	; (8001648 <HAL_GPIO_Init+0x344>)
 80014fe:	4293      	cmp	r3, r2
 8001500:	d013      	beq.n	800152a <HAL_GPIO_Init+0x226>
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	4a51      	ldr	r2, [pc, #324]	; (800164c <HAL_GPIO_Init+0x348>)
 8001506:	4293      	cmp	r3, r2
 8001508:	d00d      	beq.n	8001526 <HAL_GPIO_Init+0x222>
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	4a50      	ldr	r2, [pc, #320]	; (8001650 <HAL_GPIO_Init+0x34c>)
 800150e:	4293      	cmp	r3, r2
 8001510:	d007      	beq.n	8001522 <HAL_GPIO_Init+0x21e>
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	4a4f      	ldr	r2, [pc, #316]	; (8001654 <HAL_GPIO_Init+0x350>)
 8001516:	4293      	cmp	r3, r2
 8001518:	d101      	bne.n	800151e <HAL_GPIO_Init+0x21a>
 800151a:	2309      	movs	r3, #9
 800151c:	e012      	b.n	8001544 <HAL_GPIO_Init+0x240>
 800151e:	230a      	movs	r3, #10
 8001520:	e010      	b.n	8001544 <HAL_GPIO_Init+0x240>
 8001522:	2308      	movs	r3, #8
 8001524:	e00e      	b.n	8001544 <HAL_GPIO_Init+0x240>
 8001526:	2307      	movs	r3, #7
 8001528:	e00c      	b.n	8001544 <HAL_GPIO_Init+0x240>
 800152a:	2306      	movs	r3, #6
 800152c:	e00a      	b.n	8001544 <HAL_GPIO_Init+0x240>
 800152e:	2305      	movs	r3, #5
 8001530:	e008      	b.n	8001544 <HAL_GPIO_Init+0x240>
 8001532:	2304      	movs	r3, #4
 8001534:	e006      	b.n	8001544 <HAL_GPIO_Init+0x240>
 8001536:	2303      	movs	r3, #3
 8001538:	e004      	b.n	8001544 <HAL_GPIO_Init+0x240>
 800153a:	2302      	movs	r3, #2
 800153c:	e002      	b.n	8001544 <HAL_GPIO_Init+0x240>
 800153e:	2301      	movs	r3, #1
 8001540:	e000      	b.n	8001544 <HAL_GPIO_Init+0x240>
 8001542:	2300      	movs	r3, #0
 8001544:	69fa      	ldr	r2, [r7, #28]
 8001546:	f002 0203 	and.w	r2, r2, #3
 800154a:	0092      	lsls	r2, r2, #2
 800154c:	4093      	lsls	r3, r2
 800154e:	69ba      	ldr	r2, [r7, #24]
 8001550:	4313      	orrs	r3, r2
 8001552:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001554:	4935      	ldr	r1, [pc, #212]	; (800162c <HAL_GPIO_Init+0x328>)
 8001556:	69fb      	ldr	r3, [r7, #28]
 8001558:	089b      	lsrs	r3, r3, #2
 800155a:	3302      	adds	r3, #2
 800155c:	69ba      	ldr	r2, [r7, #24]
 800155e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001562:	4b3d      	ldr	r3, [pc, #244]	; (8001658 <HAL_GPIO_Init+0x354>)
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001568:	693b      	ldr	r3, [r7, #16]
 800156a:	43db      	mvns	r3, r3
 800156c:	69ba      	ldr	r2, [r7, #24]
 800156e:	4013      	ands	r3, r2
 8001570:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001572:	683b      	ldr	r3, [r7, #0]
 8001574:	685b      	ldr	r3, [r3, #4]
 8001576:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800157a:	2b00      	cmp	r3, #0
 800157c:	d003      	beq.n	8001586 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800157e:	69ba      	ldr	r2, [r7, #24]
 8001580:	693b      	ldr	r3, [r7, #16]
 8001582:	4313      	orrs	r3, r2
 8001584:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001586:	4a34      	ldr	r2, [pc, #208]	; (8001658 <HAL_GPIO_Init+0x354>)
 8001588:	69bb      	ldr	r3, [r7, #24]
 800158a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800158c:	4b32      	ldr	r3, [pc, #200]	; (8001658 <HAL_GPIO_Init+0x354>)
 800158e:	685b      	ldr	r3, [r3, #4]
 8001590:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001592:	693b      	ldr	r3, [r7, #16]
 8001594:	43db      	mvns	r3, r3
 8001596:	69ba      	ldr	r2, [r7, #24]
 8001598:	4013      	ands	r3, r2
 800159a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800159c:	683b      	ldr	r3, [r7, #0]
 800159e:	685b      	ldr	r3, [r3, #4]
 80015a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d003      	beq.n	80015b0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80015a8:	69ba      	ldr	r2, [r7, #24]
 80015aa:	693b      	ldr	r3, [r7, #16]
 80015ac:	4313      	orrs	r3, r2
 80015ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80015b0:	4a29      	ldr	r2, [pc, #164]	; (8001658 <HAL_GPIO_Init+0x354>)
 80015b2:	69bb      	ldr	r3, [r7, #24]
 80015b4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80015b6:	4b28      	ldr	r3, [pc, #160]	; (8001658 <HAL_GPIO_Init+0x354>)
 80015b8:	689b      	ldr	r3, [r3, #8]
 80015ba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015bc:	693b      	ldr	r3, [r7, #16]
 80015be:	43db      	mvns	r3, r3
 80015c0:	69ba      	ldr	r2, [r7, #24]
 80015c2:	4013      	ands	r3, r2
 80015c4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80015c6:	683b      	ldr	r3, [r7, #0]
 80015c8:	685b      	ldr	r3, [r3, #4]
 80015ca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d003      	beq.n	80015da <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80015d2:	69ba      	ldr	r2, [r7, #24]
 80015d4:	693b      	ldr	r3, [r7, #16]
 80015d6:	4313      	orrs	r3, r2
 80015d8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80015da:	4a1f      	ldr	r2, [pc, #124]	; (8001658 <HAL_GPIO_Init+0x354>)
 80015dc:	69bb      	ldr	r3, [r7, #24]
 80015de:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80015e0:	4b1d      	ldr	r3, [pc, #116]	; (8001658 <HAL_GPIO_Init+0x354>)
 80015e2:	68db      	ldr	r3, [r3, #12]
 80015e4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015e6:	693b      	ldr	r3, [r7, #16]
 80015e8:	43db      	mvns	r3, r3
 80015ea:	69ba      	ldr	r2, [r7, #24]
 80015ec:	4013      	ands	r3, r2
 80015ee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80015f0:	683b      	ldr	r3, [r7, #0]
 80015f2:	685b      	ldr	r3, [r3, #4]
 80015f4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d003      	beq.n	8001604 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80015fc:	69ba      	ldr	r2, [r7, #24]
 80015fe:	693b      	ldr	r3, [r7, #16]
 8001600:	4313      	orrs	r3, r2
 8001602:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001604:	4a14      	ldr	r2, [pc, #80]	; (8001658 <HAL_GPIO_Init+0x354>)
 8001606:	69bb      	ldr	r3, [r7, #24]
 8001608:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800160a:	69fb      	ldr	r3, [r7, #28]
 800160c:	3301      	adds	r3, #1
 800160e:	61fb      	str	r3, [r7, #28]
 8001610:	69fb      	ldr	r3, [r7, #28]
 8001612:	2b0f      	cmp	r3, #15
 8001614:	f67f ae84 	bls.w	8001320 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001618:	bf00      	nop
 800161a:	bf00      	nop
 800161c:	3724      	adds	r7, #36	; 0x24
 800161e:	46bd      	mov	sp, r7
 8001620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001624:	4770      	bx	lr
 8001626:	bf00      	nop
 8001628:	40023800 	.word	0x40023800
 800162c:	40013800 	.word	0x40013800
 8001630:	40020000 	.word	0x40020000
 8001634:	40020400 	.word	0x40020400
 8001638:	40020800 	.word	0x40020800
 800163c:	40020c00 	.word	0x40020c00
 8001640:	40021000 	.word	0x40021000
 8001644:	40021400 	.word	0x40021400
 8001648:	40021800 	.word	0x40021800
 800164c:	40021c00 	.word	0x40021c00
 8001650:	40022000 	.word	0x40022000
 8001654:	40022400 	.word	0x40022400
 8001658:	40013c00 	.word	0x40013c00

0800165c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800165c:	b480      	push	{r7}
 800165e:	b083      	sub	sp, #12
 8001660:	af00      	add	r7, sp, #0
 8001662:	6078      	str	r0, [r7, #4]
 8001664:	460b      	mov	r3, r1
 8001666:	807b      	strh	r3, [r7, #2]
 8001668:	4613      	mov	r3, r2
 800166a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800166c:	787b      	ldrb	r3, [r7, #1]
 800166e:	2b00      	cmp	r3, #0
 8001670:	d003      	beq.n	800167a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001672:	887a      	ldrh	r2, [r7, #2]
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001678:	e003      	b.n	8001682 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800167a:	887b      	ldrh	r3, [r7, #2]
 800167c:	041a      	lsls	r2, r3, #16
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	619a      	str	r2, [r3, #24]
}
 8001682:	bf00      	nop
 8001684:	370c      	adds	r7, #12
 8001686:	46bd      	mov	sp, r7
 8001688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168c:	4770      	bx	lr
	...

08001690 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	b084      	sub	sp, #16
 8001694:	af00      	add	r7, sp, #0
 8001696:	6078      	str	r0, [r7, #4]
  uint32_t tmp, tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	2b00      	cmp	r3, #0
 800169c:	d101      	bne.n	80016a2 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 800169e:	2301      	movs	r3, #1
 80016a0:	e0bf      	b.n	8001822 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 80016a8:	b2db      	uxtb	r3, r3
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d106      	bne.n	80016bc <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	2200      	movs	r2, #0
 80016b2:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 80016b6:	6878      	ldr	r0, [r7, #4]
 80016b8:	f7ff f9de 	bl	8000a78 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	2202      	movs	r2, #2
 80016c0:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	699a      	ldr	r2, [r3, #24]
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 80016d2:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	6999      	ldr	r1, [r3, #24]
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	685a      	ldr	r2, [r3, #4]
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	689b      	ldr	r3, [r3, #8]
 80016e2:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80016e8:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	691b      	ldr	r3, [r3, #16]
 80016ee:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	430a      	orrs	r2, r1
 80016f6:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	6899      	ldr	r1, [r3, #8]
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681a      	ldr	r2, [r3, #0]
 8001702:	4b4a      	ldr	r3, [pc, #296]	; (800182c <HAL_LTDC_Init+0x19c>)
 8001704:	400b      	ands	r3, r1
 8001706:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	695b      	ldr	r3, [r3, #20]
 800170c:	041b      	lsls	r3, r3, #16
 800170e:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	6899      	ldr	r1, [r3, #8]
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	699a      	ldr	r2, [r3, #24]
 800171a:	68fb      	ldr	r3, [r7, #12]
 800171c:	431a      	orrs	r2, r3
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	430a      	orrs	r2, r1
 8001724:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	68d9      	ldr	r1, [r3, #12]
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681a      	ldr	r2, [r3, #0]
 8001730:	4b3e      	ldr	r3, [pc, #248]	; (800182c <HAL_LTDC_Init+0x19c>)
 8001732:	400b      	ands	r3, r1
 8001734:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	69db      	ldr	r3, [r3, #28]
 800173a:	041b      	lsls	r3, r3, #16
 800173c:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	68d9      	ldr	r1, [r3, #12]
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	6a1a      	ldr	r2, [r3, #32]
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	431a      	orrs	r2, r3
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	430a      	orrs	r2, r1
 8001752:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	6919      	ldr	r1, [r3, #16]
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681a      	ldr	r2, [r3, #0]
 800175e:	4b33      	ldr	r3, [pc, #204]	; (800182c <HAL_LTDC_Init+0x19c>)
 8001760:	400b      	ands	r3, r1
 8001762:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001768:	041b      	lsls	r3, r3, #16
 800176a:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	6919      	ldr	r1, [r3, #16]
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	431a      	orrs	r2, r3
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	430a      	orrs	r2, r1
 8001780:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	6959      	ldr	r1, [r3, #20]
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681a      	ldr	r2, [r3, #0]
 800178c:	4b27      	ldr	r3, [pc, #156]	; (800182c <HAL_LTDC_Init+0x19c>)
 800178e:	400b      	ands	r3, r1
 8001790:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001796:	041b      	lsls	r3, r3, #16
 8001798:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	6959      	ldr	r1, [r3, #20]
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	431a      	orrs	r2, r3
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	430a      	orrs	r2, r1
 80017ae:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80017b6:	021b      	lsls	r3, r3, #8
 80017b8:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 80017c0:	041b      	lsls	r3, r3, #16
 80017c2:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 80017d2:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80017da:	68ba      	ldr	r2, [r7, #8]
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	4313      	orrs	r3, r2
 80017e0:	687a      	ldr	r2, [r7, #4]
 80017e2:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 80017e6:	431a      	orrs	r2, r3
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	430a      	orrs	r2, r1
 80017ee:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	f042 0206 	orr.w	r2, r2, #6
 80017fe:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	699a      	ldr	r2, [r3, #24]
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	f042 0201 	orr.w	r2, r2, #1
 800180e:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	2200      	movs	r2, #0
 8001814:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	2201      	movs	r2, #1
 800181c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8001820:	2300      	movs	r3, #0
}
 8001822:	4618      	mov	r0, r3
 8001824:	3710      	adds	r7, #16
 8001826:	46bd      	mov	sp, r7
 8001828:	bd80      	pop	{r7, pc}
 800182a:	bf00      	nop
 800182c:	f000f800 	.word	0xf000f800

08001830 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	b084      	sub	sp, #16
 8001834:	af00      	add	r7, sp, #0
 8001836:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800183e:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001846:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	f003 0304 	and.w	r3, r3, #4
 800184e:	2b00      	cmp	r3, #0
 8001850:	d023      	beq.n	800189a <HAL_LTDC_IRQHandler+0x6a>
 8001852:	68bb      	ldr	r3, [r7, #8]
 8001854:	f003 0304 	and.w	r3, r3, #4
 8001858:	2b00      	cmp	r3, #0
 800185a:	d01e      	beq.n	800189a <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	f022 0204 	bic.w	r2, r2, #4
 800186a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	2204      	movs	r2, #4
 8001872:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800187a:	f043 0201 	orr.w	r2, r3, #1
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	2204      	movs	r2, #4
 8001888:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	2200      	movs	r2, #0
 8001890:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8001894:	6878      	ldr	r0, [r7, #4]
 8001896:	f000 f86f 	bl	8001978 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	f003 0302 	and.w	r3, r3, #2
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d023      	beq.n	80018ec <HAL_LTDC_IRQHandler+0xbc>
 80018a4:	68bb      	ldr	r3, [r7, #8]
 80018a6:	f003 0302 	and.w	r3, r3, #2
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d01e      	beq.n	80018ec <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	f022 0202 	bic.w	r2, r2, #2
 80018bc:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	2202      	movs	r2, #2
 80018c4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80018cc:	f043 0202 	orr.w	r2, r3, #2
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	2204      	movs	r2, #4
 80018da:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	2200      	movs	r2, #0
 80018e2:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 80018e6:	6878      	ldr	r0, [r7, #4]
 80018e8:	f000 f846 	bl	8001978 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	f003 0301 	and.w	r3, r3, #1
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d01b      	beq.n	800192e <HAL_LTDC_IRQHandler+0xfe>
 80018f6:	68bb      	ldr	r3, [r7, #8]
 80018f8:	f003 0301 	and.w	r3, r3, #1
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d016      	beq.n	800192e <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	f022 0201 	bic.w	r2, r2, #1
 800190e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	2201      	movs	r2, #1
 8001916:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	2201      	movs	r2, #1
 800191c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	2200      	movs	r2, #0
 8001924:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 8001928:	6878      	ldr	r0, [r7, #4]
 800192a:	f000 f82f 	bl	800198c <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	f003 0308 	and.w	r3, r3, #8
 8001934:	2b00      	cmp	r3, #0
 8001936:	d01b      	beq.n	8001970 <HAL_LTDC_IRQHandler+0x140>
 8001938:	68bb      	ldr	r3, [r7, #8]
 800193a:	f003 0308 	and.w	r3, r3, #8
 800193e:	2b00      	cmp	r3, #0
 8001940:	d016      	beq.n	8001970 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	f022 0208 	bic.w	r2, r2, #8
 8001950:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	2208      	movs	r2, #8
 8001958:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	2201      	movs	r2, #1
 800195e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	2200      	movs	r2, #0
 8001966:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 800196a:	6878      	ldr	r0, [r7, #4]
 800196c:	f000 f818 	bl	80019a0 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 8001970:	bf00      	nop
 8001972:	3710      	adds	r7, #16
 8001974:	46bd      	mov	sp, r7
 8001976:	bd80      	pop	{r7, pc}

08001978 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 8001978:	b480      	push	{r7}
 800197a:	b083      	sub	sp, #12
 800197c:	af00      	add	r7, sp, #0
 800197e:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 8001980:	bf00      	nop
 8001982:	370c      	adds	r7, #12
 8001984:	46bd      	mov	sp, r7
 8001986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198a:	4770      	bx	lr

0800198c <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 800198c:	b480      	push	{r7}
 800198e:	b083      	sub	sp, #12
 8001990:	af00      	add	r7, sp, #0
 8001992:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 8001994:	bf00      	nop
 8001996:	370c      	adds	r7, #12
 8001998:	46bd      	mov	sp, r7
 800199a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199e:	4770      	bx	lr

080019a0 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 80019a0:	b480      	push	{r7}
 80019a2:	b083      	sub	sp, #12
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 80019a8:	bf00      	nop
 80019aa:	370c      	adds	r7, #12
 80019ac:	46bd      	mov	sp, r7
 80019ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b2:	4770      	bx	lr

080019b4 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80019b4:	b5b0      	push	{r4, r5, r7, lr}
 80019b6:	b084      	sub	sp, #16
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	60f8      	str	r0, [r7, #12]
 80019bc:	60b9      	str	r1, [r7, #8]
 80019be:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 80019c6:	2b01      	cmp	r3, #1
 80019c8:	d101      	bne.n	80019ce <HAL_LTDC_ConfigLayer+0x1a>
 80019ca:	2302      	movs	r3, #2
 80019cc:	e02c      	b.n	8001a28 <HAL_LTDC_ConfigLayer+0x74>
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	2201      	movs	r2, #1
 80019d2:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	2202      	movs	r2, #2
 80019da:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 80019de:	68fa      	ldr	r2, [r7, #12]
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	2134      	movs	r1, #52	; 0x34
 80019e4:	fb01 f303 	mul.w	r3, r1, r3
 80019e8:	4413      	add	r3, r2
 80019ea:	f103 0238 	add.w	r2, r3, #56	; 0x38
 80019ee:	68bb      	ldr	r3, [r7, #8]
 80019f0:	4614      	mov	r4, r2
 80019f2:	461d      	mov	r5, r3
 80019f4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80019f6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80019f8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80019fa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80019fc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80019fe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001a00:	682b      	ldr	r3, [r5, #0]
 8001a02:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8001a04:	687a      	ldr	r2, [r7, #4]
 8001a06:	68b9      	ldr	r1, [r7, #8]
 8001a08:	68f8      	ldr	r0, [r7, #12]
 8001a0a:	f000 f811 	bl	8001a30 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	2201      	movs	r2, #1
 8001a14:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	2201      	movs	r2, #1
 8001a1a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	2200      	movs	r2, #0
 8001a22:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8001a26:	2300      	movs	r3, #0
}
 8001a28:	4618      	mov	r0, r3
 8001a2a:	3710      	adds	r7, #16
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	bdb0      	pop	{r4, r5, r7, pc}

08001a30 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8001a30:	b480      	push	{r7}
 8001a32:	b089      	sub	sp, #36	; 0x24
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	60f8      	str	r0, [r7, #12]
 8001a38:	60b9      	str	r1, [r7, #8]
 8001a3a:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8001a3c:	68bb      	ldr	r3, [r7, #8]
 8001a3e:	685a      	ldr	r2, [r3, #4]
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	68db      	ldr	r3, [r3, #12]
 8001a46:	0c1b      	lsrs	r3, r3, #16
 8001a48:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001a4c:	4413      	add	r3, r2
 8001a4e:	041b      	lsls	r3, r3, #16
 8001a50:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	461a      	mov	r2, r3
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	01db      	lsls	r3, r3, #7
 8001a5c:	4413      	add	r3, r2
 8001a5e:	3384      	adds	r3, #132	; 0x84
 8001a60:	685b      	ldr	r3, [r3, #4]
 8001a62:	68fa      	ldr	r2, [r7, #12]
 8001a64:	6812      	ldr	r2, [r2, #0]
 8001a66:	4611      	mov	r1, r2
 8001a68:	687a      	ldr	r2, [r7, #4]
 8001a6a:	01d2      	lsls	r2, r2, #7
 8001a6c:	440a      	add	r2, r1
 8001a6e:	3284      	adds	r2, #132	; 0x84
 8001a70:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8001a74:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8001a76:	68bb      	ldr	r3, [r7, #8]
 8001a78:	681a      	ldr	r2, [r3, #0]
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	68db      	ldr	r3, [r3, #12]
 8001a80:	0c1b      	lsrs	r3, r3, #16
 8001a82:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001a86:	4413      	add	r3, r2
 8001a88:	1c5a      	adds	r2, r3, #1
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	4619      	mov	r1, r3
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	01db      	lsls	r3, r3, #7
 8001a94:	440b      	add	r3, r1
 8001a96:	3384      	adds	r3, #132	; 0x84
 8001a98:	4619      	mov	r1, r3
 8001a9a:	69fb      	ldr	r3, [r7, #28]
 8001a9c:	4313      	orrs	r3, r2
 8001a9e:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8001aa0:	68bb      	ldr	r3, [r7, #8]
 8001aa2:	68da      	ldr	r2, [r3, #12]
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	68db      	ldr	r3, [r3, #12]
 8001aaa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001aae:	4413      	add	r3, r2
 8001ab0:	041b      	lsls	r3, r3, #16
 8001ab2:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	461a      	mov	r2, r3
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	01db      	lsls	r3, r3, #7
 8001abe:	4413      	add	r3, r2
 8001ac0:	3384      	adds	r3, #132	; 0x84
 8001ac2:	689b      	ldr	r3, [r3, #8]
 8001ac4:	68fa      	ldr	r2, [r7, #12]
 8001ac6:	6812      	ldr	r2, [r2, #0]
 8001ac8:	4611      	mov	r1, r2
 8001aca:	687a      	ldr	r2, [r7, #4]
 8001acc:	01d2      	lsls	r2, r2, #7
 8001ace:	440a      	add	r2, r1
 8001ad0:	3284      	adds	r2, #132	; 0x84
 8001ad2:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8001ad6:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8001ad8:	68bb      	ldr	r3, [r7, #8]
 8001ada:	689a      	ldr	r2, [r3, #8]
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	68db      	ldr	r3, [r3, #12]
 8001ae2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001ae6:	4413      	add	r3, r2
 8001ae8:	1c5a      	adds	r2, r3, #1
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	4619      	mov	r1, r3
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	01db      	lsls	r3, r3, #7
 8001af4:	440b      	add	r3, r1
 8001af6:	3384      	adds	r3, #132	; 0x84
 8001af8:	4619      	mov	r1, r3
 8001afa:	69fb      	ldr	r3, [r7, #28]
 8001afc:	4313      	orrs	r3, r2
 8001afe:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	461a      	mov	r2, r3
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	01db      	lsls	r3, r3, #7
 8001b0a:	4413      	add	r3, r2
 8001b0c:	3384      	adds	r3, #132	; 0x84
 8001b0e:	691b      	ldr	r3, [r3, #16]
 8001b10:	68fa      	ldr	r2, [r7, #12]
 8001b12:	6812      	ldr	r2, [r2, #0]
 8001b14:	4611      	mov	r1, r2
 8001b16:	687a      	ldr	r2, [r7, #4]
 8001b18:	01d2      	lsls	r2, r2, #7
 8001b1a:	440a      	add	r2, r1
 8001b1c:	3284      	adds	r2, #132	; 0x84
 8001b1e:	f023 0307 	bic.w	r3, r3, #7
 8001b22:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	461a      	mov	r2, r3
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	01db      	lsls	r3, r3, #7
 8001b2e:	4413      	add	r3, r2
 8001b30:	3384      	adds	r3, #132	; 0x84
 8001b32:	461a      	mov	r2, r3
 8001b34:	68bb      	ldr	r3, [r7, #8]
 8001b36:	691b      	ldr	r3, [r3, #16]
 8001b38:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8001b3a:	68bb      	ldr	r3, [r7, #8]
 8001b3c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8001b40:	021b      	lsls	r3, r3, #8
 8001b42:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8001b44:	68bb      	ldr	r3, [r7, #8]
 8001b46:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8001b4a:	041b      	lsls	r3, r3, #16
 8001b4c:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8001b4e:	68bb      	ldr	r3, [r7, #8]
 8001b50:	699b      	ldr	r3, [r3, #24]
 8001b52:	061b      	lsls	r3, r3, #24
 8001b54:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	461a      	mov	r2, r3
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	01db      	lsls	r3, r3, #7
 8001b60:	4413      	add	r3, r2
 8001b62:	3384      	adds	r3, #132	; 0x84
 8001b64:	699b      	ldr	r3, [r3, #24]
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	461a      	mov	r2, r3
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	01db      	lsls	r3, r3, #7
 8001b70:	4413      	add	r3, r2
 8001b72:	3384      	adds	r3, #132	; 0x84
 8001b74:	461a      	mov	r2, r3
 8001b76:	2300      	movs	r3, #0
 8001b78:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8001b7a:	68bb      	ldr	r3, [r7, #8]
 8001b7c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001b80:	461a      	mov	r2, r3
 8001b82:	69fb      	ldr	r3, [r7, #28]
 8001b84:	431a      	orrs	r2, r3
 8001b86:	69bb      	ldr	r3, [r7, #24]
 8001b88:	431a      	orrs	r2, r3
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	4619      	mov	r1, r3
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	01db      	lsls	r3, r3, #7
 8001b94:	440b      	add	r3, r1
 8001b96:	3384      	adds	r3, #132	; 0x84
 8001b98:	4619      	mov	r1, r3
 8001b9a:	697b      	ldr	r3, [r7, #20]
 8001b9c:	4313      	orrs	r3, r2
 8001b9e:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	461a      	mov	r2, r3
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	01db      	lsls	r3, r3, #7
 8001baa:	4413      	add	r3, r2
 8001bac:	3384      	adds	r3, #132	; 0x84
 8001bae:	695b      	ldr	r3, [r3, #20]
 8001bb0:	68fa      	ldr	r2, [r7, #12]
 8001bb2:	6812      	ldr	r2, [r2, #0]
 8001bb4:	4611      	mov	r1, r2
 8001bb6:	687a      	ldr	r2, [r7, #4]
 8001bb8:	01d2      	lsls	r2, r2, #7
 8001bba:	440a      	add	r2, r1
 8001bbc:	3284      	adds	r2, #132	; 0x84
 8001bbe:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001bc2:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	461a      	mov	r2, r3
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	01db      	lsls	r3, r3, #7
 8001bce:	4413      	add	r3, r2
 8001bd0:	3384      	adds	r3, #132	; 0x84
 8001bd2:	461a      	mov	r2, r3
 8001bd4:	68bb      	ldr	r3, [r7, #8]
 8001bd6:	695b      	ldr	r3, [r3, #20]
 8001bd8:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	461a      	mov	r2, r3
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	01db      	lsls	r3, r3, #7
 8001be4:	4413      	add	r3, r2
 8001be6:	3384      	adds	r3, #132	; 0x84
 8001be8:	69db      	ldr	r3, [r3, #28]
 8001bea:	68fa      	ldr	r2, [r7, #12]
 8001bec:	6812      	ldr	r2, [r2, #0]
 8001bee:	4611      	mov	r1, r2
 8001bf0:	687a      	ldr	r2, [r7, #4]
 8001bf2:	01d2      	lsls	r2, r2, #7
 8001bf4:	440a      	add	r2, r1
 8001bf6:	3284      	adds	r2, #132	; 0x84
 8001bf8:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001bfc:	f023 0307 	bic.w	r3, r3, #7
 8001c00:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8001c02:	68bb      	ldr	r3, [r7, #8]
 8001c04:	69da      	ldr	r2, [r3, #28]
 8001c06:	68bb      	ldr	r3, [r7, #8]
 8001c08:	6a1b      	ldr	r3, [r3, #32]
 8001c0a:	68f9      	ldr	r1, [r7, #12]
 8001c0c:	6809      	ldr	r1, [r1, #0]
 8001c0e:	4608      	mov	r0, r1
 8001c10:	6879      	ldr	r1, [r7, #4]
 8001c12:	01c9      	lsls	r1, r1, #7
 8001c14:	4401      	add	r1, r0
 8001c16:	3184      	adds	r1, #132	; 0x84
 8001c18:	4313      	orrs	r3, r2
 8001c1a:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	461a      	mov	r2, r3
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	01db      	lsls	r3, r3, #7
 8001c26:	4413      	add	r3, r2
 8001c28:	3384      	adds	r3, #132	; 0x84
 8001c2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	461a      	mov	r2, r3
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	01db      	lsls	r3, r3, #7
 8001c36:	4413      	add	r3, r2
 8001c38:	3384      	adds	r3, #132	; 0x84
 8001c3a:	461a      	mov	r2, r3
 8001c3c:	2300      	movs	r3, #0
 8001c3e:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	461a      	mov	r2, r3
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	01db      	lsls	r3, r3, #7
 8001c4a:	4413      	add	r3, r2
 8001c4c:	3384      	adds	r3, #132	; 0x84
 8001c4e:	461a      	mov	r2, r3
 8001c50:	68bb      	ldr	r3, [r7, #8]
 8001c52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c54:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8001c56:	68bb      	ldr	r3, [r7, #8]
 8001c58:	691b      	ldr	r3, [r3, #16]
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d102      	bne.n	8001c64 <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 8001c5e:	2304      	movs	r3, #4
 8001c60:	61fb      	str	r3, [r7, #28]
 8001c62:	e01b      	b.n	8001c9c <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8001c64:	68bb      	ldr	r3, [r7, #8]
 8001c66:	691b      	ldr	r3, [r3, #16]
 8001c68:	2b01      	cmp	r3, #1
 8001c6a:	d102      	bne.n	8001c72 <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 8001c6c:	2303      	movs	r3, #3
 8001c6e:	61fb      	str	r3, [r7, #28]
 8001c70:	e014      	b.n	8001c9c <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8001c72:	68bb      	ldr	r3, [r7, #8]
 8001c74:	691b      	ldr	r3, [r3, #16]
 8001c76:	2b04      	cmp	r3, #4
 8001c78:	d00b      	beq.n	8001c92 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8001c7a:	68bb      	ldr	r3, [r7, #8]
 8001c7c:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8001c7e:	2b02      	cmp	r3, #2
 8001c80:	d007      	beq.n	8001c92 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8001c82:	68bb      	ldr	r3, [r7, #8]
 8001c84:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8001c86:	2b03      	cmp	r3, #3
 8001c88:	d003      	beq.n	8001c92 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8001c8a:	68bb      	ldr	r3, [r7, #8]
 8001c8c:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8001c8e:	2b07      	cmp	r3, #7
 8001c90:	d102      	bne.n	8001c98 <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 8001c92:	2302      	movs	r3, #2
 8001c94:	61fb      	str	r3, [r7, #28]
 8001c96:	e001      	b.n	8001c9c <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 8001c98:	2301      	movs	r3, #1
 8001c9a:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	461a      	mov	r2, r3
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	01db      	lsls	r3, r3, #7
 8001ca6:	4413      	add	r3, r2
 8001ca8:	3384      	adds	r3, #132	; 0x84
 8001caa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cac:	68fa      	ldr	r2, [r7, #12]
 8001cae:	6812      	ldr	r2, [r2, #0]
 8001cb0:	4611      	mov	r1, r2
 8001cb2:	687a      	ldr	r2, [r7, #4]
 8001cb4:	01d2      	lsls	r2, r2, #7
 8001cb6:	440a      	add	r2, r1
 8001cb8:	3284      	adds	r2, #132	; 0x84
 8001cba:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 8001cbe:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8001cc0:	68bb      	ldr	r3, [r7, #8]
 8001cc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cc4:	69fa      	ldr	r2, [r7, #28]
 8001cc6:	fb02 f303 	mul.w	r3, r2, r3
 8001cca:	041a      	lsls	r2, r3, #16
 8001ccc:	68bb      	ldr	r3, [r7, #8]
 8001cce:	6859      	ldr	r1, [r3, #4]
 8001cd0:	68bb      	ldr	r3, [r7, #8]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	1acb      	subs	r3, r1, r3
 8001cd6:	69f9      	ldr	r1, [r7, #28]
 8001cd8:	fb01 f303 	mul.w	r3, r1, r3
 8001cdc:	3303      	adds	r3, #3
 8001cde:	68f9      	ldr	r1, [r7, #12]
 8001ce0:	6809      	ldr	r1, [r1, #0]
 8001ce2:	4608      	mov	r0, r1
 8001ce4:	6879      	ldr	r1, [r7, #4]
 8001ce6:	01c9      	lsls	r1, r1, #7
 8001ce8:	4401      	add	r1, r0
 8001cea:	3184      	adds	r1, #132	; 0x84
 8001cec:	4313      	orrs	r3, r2
 8001cee:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	461a      	mov	r2, r3
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	01db      	lsls	r3, r3, #7
 8001cfa:	4413      	add	r3, r2
 8001cfc:	3384      	adds	r3, #132	; 0x84
 8001cfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d00:	68fa      	ldr	r2, [r7, #12]
 8001d02:	6812      	ldr	r2, [r2, #0]
 8001d04:	4611      	mov	r1, r2
 8001d06:	687a      	ldr	r2, [r7, #4]
 8001d08:	01d2      	lsls	r2, r2, #7
 8001d0a:	440a      	add	r2, r1
 8001d0c:	3284      	adds	r2, #132	; 0x84
 8001d0e:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8001d12:	f023 0307 	bic.w	r3, r3, #7
 8001d16:	6313      	str	r3, [r2, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	461a      	mov	r2, r3
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	01db      	lsls	r3, r3, #7
 8001d22:	4413      	add	r3, r2
 8001d24:	3384      	adds	r3, #132	; 0x84
 8001d26:	461a      	mov	r2, r3
 8001d28:	68bb      	ldr	r3, [r7, #8]
 8001d2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d2c:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	461a      	mov	r2, r3
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	01db      	lsls	r3, r3, #7
 8001d38:	4413      	add	r3, r2
 8001d3a:	3384      	adds	r3, #132	; 0x84
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	68fa      	ldr	r2, [r7, #12]
 8001d40:	6812      	ldr	r2, [r2, #0]
 8001d42:	4611      	mov	r1, r2
 8001d44:	687a      	ldr	r2, [r7, #4]
 8001d46:	01d2      	lsls	r2, r2, #7
 8001d48:	440a      	add	r2, r1
 8001d4a:	3284      	adds	r2, #132	; 0x84
 8001d4c:	f043 0301 	orr.w	r3, r3, #1
 8001d50:	6013      	str	r3, [r2, #0]
}
 8001d52:	bf00      	nop
 8001d54:	3724      	adds	r7, #36	; 0x24
 8001d56:	46bd      	mov	sp, r7
 8001d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5c:	4770      	bx	lr

08001d5e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001d5e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001d60:	b08f      	sub	sp, #60	; 0x3c
 8001d62:	af0a      	add	r7, sp, #40	; 0x28
 8001d64:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d101      	bne.n	8001d70 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001d6c:	2301      	movs	r3, #1
 8001d6e:	e116      	b.n	8001f9e <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8001d7c:	b2db      	uxtb	r3, r3
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d106      	bne.n	8001d90 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	2200      	movs	r2, #0
 8001d86:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001d8a:	6878      	ldr	r0, [r7, #4]
 8001d8c:	f005 fe96 	bl	8007abc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	2203      	movs	r2, #3
 8001d94:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001d98:	68bb      	ldr	r3, [r7, #8]
 8001d9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d102      	bne.n	8001daa <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	2200      	movs	r2, #0
 8001da8:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	4618      	mov	r0, r3
 8001db0:	f002 fda9 	bl	8004906 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	603b      	str	r3, [r7, #0]
 8001dba:	687e      	ldr	r6, [r7, #4]
 8001dbc:	466d      	mov	r5, sp
 8001dbe:	f106 0410 	add.w	r4, r6, #16
 8001dc2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001dc4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001dc6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001dc8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001dca:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001dce:	e885 0003 	stmia.w	r5, {r0, r1}
 8001dd2:	1d33      	adds	r3, r6, #4
 8001dd4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001dd6:	6838      	ldr	r0, [r7, #0]
 8001dd8:	f002 fc80 	bl	80046dc <USB_CoreInit>
 8001ddc:	4603      	mov	r3, r0
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d005      	beq.n	8001dee <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	2202      	movs	r2, #2
 8001de6:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8001dea:	2301      	movs	r3, #1
 8001dec:	e0d7      	b.n	8001f9e <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	2100      	movs	r1, #0
 8001df4:	4618      	mov	r0, r3
 8001df6:	f002 fd97 	bl	8004928 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	73fb      	strb	r3, [r7, #15]
 8001dfe:	e04a      	b.n	8001e96 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001e00:	7bfa      	ldrb	r2, [r7, #15]
 8001e02:	6879      	ldr	r1, [r7, #4]
 8001e04:	4613      	mov	r3, r2
 8001e06:	00db      	lsls	r3, r3, #3
 8001e08:	1a9b      	subs	r3, r3, r2
 8001e0a:	009b      	lsls	r3, r3, #2
 8001e0c:	440b      	add	r3, r1
 8001e0e:	333d      	adds	r3, #61	; 0x3d
 8001e10:	2201      	movs	r2, #1
 8001e12:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001e14:	7bfa      	ldrb	r2, [r7, #15]
 8001e16:	6879      	ldr	r1, [r7, #4]
 8001e18:	4613      	mov	r3, r2
 8001e1a:	00db      	lsls	r3, r3, #3
 8001e1c:	1a9b      	subs	r3, r3, r2
 8001e1e:	009b      	lsls	r3, r3, #2
 8001e20:	440b      	add	r3, r1
 8001e22:	333c      	adds	r3, #60	; 0x3c
 8001e24:	7bfa      	ldrb	r2, [r7, #15]
 8001e26:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001e28:	7bfa      	ldrb	r2, [r7, #15]
 8001e2a:	7bfb      	ldrb	r3, [r7, #15]
 8001e2c:	b298      	uxth	r0, r3
 8001e2e:	6879      	ldr	r1, [r7, #4]
 8001e30:	4613      	mov	r3, r2
 8001e32:	00db      	lsls	r3, r3, #3
 8001e34:	1a9b      	subs	r3, r3, r2
 8001e36:	009b      	lsls	r3, r3, #2
 8001e38:	440b      	add	r3, r1
 8001e3a:	3342      	adds	r3, #66	; 0x42
 8001e3c:	4602      	mov	r2, r0
 8001e3e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001e40:	7bfa      	ldrb	r2, [r7, #15]
 8001e42:	6879      	ldr	r1, [r7, #4]
 8001e44:	4613      	mov	r3, r2
 8001e46:	00db      	lsls	r3, r3, #3
 8001e48:	1a9b      	subs	r3, r3, r2
 8001e4a:	009b      	lsls	r3, r3, #2
 8001e4c:	440b      	add	r3, r1
 8001e4e:	333f      	adds	r3, #63	; 0x3f
 8001e50:	2200      	movs	r2, #0
 8001e52:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001e54:	7bfa      	ldrb	r2, [r7, #15]
 8001e56:	6879      	ldr	r1, [r7, #4]
 8001e58:	4613      	mov	r3, r2
 8001e5a:	00db      	lsls	r3, r3, #3
 8001e5c:	1a9b      	subs	r3, r3, r2
 8001e5e:	009b      	lsls	r3, r3, #2
 8001e60:	440b      	add	r3, r1
 8001e62:	3344      	adds	r3, #68	; 0x44
 8001e64:	2200      	movs	r2, #0
 8001e66:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001e68:	7bfa      	ldrb	r2, [r7, #15]
 8001e6a:	6879      	ldr	r1, [r7, #4]
 8001e6c:	4613      	mov	r3, r2
 8001e6e:	00db      	lsls	r3, r3, #3
 8001e70:	1a9b      	subs	r3, r3, r2
 8001e72:	009b      	lsls	r3, r3, #2
 8001e74:	440b      	add	r3, r1
 8001e76:	3348      	adds	r3, #72	; 0x48
 8001e78:	2200      	movs	r2, #0
 8001e7a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001e7c:	7bfa      	ldrb	r2, [r7, #15]
 8001e7e:	6879      	ldr	r1, [r7, #4]
 8001e80:	4613      	mov	r3, r2
 8001e82:	00db      	lsls	r3, r3, #3
 8001e84:	1a9b      	subs	r3, r3, r2
 8001e86:	009b      	lsls	r3, r3, #2
 8001e88:	440b      	add	r3, r1
 8001e8a:	3350      	adds	r3, #80	; 0x50
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001e90:	7bfb      	ldrb	r3, [r7, #15]
 8001e92:	3301      	adds	r3, #1
 8001e94:	73fb      	strb	r3, [r7, #15]
 8001e96:	7bfa      	ldrb	r2, [r7, #15]
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	685b      	ldr	r3, [r3, #4]
 8001e9c:	429a      	cmp	r2, r3
 8001e9e:	d3af      	bcc.n	8001e00 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001ea0:	2300      	movs	r3, #0
 8001ea2:	73fb      	strb	r3, [r7, #15]
 8001ea4:	e044      	b.n	8001f30 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001ea6:	7bfa      	ldrb	r2, [r7, #15]
 8001ea8:	6879      	ldr	r1, [r7, #4]
 8001eaa:	4613      	mov	r3, r2
 8001eac:	00db      	lsls	r3, r3, #3
 8001eae:	1a9b      	subs	r3, r3, r2
 8001eb0:	009b      	lsls	r3, r3, #2
 8001eb2:	440b      	add	r3, r1
 8001eb4:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8001eb8:	2200      	movs	r2, #0
 8001eba:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001ebc:	7bfa      	ldrb	r2, [r7, #15]
 8001ebe:	6879      	ldr	r1, [r7, #4]
 8001ec0:	4613      	mov	r3, r2
 8001ec2:	00db      	lsls	r3, r3, #3
 8001ec4:	1a9b      	subs	r3, r3, r2
 8001ec6:	009b      	lsls	r3, r3, #2
 8001ec8:	440b      	add	r3, r1
 8001eca:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8001ece:	7bfa      	ldrb	r2, [r7, #15]
 8001ed0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001ed2:	7bfa      	ldrb	r2, [r7, #15]
 8001ed4:	6879      	ldr	r1, [r7, #4]
 8001ed6:	4613      	mov	r3, r2
 8001ed8:	00db      	lsls	r3, r3, #3
 8001eda:	1a9b      	subs	r3, r3, r2
 8001edc:	009b      	lsls	r3, r3, #2
 8001ede:	440b      	add	r3, r1
 8001ee0:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001ee8:	7bfa      	ldrb	r2, [r7, #15]
 8001eea:	6879      	ldr	r1, [r7, #4]
 8001eec:	4613      	mov	r3, r2
 8001eee:	00db      	lsls	r3, r3, #3
 8001ef0:	1a9b      	subs	r3, r3, r2
 8001ef2:	009b      	lsls	r3, r3, #2
 8001ef4:	440b      	add	r3, r1
 8001ef6:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8001efa:	2200      	movs	r2, #0
 8001efc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001efe:	7bfa      	ldrb	r2, [r7, #15]
 8001f00:	6879      	ldr	r1, [r7, #4]
 8001f02:	4613      	mov	r3, r2
 8001f04:	00db      	lsls	r3, r3, #3
 8001f06:	1a9b      	subs	r3, r3, r2
 8001f08:	009b      	lsls	r3, r3, #2
 8001f0a:	440b      	add	r3, r1
 8001f0c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001f10:	2200      	movs	r2, #0
 8001f12:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001f14:	7bfa      	ldrb	r2, [r7, #15]
 8001f16:	6879      	ldr	r1, [r7, #4]
 8001f18:	4613      	mov	r3, r2
 8001f1a:	00db      	lsls	r3, r3, #3
 8001f1c:	1a9b      	subs	r3, r3, r2
 8001f1e:	009b      	lsls	r3, r3, #2
 8001f20:	440b      	add	r3, r1
 8001f22:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8001f26:	2200      	movs	r2, #0
 8001f28:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001f2a:	7bfb      	ldrb	r3, [r7, #15]
 8001f2c:	3301      	adds	r3, #1
 8001f2e:	73fb      	strb	r3, [r7, #15]
 8001f30:	7bfa      	ldrb	r2, [r7, #15]
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	685b      	ldr	r3, [r3, #4]
 8001f36:	429a      	cmp	r2, r3
 8001f38:	d3b5      	bcc.n	8001ea6 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	603b      	str	r3, [r7, #0]
 8001f40:	687e      	ldr	r6, [r7, #4]
 8001f42:	466d      	mov	r5, sp
 8001f44:	f106 0410 	add.w	r4, r6, #16
 8001f48:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001f4a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001f4c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001f4e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001f50:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001f54:	e885 0003 	stmia.w	r5, {r0, r1}
 8001f58:	1d33      	adds	r3, r6, #4
 8001f5a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001f5c:	6838      	ldr	r0, [r7, #0]
 8001f5e:	f002 fd2f 	bl	80049c0 <USB_DevInit>
 8001f62:	4603      	mov	r3, r0
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d005      	beq.n	8001f74 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	2202      	movs	r2, #2
 8001f6c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8001f70:	2301      	movs	r3, #1
 8001f72:	e014      	b.n	8001f9e <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	2200      	movs	r2, #0
 8001f78:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	2201      	movs	r2, #1
 8001f80:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f88:	2b01      	cmp	r3, #1
 8001f8a:	d102      	bne.n	8001f92 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001f8c:	6878      	ldr	r0, [r7, #4]
 8001f8e:	f001 f891 	bl	80030b4 <HAL_PCDEx_ActivateLPM>
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	4618      	mov	r0, r3
 8001f98:	f003 fd9e 	bl	8005ad8 <USB_DevDisconnect>

  return HAL_OK;
 8001f9c:	2300      	movs	r3, #0
}
 8001f9e:	4618      	mov	r0, r3
 8001fa0:	3714      	adds	r7, #20
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001fa6 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001fa6:	b580      	push	{r7, lr}
 8001fa8:	b084      	sub	sp, #16
 8001faa:	af00      	add	r7, sp, #0
 8001fac:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001fba:	2b01      	cmp	r3, #1
 8001fbc:	d101      	bne.n	8001fc2 <HAL_PCD_Start+0x1c>
 8001fbe:	2302      	movs	r3, #2
 8001fc0:	e020      	b.n	8002004 <HAL_PCD_Start+0x5e>
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	2201      	movs	r2, #1
 8001fc6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fce:	2b01      	cmp	r3, #1
 8001fd0:	d109      	bne.n	8001fe6 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001fd6:	2b01      	cmp	r3, #1
 8001fd8:	d005      	beq.n	8001fe6 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001fde:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	4618      	mov	r0, r3
 8001fec:	f002 fc7a 	bl	80048e4 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	4618      	mov	r0, r3
 8001ff6:	f003 fd4e 	bl	8005a96 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002002:	2300      	movs	r3, #0
}
 8002004:	4618      	mov	r0, r3
 8002006:	3710      	adds	r7, #16
 8002008:	46bd      	mov	sp, r7
 800200a:	bd80      	pop	{r7, pc}

0800200c <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800200c:	b590      	push	{r4, r7, lr}
 800200e:	b08d      	sub	sp, #52	; 0x34
 8002010:	af00      	add	r7, sp, #0
 8002012:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800201a:	6a3b      	ldr	r3, [r7, #32]
 800201c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t temp;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	4618      	mov	r0, r3
 8002024:	f003 fe0c 	bl	8005c40 <USB_GetMode>
 8002028:	4603      	mov	r3, r0
 800202a:	2b00      	cmp	r3, #0
 800202c:	f040 83ca 	bne.w	80027c4 <HAL_PCD_IRQHandler+0x7b8>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	4618      	mov	r0, r3
 8002036:	f003 fd70 	bl	8005b1a <USB_ReadInterrupts>
 800203a:	4603      	mov	r3, r0
 800203c:	2b00      	cmp	r3, #0
 800203e:	f000 83c0 	beq.w	80027c2 <HAL_PCD_IRQHandler+0x7b6>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	4618      	mov	r0, r3
 8002048:	f003 fd67 	bl	8005b1a <USB_ReadInterrupts>
 800204c:	4603      	mov	r3, r0
 800204e:	f003 0302 	and.w	r3, r3, #2
 8002052:	2b02      	cmp	r3, #2
 8002054:	d107      	bne.n	8002066 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	695a      	ldr	r2, [r3, #20]
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	f002 0202 	and.w	r2, r2, #2
 8002064:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	4618      	mov	r0, r3
 800206c:	f003 fd55 	bl	8005b1a <USB_ReadInterrupts>
 8002070:	4603      	mov	r3, r0
 8002072:	f003 0310 	and.w	r3, r3, #16
 8002076:	2b10      	cmp	r3, #16
 8002078:	d161      	bne.n	800213e <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	699a      	ldr	r2, [r3, #24]
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	f022 0210 	bic.w	r2, r2, #16
 8002088:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 800208a:	6a3b      	ldr	r3, [r7, #32]
 800208c:	6a1b      	ldr	r3, [r3, #32]
 800208e:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8002090:	69bb      	ldr	r3, [r7, #24]
 8002092:	f003 020f 	and.w	r2, r3, #15
 8002096:	4613      	mov	r3, r2
 8002098:	00db      	lsls	r3, r3, #3
 800209a:	1a9b      	subs	r3, r3, r2
 800209c:	009b      	lsls	r3, r3, #2
 800209e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80020a2:	687a      	ldr	r2, [r7, #4]
 80020a4:	4413      	add	r3, r2
 80020a6:	3304      	adds	r3, #4
 80020a8:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80020aa:	69bb      	ldr	r3, [r7, #24]
 80020ac:	0c5b      	lsrs	r3, r3, #17
 80020ae:	f003 030f 	and.w	r3, r3, #15
 80020b2:	2b02      	cmp	r3, #2
 80020b4:	d124      	bne.n	8002100 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 80020b6:	69ba      	ldr	r2, [r7, #24]
 80020b8:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80020bc:	4013      	ands	r3, r2
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d035      	beq.n	800212e <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80020c2:	697b      	ldr	r3, [r7, #20]
 80020c4:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 80020c6:	69bb      	ldr	r3, [r7, #24]
 80020c8:	091b      	lsrs	r3, r3, #4
 80020ca:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80020cc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80020d0:	b29b      	uxth	r3, r3
 80020d2:	461a      	mov	r2, r3
 80020d4:	6a38      	ldr	r0, [r7, #32]
 80020d6:	f003 fb8c 	bl	80057f2 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80020da:	697b      	ldr	r3, [r7, #20]
 80020dc:	68da      	ldr	r2, [r3, #12]
 80020de:	69bb      	ldr	r3, [r7, #24]
 80020e0:	091b      	lsrs	r3, r3, #4
 80020e2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80020e6:	441a      	add	r2, r3
 80020e8:	697b      	ldr	r3, [r7, #20]
 80020ea:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80020ec:	697b      	ldr	r3, [r7, #20]
 80020ee:	699a      	ldr	r2, [r3, #24]
 80020f0:	69bb      	ldr	r3, [r7, #24]
 80020f2:	091b      	lsrs	r3, r3, #4
 80020f4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80020f8:	441a      	add	r2, r3
 80020fa:	697b      	ldr	r3, [r7, #20]
 80020fc:	619a      	str	r2, [r3, #24]
 80020fe:	e016      	b.n	800212e <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8002100:	69bb      	ldr	r3, [r7, #24]
 8002102:	0c5b      	lsrs	r3, r3, #17
 8002104:	f003 030f 	and.w	r3, r3, #15
 8002108:	2b06      	cmp	r3, #6
 800210a:	d110      	bne.n	800212e <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002112:	2208      	movs	r2, #8
 8002114:	4619      	mov	r1, r3
 8002116:	6a38      	ldr	r0, [r7, #32]
 8002118:	f003 fb6b 	bl	80057f2 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800211c:	697b      	ldr	r3, [r7, #20]
 800211e:	699a      	ldr	r2, [r3, #24]
 8002120:	69bb      	ldr	r3, [r7, #24]
 8002122:	091b      	lsrs	r3, r3, #4
 8002124:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002128:	441a      	add	r2, r3
 800212a:	697b      	ldr	r3, [r7, #20]
 800212c:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	699a      	ldr	r2, [r3, #24]
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	f042 0210 	orr.w	r2, r2, #16
 800213c:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	4618      	mov	r0, r3
 8002144:	f003 fce9 	bl	8005b1a <USB_ReadInterrupts>
 8002148:	4603      	mov	r3, r0
 800214a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800214e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002152:	d16e      	bne.n	8002232 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8002154:	2300      	movs	r3, #0
 8002156:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	4618      	mov	r0, r3
 800215e:	f003 fcef 	bl	8005b40 <USB_ReadDevAllOutEpInterrupt>
 8002162:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8002164:	e062      	b.n	800222c <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002166:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002168:	f003 0301 	and.w	r3, r3, #1
 800216c:	2b00      	cmp	r3, #0
 800216e:	d057      	beq.n	8002220 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002176:	b2d2      	uxtb	r2, r2
 8002178:	4611      	mov	r1, r2
 800217a:	4618      	mov	r0, r3
 800217c:	f003 fd14 	bl	8005ba8 <USB_ReadDevOutEPInterrupt>
 8002180:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002182:	693b      	ldr	r3, [r7, #16]
 8002184:	f003 0301 	and.w	r3, r3, #1
 8002188:	2b00      	cmp	r3, #0
 800218a:	d00c      	beq.n	80021a6 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800218c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800218e:	015a      	lsls	r2, r3, #5
 8002190:	69fb      	ldr	r3, [r7, #28]
 8002192:	4413      	add	r3, r2
 8002194:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002198:	461a      	mov	r2, r3
 800219a:	2301      	movs	r3, #1
 800219c:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800219e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80021a0:	6878      	ldr	r0, [r7, #4]
 80021a2:	f000 fddd 	bl	8002d60 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80021a6:	693b      	ldr	r3, [r7, #16]
 80021a8:	f003 0308 	and.w	r3, r3, #8
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d00c      	beq.n	80021ca <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80021b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021b2:	015a      	lsls	r2, r3, #5
 80021b4:	69fb      	ldr	r3, [r7, #28]
 80021b6:	4413      	add	r3, r2
 80021b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80021bc:	461a      	mov	r2, r3
 80021be:	2308      	movs	r3, #8
 80021c0:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80021c2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80021c4:	6878      	ldr	r0, [r7, #4]
 80021c6:	f000 fed7 	bl	8002f78 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80021ca:	693b      	ldr	r3, [r7, #16]
 80021cc:	f003 0310 	and.w	r3, r3, #16
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d008      	beq.n	80021e6 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80021d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021d6:	015a      	lsls	r2, r3, #5
 80021d8:	69fb      	ldr	r3, [r7, #28]
 80021da:	4413      	add	r3, r2
 80021dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80021e0:	461a      	mov	r2, r3
 80021e2:	2310      	movs	r3, #16
 80021e4:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80021e6:	693b      	ldr	r3, [r7, #16]
 80021e8:	f003 0320 	and.w	r3, r3, #32
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d008      	beq.n	8002202 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80021f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021f2:	015a      	lsls	r2, r3, #5
 80021f4:	69fb      	ldr	r3, [r7, #28]
 80021f6:	4413      	add	r3, r2
 80021f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80021fc:	461a      	mov	r2, r3
 80021fe:	2320      	movs	r3, #32
 8002200:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002202:	693b      	ldr	r3, [r7, #16]
 8002204:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002208:	2b00      	cmp	r3, #0
 800220a:	d009      	beq.n	8002220 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800220c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800220e:	015a      	lsls	r2, r3, #5
 8002210:	69fb      	ldr	r3, [r7, #28]
 8002212:	4413      	add	r3, r2
 8002214:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002218:	461a      	mov	r2, r3
 800221a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800221e:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8002220:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002222:	3301      	adds	r3, #1
 8002224:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002226:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002228:	085b      	lsrs	r3, r3, #1
 800222a:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800222c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800222e:	2b00      	cmp	r3, #0
 8002230:	d199      	bne.n	8002166 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	4618      	mov	r0, r3
 8002238:	f003 fc6f 	bl	8005b1a <USB_ReadInterrupts>
 800223c:	4603      	mov	r3, r0
 800223e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002242:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002246:	f040 80c0 	bne.w	80023ca <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	4618      	mov	r0, r3
 8002250:	f003 fc90 	bl	8005b74 <USB_ReadDevAllInEpInterrupt>
 8002254:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8002256:	2300      	movs	r3, #0
 8002258:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 800225a:	e0b2      	b.n	80023c2 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800225c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800225e:	f003 0301 	and.w	r3, r3, #1
 8002262:	2b00      	cmp	r3, #0
 8002264:	f000 80a7 	beq.w	80023b6 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800226e:	b2d2      	uxtb	r2, r2
 8002270:	4611      	mov	r1, r2
 8002272:	4618      	mov	r0, r3
 8002274:	f003 fcb6 	bl	8005be4 <USB_ReadDevInEPInterrupt>
 8002278:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800227a:	693b      	ldr	r3, [r7, #16]
 800227c:	f003 0301 	and.w	r3, r3, #1
 8002280:	2b00      	cmp	r3, #0
 8002282:	d057      	beq.n	8002334 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002284:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002286:	f003 030f 	and.w	r3, r3, #15
 800228a:	2201      	movs	r2, #1
 800228c:	fa02 f303 	lsl.w	r3, r2, r3
 8002290:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002292:	69fb      	ldr	r3, [r7, #28]
 8002294:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002298:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	43db      	mvns	r3, r3
 800229e:	69f9      	ldr	r1, [r7, #28]
 80022a0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80022a4:	4013      	ands	r3, r2
 80022a6:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80022a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022aa:	015a      	lsls	r2, r3, #5
 80022ac:	69fb      	ldr	r3, [r7, #28]
 80022ae:	4413      	add	r3, r2
 80022b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80022b4:	461a      	mov	r2, r3
 80022b6:	2301      	movs	r3, #1
 80022b8:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	691b      	ldr	r3, [r3, #16]
 80022be:	2b01      	cmp	r3, #1
 80022c0:	d132      	bne.n	8002328 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80022c2:	6879      	ldr	r1, [r7, #4]
 80022c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80022c6:	4613      	mov	r3, r2
 80022c8:	00db      	lsls	r3, r3, #3
 80022ca:	1a9b      	subs	r3, r3, r2
 80022cc:	009b      	lsls	r3, r3, #2
 80022ce:	440b      	add	r3, r1
 80022d0:	3348      	adds	r3, #72	; 0x48
 80022d2:	6819      	ldr	r1, [r3, #0]
 80022d4:	6878      	ldr	r0, [r7, #4]
 80022d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80022d8:	4613      	mov	r3, r2
 80022da:	00db      	lsls	r3, r3, #3
 80022dc:	1a9b      	subs	r3, r3, r2
 80022de:	009b      	lsls	r3, r3, #2
 80022e0:	4403      	add	r3, r0
 80022e2:	3344      	adds	r3, #68	; 0x44
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	4419      	add	r1, r3
 80022e8:	6878      	ldr	r0, [r7, #4]
 80022ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80022ec:	4613      	mov	r3, r2
 80022ee:	00db      	lsls	r3, r3, #3
 80022f0:	1a9b      	subs	r3, r3, r2
 80022f2:	009b      	lsls	r3, r3, #2
 80022f4:	4403      	add	r3, r0
 80022f6:	3348      	adds	r3, #72	; 0x48
 80022f8:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80022fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d113      	bne.n	8002328 <HAL_PCD_IRQHandler+0x31c>
 8002300:	6879      	ldr	r1, [r7, #4]
 8002302:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002304:	4613      	mov	r3, r2
 8002306:	00db      	lsls	r3, r3, #3
 8002308:	1a9b      	subs	r3, r3, r2
 800230a:	009b      	lsls	r3, r3, #2
 800230c:	440b      	add	r3, r1
 800230e:	3350      	adds	r3, #80	; 0x50
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	2b00      	cmp	r3, #0
 8002314:	d108      	bne.n	8002328 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	6818      	ldr	r0, [r3, #0]
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002320:	461a      	mov	r2, r3
 8002322:	2101      	movs	r1, #1
 8002324:	f003 fcbe 	bl	8005ca4 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002328:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800232a:	b2db      	uxtb	r3, r3
 800232c:	4619      	mov	r1, r3
 800232e:	6878      	ldr	r0, [r7, #4]
 8002330:	f005 fc5b 	bl	8007bea <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002334:	693b      	ldr	r3, [r7, #16]
 8002336:	f003 0308 	and.w	r3, r3, #8
 800233a:	2b00      	cmp	r3, #0
 800233c:	d008      	beq.n	8002350 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800233e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002340:	015a      	lsls	r2, r3, #5
 8002342:	69fb      	ldr	r3, [r7, #28]
 8002344:	4413      	add	r3, r2
 8002346:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800234a:	461a      	mov	r2, r3
 800234c:	2308      	movs	r3, #8
 800234e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002350:	693b      	ldr	r3, [r7, #16]
 8002352:	f003 0310 	and.w	r3, r3, #16
 8002356:	2b00      	cmp	r3, #0
 8002358:	d008      	beq.n	800236c <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800235a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800235c:	015a      	lsls	r2, r3, #5
 800235e:	69fb      	ldr	r3, [r7, #28]
 8002360:	4413      	add	r3, r2
 8002362:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002366:	461a      	mov	r2, r3
 8002368:	2310      	movs	r3, #16
 800236a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800236c:	693b      	ldr	r3, [r7, #16]
 800236e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002372:	2b00      	cmp	r3, #0
 8002374:	d008      	beq.n	8002388 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002376:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002378:	015a      	lsls	r2, r3, #5
 800237a:	69fb      	ldr	r3, [r7, #28]
 800237c:	4413      	add	r3, r2
 800237e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002382:	461a      	mov	r2, r3
 8002384:	2340      	movs	r3, #64	; 0x40
 8002386:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002388:	693b      	ldr	r3, [r7, #16]
 800238a:	f003 0302 	and.w	r3, r3, #2
 800238e:	2b00      	cmp	r3, #0
 8002390:	d008      	beq.n	80023a4 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002392:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002394:	015a      	lsls	r2, r3, #5
 8002396:	69fb      	ldr	r3, [r7, #28]
 8002398:	4413      	add	r3, r2
 800239a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800239e:	461a      	mov	r2, r3
 80023a0:	2302      	movs	r3, #2
 80023a2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80023a4:	693b      	ldr	r3, [r7, #16]
 80023a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d003      	beq.n	80023b6 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80023ae:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80023b0:	6878      	ldr	r0, [r7, #4]
 80023b2:	f000 fc48 	bl	8002c46 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80023b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023b8:	3301      	adds	r3, #1
 80023ba:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80023bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023be:	085b      	lsrs	r3, r3, #1
 80023c0:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80023c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	f47f af49 	bne.w	800225c <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	4618      	mov	r0, r3
 80023d0:	f003 fba3 	bl	8005b1a <USB_ReadInterrupts>
 80023d4:	4603      	mov	r3, r0
 80023d6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80023da:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80023de:	d122      	bne.n	8002426 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80023e0:	69fb      	ldr	r3, [r7, #28]
 80023e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80023e6:	685b      	ldr	r3, [r3, #4]
 80023e8:	69fa      	ldr	r2, [r7, #28]
 80023ea:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80023ee:	f023 0301 	bic.w	r3, r3, #1
 80023f2:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 80023fa:	2b01      	cmp	r3, #1
 80023fc:	d108      	bne.n	8002410 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	2200      	movs	r2, #0
 8002402:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002406:	2100      	movs	r1, #0
 8002408:	6878      	ldr	r0, [r7, #4]
 800240a:	f005 fe3d 	bl	8008088 <HAL_PCDEx_LPM_Callback>
 800240e:	e002      	b.n	8002416 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8002410:	6878      	ldr	r0, [r7, #4]
 8002412:	f005 fc61 	bl	8007cd8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	695a      	ldr	r2, [r3, #20]
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8002424:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	4618      	mov	r0, r3
 800242c:	f003 fb75 	bl	8005b1a <USB_ReadInterrupts>
 8002430:	4603      	mov	r3, r0
 8002432:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002436:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800243a:	d112      	bne.n	8002462 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800243c:	69fb      	ldr	r3, [r7, #28]
 800243e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002442:	689b      	ldr	r3, [r3, #8]
 8002444:	f003 0301 	and.w	r3, r3, #1
 8002448:	2b01      	cmp	r3, #1
 800244a:	d102      	bne.n	8002452 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800244c:	6878      	ldr	r0, [r7, #4]
 800244e:	f005 fc1d 	bl	8007c8c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	695a      	ldr	r2, [r3, #20]
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8002460:	615a      	str	r2, [r3, #20]
    }
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	4618      	mov	r0, r3
 8002468:	f003 fb57 	bl	8005b1a <USB_ReadInterrupts>
 800246c:	4603      	mov	r3, r0
 800246e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002472:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002476:	d121      	bne.n	80024bc <HAL_PCD_IRQHandler+0x4b0>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	695a      	ldr	r2, [r3, #20]
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8002486:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 800248e:	2b00      	cmp	r3, #0
 8002490:	d111      	bne.n	80024b6 <HAL_PCD_IRQHandler+0x4aa>
      {
        hpcd->LPM_State = LPM_L1;
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	2201      	movs	r2, #1
 8002496:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024a0:	089b      	lsrs	r3, r3, #2
 80024a2:	f003 020f 	and.w	r2, r3, #15
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80024ac:	2101      	movs	r1, #1
 80024ae:	6878      	ldr	r0, [r7, #4]
 80024b0:	f005 fdea 	bl	8008088 <HAL_PCDEx_LPM_Callback>
 80024b4:	e002      	b.n	80024bc <HAL_PCD_IRQHandler+0x4b0>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80024b6:	6878      	ldr	r0, [r7, #4]
 80024b8:	f005 fbe8 	bl	8007c8c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	4618      	mov	r0, r3
 80024c2:	f003 fb2a 	bl	8005b1a <USB_ReadInterrupts>
 80024c6:	4603      	mov	r3, r0
 80024c8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80024cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80024d0:	f040 80c7 	bne.w	8002662 <HAL_PCD_IRQHandler+0x656>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80024d4:	69fb      	ldr	r3, [r7, #28]
 80024d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80024da:	685b      	ldr	r3, [r3, #4]
 80024dc:	69fa      	ldr	r2, [r7, #28]
 80024de:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80024e2:	f023 0301 	bic.w	r3, r3, #1
 80024e6:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	2110      	movs	r1, #16
 80024ee:	4618      	mov	r0, r3
 80024f0:	f002 fbc4 	bl	8004c7c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80024f4:	2300      	movs	r3, #0
 80024f6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80024f8:	e056      	b.n	80025a8 <HAL_PCD_IRQHandler+0x59c>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80024fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024fc:	015a      	lsls	r2, r3, #5
 80024fe:	69fb      	ldr	r3, [r7, #28]
 8002500:	4413      	add	r3, r2
 8002502:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002506:	461a      	mov	r2, r3
 8002508:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800250c:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800250e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002510:	015a      	lsls	r2, r3, #5
 8002512:	69fb      	ldr	r3, [r7, #28]
 8002514:	4413      	add	r3, r2
 8002516:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800251e:	0151      	lsls	r1, r2, #5
 8002520:	69fa      	ldr	r2, [r7, #28]
 8002522:	440a      	add	r2, r1
 8002524:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002528:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800252c:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800252e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002530:	015a      	lsls	r2, r3, #5
 8002532:	69fb      	ldr	r3, [r7, #28]
 8002534:	4413      	add	r3, r2
 8002536:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800253e:	0151      	lsls	r1, r2, #5
 8002540:	69fa      	ldr	r2, [r7, #28]
 8002542:	440a      	add	r2, r1
 8002544:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002548:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800254c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800254e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002550:	015a      	lsls	r2, r3, #5
 8002552:	69fb      	ldr	r3, [r7, #28]
 8002554:	4413      	add	r3, r2
 8002556:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800255a:	461a      	mov	r2, r3
 800255c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002560:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002562:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002564:	015a      	lsls	r2, r3, #5
 8002566:	69fb      	ldr	r3, [r7, #28]
 8002568:	4413      	add	r3, r2
 800256a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002572:	0151      	lsls	r1, r2, #5
 8002574:	69fa      	ldr	r2, [r7, #28]
 8002576:	440a      	add	r2, r1
 8002578:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800257c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002580:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002582:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002584:	015a      	lsls	r2, r3, #5
 8002586:	69fb      	ldr	r3, [r7, #28]
 8002588:	4413      	add	r3, r2
 800258a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002592:	0151      	lsls	r1, r2, #5
 8002594:	69fa      	ldr	r2, [r7, #28]
 8002596:	440a      	add	r2, r1
 8002598:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800259c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80025a0:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80025a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025a4:	3301      	adds	r3, #1
 80025a6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	685b      	ldr	r3, [r3, #4]
 80025ac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80025ae:	429a      	cmp	r2, r3
 80025b0:	d3a3      	bcc.n	80024fa <HAL_PCD_IRQHandler+0x4ee>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80025b2:	69fb      	ldr	r3, [r7, #28]
 80025b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80025b8:	69db      	ldr	r3, [r3, #28]
 80025ba:	69fa      	ldr	r2, [r7, #28]
 80025bc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80025c0:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80025c4:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d016      	beq.n	80025fc <HAL_PCD_IRQHandler+0x5f0>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80025ce:	69fb      	ldr	r3, [r7, #28]
 80025d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80025d4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80025d8:	69fa      	ldr	r2, [r7, #28]
 80025da:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80025de:	f043 030b 	orr.w	r3, r3, #11
 80025e2:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80025e6:	69fb      	ldr	r3, [r7, #28]
 80025e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80025ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025ee:	69fa      	ldr	r2, [r7, #28]
 80025f0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80025f4:	f043 030b 	orr.w	r3, r3, #11
 80025f8:	6453      	str	r3, [r2, #68]	; 0x44
 80025fa:	e015      	b.n	8002628 <HAL_PCD_IRQHandler+0x61c>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80025fc:	69fb      	ldr	r3, [r7, #28]
 80025fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002602:	695b      	ldr	r3, [r3, #20]
 8002604:	69fa      	ldr	r2, [r7, #28]
 8002606:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800260a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800260e:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8002612:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002614:	69fb      	ldr	r3, [r7, #28]
 8002616:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800261a:	691b      	ldr	r3, [r3, #16]
 800261c:	69fa      	ldr	r2, [r7, #28]
 800261e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002622:	f043 030b 	orr.w	r3, r3, #11
 8002626:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002628:	69fb      	ldr	r3, [r7, #28]
 800262a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	69fa      	ldr	r2, [r7, #28]
 8002632:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002636:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800263a:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	6818      	ldr	r0, [r3, #0]
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	691b      	ldr	r3, [r3, #16]
 8002644:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800264c:	461a      	mov	r2, r3
 800264e:	f003 fb29 	bl	8005ca4 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	695a      	ldr	r2, [r3, #20]
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8002660:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	4618      	mov	r0, r3
 8002668:	f003 fa57 	bl	8005b1a <USB_ReadInterrupts>
 800266c:	4603      	mov	r3, r0
 800266e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002672:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002676:	d124      	bne.n	80026c2 <HAL_PCD_IRQHandler+0x6b6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	4618      	mov	r0, r3
 800267e:	f003 faed 	bl	8005c5c <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	4618      	mov	r0, r3
 8002688:	f002 fb55 	bl	8004d36 <USB_GetDevSpeed>
 800268c:	4603      	mov	r3, r0
 800268e:	461a      	mov	r2, r3
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681c      	ldr	r4, [r3, #0]
 8002698:	f000 fecc 	bl	8003434 <HAL_RCC_GetHCLKFreq>
 800269c:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80026a2:	b2db      	uxtb	r3, r3
 80026a4:	461a      	mov	r2, r3
 80026a6:	4620      	mov	r0, r4
 80026a8:	f002 f87a 	bl	80047a0 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80026ac:	6878      	ldr	r0, [r7, #4]
 80026ae:	f005 fac4 	bl	8007c3a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	695a      	ldr	r2, [r3, #20]
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80026c0:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	4618      	mov	r0, r3
 80026c8:	f003 fa27 	bl	8005b1a <USB_ReadInterrupts>
 80026cc:	4603      	mov	r3, r0
 80026ce:	f003 0308 	and.w	r3, r3, #8
 80026d2:	2b08      	cmp	r3, #8
 80026d4:	d10a      	bne.n	80026ec <HAL_PCD_IRQHandler+0x6e0>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80026d6:	6878      	ldr	r0, [r7, #4]
 80026d8:	f005 faa1 	bl	8007c1e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	695a      	ldr	r2, [r3, #20]
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f002 0208 	and.w	r2, r2, #8
 80026ea:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	4618      	mov	r0, r3
 80026f2:	f003 fa12 	bl	8005b1a <USB_ReadInterrupts>
 80026f6:	4603      	mov	r3, r0
 80026f8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80026fc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002700:	d10f      	bne.n	8002722 <HAL_PCD_IRQHandler+0x716>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8002702:	2300      	movs	r3, #0
 8002704:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002706:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002708:	b2db      	uxtb	r3, r3
 800270a:	4619      	mov	r1, r3
 800270c:	6878      	ldr	r0, [r7, #4]
 800270e:	f005 fb03 	bl	8007d18 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	695a      	ldr	r2, [r3, #20]
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8002720:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	4618      	mov	r0, r3
 8002728:	f003 f9f7 	bl	8005b1a <USB_ReadInterrupts>
 800272c:	4603      	mov	r3, r0
 800272e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002732:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002736:	d10f      	bne.n	8002758 <HAL_PCD_IRQHandler+0x74c>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8002738:	2300      	movs	r3, #0
 800273a:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800273c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800273e:	b2db      	uxtb	r3, r3
 8002740:	4619      	mov	r1, r3
 8002742:	6878      	ldr	r0, [r7, #4]
 8002744:	f005 fad6 	bl	8007cf4 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	695a      	ldr	r2, [r3, #20]
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8002756:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	4618      	mov	r0, r3
 800275e:	f003 f9dc 	bl	8005b1a <USB_ReadInterrupts>
 8002762:	4603      	mov	r3, r0
 8002764:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002768:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800276c:	d10a      	bne.n	8002784 <HAL_PCD_IRQHandler+0x778>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800276e:	6878      	ldr	r0, [r7, #4]
 8002770:	f005 fae4 	bl	8007d3c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	695a      	ldr	r2, [r3, #20]
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8002782:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	4618      	mov	r0, r3
 800278a:	f003 f9c6 	bl	8005b1a <USB_ReadInterrupts>
 800278e:	4603      	mov	r3, r0
 8002790:	f003 0304 	and.w	r3, r3, #4
 8002794:	2b04      	cmp	r3, #4
 8002796:	d115      	bne.n	80027c4 <HAL_PCD_IRQHandler+0x7b8>
    {
      temp = hpcd->Instance->GOTGINT;
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	685b      	ldr	r3, [r3, #4]
 800279e:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80027a0:	69bb      	ldr	r3, [r7, #24]
 80027a2:	f003 0304 	and.w	r3, r3, #4
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d002      	beq.n	80027b0 <HAL_PCD_IRQHandler+0x7a4>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80027aa:	6878      	ldr	r0, [r7, #4]
 80027ac:	f005 fad4 	bl	8007d58 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	6859      	ldr	r1, [r3, #4]
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	69ba      	ldr	r2, [r7, #24]
 80027bc:	430a      	orrs	r2, r1
 80027be:	605a      	str	r2, [r3, #4]
 80027c0:	e000      	b.n	80027c4 <HAL_PCD_IRQHandler+0x7b8>
      return;
 80027c2:	bf00      	nop
    }
  }
}
 80027c4:	3734      	adds	r7, #52	; 0x34
 80027c6:	46bd      	mov	sp, r7
 80027c8:	bd90      	pop	{r4, r7, pc}

080027ca <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80027ca:	b580      	push	{r7, lr}
 80027cc:	b082      	sub	sp, #8
 80027ce:	af00      	add	r7, sp, #0
 80027d0:	6078      	str	r0, [r7, #4]
 80027d2:	460b      	mov	r3, r1
 80027d4:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80027dc:	2b01      	cmp	r3, #1
 80027de:	d101      	bne.n	80027e4 <HAL_PCD_SetAddress+0x1a>
 80027e0:	2302      	movs	r3, #2
 80027e2:	e013      	b.n	800280c <HAL_PCD_SetAddress+0x42>
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	2201      	movs	r2, #1
 80027e8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	78fa      	ldrb	r2, [r7, #3]
 80027f0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	78fa      	ldrb	r2, [r7, #3]
 80027fa:	4611      	mov	r1, r2
 80027fc:	4618      	mov	r0, r3
 80027fe:	f003 f924 	bl	8005a4a <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	2200      	movs	r2, #0
 8002806:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800280a:	2300      	movs	r3, #0
}
 800280c:	4618      	mov	r0, r3
 800280e:	3708      	adds	r7, #8
 8002810:	46bd      	mov	sp, r7
 8002812:	bd80      	pop	{r7, pc}

08002814 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002814:	b580      	push	{r7, lr}
 8002816:	b084      	sub	sp, #16
 8002818:	af00      	add	r7, sp, #0
 800281a:	6078      	str	r0, [r7, #4]
 800281c:	4608      	mov	r0, r1
 800281e:	4611      	mov	r1, r2
 8002820:	461a      	mov	r2, r3
 8002822:	4603      	mov	r3, r0
 8002824:	70fb      	strb	r3, [r7, #3]
 8002826:	460b      	mov	r3, r1
 8002828:	803b      	strh	r3, [r7, #0]
 800282a:	4613      	mov	r3, r2
 800282c:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800282e:	2300      	movs	r3, #0
 8002830:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002832:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002836:	2b00      	cmp	r3, #0
 8002838:	da0f      	bge.n	800285a <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800283a:	78fb      	ldrb	r3, [r7, #3]
 800283c:	f003 020f 	and.w	r2, r3, #15
 8002840:	4613      	mov	r3, r2
 8002842:	00db      	lsls	r3, r3, #3
 8002844:	1a9b      	subs	r3, r3, r2
 8002846:	009b      	lsls	r3, r3, #2
 8002848:	3338      	adds	r3, #56	; 0x38
 800284a:	687a      	ldr	r2, [r7, #4]
 800284c:	4413      	add	r3, r2
 800284e:	3304      	adds	r3, #4
 8002850:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	2201      	movs	r2, #1
 8002856:	705a      	strb	r2, [r3, #1]
 8002858:	e00f      	b.n	800287a <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800285a:	78fb      	ldrb	r3, [r7, #3]
 800285c:	f003 020f 	and.w	r2, r3, #15
 8002860:	4613      	mov	r3, r2
 8002862:	00db      	lsls	r3, r3, #3
 8002864:	1a9b      	subs	r3, r3, r2
 8002866:	009b      	lsls	r3, r3, #2
 8002868:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800286c:	687a      	ldr	r2, [r7, #4]
 800286e:	4413      	add	r3, r2
 8002870:	3304      	adds	r3, #4
 8002872:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	2200      	movs	r2, #0
 8002878:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800287a:	78fb      	ldrb	r3, [r7, #3]
 800287c:	f003 030f 	and.w	r3, r3, #15
 8002880:	b2da      	uxtb	r2, r3
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002886:	883a      	ldrh	r2, [r7, #0]
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	78ba      	ldrb	r2, [r7, #2]
 8002890:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	785b      	ldrb	r3, [r3, #1]
 8002896:	2b00      	cmp	r3, #0
 8002898:	d004      	beq.n	80028a4 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	781b      	ldrb	r3, [r3, #0]
 800289e:	b29a      	uxth	r2, r3
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80028a4:	78bb      	ldrb	r3, [r7, #2]
 80028a6:	2b02      	cmp	r3, #2
 80028a8:	d102      	bne.n	80028b0 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	2200      	movs	r2, #0
 80028ae:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80028b6:	2b01      	cmp	r3, #1
 80028b8:	d101      	bne.n	80028be <HAL_PCD_EP_Open+0xaa>
 80028ba:	2302      	movs	r3, #2
 80028bc:	e00e      	b.n	80028dc <HAL_PCD_EP_Open+0xc8>
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	2201      	movs	r2, #1
 80028c2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	68f9      	ldr	r1, [r7, #12]
 80028cc:	4618      	mov	r0, r3
 80028ce:	f002 fa57 	bl	8004d80 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	2200      	movs	r2, #0
 80028d6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 80028da:	7afb      	ldrb	r3, [r7, #11]
}
 80028dc:	4618      	mov	r0, r3
 80028de:	3710      	adds	r7, #16
 80028e0:	46bd      	mov	sp, r7
 80028e2:	bd80      	pop	{r7, pc}

080028e4 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80028e4:	b580      	push	{r7, lr}
 80028e6:	b084      	sub	sp, #16
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	6078      	str	r0, [r7, #4]
 80028ec:	460b      	mov	r3, r1
 80028ee:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80028f0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	da0f      	bge.n	8002918 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80028f8:	78fb      	ldrb	r3, [r7, #3]
 80028fa:	f003 020f 	and.w	r2, r3, #15
 80028fe:	4613      	mov	r3, r2
 8002900:	00db      	lsls	r3, r3, #3
 8002902:	1a9b      	subs	r3, r3, r2
 8002904:	009b      	lsls	r3, r3, #2
 8002906:	3338      	adds	r3, #56	; 0x38
 8002908:	687a      	ldr	r2, [r7, #4]
 800290a:	4413      	add	r3, r2
 800290c:	3304      	adds	r3, #4
 800290e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	2201      	movs	r2, #1
 8002914:	705a      	strb	r2, [r3, #1]
 8002916:	e00f      	b.n	8002938 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002918:	78fb      	ldrb	r3, [r7, #3]
 800291a:	f003 020f 	and.w	r2, r3, #15
 800291e:	4613      	mov	r3, r2
 8002920:	00db      	lsls	r3, r3, #3
 8002922:	1a9b      	subs	r3, r3, r2
 8002924:	009b      	lsls	r3, r3, #2
 8002926:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800292a:	687a      	ldr	r2, [r7, #4]
 800292c:	4413      	add	r3, r2
 800292e:	3304      	adds	r3, #4
 8002930:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	2200      	movs	r2, #0
 8002936:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8002938:	78fb      	ldrb	r3, [r7, #3]
 800293a:	f003 030f 	and.w	r3, r3, #15
 800293e:	b2da      	uxtb	r2, r3
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800294a:	2b01      	cmp	r3, #1
 800294c:	d101      	bne.n	8002952 <HAL_PCD_EP_Close+0x6e>
 800294e:	2302      	movs	r3, #2
 8002950:	e00e      	b.n	8002970 <HAL_PCD_EP_Close+0x8c>
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	2201      	movs	r2, #1
 8002956:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	68f9      	ldr	r1, [r7, #12]
 8002960:	4618      	mov	r0, r3
 8002962:	f002 fa95 	bl	8004e90 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	2200      	movs	r2, #0
 800296a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 800296e:	2300      	movs	r3, #0
}
 8002970:	4618      	mov	r0, r3
 8002972:	3710      	adds	r7, #16
 8002974:	46bd      	mov	sp, r7
 8002976:	bd80      	pop	{r7, pc}

08002978 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002978:	b580      	push	{r7, lr}
 800297a:	b086      	sub	sp, #24
 800297c:	af00      	add	r7, sp, #0
 800297e:	60f8      	str	r0, [r7, #12]
 8002980:	607a      	str	r2, [r7, #4]
 8002982:	603b      	str	r3, [r7, #0]
 8002984:	460b      	mov	r3, r1
 8002986:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002988:	7afb      	ldrb	r3, [r7, #11]
 800298a:	f003 020f 	and.w	r2, r3, #15
 800298e:	4613      	mov	r3, r2
 8002990:	00db      	lsls	r3, r3, #3
 8002992:	1a9b      	subs	r3, r3, r2
 8002994:	009b      	lsls	r3, r3, #2
 8002996:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800299a:	68fa      	ldr	r2, [r7, #12]
 800299c:	4413      	add	r3, r2
 800299e:	3304      	adds	r3, #4
 80029a0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80029a2:	697b      	ldr	r3, [r7, #20]
 80029a4:	687a      	ldr	r2, [r7, #4]
 80029a6:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80029a8:	697b      	ldr	r3, [r7, #20]
 80029aa:	683a      	ldr	r2, [r7, #0]
 80029ac:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 80029ae:	697b      	ldr	r3, [r7, #20]
 80029b0:	2200      	movs	r2, #0
 80029b2:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 80029b4:	697b      	ldr	r3, [r7, #20]
 80029b6:	2200      	movs	r2, #0
 80029b8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80029ba:	7afb      	ldrb	r3, [r7, #11]
 80029bc:	f003 030f 	and.w	r3, r3, #15
 80029c0:	b2da      	uxtb	r2, r3
 80029c2:	697b      	ldr	r3, [r7, #20]
 80029c4:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	691b      	ldr	r3, [r3, #16]
 80029ca:	2b01      	cmp	r3, #1
 80029cc:	d102      	bne.n	80029d4 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80029ce:	687a      	ldr	r2, [r7, #4]
 80029d0:	697b      	ldr	r3, [r7, #20]
 80029d2:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80029d4:	7afb      	ldrb	r3, [r7, #11]
 80029d6:	f003 030f 	and.w	r3, r3, #15
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d109      	bne.n	80029f2 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	6818      	ldr	r0, [r3, #0]
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	691b      	ldr	r3, [r3, #16]
 80029e6:	b2db      	uxtb	r3, r3
 80029e8:	461a      	mov	r2, r3
 80029ea:	6979      	ldr	r1, [r7, #20]
 80029ec:	f002 fd70 	bl	80054d0 <USB_EP0StartXfer>
 80029f0:	e008      	b.n	8002a04 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	6818      	ldr	r0, [r3, #0]
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	691b      	ldr	r3, [r3, #16]
 80029fa:	b2db      	uxtb	r3, r3
 80029fc:	461a      	mov	r2, r3
 80029fe:	6979      	ldr	r1, [r7, #20]
 8002a00:	f002 fb22 	bl	8005048 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002a04:	2300      	movs	r3, #0
}
 8002a06:	4618      	mov	r0, r3
 8002a08:	3718      	adds	r7, #24
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	bd80      	pop	{r7, pc}

08002a0e <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002a0e:	b480      	push	{r7}
 8002a10:	b083      	sub	sp, #12
 8002a12:	af00      	add	r7, sp, #0
 8002a14:	6078      	str	r0, [r7, #4]
 8002a16:	460b      	mov	r3, r1
 8002a18:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002a1a:	78fb      	ldrb	r3, [r7, #3]
 8002a1c:	f003 020f 	and.w	r2, r3, #15
 8002a20:	6879      	ldr	r1, [r7, #4]
 8002a22:	4613      	mov	r3, r2
 8002a24:	00db      	lsls	r3, r3, #3
 8002a26:	1a9b      	subs	r3, r3, r2
 8002a28:	009b      	lsls	r3, r3, #2
 8002a2a:	440b      	add	r3, r1
 8002a2c:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8002a30:	681b      	ldr	r3, [r3, #0]
}
 8002a32:	4618      	mov	r0, r3
 8002a34:	370c      	adds	r7, #12
 8002a36:	46bd      	mov	sp, r7
 8002a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a3c:	4770      	bx	lr

08002a3e <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002a3e:	b580      	push	{r7, lr}
 8002a40:	b086      	sub	sp, #24
 8002a42:	af00      	add	r7, sp, #0
 8002a44:	60f8      	str	r0, [r7, #12]
 8002a46:	607a      	str	r2, [r7, #4]
 8002a48:	603b      	str	r3, [r7, #0]
 8002a4a:	460b      	mov	r3, r1
 8002a4c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002a4e:	7afb      	ldrb	r3, [r7, #11]
 8002a50:	f003 020f 	and.w	r2, r3, #15
 8002a54:	4613      	mov	r3, r2
 8002a56:	00db      	lsls	r3, r3, #3
 8002a58:	1a9b      	subs	r3, r3, r2
 8002a5a:	009b      	lsls	r3, r3, #2
 8002a5c:	3338      	adds	r3, #56	; 0x38
 8002a5e:	68fa      	ldr	r2, [r7, #12]
 8002a60:	4413      	add	r3, r2
 8002a62:	3304      	adds	r3, #4
 8002a64:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002a66:	697b      	ldr	r3, [r7, #20]
 8002a68:	687a      	ldr	r2, [r7, #4]
 8002a6a:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002a6c:	697b      	ldr	r3, [r7, #20]
 8002a6e:	683a      	ldr	r2, [r7, #0]
 8002a70:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8002a72:	697b      	ldr	r3, [r7, #20]
 8002a74:	2200      	movs	r2, #0
 8002a76:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8002a78:	697b      	ldr	r3, [r7, #20]
 8002a7a:	2201      	movs	r2, #1
 8002a7c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002a7e:	7afb      	ldrb	r3, [r7, #11]
 8002a80:	f003 030f 	and.w	r3, r3, #15
 8002a84:	b2da      	uxtb	r2, r3
 8002a86:	697b      	ldr	r3, [r7, #20]
 8002a88:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	691b      	ldr	r3, [r3, #16]
 8002a8e:	2b01      	cmp	r3, #1
 8002a90:	d102      	bne.n	8002a98 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002a92:	687a      	ldr	r2, [r7, #4]
 8002a94:	697b      	ldr	r3, [r7, #20]
 8002a96:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002a98:	7afb      	ldrb	r3, [r7, #11]
 8002a9a:	f003 030f 	and.w	r3, r3, #15
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d109      	bne.n	8002ab6 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	6818      	ldr	r0, [r3, #0]
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	691b      	ldr	r3, [r3, #16]
 8002aaa:	b2db      	uxtb	r3, r3
 8002aac:	461a      	mov	r2, r3
 8002aae:	6979      	ldr	r1, [r7, #20]
 8002ab0:	f002 fd0e 	bl	80054d0 <USB_EP0StartXfer>
 8002ab4:	e008      	b.n	8002ac8 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	6818      	ldr	r0, [r3, #0]
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	691b      	ldr	r3, [r3, #16]
 8002abe:	b2db      	uxtb	r3, r3
 8002ac0:	461a      	mov	r2, r3
 8002ac2:	6979      	ldr	r1, [r7, #20]
 8002ac4:	f002 fac0 	bl	8005048 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002ac8:	2300      	movs	r3, #0
}
 8002aca:	4618      	mov	r0, r3
 8002acc:	3718      	adds	r7, #24
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	bd80      	pop	{r7, pc}

08002ad2 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002ad2:	b580      	push	{r7, lr}
 8002ad4:	b084      	sub	sp, #16
 8002ad6:	af00      	add	r7, sp, #0
 8002ad8:	6078      	str	r0, [r7, #4]
 8002ada:	460b      	mov	r3, r1
 8002adc:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002ade:	78fb      	ldrb	r3, [r7, #3]
 8002ae0:	f003 020f 	and.w	r2, r3, #15
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	685b      	ldr	r3, [r3, #4]
 8002ae8:	429a      	cmp	r2, r3
 8002aea:	d901      	bls.n	8002af0 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002aec:	2301      	movs	r3, #1
 8002aee:	e050      	b.n	8002b92 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002af0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	da0f      	bge.n	8002b18 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002af8:	78fb      	ldrb	r3, [r7, #3]
 8002afa:	f003 020f 	and.w	r2, r3, #15
 8002afe:	4613      	mov	r3, r2
 8002b00:	00db      	lsls	r3, r3, #3
 8002b02:	1a9b      	subs	r3, r3, r2
 8002b04:	009b      	lsls	r3, r3, #2
 8002b06:	3338      	adds	r3, #56	; 0x38
 8002b08:	687a      	ldr	r2, [r7, #4]
 8002b0a:	4413      	add	r3, r2
 8002b0c:	3304      	adds	r3, #4
 8002b0e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	2201      	movs	r2, #1
 8002b14:	705a      	strb	r2, [r3, #1]
 8002b16:	e00d      	b.n	8002b34 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002b18:	78fa      	ldrb	r2, [r7, #3]
 8002b1a:	4613      	mov	r3, r2
 8002b1c:	00db      	lsls	r3, r3, #3
 8002b1e:	1a9b      	subs	r3, r3, r2
 8002b20:	009b      	lsls	r3, r3, #2
 8002b22:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002b26:	687a      	ldr	r2, [r7, #4]
 8002b28:	4413      	add	r3, r2
 8002b2a:	3304      	adds	r3, #4
 8002b2c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	2200      	movs	r2, #0
 8002b32:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	2201      	movs	r2, #1
 8002b38:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002b3a:	78fb      	ldrb	r3, [r7, #3]
 8002b3c:	f003 030f 	and.w	r3, r3, #15
 8002b40:	b2da      	uxtb	r2, r3
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002b4c:	2b01      	cmp	r3, #1
 8002b4e:	d101      	bne.n	8002b54 <HAL_PCD_EP_SetStall+0x82>
 8002b50:	2302      	movs	r3, #2
 8002b52:	e01e      	b.n	8002b92 <HAL_PCD_EP_SetStall+0xc0>
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	2201      	movs	r2, #1
 8002b58:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	68f9      	ldr	r1, [r7, #12]
 8002b62:	4618      	mov	r0, r3
 8002b64:	f002 fe9d 	bl	80058a2 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002b68:	78fb      	ldrb	r3, [r7, #3]
 8002b6a:	f003 030f 	and.w	r3, r3, #15
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d10a      	bne.n	8002b88 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	6818      	ldr	r0, [r3, #0]
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	691b      	ldr	r3, [r3, #16]
 8002b7a:	b2d9      	uxtb	r1, r3
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002b82:	461a      	mov	r2, r3
 8002b84:	f003 f88e 	bl	8005ca4 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	2200      	movs	r2, #0
 8002b8c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002b90:	2300      	movs	r3, #0
}
 8002b92:	4618      	mov	r0, r3
 8002b94:	3710      	adds	r7, #16
 8002b96:	46bd      	mov	sp, r7
 8002b98:	bd80      	pop	{r7, pc}

08002b9a <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002b9a:	b580      	push	{r7, lr}
 8002b9c:	b084      	sub	sp, #16
 8002b9e:	af00      	add	r7, sp, #0
 8002ba0:	6078      	str	r0, [r7, #4]
 8002ba2:	460b      	mov	r3, r1
 8002ba4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002ba6:	78fb      	ldrb	r3, [r7, #3]
 8002ba8:	f003 020f 	and.w	r2, r3, #15
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	685b      	ldr	r3, [r3, #4]
 8002bb0:	429a      	cmp	r2, r3
 8002bb2:	d901      	bls.n	8002bb8 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002bb4:	2301      	movs	r3, #1
 8002bb6:	e042      	b.n	8002c3e <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002bb8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	da0f      	bge.n	8002be0 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002bc0:	78fb      	ldrb	r3, [r7, #3]
 8002bc2:	f003 020f 	and.w	r2, r3, #15
 8002bc6:	4613      	mov	r3, r2
 8002bc8:	00db      	lsls	r3, r3, #3
 8002bca:	1a9b      	subs	r3, r3, r2
 8002bcc:	009b      	lsls	r3, r3, #2
 8002bce:	3338      	adds	r3, #56	; 0x38
 8002bd0:	687a      	ldr	r2, [r7, #4]
 8002bd2:	4413      	add	r3, r2
 8002bd4:	3304      	adds	r3, #4
 8002bd6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	2201      	movs	r2, #1
 8002bdc:	705a      	strb	r2, [r3, #1]
 8002bde:	e00f      	b.n	8002c00 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002be0:	78fb      	ldrb	r3, [r7, #3]
 8002be2:	f003 020f 	and.w	r2, r3, #15
 8002be6:	4613      	mov	r3, r2
 8002be8:	00db      	lsls	r3, r3, #3
 8002bea:	1a9b      	subs	r3, r3, r2
 8002bec:	009b      	lsls	r3, r3, #2
 8002bee:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002bf2:	687a      	ldr	r2, [r7, #4]
 8002bf4:	4413      	add	r3, r2
 8002bf6:	3304      	adds	r3, #4
 8002bf8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	2200      	movs	r2, #0
 8002bfe:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	2200      	movs	r2, #0
 8002c04:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002c06:	78fb      	ldrb	r3, [r7, #3]
 8002c08:	f003 030f 	and.w	r3, r3, #15
 8002c0c:	b2da      	uxtb	r2, r3
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002c18:	2b01      	cmp	r3, #1
 8002c1a:	d101      	bne.n	8002c20 <HAL_PCD_EP_ClrStall+0x86>
 8002c1c:	2302      	movs	r3, #2
 8002c1e:	e00e      	b.n	8002c3e <HAL_PCD_EP_ClrStall+0xa4>
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	2201      	movs	r2, #1
 8002c24:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	68f9      	ldr	r1, [r7, #12]
 8002c2e:	4618      	mov	r0, r3
 8002c30:	f002 fea5 	bl	800597e <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	2200      	movs	r2, #0
 8002c38:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002c3c:	2300      	movs	r3, #0
}
 8002c3e:	4618      	mov	r0, r3
 8002c40:	3710      	adds	r7, #16
 8002c42:	46bd      	mov	sp, r7
 8002c44:	bd80      	pop	{r7, pc}

08002c46 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002c46:	b580      	push	{r7, lr}
 8002c48:	b08a      	sub	sp, #40	; 0x28
 8002c4a:	af02      	add	r7, sp, #8
 8002c4c:	6078      	str	r0, [r7, #4]
 8002c4e:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002c56:	697b      	ldr	r3, [r7, #20]
 8002c58:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8002c5a:	683a      	ldr	r2, [r7, #0]
 8002c5c:	4613      	mov	r3, r2
 8002c5e:	00db      	lsls	r3, r3, #3
 8002c60:	1a9b      	subs	r3, r3, r2
 8002c62:	009b      	lsls	r3, r3, #2
 8002c64:	3338      	adds	r3, #56	; 0x38
 8002c66:	687a      	ldr	r2, [r7, #4]
 8002c68:	4413      	add	r3, r2
 8002c6a:	3304      	adds	r3, #4
 8002c6c:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	699a      	ldr	r2, [r3, #24]
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	695b      	ldr	r3, [r3, #20]
 8002c76:	429a      	cmp	r2, r3
 8002c78:	d901      	bls.n	8002c7e <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8002c7a:	2301      	movs	r3, #1
 8002c7c:	e06c      	b.n	8002d58 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	695a      	ldr	r2, [r3, #20]
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	699b      	ldr	r3, [r3, #24]
 8002c86:	1ad3      	subs	r3, r2, r3
 8002c88:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	689b      	ldr	r3, [r3, #8]
 8002c8e:	69fa      	ldr	r2, [r7, #28]
 8002c90:	429a      	cmp	r2, r3
 8002c92:	d902      	bls.n	8002c9a <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	689b      	ldr	r3, [r3, #8]
 8002c98:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8002c9a:	69fb      	ldr	r3, [r7, #28]
 8002c9c:	3303      	adds	r3, #3
 8002c9e:	089b      	lsrs	r3, r3, #2
 8002ca0:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002ca2:	e02b      	b.n	8002cfc <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	695a      	ldr	r2, [r3, #20]
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	699b      	ldr	r3, [r3, #24]
 8002cac:	1ad3      	subs	r3, r2, r3
 8002cae:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	689b      	ldr	r3, [r3, #8]
 8002cb4:	69fa      	ldr	r2, [r7, #28]
 8002cb6:	429a      	cmp	r2, r3
 8002cb8:	d902      	bls.n	8002cc0 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	689b      	ldr	r3, [r3, #8]
 8002cbe:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8002cc0:	69fb      	ldr	r3, [r7, #28]
 8002cc2:	3303      	adds	r3, #3
 8002cc4:	089b      	lsrs	r3, r3, #2
 8002cc6:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	68d9      	ldr	r1, [r3, #12]
 8002ccc:	683b      	ldr	r3, [r7, #0]
 8002cce:	b2da      	uxtb	r2, r3
 8002cd0:	69fb      	ldr	r3, [r7, #28]
 8002cd2:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002cd8:	b2db      	uxtb	r3, r3
 8002cda:	9300      	str	r3, [sp, #0]
 8002cdc:	4603      	mov	r3, r0
 8002cde:	6978      	ldr	r0, [r7, #20]
 8002ce0:	f002 fd49 	bl	8005776 <USB_WritePacket>

    ep->xfer_buff  += len;
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	68da      	ldr	r2, [r3, #12]
 8002ce8:	69fb      	ldr	r3, [r7, #28]
 8002cea:	441a      	add	r2, r3
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	699a      	ldr	r2, [r3, #24]
 8002cf4:	69fb      	ldr	r3, [r7, #28]
 8002cf6:	441a      	add	r2, r3
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002cfc:	683b      	ldr	r3, [r7, #0]
 8002cfe:	015a      	lsls	r2, r3, #5
 8002d00:	693b      	ldr	r3, [r7, #16]
 8002d02:	4413      	add	r3, r2
 8002d04:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002d08:	699b      	ldr	r3, [r3, #24]
 8002d0a:	b29b      	uxth	r3, r3
 8002d0c:	69ba      	ldr	r2, [r7, #24]
 8002d0e:	429a      	cmp	r2, r3
 8002d10:	d809      	bhi.n	8002d26 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	699a      	ldr	r2, [r3, #24]
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002d1a:	429a      	cmp	r2, r3
 8002d1c:	d203      	bcs.n	8002d26 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	695b      	ldr	r3, [r3, #20]
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d1be      	bne.n	8002ca4 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	695a      	ldr	r2, [r3, #20]
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	699b      	ldr	r3, [r3, #24]
 8002d2e:	429a      	cmp	r2, r3
 8002d30:	d811      	bhi.n	8002d56 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002d32:	683b      	ldr	r3, [r7, #0]
 8002d34:	f003 030f 	and.w	r3, r3, #15
 8002d38:	2201      	movs	r2, #1
 8002d3a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d3e:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002d40:	693b      	ldr	r3, [r7, #16]
 8002d42:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002d46:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002d48:	68bb      	ldr	r3, [r7, #8]
 8002d4a:	43db      	mvns	r3, r3
 8002d4c:	6939      	ldr	r1, [r7, #16]
 8002d4e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002d52:	4013      	ands	r3, r2
 8002d54:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8002d56:	2300      	movs	r3, #0
}
 8002d58:	4618      	mov	r0, r3
 8002d5a:	3720      	adds	r7, #32
 8002d5c:	46bd      	mov	sp, r7
 8002d5e:	bd80      	pop	{r7, pc}

08002d60 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002d60:	b580      	push	{r7, lr}
 8002d62:	b086      	sub	sp, #24
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	6078      	str	r0, [r7, #4]
 8002d68:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002d70:	697b      	ldr	r3, [r7, #20]
 8002d72:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002d74:	697b      	ldr	r3, [r7, #20]
 8002d76:	333c      	adds	r3, #60	; 0x3c
 8002d78:	3304      	adds	r3, #4
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002d7e:	683b      	ldr	r3, [r7, #0]
 8002d80:	015a      	lsls	r2, r3, #5
 8002d82:	693b      	ldr	r3, [r7, #16]
 8002d84:	4413      	add	r3, r2
 8002d86:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002d8a:	689b      	ldr	r3, [r3, #8]
 8002d8c:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	691b      	ldr	r3, [r3, #16]
 8002d92:	2b01      	cmp	r3, #1
 8002d94:	f040 80a0 	bne.w	8002ed8 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8002d98:	68bb      	ldr	r3, [r7, #8]
 8002d9a:	f003 0308 	and.w	r3, r3, #8
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d015      	beq.n	8002dce <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	4a72      	ldr	r2, [pc, #456]	; (8002f70 <PCD_EP_OutXfrComplete_int+0x210>)
 8002da6:	4293      	cmp	r3, r2
 8002da8:	f240 80dd 	bls.w	8002f66 <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002dac:	68bb      	ldr	r3, [r7, #8]
 8002dae:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	f000 80d7 	beq.w	8002f66 <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002db8:	683b      	ldr	r3, [r7, #0]
 8002dba:	015a      	lsls	r2, r3, #5
 8002dbc:	693b      	ldr	r3, [r7, #16]
 8002dbe:	4413      	add	r3, r2
 8002dc0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002dc4:	461a      	mov	r2, r3
 8002dc6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002dca:	6093      	str	r3, [r2, #8]
 8002dcc:	e0cb      	b.n	8002f66 <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8002dce:	68bb      	ldr	r3, [r7, #8]
 8002dd0:	f003 0320 	and.w	r3, r3, #32
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d009      	beq.n	8002dec <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002dd8:	683b      	ldr	r3, [r7, #0]
 8002dda:	015a      	lsls	r2, r3, #5
 8002ddc:	693b      	ldr	r3, [r7, #16]
 8002dde:	4413      	add	r3, r2
 8002de0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002de4:	461a      	mov	r2, r3
 8002de6:	2320      	movs	r3, #32
 8002de8:	6093      	str	r3, [r2, #8]
 8002dea:	e0bc      	b.n	8002f66 <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8002dec:	68bb      	ldr	r3, [r7, #8]
 8002dee:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	f040 80b7 	bne.w	8002f66 <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	4a5d      	ldr	r2, [pc, #372]	; (8002f70 <PCD_EP_OutXfrComplete_int+0x210>)
 8002dfc:	4293      	cmp	r3, r2
 8002dfe:	d90f      	bls.n	8002e20 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002e00:	68bb      	ldr	r3, [r7, #8]
 8002e02:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d00a      	beq.n	8002e20 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002e0a:	683b      	ldr	r3, [r7, #0]
 8002e0c:	015a      	lsls	r2, r3, #5
 8002e0e:	693b      	ldr	r3, [r7, #16]
 8002e10:	4413      	add	r3, r2
 8002e12:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002e16:	461a      	mov	r2, r3
 8002e18:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002e1c:	6093      	str	r3, [r2, #8]
 8002e1e:	e0a2      	b.n	8002f66 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8002e20:	6879      	ldr	r1, [r7, #4]
 8002e22:	683a      	ldr	r2, [r7, #0]
 8002e24:	4613      	mov	r3, r2
 8002e26:	00db      	lsls	r3, r3, #3
 8002e28:	1a9b      	subs	r3, r3, r2
 8002e2a:	009b      	lsls	r3, r3, #2
 8002e2c:	440b      	add	r3, r1
 8002e2e:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002e32:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8002e34:	683b      	ldr	r3, [r7, #0]
 8002e36:	0159      	lsls	r1, r3, #5
 8002e38:	693b      	ldr	r3, [r7, #16]
 8002e3a:	440b      	add	r3, r1
 8002e3c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002e40:	691b      	ldr	r3, [r3, #16]
 8002e42:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8002e46:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8002e48:	6878      	ldr	r0, [r7, #4]
 8002e4a:	683a      	ldr	r2, [r7, #0]
 8002e4c:	4613      	mov	r3, r2
 8002e4e:	00db      	lsls	r3, r3, #3
 8002e50:	1a9b      	subs	r3, r3, r2
 8002e52:	009b      	lsls	r3, r3, #2
 8002e54:	4403      	add	r3, r0
 8002e56:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8002e5a:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8002e5c:	6879      	ldr	r1, [r7, #4]
 8002e5e:	683a      	ldr	r2, [r7, #0]
 8002e60:	4613      	mov	r3, r2
 8002e62:	00db      	lsls	r3, r3, #3
 8002e64:	1a9b      	subs	r3, r3, r2
 8002e66:	009b      	lsls	r3, r3, #2
 8002e68:	440b      	add	r3, r1
 8002e6a:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002e6e:	6819      	ldr	r1, [r3, #0]
 8002e70:	6878      	ldr	r0, [r7, #4]
 8002e72:	683a      	ldr	r2, [r7, #0]
 8002e74:	4613      	mov	r3, r2
 8002e76:	00db      	lsls	r3, r3, #3
 8002e78:	1a9b      	subs	r3, r3, r2
 8002e7a:	009b      	lsls	r3, r3, #2
 8002e7c:	4403      	add	r3, r0
 8002e7e:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	4419      	add	r1, r3
 8002e86:	6878      	ldr	r0, [r7, #4]
 8002e88:	683a      	ldr	r2, [r7, #0]
 8002e8a:	4613      	mov	r3, r2
 8002e8c:	00db      	lsls	r3, r3, #3
 8002e8e:	1a9b      	subs	r3, r3, r2
 8002e90:	009b      	lsls	r3, r3, #2
 8002e92:	4403      	add	r3, r0
 8002e94:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002e98:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002e9a:	683b      	ldr	r3, [r7, #0]
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d114      	bne.n	8002eca <PCD_EP_OutXfrComplete_int+0x16a>
 8002ea0:	6879      	ldr	r1, [r7, #4]
 8002ea2:	683a      	ldr	r2, [r7, #0]
 8002ea4:	4613      	mov	r3, r2
 8002ea6:	00db      	lsls	r3, r3, #3
 8002ea8:	1a9b      	subs	r3, r3, r2
 8002eaa:	009b      	lsls	r3, r3, #2
 8002eac:	440b      	add	r3, r1
 8002eae:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d108      	bne.n	8002eca <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	6818      	ldr	r0, [r3, #0]
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002ec2:	461a      	mov	r2, r3
 8002ec4:	2101      	movs	r1, #1
 8002ec6:	f002 feed 	bl	8005ca4 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002eca:	683b      	ldr	r3, [r7, #0]
 8002ecc:	b2db      	uxtb	r3, r3
 8002ece:	4619      	mov	r1, r3
 8002ed0:	6878      	ldr	r0, [r7, #4]
 8002ed2:	f004 fe6f 	bl	8007bb4 <HAL_PCD_DataOutStageCallback>
 8002ed6:	e046      	b.n	8002f66 <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	4a26      	ldr	r2, [pc, #152]	; (8002f74 <PCD_EP_OutXfrComplete_int+0x214>)
 8002edc:	4293      	cmp	r3, r2
 8002ede:	d124      	bne.n	8002f2a <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8002ee0:	68bb      	ldr	r3, [r7, #8]
 8002ee2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d00a      	beq.n	8002f00 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002eea:	683b      	ldr	r3, [r7, #0]
 8002eec:	015a      	lsls	r2, r3, #5
 8002eee:	693b      	ldr	r3, [r7, #16]
 8002ef0:	4413      	add	r3, r2
 8002ef2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002ef6:	461a      	mov	r2, r3
 8002ef8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002efc:	6093      	str	r3, [r2, #8]
 8002efe:	e032      	b.n	8002f66 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002f00:	68bb      	ldr	r3, [r7, #8]
 8002f02:	f003 0320 	and.w	r3, r3, #32
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d008      	beq.n	8002f1c <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002f0a:	683b      	ldr	r3, [r7, #0]
 8002f0c:	015a      	lsls	r2, r3, #5
 8002f0e:	693b      	ldr	r3, [r7, #16]
 8002f10:	4413      	add	r3, r2
 8002f12:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002f16:	461a      	mov	r2, r3
 8002f18:	2320      	movs	r3, #32
 8002f1a:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002f1c:	683b      	ldr	r3, [r7, #0]
 8002f1e:	b2db      	uxtb	r3, r3
 8002f20:	4619      	mov	r1, r3
 8002f22:	6878      	ldr	r0, [r7, #4]
 8002f24:	f004 fe46 	bl	8007bb4 <HAL_PCD_DataOutStageCallback>
 8002f28:	e01d      	b.n	8002f66 <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002f2a:	683b      	ldr	r3, [r7, #0]
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d114      	bne.n	8002f5a <PCD_EP_OutXfrComplete_int+0x1fa>
 8002f30:	6879      	ldr	r1, [r7, #4]
 8002f32:	683a      	ldr	r2, [r7, #0]
 8002f34:	4613      	mov	r3, r2
 8002f36:	00db      	lsls	r3, r3, #3
 8002f38:	1a9b      	subs	r3, r3, r2
 8002f3a:	009b      	lsls	r3, r3, #2
 8002f3c:	440b      	add	r3, r1
 8002f3e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d108      	bne.n	8002f5a <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	6818      	ldr	r0, [r3, #0]
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002f52:	461a      	mov	r2, r3
 8002f54:	2100      	movs	r1, #0
 8002f56:	f002 fea5 	bl	8005ca4 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002f5a:	683b      	ldr	r3, [r7, #0]
 8002f5c:	b2db      	uxtb	r3, r3
 8002f5e:	4619      	mov	r1, r3
 8002f60:	6878      	ldr	r0, [r7, #4]
 8002f62:	f004 fe27 	bl	8007bb4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8002f66:	2300      	movs	r3, #0
}
 8002f68:	4618      	mov	r0, r3
 8002f6a:	3718      	adds	r7, #24
 8002f6c:	46bd      	mov	sp, r7
 8002f6e:	bd80      	pop	{r7, pc}
 8002f70:	4f54300a 	.word	0x4f54300a
 8002f74:	4f54310a 	.word	0x4f54310a

08002f78 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002f78:	b580      	push	{r7, lr}
 8002f7a:	b086      	sub	sp, #24
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	6078      	str	r0, [r7, #4]
 8002f80:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002f88:	697b      	ldr	r3, [r7, #20]
 8002f8a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002f8c:	697b      	ldr	r3, [r7, #20]
 8002f8e:	333c      	adds	r3, #60	; 0x3c
 8002f90:	3304      	adds	r3, #4
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002f96:	683b      	ldr	r3, [r7, #0]
 8002f98:	015a      	lsls	r2, r3, #5
 8002f9a:	693b      	ldr	r3, [r7, #16]
 8002f9c:	4413      	add	r3, r2
 8002f9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002fa2:	689b      	ldr	r3, [r3, #8]
 8002fa4:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	4a15      	ldr	r2, [pc, #84]	; (8003000 <PCD_EP_OutSetupPacket_int+0x88>)
 8002faa:	4293      	cmp	r3, r2
 8002fac:	d90e      	bls.n	8002fcc <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002fae:	68bb      	ldr	r3, [r7, #8]
 8002fb0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d009      	beq.n	8002fcc <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002fb8:	683b      	ldr	r3, [r7, #0]
 8002fba:	015a      	lsls	r2, r3, #5
 8002fbc:	693b      	ldr	r3, [r7, #16]
 8002fbe:	4413      	add	r3, r2
 8002fc0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002fc4:	461a      	mov	r2, r3
 8002fc6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002fca:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8002fcc:	6878      	ldr	r0, [r7, #4]
 8002fce:	f004 fddf 	bl	8007b90 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	4a0a      	ldr	r2, [pc, #40]	; (8003000 <PCD_EP_OutSetupPacket_int+0x88>)
 8002fd6:	4293      	cmp	r3, r2
 8002fd8:	d90c      	bls.n	8002ff4 <PCD_EP_OutSetupPacket_int+0x7c>
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	691b      	ldr	r3, [r3, #16]
 8002fde:	2b01      	cmp	r3, #1
 8002fe0:	d108      	bne.n	8002ff4 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	6818      	ldr	r0, [r3, #0]
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002fec:	461a      	mov	r2, r3
 8002fee:	2101      	movs	r1, #1
 8002ff0:	f002 fe58 	bl	8005ca4 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8002ff4:	2300      	movs	r3, #0
}
 8002ff6:	4618      	mov	r0, r3
 8002ff8:	3718      	adds	r7, #24
 8002ffa:	46bd      	mov	sp, r7
 8002ffc:	bd80      	pop	{r7, pc}
 8002ffe:	bf00      	nop
 8003000:	4f54300a 	.word	0x4f54300a

08003004 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8003004:	b480      	push	{r7}
 8003006:	b085      	sub	sp, #20
 8003008:	af00      	add	r7, sp, #0
 800300a:	6078      	str	r0, [r7, #4]
 800300c:	460b      	mov	r3, r1
 800300e:	70fb      	strb	r3, [r7, #3]
 8003010:	4613      	mov	r3, r2
 8003012:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800301a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800301c:	78fb      	ldrb	r3, [r7, #3]
 800301e:	2b00      	cmp	r3, #0
 8003020:	d107      	bne.n	8003032 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8003022:	883b      	ldrh	r3, [r7, #0]
 8003024:	0419      	lsls	r1, r3, #16
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	68ba      	ldr	r2, [r7, #8]
 800302c:	430a      	orrs	r2, r1
 800302e:	629a      	str	r2, [r3, #40]	; 0x28
 8003030:	e028      	b.n	8003084 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003038:	0c1b      	lsrs	r3, r3, #16
 800303a:	68ba      	ldr	r2, [r7, #8]
 800303c:	4413      	add	r3, r2
 800303e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003040:	2300      	movs	r3, #0
 8003042:	73fb      	strb	r3, [r7, #15]
 8003044:	e00d      	b.n	8003062 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681a      	ldr	r2, [r3, #0]
 800304a:	7bfb      	ldrb	r3, [r7, #15]
 800304c:	3340      	adds	r3, #64	; 0x40
 800304e:	009b      	lsls	r3, r3, #2
 8003050:	4413      	add	r3, r2
 8003052:	685b      	ldr	r3, [r3, #4]
 8003054:	0c1b      	lsrs	r3, r3, #16
 8003056:	68ba      	ldr	r2, [r7, #8]
 8003058:	4413      	add	r3, r2
 800305a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800305c:	7bfb      	ldrb	r3, [r7, #15]
 800305e:	3301      	adds	r3, #1
 8003060:	73fb      	strb	r3, [r7, #15]
 8003062:	7bfa      	ldrb	r2, [r7, #15]
 8003064:	78fb      	ldrb	r3, [r7, #3]
 8003066:	3b01      	subs	r3, #1
 8003068:	429a      	cmp	r2, r3
 800306a:	d3ec      	bcc.n	8003046 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800306c:	883b      	ldrh	r3, [r7, #0]
 800306e:	0418      	lsls	r0, r3, #16
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	6819      	ldr	r1, [r3, #0]
 8003074:	78fb      	ldrb	r3, [r7, #3]
 8003076:	3b01      	subs	r3, #1
 8003078:	68ba      	ldr	r2, [r7, #8]
 800307a:	4302      	orrs	r2, r0
 800307c:	3340      	adds	r3, #64	; 0x40
 800307e:	009b      	lsls	r3, r3, #2
 8003080:	440b      	add	r3, r1
 8003082:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003084:	2300      	movs	r3, #0
}
 8003086:	4618      	mov	r0, r3
 8003088:	3714      	adds	r7, #20
 800308a:	46bd      	mov	sp, r7
 800308c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003090:	4770      	bx	lr

08003092 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8003092:	b480      	push	{r7}
 8003094:	b083      	sub	sp, #12
 8003096:	af00      	add	r7, sp, #0
 8003098:	6078      	str	r0, [r7, #4]
 800309a:	460b      	mov	r3, r1
 800309c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	887a      	ldrh	r2, [r7, #2]
 80030a4:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80030a6:	2300      	movs	r3, #0
}
 80030a8:	4618      	mov	r0, r3
 80030aa:	370c      	adds	r7, #12
 80030ac:	46bd      	mov	sp, r7
 80030ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b2:	4770      	bx	lr

080030b4 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80030b4:	b480      	push	{r7}
 80030b6:	b085      	sub	sp, #20
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	2201      	movs	r2, #1
 80030c6:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	2200      	movs	r2, #0
 80030ce:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	699b      	ldr	r3, [r3, #24]
 80030d6:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80030e6:	f043 0303 	orr.w	r3, r3, #3
 80030ea:	68fa      	ldr	r2, [r7, #12]
 80030ec:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80030ee:	2300      	movs	r3, #0
}
 80030f0:	4618      	mov	r0, r3
 80030f2:	3714      	adds	r7, #20
 80030f4:	46bd      	mov	sp, r7
 80030f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030fa:	4770      	bx	lr

080030fc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80030fc:	b580      	push	{r7, lr}
 80030fe:	b084      	sub	sp, #16
 8003100:	af00      	add	r7, sp, #0
 8003102:	6078      	str	r0, [r7, #4]
 8003104:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	2b00      	cmp	r3, #0
 800310a:	d101      	bne.n	8003110 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800310c:	2301      	movs	r3, #1
 800310e:	e0cc      	b.n	80032aa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003110:	4b68      	ldr	r3, [pc, #416]	; (80032b4 <HAL_RCC_ClockConfig+0x1b8>)
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	f003 030f 	and.w	r3, r3, #15
 8003118:	683a      	ldr	r2, [r7, #0]
 800311a:	429a      	cmp	r2, r3
 800311c:	d90c      	bls.n	8003138 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800311e:	4b65      	ldr	r3, [pc, #404]	; (80032b4 <HAL_RCC_ClockConfig+0x1b8>)
 8003120:	683a      	ldr	r2, [r7, #0]
 8003122:	b2d2      	uxtb	r2, r2
 8003124:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003126:	4b63      	ldr	r3, [pc, #396]	; (80032b4 <HAL_RCC_ClockConfig+0x1b8>)
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	f003 030f 	and.w	r3, r3, #15
 800312e:	683a      	ldr	r2, [r7, #0]
 8003130:	429a      	cmp	r2, r3
 8003132:	d001      	beq.n	8003138 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003134:	2301      	movs	r3, #1
 8003136:	e0b8      	b.n	80032aa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	f003 0302 	and.w	r3, r3, #2
 8003140:	2b00      	cmp	r3, #0
 8003142:	d020      	beq.n	8003186 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	f003 0304 	and.w	r3, r3, #4
 800314c:	2b00      	cmp	r3, #0
 800314e:	d005      	beq.n	800315c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003150:	4b59      	ldr	r3, [pc, #356]	; (80032b8 <HAL_RCC_ClockConfig+0x1bc>)
 8003152:	689b      	ldr	r3, [r3, #8]
 8003154:	4a58      	ldr	r2, [pc, #352]	; (80032b8 <HAL_RCC_ClockConfig+0x1bc>)
 8003156:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800315a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	f003 0308 	and.w	r3, r3, #8
 8003164:	2b00      	cmp	r3, #0
 8003166:	d005      	beq.n	8003174 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003168:	4b53      	ldr	r3, [pc, #332]	; (80032b8 <HAL_RCC_ClockConfig+0x1bc>)
 800316a:	689b      	ldr	r3, [r3, #8]
 800316c:	4a52      	ldr	r2, [pc, #328]	; (80032b8 <HAL_RCC_ClockConfig+0x1bc>)
 800316e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003172:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003174:	4b50      	ldr	r3, [pc, #320]	; (80032b8 <HAL_RCC_ClockConfig+0x1bc>)
 8003176:	689b      	ldr	r3, [r3, #8]
 8003178:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	689b      	ldr	r3, [r3, #8]
 8003180:	494d      	ldr	r1, [pc, #308]	; (80032b8 <HAL_RCC_ClockConfig+0x1bc>)
 8003182:	4313      	orrs	r3, r2
 8003184:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f003 0301 	and.w	r3, r3, #1
 800318e:	2b00      	cmp	r3, #0
 8003190:	d044      	beq.n	800321c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	685b      	ldr	r3, [r3, #4]
 8003196:	2b01      	cmp	r3, #1
 8003198:	d107      	bne.n	80031aa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800319a:	4b47      	ldr	r3, [pc, #284]	; (80032b8 <HAL_RCC_ClockConfig+0x1bc>)
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d119      	bne.n	80031da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80031a6:	2301      	movs	r3, #1
 80031a8:	e07f      	b.n	80032aa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	685b      	ldr	r3, [r3, #4]
 80031ae:	2b02      	cmp	r3, #2
 80031b0:	d003      	beq.n	80031ba <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80031b6:	2b03      	cmp	r3, #3
 80031b8:	d107      	bne.n	80031ca <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80031ba:	4b3f      	ldr	r3, [pc, #252]	; (80032b8 <HAL_RCC_ClockConfig+0x1bc>)
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d109      	bne.n	80031da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80031c6:	2301      	movs	r3, #1
 80031c8:	e06f      	b.n	80032aa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031ca:	4b3b      	ldr	r3, [pc, #236]	; (80032b8 <HAL_RCC_ClockConfig+0x1bc>)
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f003 0302 	and.w	r3, r3, #2
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d101      	bne.n	80031da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80031d6:	2301      	movs	r3, #1
 80031d8:	e067      	b.n	80032aa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80031da:	4b37      	ldr	r3, [pc, #220]	; (80032b8 <HAL_RCC_ClockConfig+0x1bc>)
 80031dc:	689b      	ldr	r3, [r3, #8]
 80031de:	f023 0203 	bic.w	r2, r3, #3
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	685b      	ldr	r3, [r3, #4]
 80031e6:	4934      	ldr	r1, [pc, #208]	; (80032b8 <HAL_RCC_ClockConfig+0x1bc>)
 80031e8:	4313      	orrs	r3, r2
 80031ea:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80031ec:	f7fd ff48 	bl	8001080 <HAL_GetTick>
 80031f0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031f2:	e00a      	b.n	800320a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80031f4:	f7fd ff44 	bl	8001080 <HAL_GetTick>
 80031f8:	4602      	mov	r2, r0
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	1ad3      	subs	r3, r2, r3
 80031fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8003202:	4293      	cmp	r3, r2
 8003204:	d901      	bls.n	800320a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003206:	2303      	movs	r3, #3
 8003208:	e04f      	b.n	80032aa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800320a:	4b2b      	ldr	r3, [pc, #172]	; (80032b8 <HAL_RCC_ClockConfig+0x1bc>)
 800320c:	689b      	ldr	r3, [r3, #8]
 800320e:	f003 020c 	and.w	r2, r3, #12
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	685b      	ldr	r3, [r3, #4]
 8003216:	009b      	lsls	r3, r3, #2
 8003218:	429a      	cmp	r2, r3
 800321a:	d1eb      	bne.n	80031f4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800321c:	4b25      	ldr	r3, [pc, #148]	; (80032b4 <HAL_RCC_ClockConfig+0x1b8>)
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	f003 030f 	and.w	r3, r3, #15
 8003224:	683a      	ldr	r2, [r7, #0]
 8003226:	429a      	cmp	r2, r3
 8003228:	d20c      	bcs.n	8003244 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800322a:	4b22      	ldr	r3, [pc, #136]	; (80032b4 <HAL_RCC_ClockConfig+0x1b8>)
 800322c:	683a      	ldr	r2, [r7, #0]
 800322e:	b2d2      	uxtb	r2, r2
 8003230:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003232:	4b20      	ldr	r3, [pc, #128]	; (80032b4 <HAL_RCC_ClockConfig+0x1b8>)
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f003 030f 	and.w	r3, r3, #15
 800323a:	683a      	ldr	r2, [r7, #0]
 800323c:	429a      	cmp	r2, r3
 800323e:	d001      	beq.n	8003244 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003240:	2301      	movs	r3, #1
 8003242:	e032      	b.n	80032aa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	f003 0304 	and.w	r3, r3, #4
 800324c:	2b00      	cmp	r3, #0
 800324e:	d008      	beq.n	8003262 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003250:	4b19      	ldr	r3, [pc, #100]	; (80032b8 <HAL_RCC_ClockConfig+0x1bc>)
 8003252:	689b      	ldr	r3, [r3, #8]
 8003254:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	68db      	ldr	r3, [r3, #12]
 800325c:	4916      	ldr	r1, [pc, #88]	; (80032b8 <HAL_RCC_ClockConfig+0x1bc>)
 800325e:	4313      	orrs	r3, r2
 8003260:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f003 0308 	and.w	r3, r3, #8
 800326a:	2b00      	cmp	r3, #0
 800326c:	d009      	beq.n	8003282 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800326e:	4b12      	ldr	r3, [pc, #72]	; (80032b8 <HAL_RCC_ClockConfig+0x1bc>)
 8003270:	689b      	ldr	r3, [r3, #8]
 8003272:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	691b      	ldr	r3, [r3, #16]
 800327a:	00db      	lsls	r3, r3, #3
 800327c:	490e      	ldr	r1, [pc, #56]	; (80032b8 <HAL_RCC_ClockConfig+0x1bc>)
 800327e:	4313      	orrs	r3, r2
 8003280:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003282:	f000 f821 	bl	80032c8 <HAL_RCC_GetSysClockFreq>
 8003286:	4602      	mov	r2, r0
 8003288:	4b0b      	ldr	r3, [pc, #44]	; (80032b8 <HAL_RCC_ClockConfig+0x1bc>)
 800328a:	689b      	ldr	r3, [r3, #8]
 800328c:	091b      	lsrs	r3, r3, #4
 800328e:	f003 030f 	and.w	r3, r3, #15
 8003292:	490a      	ldr	r1, [pc, #40]	; (80032bc <HAL_RCC_ClockConfig+0x1c0>)
 8003294:	5ccb      	ldrb	r3, [r1, r3]
 8003296:	fa22 f303 	lsr.w	r3, r2, r3
 800329a:	4a09      	ldr	r2, [pc, #36]	; (80032c0 <HAL_RCC_ClockConfig+0x1c4>)
 800329c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800329e:	4b09      	ldr	r3, [pc, #36]	; (80032c4 <HAL_RCC_ClockConfig+0x1c8>)
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	4618      	mov	r0, r3
 80032a4:	f7fd fea8 	bl	8000ff8 <HAL_InitTick>

  return HAL_OK;
 80032a8:	2300      	movs	r3, #0
}
 80032aa:	4618      	mov	r0, r3
 80032ac:	3710      	adds	r7, #16
 80032ae:	46bd      	mov	sp, r7
 80032b0:	bd80      	pop	{r7, pc}
 80032b2:	bf00      	nop
 80032b4:	40023c00 	.word	0x40023c00
 80032b8:	40023800 	.word	0x40023800
 80032bc:	0800826c 	.word	0x0800826c
 80032c0:	20000000 	.word	0x20000000
 80032c4:	20000004 	.word	0x20000004

080032c8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80032c8:	b5b0      	push	{r4, r5, r7, lr}
 80032ca:	b084      	sub	sp, #16
 80032cc:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80032ce:	2100      	movs	r1, #0
 80032d0:	6079      	str	r1, [r7, #4]
 80032d2:	2100      	movs	r1, #0
 80032d4:	60f9      	str	r1, [r7, #12]
 80032d6:	2100      	movs	r1, #0
 80032d8:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80032da:	2100      	movs	r1, #0
 80032dc:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80032de:	4952      	ldr	r1, [pc, #328]	; (8003428 <HAL_RCC_GetSysClockFreq+0x160>)
 80032e0:	6889      	ldr	r1, [r1, #8]
 80032e2:	f001 010c 	and.w	r1, r1, #12
 80032e6:	2908      	cmp	r1, #8
 80032e8:	d00d      	beq.n	8003306 <HAL_RCC_GetSysClockFreq+0x3e>
 80032ea:	2908      	cmp	r1, #8
 80032ec:	f200 8094 	bhi.w	8003418 <HAL_RCC_GetSysClockFreq+0x150>
 80032f0:	2900      	cmp	r1, #0
 80032f2:	d002      	beq.n	80032fa <HAL_RCC_GetSysClockFreq+0x32>
 80032f4:	2904      	cmp	r1, #4
 80032f6:	d003      	beq.n	8003300 <HAL_RCC_GetSysClockFreq+0x38>
 80032f8:	e08e      	b.n	8003418 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80032fa:	4b4c      	ldr	r3, [pc, #304]	; (800342c <HAL_RCC_GetSysClockFreq+0x164>)
 80032fc:	60bb      	str	r3, [r7, #8]
       break;
 80032fe:	e08e      	b.n	800341e <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003300:	4b4b      	ldr	r3, [pc, #300]	; (8003430 <HAL_RCC_GetSysClockFreq+0x168>)
 8003302:	60bb      	str	r3, [r7, #8]
      break;
 8003304:	e08b      	b.n	800341e <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003306:	4948      	ldr	r1, [pc, #288]	; (8003428 <HAL_RCC_GetSysClockFreq+0x160>)
 8003308:	6849      	ldr	r1, [r1, #4]
 800330a:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 800330e:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003310:	4945      	ldr	r1, [pc, #276]	; (8003428 <HAL_RCC_GetSysClockFreq+0x160>)
 8003312:	6849      	ldr	r1, [r1, #4]
 8003314:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8003318:	2900      	cmp	r1, #0
 800331a:	d024      	beq.n	8003366 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800331c:	4942      	ldr	r1, [pc, #264]	; (8003428 <HAL_RCC_GetSysClockFreq+0x160>)
 800331e:	6849      	ldr	r1, [r1, #4]
 8003320:	0989      	lsrs	r1, r1, #6
 8003322:	4608      	mov	r0, r1
 8003324:	f04f 0100 	mov.w	r1, #0
 8003328:	f240 14ff 	movw	r4, #511	; 0x1ff
 800332c:	f04f 0500 	mov.w	r5, #0
 8003330:	ea00 0204 	and.w	r2, r0, r4
 8003334:	ea01 0305 	and.w	r3, r1, r5
 8003338:	493d      	ldr	r1, [pc, #244]	; (8003430 <HAL_RCC_GetSysClockFreq+0x168>)
 800333a:	fb01 f003 	mul.w	r0, r1, r3
 800333e:	2100      	movs	r1, #0
 8003340:	fb01 f102 	mul.w	r1, r1, r2
 8003344:	1844      	adds	r4, r0, r1
 8003346:	493a      	ldr	r1, [pc, #232]	; (8003430 <HAL_RCC_GetSysClockFreq+0x168>)
 8003348:	fba2 0101 	umull	r0, r1, r2, r1
 800334c:	1863      	adds	r3, r4, r1
 800334e:	4619      	mov	r1, r3
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	461a      	mov	r2, r3
 8003354:	f04f 0300 	mov.w	r3, #0
 8003358:	f7fc ff4c 	bl	80001f4 <__aeabi_uldivmod>
 800335c:	4602      	mov	r2, r0
 800335e:	460b      	mov	r3, r1
 8003360:	4613      	mov	r3, r2
 8003362:	60fb      	str	r3, [r7, #12]
 8003364:	e04a      	b.n	80033fc <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003366:	4b30      	ldr	r3, [pc, #192]	; (8003428 <HAL_RCC_GetSysClockFreq+0x160>)
 8003368:	685b      	ldr	r3, [r3, #4]
 800336a:	099b      	lsrs	r3, r3, #6
 800336c:	461a      	mov	r2, r3
 800336e:	f04f 0300 	mov.w	r3, #0
 8003372:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003376:	f04f 0100 	mov.w	r1, #0
 800337a:	ea02 0400 	and.w	r4, r2, r0
 800337e:	ea03 0501 	and.w	r5, r3, r1
 8003382:	4620      	mov	r0, r4
 8003384:	4629      	mov	r1, r5
 8003386:	f04f 0200 	mov.w	r2, #0
 800338a:	f04f 0300 	mov.w	r3, #0
 800338e:	014b      	lsls	r3, r1, #5
 8003390:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003394:	0142      	lsls	r2, r0, #5
 8003396:	4610      	mov	r0, r2
 8003398:	4619      	mov	r1, r3
 800339a:	1b00      	subs	r0, r0, r4
 800339c:	eb61 0105 	sbc.w	r1, r1, r5
 80033a0:	f04f 0200 	mov.w	r2, #0
 80033a4:	f04f 0300 	mov.w	r3, #0
 80033a8:	018b      	lsls	r3, r1, #6
 80033aa:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80033ae:	0182      	lsls	r2, r0, #6
 80033b0:	1a12      	subs	r2, r2, r0
 80033b2:	eb63 0301 	sbc.w	r3, r3, r1
 80033b6:	f04f 0000 	mov.w	r0, #0
 80033ba:	f04f 0100 	mov.w	r1, #0
 80033be:	00d9      	lsls	r1, r3, #3
 80033c0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80033c4:	00d0      	lsls	r0, r2, #3
 80033c6:	4602      	mov	r2, r0
 80033c8:	460b      	mov	r3, r1
 80033ca:	1912      	adds	r2, r2, r4
 80033cc:	eb45 0303 	adc.w	r3, r5, r3
 80033d0:	f04f 0000 	mov.w	r0, #0
 80033d4:	f04f 0100 	mov.w	r1, #0
 80033d8:	0299      	lsls	r1, r3, #10
 80033da:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80033de:	0290      	lsls	r0, r2, #10
 80033e0:	4602      	mov	r2, r0
 80033e2:	460b      	mov	r3, r1
 80033e4:	4610      	mov	r0, r2
 80033e6:	4619      	mov	r1, r3
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	461a      	mov	r2, r3
 80033ec:	f04f 0300 	mov.w	r3, #0
 80033f0:	f7fc ff00 	bl	80001f4 <__aeabi_uldivmod>
 80033f4:	4602      	mov	r2, r0
 80033f6:	460b      	mov	r3, r1
 80033f8:	4613      	mov	r3, r2
 80033fa:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80033fc:	4b0a      	ldr	r3, [pc, #40]	; (8003428 <HAL_RCC_GetSysClockFreq+0x160>)
 80033fe:	685b      	ldr	r3, [r3, #4]
 8003400:	0c1b      	lsrs	r3, r3, #16
 8003402:	f003 0303 	and.w	r3, r3, #3
 8003406:	3301      	adds	r3, #1
 8003408:	005b      	lsls	r3, r3, #1
 800340a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800340c:	68fa      	ldr	r2, [r7, #12]
 800340e:	683b      	ldr	r3, [r7, #0]
 8003410:	fbb2 f3f3 	udiv	r3, r2, r3
 8003414:	60bb      	str	r3, [r7, #8]
      break;
 8003416:	e002      	b.n	800341e <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003418:	4b04      	ldr	r3, [pc, #16]	; (800342c <HAL_RCC_GetSysClockFreq+0x164>)
 800341a:	60bb      	str	r3, [r7, #8]
      break;
 800341c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800341e:	68bb      	ldr	r3, [r7, #8]
}
 8003420:	4618      	mov	r0, r3
 8003422:	3710      	adds	r7, #16
 8003424:	46bd      	mov	sp, r7
 8003426:	bdb0      	pop	{r4, r5, r7, pc}
 8003428:	40023800 	.word	0x40023800
 800342c:	00f42400 	.word	0x00f42400
 8003430:	017d7840 	.word	0x017d7840

08003434 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003434:	b480      	push	{r7}
 8003436:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003438:	4b03      	ldr	r3, [pc, #12]	; (8003448 <HAL_RCC_GetHCLKFreq+0x14>)
 800343a:	681b      	ldr	r3, [r3, #0]
}
 800343c:	4618      	mov	r0, r3
 800343e:	46bd      	mov	sp, r7
 8003440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003444:	4770      	bx	lr
 8003446:	bf00      	nop
 8003448:	20000000 	.word	0x20000000

0800344c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800344c:	b580      	push	{r7, lr}
 800344e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003450:	f7ff fff0 	bl	8003434 <HAL_RCC_GetHCLKFreq>
 8003454:	4602      	mov	r2, r0
 8003456:	4b05      	ldr	r3, [pc, #20]	; (800346c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003458:	689b      	ldr	r3, [r3, #8]
 800345a:	0a9b      	lsrs	r3, r3, #10
 800345c:	f003 0307 	and.w	r3, r3, #7
 8003460:	4903      	ldr	r1, [pc, #12]	; (8003470 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003462:	5ccb      	ldrb	r3, [r1, r3]
 8003464:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003468:	4618      	mov	r0, r3
 800346a:	bd80      	pop	{r7, pc}
 800346c:	40023800 	.word	0x40023800
 8003470:	0800827c 	.word	0x0800827c

08003474 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003474:	b580      	push	{r7, lr}
 8003476:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003478:	f7ff ffdc 	bl	8003434 <HAL_RCC_GetHCLKFreq>
 800347c:	4602      	mov	r2, r0
 800347e:	4b05      	ldr	r3, [pc, #20]	; (8003494 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003480:	689b      	ldr	r3, [r3, #8]
 8003482:	0b5b      	lsrs	r3, r3, #13
 8003484:	f003 0307 	and.w	r3, r3, #7
 8003488:	4903      	ldr	r1, [pc, #12]	; (8003498 <HAL_RCC_GetPCLK2Freq+0x24>)
 800348a:	5ccb      	ldrb	r3, [r1, r3]
 800348c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003490:	4618      	mov	r0, r3
 8003492:	bd80      	pop	{r7, pc}
 8003494:	40023800 	.word	0x40023800
 8003498:	0800827c 	.word	0x0800827c

0800349c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800349c:	b580      	push	{r7, lr}
 800349e:	b088      	sub	sp, #32
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80034a4:	2300      	movs	r3, #0
 80034a6:	61fb      	str	r3, [r7, #28]
  uint32_t tmpreg1 = 0U;
 80034a8:	2300      	movs	r3, #0
 80034aa:	61bb      	str	r3, [r7, #24]
  uint32_t pllsaip = 0U;
 80034ac:	2300      	movs	r3, #0
 80034ae:	617b      	str	r3, [r7, #20]
  uint32_t pllsaiq = 0U;
 80034b0:	2300      	movs	r3, #0
 80034b2:	613b      	str	r3, [r7, #16]
  uint32_t pllsair = 0U;
 80034b4:	2300      	movs	r3, #0
 80034b6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*--------------------------- CLK48 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d00a      	beq.n	80034da <HAL_RCCEx_PeriphCLKConfig+0x3e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80034c4:	4b66      	ldr	r3, [pc, #408]	; (8003660 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80034c6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80034ca:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034d2:	4963      	ldr	r1, [pc, #396]	; (8003660 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80034d4:	4313      	orrs	r3, r2
 80034d6:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SDIO Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d00a      	beq.n	80034fc <HAL_RCCEx_PeriphCLKConfig+0x60>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 80034e6:	4b5e      	ldr	r3, [pc, #376]	; (8003660 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80034e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80034ec:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034f4:	495a      	ldr	r1, [pc, #360]	; (8003660 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80034f6:	4313      	orrs	r3, r2
 80034f8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*------------------- Common configuration SAI/I2S -------------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	f003 0301 	and.w	r3, r3, #1
 8003504:	2b00      	cmp	r3, #0
 8003506:	d10b      	bne.n	8003520 <HAL_RCCEx_PeriphCLKConfig+0x84>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003510:	2b00      	cmp	r3, #0
 8003512:	d105      	bne.n	8003520 <HAL_RCCEx_PeriphCLKConfig+0x84>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 800351c:	2b00      	cmp	r3, #0
 800351e:	d075      	beq.n	800360c <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003520:	4b50      	ldr	r3, [pc, #320]	; (8003664 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8003522:	2200      	movs	r2, #0
 8003524:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003526:	f7fd fdab 	bl	8001080 <HAL_GetTick>
 800352a:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800352c:	e008      	b.n	8003540 <HAL_RCCEx_PeriphCLKConfig+0xa4>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800352e:	f7fd fda7 	bl	8001080 <HAL_GetTick>
 8003532:	4602      	mov	r2, r0
 8003534:	69fb      	ldr	r3, [r7, #28]
 8003536:	1ad3      	subs	r3, r2, r3
 8003538:	2b02      	cmp	r3, #2
 800353a:	d901      	bls.n	8003540 <HAL_RCCEx_PeriphCLKConfig+0xa4>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800353c:	2303      	movs	r3, #3
 800353e:	e1dc      	b.n	80038fa <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003540:	4b47      	ldr	r3, [pc, #284]	; (8003660 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003548:	2b00      	cmp	r3, #0
 800354a:	d1f0      	bne.n	800352e <HAL_RCCEx_PeriphCLKConfig+0x92>
    }

    /*---------------------- I2S configuration -------------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	f003 0301 	and.w	r3, r3, #1
 8003554:	2b00      	cmp	r3, #0
 8003556:	d009      	beq.n	800356c <HAL_RCCEx_PeriphCLKConfig+0xd0>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	685b      	ldr	r3, [r3, #4]
 800355c:	019a      	lsls	r2, r3, #6
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	689b      	ldr	r3, [r3, #8]
 8003562:	071b      	lsls	r3, r3, #28
 8003564:	493e      	ldr	r1, [pc, #248]	; (8003660 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8003566:	4313      	orrs	r3, r2
 8003568:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	f003 0302 	and.w	r3, r3, #2
 8003574:	2b00      	cmp	r3, #0
 8003576:	d01f      	beq.n	80035b8 <HAL_RCCEx_PeriphCLKConfig+0x11c>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003578:	4b39      	ldr	r3, [pc, #228]	; (8003660 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800357a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800357e:	0f1b      	lsrs	r3, r3, #28
 8003580:	f003 0307 	and.w	r3, r3, #7
 8003584:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	685b      	ldr	r3, [r3, #4]
 800358a:	019a      	lsls	r2, r3, #6
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	68db      	ldr	r3, [r3, #12]
 8003590:	061b      	lsls	r3, r3, #24
 8003592:	431a      	orrs	r2, r3
 8003594:	69bb      	ldr	r3, [r7, #24]
 8003596:	071b      	lsls	r3, r3, #28
 8003598:	4931      	ldr	r1, [pc, #196]	; (8003660 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800359a:	4313      	orrs	r3, r2
 800359c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80035a0:	4b2f      	ldr	r3, [pc, #188]	; (8003660 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80035a2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80035a6:	f023 021f 	bic.w	r2, r3, #31
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	6a1b      	ldr	r3, [r3, #32]
 80035ae:	3b01      	subs	r3, #1
 80035b0:	492b      	ldr	r1, [pc, #172]	; (8003660 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80035b2:	4313      	orrs	r3, r2
 80035b4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d00d      	beq.n	80035e0 <HAL_RCCEx_PeriphCLKConfig+0x144>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	685b      	ldr	r3, [r3, #4]
 80035c8:	019a      	lsls	r2, r3, #6
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	68db      	ldr	r3, [r3, #12]
 80035ce:	061b      	lsls	r3, r3, #24
 80035d0:	431a      	orrs	r2, r3
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	689b      	ldr	r3, [r3, #8]
 80035d6:	071b      	lsls	r3, r3, #28
 80035d8:	4921      	ldr	r1, [pc, #132]	; (8003660 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80035da:	4313      	orrs	r3, r2
 80035dc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80035e0:	4b20      	ldr	r3, [pc, #128]	; (8003664 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 80035e2:	2201      	movs	r2, #1
 80035e4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80035e6:	f7fd fd4b 	bl	8001080 <HAL_GetTick>
 80035ea:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80035ec:	e008      	b.n	8003600 <HAL_RCCEx_PeriphCLKConfig+0x164>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80035ee:	f7fd fd47 	bl	8001080 <HAL_GetTick>
 80035f2:	4602      	mov	r2, r0
 80035f4:	69fb      	ldr	r3, [r7, #28]
 80035f6:	1ad3      	subs	r3, r2, r3
 80035f8:	2b02      	cmp	r3, #2
 80035fa:	d901      	bls.n	8003600 <HAL_RCCEx_PeriphCLKConfig+0x164>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80035fc:	2303      	movs	r3, #3
 80035fe:	e17c      	b.n	80038fa <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003600:	4b17      	ldr	r3, [pc, #92]	; (8003660 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003608:	2b00      	cmp	r3, #0
 800360a:	d0f0      	beq.n	80035ee <HAL_RCCEx_PeriphCLKConfig+0x152>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI, LTDC or CLK48 Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for these peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f003 0304 	and.w	r3, r3, #4
 8003614:	2b00      	cmp	r3, #0
 8003616:	d112      	bne.n	800363e <HAL_RCCEx_PeriphCLKConfig+0x1a2>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)             ||
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8003620:	2b00      	cmp	r3, #0
 8003622:	d10c      	bne.n	800363e <HAL_RCCEx_PeriphCLKConfig+0x1a2>
     ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)          &&
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	f003 0380 	and.w	r3, r3, #128	; 0x80
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)             ||
 800362c:	2b00      	cmp	r3, #0
 800362e:	f000 80ce 	beq.w	80037ce <HAL_RCCEx_PeriphCLKConfig+0x332>
      (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)))
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	6b5b      	ldr	r3, [r3, #52]	; 0x34
     ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)          &&
 8003636:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800363a:	f040 80c8 	bne.w	80037ce <HAL_RCCEx_PeriphCLKConfig+0x332>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800363e:	4b0a      	ldr	r3, [pc, #40]	; (8003668 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003640:	2200      	movs	r2, #0
 8003642:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003644:	f7fd fd1c 	bl	8001080 <HAL_GetTick>
 8003648:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800364a:	e00f      	b.n	800366c <HAL_RCCEx_PeriphCLKConfig+0x1d0>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800364c:	f7fd fd18 	bl	8001080 <HAL_GetTick>
 8003650:	4602      	mov	r2, r0
 8003652:	69fb      	ldr	r3, [r7, #28]
 8003654:	1ad3      	subs	r3, r2, r3
 8003656:	2b02      	cmp	r3, #2
 8003658:	d908      	bls.n	800366c <HAL_RCCEx_PeriphCLKConfig+0x1d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800365a:	2303      	movs	r3, #3
 800365c:	e14d      	b.n	80038fa <HAL_RCCEx_PeriphCLKConfig+0x45e>
 800365e:	bf00      	nop
 8003660:	40023800 	.word	0x40023800
 8003664:	42470068 	.word	0x42470068
 8003668:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800366c:	4ba5      	ldr	r3, [pc, #660]	; (8003904 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003674:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003678:	d0e8      	beq.n	800364c <HAL_RCCEx_PeriphCLKConfig+0x1b0>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f003 0304 	and.w	r3, r3, #4
 8003682:	2b00      	cmp	r3, #0
 8003684:	d02e      	beq.n	80036e4 <HAL_RCCEx_PeriphCLKConfig+0x248>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 8003686:	4b9f      	ldr	r3, [pc, #636]	; (8003904 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8003688:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800368c:	0c1b      	lsrs	r3, r3, #16
 800368e:	f003 0303 	and.w	r3, r3, #3
 8003692:	3301      	adds	r3, #1
 8003694:	005b      	lsls	r3, r3, #1
 8003696:	617b      	str	r3, [r7, #20]
      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsair = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003698:	4b9a      	ldr	r3, [pc, #616]	; (8003904 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800369a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800369e:	0f1b      	lsrs	r3, r3, #28
 80036a0:	f003 0307 	and.w	r3, r3, #7
 80036a4:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, pllsair);
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	691b      	ldr	r3, [r3, #16]
 80036aa:	019a      	lsls	r2, r3, #6
 80036ac:	697b      	ldr	r3, [r7, #20]
 80036ae:	085b      	lsrs	r3, r3, #1
 80036b0:	3b01      	subs	r3, #1
 80036b2:	041b      	lsls	r3, r3, #16
 80036b4:	431a      	orrs	r2, r3
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	699b      	ldr	r3, [r3, #24]
 80036ba:	061b      	lsls	r3, r3, #24
 80036bc:	431a      	orrs	r2, r3
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	071b      	lsls	r3, r3, #28
 80036c2:	4990      	ldr	r1, [pc, #576]	; (8003904 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80036c4:	4313      	orrs	r3, r2
 80036c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80036ca:	4b8e      	ldr	r3, [pc, #568]	; (8003904 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80036cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80036d0:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036d8:	3b01      	subs	r3, #1
 80036da:	021b      	lsls	r3, r3, #8
 80036dc:	4989      	ldr	r1, [pc, #548]	; (8003904 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80036de:	4313      	orrs	r3, r2
 80036e0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f003 0308 	and.w	r3, r3, #8
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d02c      	beq.n	800374a <HAL_RCCEx_PeriphCLKConfig+0x2ae>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 80036f0:	4b84      	ldr	r3, [pc, #528]	; (8003904 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80036f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036f6:	0c1b      	lsrs	r3, r3, #16
 80036f8:	f003 0303 	and.w	r3, r3, #3
 80036fc:	3301      	adds	r3, #1
 80036fe:	005b      	lsls	r3, r3, #1
 8003700:	617b      	str	r3, [r7, #20]
      /* Read PLLSAIQ value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003702:	4b80      	ldr	r3, [pc, #512]	; (8003904 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8003704:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003708:	0e1b      	lsrs	r3, r3, #24
 800370a:	f003 030f 	and.w	r3, r3, #15
 800370e:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, pllsaip, pllsaiq, PeriphClkInit->PLLSAI.PLLSAIR);
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	691b      	ldr	r3, [r3, #16]
 8003714:	019a      	lsls	r2, r3, #6
 8003716:	697b      	ldr	r3, [r7, #20]
 8003718:	085b      	lsrs	r3, r3, #1
 800371a:	3b01      	subs	r3, #1
 800371c:	041b      	lsls	r3, r3, #16
 800371e:	431a      	orrs	r2, r3
 8003720:	693b      	ldr	r3, [r7, #16]
 8003722:	061b      	lsls	r3, r3, #24
 8003724:	431a      	orrs	r2, r3
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	69db      	ldr	r3, [r3, #28]
 800372a:	071b      	lsls	r3, r3, #28
 800372c:	4975      	ldr	r1, [pc, #468]	; (8003904 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800372e:	4313      	orrs	r3, r2
 8003730:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8003734:	4b73      	ldr	r3, [pc, #460]	; (8003904 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8003736:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800373a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003742:	4970      	ldr	r1, [pc, #448]	; (8003904 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8003744:	4313      	orrs	r3, r2
 8003746:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- CLK48 configuration ------------------------*/
    /* Configure the PLLSAI when it is used as clock source for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == (RCC_PERIPHCLK_CLK48)) &&
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003752:	2b00      	cmp	r3, #0
 8003754:	d024      	beq.n	80037a0 <HAL_RCCEx_PeriphCLKConfig+0x304>
       (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == (RCC_PERIPHCLK_CLK48)) &&
 800375a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800375e:	d11f      	bne.n	80037a0 <HAL_RCCEx_PeriphCLKConfig+0x304>
    {
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));

      /* Read PLLSAIQ value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003760:	4b68      	ldr	r3, [pc, #416]	; (8003904 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8003762:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003766:	0e1b      	lsrs	r3, r3, #24
 8003768:	f003 030f 	and.w	r3, r3, #15
 800376c:	613b      	str	r3, [r7, #16]
      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsair = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800376e:	4b65      	ldr	r3, [pc, #404]	; (8003904 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8003770:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003774:	0f1b      	lsrs	r3, r3, #28
 8003776:	f003 0307 	and.w	r3, r3, #7
 800377a:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* CLK48_CLK(first level) = PLLSAI_VCO Output/PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, pllsair);
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	691b      	ldr	r3, [r3, #16]
 8003780:	019a      	lsls	r2, r3, #6
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	695b      	ldr	r3, [r3, #20]
 8003786:	085b      	lsrs	r3, r3, #1
 8003788:	3b01      	subs	r3, #1
 800378a:	041b      	lsls	r3, r3, #16
 800378c:	431a      	orrs	r2, r3
 800378e:	693b      	ldr	r3, [r7, #16]
 8003790:	061b      	lsls	r3, r3, #24
 8003792:	431a      	orrs	r2, r3
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	071b      	lsls	r3, r3, #28
 8003798:	495a      	ldr	r1, [pc, #360]	; (8003904 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800379a:	4313      	orrs	r3, r2
 800379c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80037a0:	4b59      	ldr	r3, [pc, #356]	; (8003908 <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 80037a2:	2201      	movs	r2, #1
 80037a4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80037a6:	f7fd fc6b 	bl	8001080 <HAL_GetTick>
 80037aa:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80037ac:	e008      	b.n	80037c0 <HAL_RCCEx_PeriphCLKConfig+0x324>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 80037ae:	f7fd fc67 	bl	8001080 <HAL_GetTick>
 80037b2:	4602      	mov	r2, r0
 80037b4:	69fb      	ldr	r3, [r7, #28]
 80037b6:	1ad3      	subs	r3, r2, r3
 80037b8:	2b02      	cmp	r3, #2
 80037ba:	d901      	bls.n	80037c0 <HAL_RCCEx_PeriphCLKConfig+0x324>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80037bc:	2303      	movs	r3, #3
 80037be:	e09c      	b.n	80038fa <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80037c0:	4b50      	ldr	r3, [pc, #320]	; (8003904 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80037c8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80037cc:	d1ef      	bne.n	80037ae <HAL_RCCEx_PeriphCLKConfig+0x312>
  }

  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f003 0320 	and.w	r3, r3, #32
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	f000 8083 	beq.w	80038e2 <HAL_RCCEx_PeriphCLKConfig+0x446>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80037dc:	2300      	movs	r3, #0
 80037de:	60bb      	str	r3, [r7, #8]
 80037e0:	4b48      	ldr	r3, [pc, #288]	; (8003904 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80037e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037e4:	4a47      	ldr	r2, [pc, #284]	; (8003904 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80037e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80037ea:	6413      	str	r3, [r2, #64]	; 0x40
 80037ec:	4b45      	ldr	r3, [pc, #276]	; (8003904 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80037ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037f4:	60bb      	str	r3, [r7, #8]
 80037f6:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80037f8:	4b44      	ldr	r3, [pc, #272]	; (800390c <HAL_RCCEx_PeriphCLKConfig+0x470>)
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	4a43      	ldr	r2, [pc, #268]	; (800390c <HAL_RCCEx_PeriphCLKConfig+0x470>)
 80037fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003802:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003804:	f7fd fc3c 	bl	8001080 <HAL_GetTick>
 8003808:	61f8      	str	r0, [r7, #28]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800380a:	e008      	b.n	800381e <HAL_RCCEx_PeriphCLKConfig+0x382>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800380c:	f7fd fc38 	bl	8001080 <HAL_GetTick>
 8003810:	4602      	mov	r2, r0
 8003812:	69fb      	ldr	r3, [r7, #28]
 8003814:	1ad3      	subs	r3, r2, r3
 8003816:	2b02      	cmp	r3, #2
 8003818:	d901      	bls.n	800381e <HAL_RCCEx_PeriphCLKConfig+0x382>
      {
        return HAL_TIMEOUT;
 800381a:	2303      	movs	r3, #3
 800381c:	e06d      	b.n	80038fa <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800381e:	4b3b      	ldr	r3, [pc, #236]	; (800390c <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003826:	2b00      	cmp	r3, #0
 8003828:	d0f0      	beq.n	800380c <HAL_RCCEx_PeriphCLKConfig+0x370>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800382a:	4b36      	ldr	r3, [pc, #216]	; (8003904 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800382c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800382e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003832:	61bb      	str	r3, [r7, #24]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003834:	69bb      	ldr	r3, [r7, #24]
 8003836:	2b00      	cmp	r3, #0
 8003838:	d02f      	beq.n	800389a <HAL_RCCEx_PeriphCLKConfig+0x3fe>
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800383e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003842:	69ba      	ldr	r2, [r7, #24]
 8003844:	429a      	cmp	r2, r3
 8003846:	d028      	beq.n	800389a <HAL_RCCEx_PeriphCLKConfig+0x3fe>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003848:	4b2e      	ldr	r3, [pc, #184]	; (8003904 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800384a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800384c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003850:	61bb      	str	r3, [r7, #24]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003852:	4b2f      	ldr	r3, [pc, #188]	; (8003910 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8003854:	2201      	movs	r2, #1
 8003856:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003858:	4b2d      	ldr	r3, [pc, #180]	; (8003910 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 800385a:	2200      	movs	r2, #0
 800385c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800385e:	4a29      	ldr	r2, [pc, #164]	; (8003904 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8003860:	69bb      	ldr	r3, [r7, #24]
 8003862:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003864:	4b27      	ldr	r3, [pc, #156]	; (8003904 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8003866:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003868:	f003 0301 	and.w	r3, r3, #1
 800386c:	2b01      	cmp	r3, #1
 800386e:	d114      	bne.n	800389a <HAL_RCCEx_PeriphCLKConfig+0x3fe>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8003870:	f7fd fc06 	bl	8001080 <HAL_GetTick>
 8003874:	61f8      	str	r0, [r7, #28]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003876:	e00a      	b.n	800388e <HAL_RCCEx_PeriphCLKConfig+0x3f2>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003878:	f7fd fc02 	bl	8001080 <HAL_GetTick>
 800387c:	4602      	mov	r2, r0
 800387e:	69fb      	ldr	r3, [r7, #28]
 8003880:	1ad3      	subs	r3, r2, r3
 8003882:	f241 3288 	movw	r2, #5000	; 0x1388
 8003886:	4293      	cmp	r3, r2
 8003888:	d901      	bls.n	800388e <HAL_RCCEx_PeriphCLKConfig+0x3f2>
          {
            return HAL_TIMEOUT;
 800388a:	2303      	movs	r3, #3
 800388c:	e035      	b.n	80038fa <HAL_RCCEx_PeriphCLKConfig+0x45e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800388e:	4b1d      	ldr	r3, [pc, #116]	; (8003904 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8003890:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003892:	f003 0302 	and.w	r3, r3, #2
 8003896:	2b00      	cmp	r3, #0
 8003898:	d0ee      	beq.n	8003878 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800389e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80038a2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80038a6:	d10d      	bne.n	80038c4 <HAL_RCCEx_PeriphCLKConfig+0x428>
 80038a8:	4b16      	ldr	r3, [pc, #88]	; (8003904 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80038aa:	689b      	ldr	r3, [r3, #8]
 80038ac:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038b4:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80038b8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80038bc:	4911      	ldr	r1, [pc, #68]	; (8003904 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80038be:	4313      	orrs	r3, r2
 80038c0:	608b      	str	r3, [r1, #8]
 80038c2:	e005      	b.n	80038d0 <HAL_RCCEx_PeriphCLKConfig+0x434>
 80038c4:	4b0f      	ldr	r3, [pc, #60]	; (8003904 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80038c6:	689b      	ldr	r3, [r3, #8]
 80038c8:	4a0e      	ldr	r2, [pc, #56]	; (8003904 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80038ca:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80038ce:	6093      	str	r3, [r2, #8]
 80038d0:	4b0c      	ldr	r3, [pc, #48]	; (8003904 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80038d2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038d8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80038dc:	4909      	ldr	r1, [pc, #36]	; (8003904 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80038de:	4313      	orrs	r3, r2
 80038e0:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f003 0310 	and.w	r3, r3, #16
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d004      	beq.n	80038f8 <HAL_RCCEx_PeriphCLKConfig+0x45c>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 80038f4:	4b07      	ldr	r3, [pc, #28]	; (8003914 <HAL_RCCEx_PeriphCLKConfig+0x478>)
 80038f6:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 80038f8:	2300      	movs	r3, #0
}
 80038fa:	4618      	mov	r0, r3
 80038fc:	3720      	adds	r7, #32
 80038fe:	46bd      	mov	sp, r7
 8003900:	bd80      	pop	{r7, pc}
 8003902:	bf00      	nop
 8003904:	40023800 	.word	0x40023800
 8003908:	42470070 	.word	0x42470070
 800390c:	40007000 	.word	0x40007000
 8003910:	42470e40 	.word	0x42470e40
 8003914:	424711e0 	.word	0x424711e0

08003918 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003918:	b580      	push	{r7, lr}
 800391a:	b086      	sub	sp, #24
 800391c:	af00      	add	r7, sp, #0
 800391e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	2b00      	cmp	r3, #0
 8003924:	d101      	bne.n	800392a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003926:	2301      	movs	r3, #1
 8003928:	e270      	b.n	8003e0c <HAL_RCC_OscConfig+0x4f4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	f003 0301 	and.w	r3, r3, #1
 8003932:	2b00      	cmp	r3, #0
 8003934:	d075      	beq.n	8003a22 <HAL_RCC_OscConfig+0x10a>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003936:	4ba3      	ldr	r3, [pc, #652]	; (8003bc4 <HAL_RCC_OscConfig+0x2ac>)
 8003938:	689b      	ldr	r3, [r3, #8]
 800393a:	f003 030c 	and.w	r3, r3, #12
 800393e:	2b04      	cmp	r3, #4
 8003940:	d00c      	beq.n	800395c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003942:	4ba0      	ldr	r3, [pc, #640]	; (8003bc4 <HAL_RCC_OscConfig+0x2ac>)
 8003944:	689b      	ldr	r3, [r3, #8]
 8003946:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800394a:	2b08      	cmp	r3, #8
 800394c:	d112      	bne.n	8003974 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800394e:	4b9d      	ldr	r3, [pc, #628]	; (8003bc4 <HAL_RCC_OscConfig+0x2ac>)
 8003950:	685b      	ldr	r3, [r3, #4]
 8003952:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003956:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800395a:	d10b      	bne.n	8003974 <HAL_RCC_OscConfig+0x5c>
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800395c:	4b99      	ldr	r3, [pc, #612]	; (8003bc4 <HAL_RCC_OscConfig+0x2ac>)
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003964:	2b00      	cmp	r3, #0
 8003966:	d05b      	beq.n	8003a20 <HAL_RCC_OscConfig+0x108>
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	685b      	ldr	r3, [r3, #4]
 800396c:	2b00      	cmp	r3, #0
 800396e:	d157      	bne.n	8003a20 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003970:	2301      	movs	r3, #1
 8003972:	e24b      	b.n	8003e0c <HAL_RCC_OscConfig+0x4f4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	685b      	ldr	r3, [r3, #4]
 8003978:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800397c:	d106      	bne.n	800398c <HAL_RCC_OscConfig+0x74>
 800397e:	4b91      	ldr	r3, [pc, #580]	; (8003bc4 <HAL_RCC_OscConfig+0x2ac>)
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	4a90      	ldr	r2, [pc, #576]	; (8003bc4 <HAL_RCC_OscConfig+0x2ac>)
 8003984:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003988:	6013      	str	r3, [r2, #0]
 800398a:	e01d      	b.n	80039c8 <HAL_RCC_OscConfig+0xb0>
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	685b      	ldr	r3, [r3, #4]
 8003990:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003994:	d10c      	bne.n	80039b0 <HAL_RCC_OscConfig+0x98>
 8003996:	4b8b      	ldr	r3, [pc, #556]	; (8003bc4 <HAL_RCC_OscConfig+0x2ac>)
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	4a8a      	ldr	r2, [pc, #552]	; (8003bc4 <HAL_RCC_OscConfig+0x2ac>)
 800399c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80039a0:	6013      	str	r3, [r2, #0]
 80039a2:	4b88      	ldr	r3, [pc, #544]	; (8003bc4 <HAL_RCC_OscConfig+0x2ac>)
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	4a87      	ldr	r2, [pc, #540]	; (8003bc4 <HAL_RCC_OscConfig+0x2ac>)
 80039a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80039ac:	6013      	str	r3, [r2, #0]
 80039ae:	e00b      	b.n	80039c8 <HAL_RCC_OscConfig+0xb0>
 80039b0:	4b84      	ldr	r3, [pc, #528]	; (8003bc4 <HAL_RCC_OscConfig+0x2ac>)
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	4a83      	ldr	r2, [pc, #524]	; (8003bc4 <HAL_RCC_OscConfig+0x2ac>)
 80039b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80039ba:	6013      	str	r3, [r2, #0]
 80039bc:	4b81      	ldr	r3, [pc, #516]	; (8003bc4 <HAL_RCC_OscConfig+0x2ac>)
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	4a80      	ldr	r2, [pc, #512]	; (8003bc4 <HAL_RCC_OscConfig+0x2ac>)
 80039c2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80039c6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	685b      	ldr	r3, [r3, #4]
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d013      	beq.n	80039f8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039d0:	f7fd fb56 	bl	8001080 <HAL_GetTick>
 80039d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80039d6:	e008      	b.n	80039ea <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80039d8:	f7fd fb52 	bl	8001080 <HAL_GetTick>
 80039dc:	4602      	mov	r2, r0
 80039de:	693b      	ldr	r3, [r7, #16]
 80039e0:	1ad3      	subs	r3, r2, r3
 80039e2:	2b64      	cmp	r3, #100	; 0x64
 80039e4:	d901      	bls.n	80039ea <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80039e6:	2303      	movs	r3, #3
 80039e8:	e210      	b.n	8003e0c <HAL_RCC_OscConfig+0x4f4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80039ea:	4b76      	ldr	r3, [pc, #472]	; (8003bc4 <HAL_RCC_OscConfig+0x2ac>)
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d0f0      	beq.n	80039d8 <HAL_RCC_OscConfig+0xc0>
 80039f6:	e014      	b.n	8003a22 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039f8:	f7fd fb42 	bl	8001080 <HAL_GetTick>
 80039fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80039fe:	e008      	b.n	8003a12 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003a00:	f7fd fb3e 	bl	8001080 <HAL_GetTick>
 8003a04:	4602      	mov	r2, r0
 8003a06:	693b      	ldr	r3, [r7, #16]
 8003a08:	1ad3      	subs	r3, r2, r3
 8003a0a:	2b64      	cmp	r3, #100	; 0x64
 8003a0c:	d901      	bls.n	8003a12 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003a0e:	2303      	movs	r3, #3
 8003a10:	e1fc      	b.n	8003e0c <HAL_RCC_OscConfig+0x4f4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003a12:	4b6c      	ldr	r3, [pc, #432]	; (8003bc4 <HAL_RCC_OscConfig+0x2ac>)
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d1f0      	bne.n	8003a00 <HAL_RCC_OscConfig+0xe8>
 8003a1e:	e000      	b.n	8003a22 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a20:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	f003 0302 	and.w	r3, r3, #2
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d063      	beq.n	8003af6 <HAL_RCC_OscConfig+0x1de>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003a2e:	4b65      	ldr	r3, [pc, #404]	; (8003bc4 <HAL_RCC_OscConfig+0x2ac>)
 8003a30:	689b      	ldr	r3, [r3, #8]
 8003a32:	f003 030c 	and.w	r3, r3, #12
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d00b      	beq.n	8003a52 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003a3a:	4b62      	ldr	r3, [pc, #392]	; (8003bc4 <HAL_RCC_OscConfig+0x2ac>)
 8003a3c:	689b      	ldr	r3, [r3, #8]
 8003a3e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003a42:	2b08      	cmp	r3, #8
 8003a44:	d11c      	bne.n	8003a80 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003a46:	4b5f      	ldr	r3, [pc, #380]	; (8003bc4 <HAL_RCC_OscConfig+0x2ac>)
 8003a48:	685b      	ldr	r3, [r3, #4]
 8003a4a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d116      	bne.n	8003a80 <HAL_RCC_OscConfig+0x168>
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003a52:	4b5c      	ldr	r3, [pc, #368]	; (8003bc4 <HAL_RCC_OscConfig+0x2ac>)
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	f003 0302 	and.w	r3, r3, #2
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d005      	beq.n	8003a6a <HAL_RCC_OscConfig+0x152>
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	68db      	ldr	r3, [r3, #12]
 8003a62:	2b01      	cmp	r3, #1
 8003a64:	d001      	beq.n	8003a6a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003a66:	2301      	movs	r3, #1
 8003a68:	e1d0      	b.n	8003e0c <HAL_RCC_OscConfig+0x4f4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a6a:	4b56      	ldr	r3, [pc, #344]	; (8003bc4 <HAL_RCC_OscConfig+0x2ac>)
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	691b      	ldr	r3, [r3, #16]
 8003a76:	00db      	lsls	r3, r3, #3
 8003a78:	4952      	ldr	r1, [pc, #328]	; (8003bc4 <HAL_RCC_OscConfig+0x2ac>)
 8003a7a:	4313      	orrs	r3, r2
 8003a7c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003a7e:	e03a      	b.n	8003af6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	68db      	ldr	r3, [r3, #12]
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d020      	beq.n	8003aca <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003a88:	4b4f      	ldr	r3, [pc, #316]	; (8003bc8 <HAL_RCC_OscConfig+0x2b0>)
 8003a8a:	2201      	movs	r2, #1
 8003a8c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a8e:	f7fd faf7 	bl	8001080 <HAL_GetTick>
 8003a92:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a94:	e008      	b.n	8003aa8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003a96:	f7fd faf3 	bl	8001080 <HAL_GetTick>
 8003a9a:	4602      	mov	r2, r0
 8003a9c:	693b      	ldr	r3, [r7, #16]
 8003a9e:	1ad3      	subs	r3, r2, r3
 8003aa0:	2b02      	cmp	r3, #2
 8003aa2:	d901      	bls.n	8003aa8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003aa4:	2303      	movs	r3, #3
 8003aa6:	e1b1      	b.n	8003e0c <HAL_RCC_OscConfig+0x4f4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003aa8:	4b46      	ldr	r3, [pc, #280]	; (8003bc4 <HAL_RCC_OscConfig+0x2ac>)
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	f003 0302 	and.w	r3, r3, #2
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d0f0      	beq.n	8003a96 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ab4:	4b43      	ldr	r3, [pc, #268]	; (8003bc4 <HAL_RCC_OscConfig+0x2ac>)
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	691b      	ldr	r3, [r3, #16]
 8003ac0:	00db      	lsls	r3, r3, #3
 8003ac2:	4940      	ldr	r1, [pc, #256]	; (8003bc4 <HAL_RCC_OscConfig+0x2ac>)
 8003ac4:	4313      	orrs	r3, r2
 8003ac6:	600b      	str	r3, [r1, #0]
 8003ac8:	e015      	b.n	8003af6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003aca:	4b3f      	ldr	r3, [pc, #252]	; (8003bc8 <HAL_RCC_OscConfig+0x2b0>)
 8003acc:	2200      	movs	r2, #0
 8003ace:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ad0:	f7fd fad6 	bl	8001080 <HAL_GetTick>
 8003ad4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003ad6:	e008      	b.n	8003aea <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003ad8:	f7fd fad2 	bl	8001080 <HAL_GetTick>
 8003adc:	4602      	mov	r2, r0
 8003ade:	693b      	ldr	r3, [r7, #16]
 8003ae0:	1ad3      	subs	r3, r2, r3
 8003ae2:	2b02      	cmp	r3, #2
 8003ae4:	d901      	bls.n	8003aea <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003ae6:	2303      	movs	r3, #3
 8003ae8:	e190      	b.n	8003e0c <HAL_RCC_OscConfig+0x4f4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003aea:	4b36      	ldr	r3, [pc, #216]	; (8003bc4 <HAL_RCC_OscConfig+0x2ac>)
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	f003 0302 	and.w	r3, r3, #2
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d1f0      	bne.n	8003ad8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	f003 0308 	and.w	r3, r3, #8
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d030      	beq.n	8003b64 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	695b      	ldr	r3, [r3, #20]
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d016      	beq.n	8003b38 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003b0a:	4b30      	ldr	r3, [pc, #192]	; (8003bcc <HAL_RCC_OscConfig+0x2b4>)
 8003b0c:	2201      	movs	r2, #1
 8003b0e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b10:	f7fd fab6 	bl	8001080 <HAL_GetTick>
 8003b14:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b16:	e008      	b.n	8003b2a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003b18:	f7fd fab2 	bl	8001080 <HAL_GetTick>
 8003b1c:	4602      	mov	r2, r0
 8003b1e:	693b      	ldr	r3, [r7, #16]
 8003b20:	1ad3      	subs	r3, r2, r3
 8003b22:	2b02      	cmp	r3, #2
 8003b24:	d901      	bls.n	8003b2a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003b26:	2303      	movs	r3, #3
 8003b28:	e170      	b.n	8003e0c <HAL_RCC_OscConfig+0x4f4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b2a:	4b26      	ldr	r3, [pc, #152]	; (8003bc4 <HAL_RCC_OscConfig+0x2ac>)
 8003b2c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b2e:	f003 0302 	and.w	r3, r3, #2
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d0f0      	beq.n	8003b18 <HAL_RCC_OscConfig+0x200>
 8003b36:	e015      	b.n	8003b64 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003b38:	4b24      	ldr	r3, [pc, #144]	; (8003bcc <HAL_RCC_OscConfig+0x2b4>)
 8003b3a:	2200      	movs	r2, #0
 8003b3c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b3e:	f7fd fa9f 	bl	8001080 <HAL_GetTick>
 8003b42:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003b44:	e008      	b.n	8003b58 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003b46:	f7fd fa9b 	bl	8001080 <HAL_GetTick>
 8003b4a:	4602      	mov	r2, r0
 8003b4c:	693b      	ldr	r3, [r7, #16]
 8003b4e:	1ad3      	subs	r3, r2, r3
 8003b50:	2b02      	cmp	r3, #2
 8003b52:	d901      	bls.n	8003b58 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003b54:	2303      	movs	r3, #3
 8003b56:	e159      	b.n	8003e0c <HAL_RCC_OscConfig+0x4f4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003b58:	4b1a      	ldr	r3, [pc, #104]	; (8003bc4 <HAL_RCC_OscConfig+0x2ac>)
 8003b5a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b5c:	f003 0302 	and.w	r3, r3, #2
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d1f0      	bne.n	8003b46 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	f003 0304 	and.w	r3, r3, #4
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	f000 80a0 	beq.w	8003cb2 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003b72:	2300      	movs	r3, #0
 8003b74:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003b76:	4b13      	ldr	r3, [pc, #76]	; (8003bc4 <HAL_RCC_OscConfig+0x2ac>)
 8003b78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d10f      	bne.n	8003ba2 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003b82:	2300      	movs	r3, #0
 8003b84:	60bb      	str	r3, [r7, #8]
 8003b86:	4b0f      	ldr	r3, [pc, #60]	; (8003bc4 <HAL_RCC_OscConfig+0x2ac>)
 8003b88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b8a:	4a0e      	ldr	r2, [pc, #56]	; (8003bc4 <HAL_RCC_OscConfig+0x2ac>)
 8003b8c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b90:	6413      	str	r3, [r2, #64]	; 0x40
 8003b92:	4b0c      	ldr	r3, [pc, #48]	; (8003bc4 <HAL_RCC_OscConfig+0x2ac>)
 8003b94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b9a:	60bb      	str	r3, [r7, #8]
 8003b9c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003b9e:	2301      	movs	r3, #1
 8003ba0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ba2:	4b0b      	ldr	r3, [pc, #44]	; (8003bd0 <HAL_RCC_OscConfig+0x2b8>)
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d121      	bne.n	8003bf2 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003bae:	4b08      	ldr	r3, [pc, #32]	; (8003bd0 <HAL_RCC_OscConfig+0x2b8>)
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	4a07      	ldr	r2, [pc, #28]	; (8003bd0 <HAL_RCC_OscConfig+0x2b8>)
 8003bb4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003bb8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003bba:	f7fd fa61 	bl	8001080 <HAL_GetTick>
 8003bbe:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003bc0:	e011      	b.n	8003be6 <HAL_RCC_OscConfig+0x2ce>
 8003bc2:	bf00      	nop
 8003bc4:	40023800 	.word	0x40023800
 8003bc8:	42470000 	.word	0x42470000
 8003bcc:	42470e80 	.word	0x42470e80
 8003bd0:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003bd4:	f7fd fa54 	bl	8001080 <HAL_GetTick>
 8003bd8:	4602      	mov	r2, r0
 8003bda:	693b      	ldr	r3, [r7, #16]
 8003bdc:	1ad3      	subs	r3, r2, r3
 8003bde:	2b02      	cmp	r3, #2
 8003be0:	d901      	bls.n	8003be6 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8003be2:	2303      	movs	r3, #3
 8003be4:	e112      	b.n	8003e0c <HAL_RCC_OscConfig+0x4f4>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003be6:	4b8b      	ldr	r3, [pc, #556]	; (8003e14 <HAL_RCC_OscConfig+0x4fc>)
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d0f0      	beq.n	8003bd4 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	689b      	ldr	r3, [r3, #8]
 8003bf6:	2b01      	cmp	r3, #1
 8003bf8:	d106      	bne.n	8003c08 <HAL_RCC_OscConfig+0x2f0>
 8003bfa:	4b87      	ldr	r3, [pc, #540]	; (8003e18 <HAL_RCC_OscConfig+0x500>)
 8003bfc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bfe:	4a86      	ldr	r2, [pc, #536]	; (8003e18 <HAL_RCC_OscConfig+0x500>)
 8003c00:	f043 0301 	orr.w	r3, r3, #1
 8003c04:	6713      	str	r3, [r2, #112]	; 0x70
 8003c06:	e01c      	b.n	8003c42 <HAL_RCC_OscConfig+0x32a>
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	689b      	ldr	r3, [r3, #8]
 8003c0c:	2b05      	cmp	r3, #5
 8003c0e:	d10c      	bne.n	8003c2a <HAL_RCC_OscConfig+0x312>
 8003c10:	4b81      	ldr	r3, [pc, #516]	; (8003e18 <HAL_RCC_OscConfig+0x500>)
 8003c12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c14:	4a80      	ldr	r2, [pc, #512]	; (8003e18 <HAL_RCC_OscConfig+0x500>)
 8003c16:	f043 0304 	orr.w	r3, r3, #4
 8003c1a:	6713      	str	r3, [r2, #112]	; 0x70
 8003c1c:	4b7e      	ldr	r3, [pc, #504]	; (8003e18 <HAL_RCC_OscConfig+0x500>)
 8003c1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c20:	4a7d      	ldr	r2, [pc, #500]	; (8003e18 <HAL_RCC_OscConfig+0x500>)
 8003c22:	f043 0301 	orr.w	r3, r3, #1
 8003c26:	6713      	str	r3, [r2, #112]	; 0x70
 8003c28:	e00b      	b.n	8003c42 <HAL_RCC_OscConfig+0x32a>
 8003c2a:	4b7b      	ldr	r3, [pc, #492]	; (8003e18 <HAL_RCC_OscConfig+0x500>)
 8003c2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c2e:	4a7a      	ldr	r2, [pc, #488]	; (8003e18 <HAL_RCC_OscConfig+0x500>)
 8003c30:	f023 0301 	bic.w	r3, r3, #1
 8003c34:	6713      	str	r3, [r2, #112]	; 0x70
 8003c36:	4b78      	ldr	r3, [pc, #480]	; (8003e18 <HAL_RCC_OscConfig+0x500>)
 8003c38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c3a:	4a77      	ldr	r2, [pc, #476]	; (8003e18 <HAL_RCC_OscConfig+0x500>)
 8003c3c:	f023 0304 	bic.w	r3, r3, #4
 8003c40:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	689b      	ldr	r3, [r3, #8]
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d015      	beq.n	8003c76 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c4a:	f7fd fa19 	bl	8001080 <HAL_GetTick>
 8003c4e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c50:	e00a      	b.n	8003c68 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003c52:	f7fd fa15 	bl	8001080 <HAL_GetTick>
 8003c56:	4602      	mov	r2, r0
 8003c58:	693b      	ldr	r3, [r7, #16]
 8003c5a:	1ad3      	subs	r3, r2, r3
 8003c5c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c60:	4293      	cmp	r3, r2
 8003c62:	d901      	bls.n	8003c68 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003c64:	2303      	movs	r3, #3
 8003c66:	e0d1      	b.n	8003e0c <HAL_RCC_OscConfig+0x4f4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c68:	4b6b      	ldr	r3, [pc, #428]	; (8003e18 <HAL_RCC_OscConfig+0x500>)
 8003c6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c6c:	f003 0302 	and.w	r3, r3, #2
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d0ee      	beq.n	8003c52 <HAL_RCC_OscConfig+0x33a>
 8003c74:	e014      	b.n	8003ca0 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c76:	f7fd fa03 	bl	8001080 <HAL_GetTick>
 8003c7a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c7c:	e00a      	b.n	8003c94 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003c7e:	f7fd f9ff 	bl	8001080 <HAL_GetTick>
 8003c82:	4602      	mov	r2, r0
 8003c84:	693b      	ldr	r3, [r7, #16]
 8003c86:	1ad3      	subs	r3, r2, r3
 8003c88:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c8c:	4293      	cmp	r3, r2
 8003c8e:	d901      	bls.n	8003c94 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003c90:	2303      	movs	r3, #3
 8003c92:	e0bb      	b.n	8003e0c <HAL_RCC_OscConfig+0x4f4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c94:	4b60      	ldr	r3, [pc, #384]	; (8003e18 <HAL_RCC_OscConfig+0x500>)
 8003c96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c98:	f003 0302 	and.w	r3, r3, #2
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d1ee      	bne.n	8003c7e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003ca0:	7dfb      	ldrb	r3, [r7, #23]
 8003ca2:	2b01      	cmp	r3, #1
 8003ca4:	d105      	bne.n	8003cb2 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ca6:	4b5c      	ldr	r3, [pc, #368]	; (8003e18 <HAL_RCC_OscConfig+0x500>)
 8003ca8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003caa:	4a5b      	ldr	r2, [pc, #364]	; (8003e18 <HAL_RCC_OscConfig+0x500>)
 8003cac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003cb0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	699b      	ldr	r3, [r3, #24]
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	f000 80a7 	beq.w	8003e0a <HAL_RCC_OscConfig+0x4f2>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003cbc:	4b56      	ldr	r3, [pc, #344]	; (8003e18 <HAL_RCC_OscConfig+0x500>)
 8003cbe:	689b      	ldr	r3, [r3, #8]
 8003cc0:	f003 030c 	and.w	r3, r3, #12
 8003cc4:	2b08      	cmp	r3, #8
 8003cc6:	d060      	beq.n	8003d8a <HAL_RCC_OscConfig+0x472>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	699b      	ldr	r3, [r3, #24]
 8003ccc:	2b02      	cmp	r3, #2
 8003cce:	d145      	bne.n	8003d5c <HAL_RCC_OscConfig+0x444>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003cd0:	4b52      	ldr	r3, [pc, #328]	; (8003e1c <HAL_RCC_OscConfig+0x504>)
 8003cd2:	2200      	movs	r2, #0
 8003cd4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cd6:	f7fd f9d3 	bl	8001080 <HAL_GetTick>
 8003cda:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003cdc:	e008      	b.n	8003cf0 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003cde:	f7fd f9cf 	bl	8001080 <HAL_GetTick>
 8003ce2:	4602      	mov	r2, r0
 8003ce4:	693b      	ldr	r3, [r7, #16]
 8003ce6:	1ad3      	subs	r3, r2, r3
 8003ce8:	2b02      	cmp	r3, #2
 8003cea:	d901      	bls.n	8003cf0 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003cec:	2303      	movs	r3, #3
 8003cee:	e08d      	b.n	8003e0c <HAL_RCC_OscConfig+0x4f4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003cf0:	4b49      	ldr	r3, [pc, #292]	; (8003e18 <HAL_RCC_OscConfig+0x500>)
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d1f0      	bne.n	8003cde <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	69da      	ldr	r2, [r3, #28]
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	6a1b      	ldr	r3, [r3, #32]
 8003d04:	431a      	orrs	r2, r3
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d0a:	019b      	lsls	r3, r3, #6
 8003d0c:	431a      	orrs	r2, r3
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d12:	085b      	lsrs	r3, r3, #1
 8003d14:	3b01      	subs	r3, #1
 8003d16:	041b      	lsls	r3, r3, #16
 8003d18:	431a      	orrs	r2, r3
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d1e:	061b      	lsls	r3, r3, #24
 8003d20:	431a      	orrs	r2, r3
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d26:	071b      	lsls	r3, r3, #28
 8003d28:	493b      	ldr	r1, [pc, #236]	; (8003e18 <HAL_RCC_OscConfig+0x500>)
 8003d2a:	4313      	orrs	r3, r2
 8003d2c:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003d2e:	4b3b      	ldr	r3, [pc, #236]	; (8003e1c <HAL_RCC_OscConfig+0x504>)
 8003d30:	2201      	movs	r2, #1
 8003d32:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d34:	f7fd f9a4 	bl	8001080 <HAL_GetTick>
 8003d38:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d3a:	e008      	b.n	8003d4e <HAL_RCC_OscConfig+0x436>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d3c:	f7fd f9a0 	bl	8001080 <HAL_GetTick>
 8003d40:	4602      	mov	r2, r0
 8003d42:	693b      	ldr	r3, [r7, #16]
 8003d44:	1ad3      	subs	r3, r2, r3
 8003d46:	2b02      	cmp	r3, #2
 8003d48:	d901      	bls.n	8003d4e <HAL_RCC_OscConfig+0x436>
          {
            return HAL_TIMEOUT;
 8003d4a:	2303      	movs	r3, #3
 8003d4c:	e05e      	b.n	8003e0c <HAL_RCC_OscConfig+0x4f4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d4e:	4b32      	ldr	r3, [pc, #200]	; (8003e18 <HAL_RCC_OscConfig+0x500>)
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d0f0      	beq.n	8003d3c <HAL_RCC_OscConfig+0x424>
 8003d5a:	e056      	b.n	8003e0a <HAL_RCC_OscConfig+0x4f2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d5c:	4b2f      	ldr	r3, [pc, #188]	; (8003e1c <HAL_RCC_OscConfig+0x504>)
 8003d5e:	2200      	movs	r2, #0
 8003d60:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d62:	f7fd f98d 	bl	8001080 <HAL_GetTick>
 8003d66:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d68:	e008      	b.n	8003d7c <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d6a:	f7fd f989 	bl	8001080 <HAL_GetTick>
 8003d6e:	4602      	mov	r2, r0
 8003d70:	693b      	ldr	r3, [r7, #16]
 8003d72:	1ad3      	subs	r3, r2, r3
 8003d74:	2b02      	cmp	r3, #2
 8003d76:	d901      	bls.n	8003d7c <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8003d78:	2303      	movs	r3, #3
 8003d7a:	e047      	b.n	8003e0c <HAL_RCC_OscConfig+0x4f4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d7c:	4b26      	ldr	r3, [pc, #152]	; (8003e18 <HAL_RCC_OscConfig+0x500>)
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d1f0      	bne.n	8003d6a <HAL_RCC_OscConfig+0x452>
 8003d88:	e03f      	b.n	8003e0a <HAL_RCC_OscConfig+0x4f2>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	699b      	ldr	r3, [r3, #24]
 8003d8e:	2b01      	cmp	r3, #1
 8003d90:	d101      	bne.n	8003d96 <HAL_RCC_OscConfig+0x47e>
      {
        return HAL_ERROR;
 8003d92:	2301      	movs	r3, #1
 8003d94:	e03a      	b.n	8003e0c <HAL_RCC_OscConfig+0x4f4>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003d96:	4b20      	ldr	r3, [pc, #128]	; (8003e18 <HAL_RCC_OscConfig+0x500>)
 8003d98:	685b      	ldr	r3, [r3, #4]
 8003d9a:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	699b      	ldr	r3, [r3, #24]
 8003da0:	2b01      	cmp	r3, #1
 8003da2:	d030      	beq.n	8003e06 <HAL_RCC_OscConfig+0x4ee>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003dae:	429a      	cmp	r2, r3
 8003db0:	d129      	bne.n	8003e06 <HAL_RCC_OscConfig+0x4ee>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003dbc:	429a      	cmp	r2, r3
 8003dbe:	d122      	bne.n	8003e06 <HAL_RCC_OscConfig+0x4ee>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003dc0:	68fa      	ldr	r2, [r7, #12]
 8003dc2:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003dc6:	4013      	ands	r3, r2
 8003dc8:	687a      	ldr	r2, [r7, #4]
 8003dca:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003dcc:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003dce:	4293      	cmp	r3, r2
 8003dd0:	d119      	bne.n	8003e06 <HAL_RCC_OscConfig+0x4ee>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ddc:	085b      	lsrs	r3, r3, #1
 8003dde:	3b01      	subs	r3, #1
 8003de0:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003de2:	429a      	cmp	r2, r3
 8003de4:	d10f      	bne.n	8003e06 <HAL_RCC_OscConfig+0x4ee>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003df0:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003df2:	429a      	cmp	r2, r3
 8003df4:	d107      	bne.n	8003e06 <HAL_RCC_OscConfig+0x4ee>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e00:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003e02:	429a      	cmp	r2, r3
 8003e04:	d001      	beq.n	8003e0a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8003e06:	2301      	movs	r3, #1
 8003e08:	e000      	b.n	8003e0c <HAL_RCC_OscConfig+0x4f4>
        }
      }
    }
  }
  return HAL_OK;
 8003e0a:	2300      	movs	r3, #0
}
 8003e0c:	4618      	mov	r0, r3
 8003e0e:	3718      	adds	r7, #24
 8003e10:	46bd      	mov	sp, r7
 8003e12:	bd80      	pop	{r7, pc}
 8003e14:	40007000 	.word	0x40007000
 8003e18:	40023800 	.word	0x40023800
 8003e1c:	42470060 	.word	0x42470060

08003e20 <HAL_SRAM_Init>:
  * @param  Timing Pointer to SRAM control timing structure 
  * @param  ExtTiming Pointer to SRAM extended mode timing structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing, FMC_NORSRAM_TimingTypeDef *ExtTiming)
{ 
 8003e20:	b580      	push	{r7, lr}
 8003e22:	b084      	sub	sp, #16
 8003e24:	af00      	add	r7, sp, #0
 8003e26:	60f8      	str	r0, [r7, #12]
 8003e28:	60b9      	str	r1, [r7, #8]
 8003e2a:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if(hsram == NULL)
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d101      	bne.n	8003e36 <HAL_SRAM_Init+0x16>
  {
     return HAL_ERROR;
 8003e32:	2301      	movs	r3, #1
 8003e34:	e034      	b.n	8003ea0 <HAL_SRAM_Init+0x80>
  }
  
  if(hsram->State == HAL_SRAM_STATE_RESET)
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 8003e3c:	b2db      	uxtb	r3, r3
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d106      	bne.n	8003e50 <HAL_SRAM_Init+0x30>
  {  
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	2200      	movs	r2, #0
 8003e46:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 8003e4a:	68f8      	ldr	r0, [r7, #12]
 8003e4c:	f7fd f82e 	bl	8000eac <HAL_SRAM_MspInit>
#endif
  }
  
  /* Initialize SRAM control Interface */
  FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	681a      	ldr	r2, [r3, #0]
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	3308      	adds	r3, #8
 8003e58:	4619      	mov	r1, r3
 8003e5a:	4610      	mov	r0, r2
 8003e5c:	f000 fb3a 	bl	80044d4 <FMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank); 
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	6818      	ldr	r0, [r3, #0]
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	689b      	ldr	r3, [r3, #8]
 8003e68:	461a      	mov	r2, r3
 8003e6a:	68b9      	ldr	r1, [r7, #8]
 8003e6c:	f000 fba2 	bl	80045b4 <FMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,  hsram->Init.ExtendedMode);  
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	6858      	ldr	r0, [r3, #4]
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	689a      	ldr	r2, [r3, #8]
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e7c:	6879      	ldr	r1, [r7, #4]
 8003e7e:	f000 fbed 	bl	800465c <FMC_NORSRAM_Extended_Timing_Init>
  
  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank); 
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	68fa      	ldr	r2, [r7, #12]
 8003e88:	6892      	ldr	r2, [r2, #8]
 8003e8a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	68fa      	ldr	r2, [r7, #12]
 8003e94:	6892      	ldr	r2, [r2, #8]
 8003e96:	f041 0101 	orr.w	r1, r1, #1
 8003e9a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  
  return HAL_OK;
 8003e9e:	2300      	movs	r3, #0
}
 8003ea0:	4618      	mov	r0, r3
 8003ea2:	3710      	adds	r7, #16
 8003ea4:	46bd      	mov	sp, r7
 8003ea6:	bd80      	pop	{r7, pc}

08003ea8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003ea8:	b580      	push	{r7, lr}
 8003eaa:	b082      	sub	sp, #8
 8003eac:	af00      	add	r7, sp, #0
 8003eae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d101      	bne.n	8003eba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003eb6:	2301      	movs	r3, #1
 8003eb8:	e03f      	b.n	8003f3a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ec0:	b2db      	uxtb	r3, r3
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d106      	bne.n	8003ed4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	2200      	movs	r2, #0
 8003eca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003ece:	6878      	ldr	r0, [r7, #4]
 8003ed0:	f7fc ff12 	bl	8000cf8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	2224      	movs	r2, #36	; 0x24
 8003ed8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	68da      	ldr	r2, [r3, #12]
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003eea:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003eec:	6878      	ldr	r0, [r7, #4]
 8003eee:	f000 f929 	bl	8004144 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	691a      	ldr	r2, [r3, #16]
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003f00:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	695a      	ldr	r2, [r3, #20]
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003f10:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	68da      	ldr	r2, [r3, #12]
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003f20:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	2200      	movs	r2, #0
 8003f26:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	2220      	movs	r2, #32
 8003f2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	2220      	movs	r2, #32
 8003f34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003f38:	2300      	movs	r3, #0
}
 8003f3a:	4618      	mov	r0, r3
 8003f3c:	3708      	adds	r7, #8
 8003f3e:	46bd      	mov	sp, r7
 8003f40:	bd80      	pop	{r7, pc}

08003f42 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003f42:	b580      	push	{r7, lr}
 8003f44:	b08a      	sub	sp, #40	; 0x28
 8003f46:	af02      	add	r7, sp, #8
 8003f48:	60f8      	str	r0, [r7, #12]
 8003f4a:	60b9      	str	r1, [r7, #8]
 8003f4c:	603b      	str	r3, [r7, #0]
 8003f4e:	4613      	mov	r3, r2
 8003f50:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003f52:	2300      	movs	r3, #0
 8003f54:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f5c:	b2db      	uxtb	r3, r3
 8003f5e:	2b20      	cmp	r3, #32
 8003f60:	d17c      	bne.n	800405c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003f62:	68bb      	ldr	r3, [r7, #8]
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d002      	beq.n	8003f6e <HAL_UART_Transmit+0x2c>
 8003f68:	88fb      	ldrh	r3, [r7, #6]
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d101      	bne.n	8003f72 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003f6e:	2301      	movs	r3, #1
 8003f70:	e075      	b.n	800405e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003f78:	2b01      	cmp	r3, #1
 8003f7a:	d101      	bne.n	8003f80 <HAL_UART_Transmit+0x3e>
 8003f7c:	2302      	movs	r3, #2
 8003f7e:	e06e      	b.n	800405e <HAL_UART_Transmit+0x11c>
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	2201      	movs	r2, #1
 8003f84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	2200      	movs	r2, #0
 8003f8c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	2221      	movs	r2, #33	; 0x21
 8003f92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003f96:	f7fd f873 	bl	8001080 <HAL_GetTick>
 8003f9a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	88fa      	ldrh	r2, [r7, #6]
 8003fa0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	88fa      	ldrh	r2, [r7, #6]
 8003fa6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	689b      	ldr	r3, [r3, #8]
 8003fac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003fb0:	d108      	bne.n	8003fc4 <HAL_UART_Transmit+0x82>
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	691b      	ldr	r3, [r3, #16]
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d104      	bne.n	8003fc4 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003fba:	2300      	movs	r3, #0
 8003fbc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003fbe:	68bb      	ldr	r3, [r7, #8]
 8003fc0:	61bb      	str	r3, [r7, #24]
 8003fc2:	e003      	b.n	8003fcc <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003fc4:	68bb      	ldr	r3, [r7, #8]
 8003fc6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003fc8:	2300      	movs	r3, #0
 8003fca:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	2200      	movs	r2, #0
 8003fd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003fd4:	e02a      	b.n	800402c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003fd6:	683b      	ldr	r3, [r7, #0]
 8003fd8:	9300      	str	r3, [sp, #0]
 8003fda:	697b      	ldr	r3, [r7, #20]
 8003fdc:	2200      	movs	r2, #0
 8003fde:	2180      	movs	r1, #128	; 0x80
 8003fe0:	68f8      	ldr	r0, [r7, #12]
 8003fe2:	f000 f840 	bl	8004066 <UART_WaitOnFlagUntilTimeout>
 8003fe6:	4603      	mov	r3, r0
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d001      	beq.n	8003ff0 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003fec:	2303      	movs	r3, #3
 8003fee:	e036      	b.n	800405e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003ff0:	69fb      	ldr	r3, [r7, #28]
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d10b      	bne.n	800400e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003ff6:	69bb      	ldr	r3, [r7, #24]
 8003ff8:	881b      	ldrh	r3, [r3, #0]
 8003ffa:	461a      	mov	r2, r3
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004004:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004006:	69bb      	ldr	r3, [r7, #24]
 8004008:	3302      	adds	r3, #2
 800400a:	61bb      	str	r3, [r7, #24]
 800400c:	e007      	b.n	800401e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800400e:	69fb      	ldr	r3, [r7, #28]
 8004010:	781a      	ldrb	r2, [r3, #0]
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004018:	69fb      	ldr	r3, [r7, #28]
 800401a:	3301      	adds	r3, #1
 800401c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004022:	b29b      	uxth	r3, r3
 8004024:	3b01      	subs	r3, #1
 8004026:	b29a      	uxth	r2, r3
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004030:	b29b      	uxth	r3, r3
 8004032:	2b00      	cmp	r3, #0
 8004034:	d1cf      	bne.n	8003fd6 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004036:	683b      	ldr	r3, [r7, #0]
 8004038:	9300      	str	r3, [sp, #0]
 800403a:	697b      	ldr	r3, [r7, #20]
 800403c:	2200      	movs	r2, #0
 800403e:	2140      	movs	r1, #64	; 0x40
 8004040:	68f8      	ldr	r0, [r7, #12]
 8004042:	f000 f810 	bl	8004066 <UART_WaitOnFlagUntilTimeout>
 8004046:	4603      	mov	r3, r0
 8004048:	2b00      	cmp	r3, #0
 800404a:	d001      	beq.n	8004050 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800404c:	2303      	movs	r3, #3
 800404e:	e006      	b.n	800405e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	2220      	movs	r2, #32
 8004054:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004058:	2300      	movs	r3, #0
 800405a:	e000      	b.n	800405e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800405c:	2302      	movs	r3, #2
  }
}
 800405e:	4618      	mov	r0, r3
 8004060:	3720      	adds	r7, #32
 8004062:	46bd      	mov	sp, r7
 8004064:	bd80      	pop	{r7, pc}

08004066 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004066:	b580      	push	{r7, lr}
 8004068:	b090      	sub	sp, #64	; 0x40
 800406a:	af00      	add	r7, sp, #0
 800406c:	60f8      	str	r0, [r7, #12]
 800406e:	60b9      	str	r1, [r7, #8]
 8004070:	603b      	str	r3, [r7, #0]
 8004072:	4613      	mov	r3, r2
 8004074:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004076:	e050      	b.n	800411a <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004078:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800407a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800407e:	d04c      	beq.n	800411a <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004080:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004082:	2b00      	cmp	r3, #0
 8004084:	d007      	beq.n	8004096 <UART_WaitOnFlagUntilTimeout+0x30>
 8004086:	f7fc fffb 	bl	8001080 <HAL_GetTick>
 800408a:	4602      	mov	r2, r0
 800408c:	683b      	ldr	r3, [r7, #0]
 800408e:	1ad3      	subs	r3, r2, r3
 8004090:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004092:	429a      	cmp	r2, r3
 8004094:	d241      	bcs.n	800411a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	330c      	adds	r3, #12
 800409c:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800409e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040a0:	e853 3f00 	ldrex	r3, [r3]
 80040a4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80040a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040a8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80040ac:	63fb      	str	r3, [r7, #60]	; 0x3c
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	330c      	adds	r3, #12
 80040b4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80040b6:	637a      	str	r2, [r7, #52]	; 0x34
 80040b8:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040ba:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80040bc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80040be:	e841 2300 	strex	r3, r2, [r1]
 80040c2:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80040c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d1e5      	bne.n	8004096 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	3314      	adds	r3, #20
 80040d0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040d2:	697b      	ldr	r3, [r7, #20]
 80040d4:	e853 3f00 	ldrex	r3, [r3]
 80040d8:	613b      	str	r3, [r7, #16]
   return(result);
 80040da:	693b      	ldr	r3, [r7, #16]
 80040dc:	f023 0301 	bic.w	r3, r3, #1
 80040e0:	63bb      	str	r3, [r7, #56]	; 0x38
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	3314      	adds	r3, #20
 80040e8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80040ea:	623a      	str	r2, [r7, #32]
 80040ec:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040ee:	69f9      	ldr	r1, [r7, #28]
 80040f0:	6a3a      	ldr	r2, [r7, #32]
 80040f2:	e841 2300 	strex	r3, r2, [r1]
 80040f6:	61bb      	str	r3, [r7, #24]
   return(result);
 80040f8:	69bb      	ldr	r3, [r7, #24]
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d1e5      	bne.n	80040ca <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	2220      	movs	r2, #32
 8004102:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	2220      	movs	r2, #32
 800410a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	2200      	movs	r2, #0
 8004112:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004116:	2303      	movs	r3, #3
 8004118:	e00f      	b.n	800413a <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	681a      	ldr	r2, [r3, #0]
 8004120:	68bb      	ldr	r3, [r7, #8]
 8004122:	4013      	ands	r3, r2
 8004124:	68ba      	ldr	r2, [r7, #8]
 8004126:	429a      	cmp	r2, r3
 8004128:	bf0c      	ite	eq
 800412a:	2301      	moveq	r3, #1
 800412c:	2300      	movne	r3, #0
 800412e:	b2db      	uxtb	r3, r3
 8004130:	461a      	mov	r2, r3
 8004132:	79fb      	ldrb	r3, [r7, #7]
 8004134:	429a      	cmp	r2, r3
 8004136:	d09f      	beq.n	8004078 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004138:	2300      	movs	r3, #0
}
 800413a:	4618      	mov	r0, r3
 800413c:	3740      	adds	r7, #64	; 0x40
 800413e:	46bd      	mov	sp, r7
 8004140:	bd80      	pop	{r7, pc}
	...

08004144 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004144:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004148:	b09f      	sub	sp, #124	; 0x7c
 800414a:	af00      	add	r7, sp, #0
 800414c:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800414e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	691b      	ldr	r3, [r3, #16]
 8004154:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004158:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800415a:	68d9      	ldr	r1, [r3, #12]
 800415c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800415e:	681a      	ldr	r2, [r3, #0]
 8004160:	ea40 0301 	orr.w	r3, r0, r1
 8004164:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004166:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004168:	689a      	ldr	r2, [r3, #8]
 800416a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800416c:	691b      	ldr	r3, [r3, #16]
 800416e:	431a      	orrs	r2, r3
 8004170:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004172:	695b      	ldr	r3, [r3, #20]
 8004174:	431a      	orrs	r2, r3
 8004176:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004178:	69db      	ldr	r3, [r3, #28]
 800417a:	4313      	orrs	r3, r2
 800417c:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 800417e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	68db      	ldr	r3, [r3, #12]
 8004184:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004188:	f021 010c 	bic.w	r1, r1, #12
 800418c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800418e:	681a      	ldr	r2, [r3, #0]
 8004190:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004192:	430b      	orrs	r3, r1
 8004194:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004196:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	695b      	ldr	r3, [r3, #20]
 800419c:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80041a0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80041a2:	6999      	ldr	r1, [r3, #24]
 80041a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80041a6:	681a      	ldr	r2, [r3, #0]
 80041a8:	ea40 0301 	orr.w	r3, r0, r1
 80041ac:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80041ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80041b0:	681a      	ldr	r2, [r3, #0]
 80041b2:	4bc5      	ldr	r3, [pc, #788]	; (80044c8 <UART_SetConfig+0x384>)
 80041b4:	429a      	cmp	r2, r3
 80041b6:	d004      	beq.n	80041c2 <UART_SetConfig+0x7e>
 80041b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80041ba:	681a      	ldr	r2, [r3, #0]
 80041bc:	4bc3      	ldr	r3, [pc, #780]	; (80044cc <UART_SetConfig+0x388>)
 80041be:	429a      	cmp	r2, r3
 80041c0:	d103      	bne.n	80041ca <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80041c2:	f7ff f957 	bl	8003474 <HAL_RCC_GetPCLK2Freq>
 80041c6:	6778      	str	r0, [r7, #116]	; 0x74
 80041c8:	e002      	b.n	80041d0 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80041ca:	f7ff f93f 	bl	800344c <HAL_RCC_GetPCLK1Freq>
 80041ce:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80041d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80041d2:	69db      	ldr	r3, [r3, #28]
 80041d4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80041d8:	f040 80b6 	bne.w	8004348 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80041dc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80041de:	461c      	mov	r4, r3
 80041e0:	f04f 0500 	mov.w	r5, #0
 80041e4:	4622      	mov	r2, r4
 80041e6:	462b      	mov	r3, r5
 80041e8:	1891      	adds	r1, r2, r2
 80041ea:	6439      	str	r1, [r7, #64]	; 0x40
 80041ec:	415b      	adcs	r3, r3
 80041ee:	647b      	str	r3, [r7, #68]	; 0x44
 80041f0:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80041f4:	1912      	adds	r2, r2, r4
 80041f6:	eb45 0303 	adc.w	r3, r5, r3
 80041fa:	f04f 0000 	mov.w	r0, #0
 80041fe:	f04f 0100 	mov.w	r1, #0
 8004202:	00d9      	lsls	r1, r3, #3
 8004204:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004208:	00d0      	lsls	r0, r2, #3
 800420a:	4602      	mov	r2, r0
 800420c:	460b      	mov	r3, r1
 800420e:	1911      	adds	r1, r2, r4
 8004210:	6639      	str	r1, [r7, #96]	; 0x60
 8004212:	416b      	adcs	r3, r5
 8004214:	667b      	str	r3, [r7, #100]	; 0x64
 8004216:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004218:	685b      	ldr	r3, [r3, #4]
 800421a:	461a      	mov	r2, r3
 800421c:	f04f 0300 	mov.w	r3, #0
 8004220:	1891      	adds	r1, r2, r2
 8004222:	63b9      	str	r1, [r7, #56]	; 0x38
 8004224:	415b      	adcs	r3, r3
 8004226:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004228:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800422c:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8004230:	f7fb ffe0 	bl	80001f4 <__aeabi_uldivmod>
 8004234:	4602      	mov	r2, r0
 8004236:	460b      	mov	r3, r1
 8004238:	4ba5      	ldr	r3, [pc, #660]	; (80044d0 <UART_SetConfig+0x38c>)
 800423a:	fba3 2302 	umull	r2, r3, r3, r2
 800423e:	095b      	lsrs	r3, r3, #5
 8004240:	011e      	lsls	r6, r3, #4
 8004242:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004244:	461c      	mov	r4, r3
 8004246:	f04f 0500 	mov.w	r5, #0
 800424a:	4622      	mov	r2, r4
 800424c:	462b      	mov	r3, r5
 800424e:	1891      	adds	r1, r2, r2
 8004250:	6339      	str	r1, [r7, #48]	; 0x30
 8004252:	415b      	adcs	r3, r3
 8004254:	637b      	str	r3, [r7, #52]	; 0x34
 8004256:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800425a:	1912      	adds	r2, r2, r4
 800425c:	eb45 0303 	adc.w	r3, r5, r3
 8004260:	f04f 0000 	mov.w	r0, #0
 8004264:	f04f 0100 	mov.w	r1, #0
 8004268:	00d9      	lsls	r1, r3, #3
 800426a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800426e:	00d0      	lsls	r0, r2, #3
 8004270:	4602      	mov	r2, r0
 8004272:	460b      	mov	r3, r1
 8004274:	1911      	adds	r1, r2, r4
 8004276:	65b9      	str	r1, [r7, #88]	; 0x58
 8004278:	416b      	adcs	r3, r5
 800427a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800427c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800427e:	685b      	ldr	r3, [r3, #4]
 8004280:	461a      	mov	r2, r3
 8004282:	f04f 0300 	mov.w	r3, #0
 8004286:	1891      	adds	r1, r2, r2
 8004288:	62b9      	str	r1, [r7, #40]	; 0x28
 800428a:	415b      	adcs	r3, r3
 800428c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800428e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004292:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8004296:	f7fb ffad 	bl	80001f4 <__aeabi_uldivmod>
 800429a:	4602      	mov	r2, r0
 800429c:	460b      	mov	r3, r1
 800429e:	4b8c      	ldr	r3, [pc, #560]	; (80044d0 <UART_SetConfig+0x38c>)
 80042a0:	fba3 1302 	umull	r1, r3, r3, r2
 80042a4:	095b      	lsrs	r3, r3, #5
 80042a6:	2164      	movs	r1, #100	; 0x64
 80042a8:	fb01 f303 	mul.w	r3, r1, r3
 80042ac:	1ad3      	subs	r3, r2, r3
 80042ae:	00db      	lsls	r3, r3, #3
 80042b0:	3332      	adds	r3, #50	; 0x32
 80042b2:	4a87      	ldr	r2, [pc, #540]	; (80044d0 <UART_SetConfig+0x38c>)
 80042b4:	fba2 2303 	umull	r2, r3, r2, r3
 80042b8:	095b      	lsrs	r3, r3, #5
 80042ba:	005b      	lsls	r3, r3, #1
 80042bc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80042c0:	441e      	add	r6, r3
 80042c2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80042c4:	4618      	mov	r0, r3
 80042c6:	f04f 0100 	mov.w	r1, #0
 80042ca:	4602      	mov	r2, r0
 80042cc:	460b      	mov	r3, r1
 80042ce:	1894      	adds	r4, r2, r2
 80042d0:	623c      	str	r4, [r7, #32]
 80042d2:	415b      	adcs	r3, r3
 80042d4:	627b      	str	r3, [r7, #36]	; 0x24
 80042d6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80042da:	1812      	adds	r2, r2, r0
 80042dc:	eb41 0303 	adc.w	r3, r1, r3
 80042e0:	f04f 0400 	mov.w	r4, #0
 80042e4:	f04f 0500 	mov.w	r5, #0
 80042e8:	00dd      	lsls	r5, r3, #3
 80042ea:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80042ee:	00d4      	lsls	r4, r2, #3
 80042f0:	4622      	mov	r2, r4
 80042f2:	462b      	mov	r3, r5
 80042f4:	1814      	adds	r4, r2, r0
 80042f6:	653c      	str	r4, [r7, #80]	; 0x50
 80042f8:	414b      	adcs	r3, r1
 80042fa:	657b      	str	r3, [r7, #84]	; 0x54
 80042fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80042fe:	685b      	ldr	r3, [r3, #4]
 8004300:	461a      	mov	r2, r3
 8004302:	f04f 0300 	mov.w	r3, #0
 8004306:	1891      	adds	r1, r2, r2
 8004308:	61b9      	str	r1, [r7, #24]
 800430a:	415b      	adcs	r3, r3
 800430c:	61fb      	str	r3, [r7, #28]
 800430e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004312:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8004316:	f7fb ff6d 	bl	80001f4 <__aeabi_uldivmod>
 800431a:	4602      	mov	r2, r0
 800431c:	460b      	mov	r3, r1
 800431e:	4b6c      	ldr	r3, [pc, #432]	; (80044d0 <UART_SetConfig+0x38c>)
 8004320:	fba3 1302 	umull	r1, r3, r3, r2
 8004324:	095b      	lsrs	r3, r3, #5
 8004326:	2164      	movs	r1, #100	; 0x64
 8004328:	fb01 f303 	mul.w	r3, r1, r3
 800432c:	1ad3      	subs	r3, r2, r3
 800432e:	00db      	lsls	r3, r3, #3
 8004330:	3332      	adds	r3, #50	; 0x32
 8004332:	4a67      	ldr	r2, [pc, #412]	; (80044d0 <UART_SetConfig+0x38c>)
 8004334:	fba2 2303 	umull	r2, r3, r2, r3
 8004338:	095b      	lsrs	r3, r3, #5
 800433a:	f003 0207 	and.w	r2, r3, #7
 800433e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	4432      	add	r2, r6
 8004344:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004346:	e0b9      	b.n	80044bc <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004348:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800434a:	461c      	mov	r4, r3
 800434c:	f04f 0500 	mov.w	r5, #0
 8004350:	4622      	mov	r2, r4
 8004352:	462b      	mov	r3, r5
 8004354:	1891      	adds	r1, r2, r2
 8004356:	6139      	str	r1, [r7, #16]
 8004358:	415b      	adcs	r3, r3
 800435a:	617b      	str	r3, [r7, #20]
 800435c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004360:	1912      	adds	r2, r2, r4
 8004362:	eb45 0303 	adc.w	r3, r5, r3
 8004366:	f04f 0000 	mov.w	r0, #0
 800436a:	f04f 0100 	mov.w	r1, #0
 800436e:	00d9      	lsls	r1, r3, #3
 8004370:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004374:	00d0      	lsls	r0, r2, #3
 8004376:	4602      	mov	r2, r0
 8004378:	460b      	mov	r3, r1
 800437a:	eb12 0804 	adds.w	r8, r2, r4
 800437e:	eb43 0905 	adc.w	r9, r3, r5
 8004382:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004384:	685b      	ldr	r3, [r3, #4]
 8004386:	4618      	mov	r0, r3
 8004388:	f04f 0100 	mov.w	r1, #0
 800438c:	f04f 0200 	mov.w	r2, #0
 8004390:	f04f 0300 	mov.w	r3, #0
 8004394:	008b      	lsls	r3, r1, #2
 8004396:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800439a:	0082      	lsls	r2, r0, #2
 800439c:	4640      	mov	r0, r8
 800439e:	4649      	mov	r1, r9
 80043a0:	f7fb ff28 	bl	80001f4 <__aeabi_uldivmod>
 80043a4:	4602      	mov	r2, r0
 80043a6:	460b      	mov	r3, r1
 80043a8:	4b49      	ldr	r3, [pc, #292]	; (80044d0 <UART_SetConfig+0x38c>)
 80043aa:	fba3 2302 	umull	r2, r3, r3, r2
 80043ae:	095b      	lsrs	r3, r3, #5
 80043b0:	011e      	lsls	r6, r3, #4
 80043b2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80043b4:	4618      	mov	r0, r3
 80043b6:	f04f 0100 	mov.w	r1, #0
 80043ba:	4602      	mov	r2, r0
 80043bc:	460b      	mov	r3, r1
 80043be:	1894      	adds	r4, r2, r2
 80043c0:	60bc      	str	r4, [r7, #8]
 80043c2:	415b      	adcs	r3, r3
 80043c4:	60fb      	str	r3, [r7, #12]
 80043c6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80043ca:	1812      	adds	r2, r2, r0
 80043cc:	eb41 0303 	adc.w	r3, r1, r3
 80043d0:	f04f 0400 	mov.w	r4, #0
 80043d4:	f04f 0500 	mov.w	r5, #0
 80043d8:	00dd      	lsls	r5, r3, #3
 80043da:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80043de:	00d4      	lsls	r4, r2, #3
 80043e0:	4622      	mov	r2, r4
 80043e2:	462b      	mov	r3, r5
 80043e4:	1814      	adds	r4, r2, r0
 80043e6:	64bc      	str	r4, [r7, #72]	; 0x48
 80043e8:	414b      	adcs	r3, r1
 80043ea:	64fb      	str	r3, [r7, #76]	; 0x4c
 80043ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80043ee:	685b      	ldr	r3, [r3, #4]
 80043f0:	4618      	mov	r0, r3
 80043f2:	f04f 0100 	mov.w	r1, #0
 80043f6:	f04f 0200 	mov.w	r2, #0
 80043fa:	f04f 0300 	mov.w	r3, #0
 80043fe:	008b      	lsls	r3, r1, #2
 8004400:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004404:	0082      	lsls	r2, r0, #2
 8004406:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800440a:	f7fb fef3 	bl	80001f4 <__aeabi_uldivmod>
 800440e:	4602      	mov	r2, r0
 8004410:	460b      	mov	r3, r1
 8004412:	4b2f      	ldr	r3, [pc, #188]	; (80044d0 <UART_SetConfig+0x38c>)
 8004414:	fba3 1302 	umull	r1, r3, r3, r2
 8004418:	095b      	lsrs	r3, r3, #5
 800441a:	2164      	movs	r1, #100	; 0x64
 800441c:	fb01 f303 	mul.w	r3, r1, r3
 8004420:	1ad3      	subs	r3, r2, r3
 8004422:	011b      	lsls	r3, r3, #4
 8004424:	3332      	adds	r3, #50	; 0x32
 8004426:	4a2a      	ldr	r2, [pc, #168]	; (80044d0 <UART_SetConfig+0x38c>)
 8004428:	fba2 2303 	umull	r2, r3, r2, r3
 800442c:	095b      	lsrs	r3, r3, #5
 800442e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004432:	441e      	add	r6, r3
 8004434:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004436:	4618      	mov	r0, r3
 8004438:	f04f 0100 	mov.w	r1, #0
 800443c:	4602      	mov	r2, r0
 800443e:	460b      	mov	r3, r1
 8004440:	1894      	adds	r4, r2, r2
 8004442:	603c      	str	r4, [r7, #0]
 8004444:	415b      	adcs	r3, r3
 8004446:	607b      	str	r3, [r7, #4]
 8004448:	e9d7 2300 	ldrd	r2, r3, [r7]
 800444c:	1812      	adds	r2, r2, r0
 800444e:	eb41 0303 	adc.w	r3, r1, r3
 8004452:	f04f 0400 	mov.w	r4, #0
 8004456:	f04f 0500 	mov.w	r5, #0
 800445a:	00dd      	lsls	r5, r3, #3
 800445c:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004460:	00d4      	lsls	r4, r2, #3
 8004462:	4622      	mov	r2, r4
 8004464:	462b      	mov	r3, r5
 8004466:	eb12 0a00 	adds.w	sl, r2, r0
 800446a:	eb43 0b01 	adc.w	fp, r3, r1
 800446e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004470:	685b      	ldr	r3, [r3, #4]
 8004472:	4618      	mov	r0, r3
 8004474:	f04f 0100 	mov.w	r1, #0
 8004478:	f04f 0200 	mov.w	r2, #0
 800447c:	f04f 0300 	mov.w	r3, #0
 8004480:	008b      	lsls	r3, r1, #2
 8004482:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004486:	0082      	lsls	r2, r0, #2
 8004488:	4650      	mov	r0, sl
 800448a:	4659      	mov	r1, fp
 800448c:	f7fb feb2 	bl	80001f4 <__aeabi_uldivmod>
 8004490:	4602      	mov	r2, r0
 8004492:	460b      	mov	r3, r1
 8004494:	4b0e      	ldr	r3, [pc, #56]	; (80044d0 <UART_SetConfig+0x38c>)
 8004496:	fba3 1302 	umull	r1, r3, r3, r2
 800449a:	095b      	lsrs	r3, r3, #5
 800449c:	2164      	movs	r1, #100	; 0x64
 800449e:	fb01 f303 	mul.w	r3, r1, r3
 80044a2:	1ad3      	subs	r3, r2, r3
 80044a4:	011b      	lsls	r3, r3, #4
 80044a6:	3332      	adds	r3, #50	; 0x32
 80044a8:	4a09      	ldr	r2, [pc, #36]	; (80044d0 <UART_SetConfig+0x38c>)
 80044aa:	fba2 2303 	umull	r2, r3, r2, r3
 80044ae:	095b      	lsrs	r3, r3, #5
 80044b0:	f003 020f 	and.w	r2, r3, #15
 80044b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	4432      	add	r2, r6
 80044ba:	609a      	str	r2, [r3, #8]
}
 80044bc:	bf00      	nop
 80044be:	377c      	adds	r7, #124	; 0x7c
 80044c0:	46bd      	mov	sp, r7
 80044c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80044c6:	bf00      	nop
 80044c8:	40011000 	.word	0x40011000
 80044cc:	40011400 	.word	0x40011400
 80044d0:	51eb851f 	.word	0x51eb851f

080044d4 <FMC_NORSRAM_Init>:
  * @param  Device Pointer to NORSRAM device instance
  * @param  Init Pointer to NORSRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef  FMC_NORSRAM_Init(FMC_NORSRAM_TypeDef *Device, FMC_NORSRAM_InitTypeDef* Init)
{ 
 80044d4:	b480      	push	{r7}
 80044d6:	b085      	sub	sp, #20
 80044d8:	af00      	add	r7, sp, #0
 80044da:	6078      	str	r0, [r7, #4]
 80044dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpr = 0U;
 80044de:	2300      	movs	r3, #0
 80044e0:	60fb      	str	r3, [r7, #12]
#if defined (STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx)
  assert_param(IS_FMC_WRITE_FIFO(Init->WriteFifo));
#endif /* STM32F446xx || STM32F469xx || STM32F479xx */

  /* Get the BTCR register value */
  tmpr = Device->BTCR[Init->NSBank];
 80044e2:	683b      	ldr	r3, [r7, #0]
 80044e4:	681a      	ldr	r2, [r3, #0]
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80044ec:	60fb      	str	r3, [r7, #12]
                    Init->WriteBurst           |\
                    Init->ContinuousClock);
#else /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) */
  /* Clear MBKEN, MUXEN, MTYP, MWID, FACCEN, BURSTEN, WAITPOL, CPSIZE, WAITCFG, WREN,
           WAITEN, EXTMOD, ASYNCWAIT, CBURSTRW, CCLKEN and WFDIS bits */
  tmpr &= ((uint32_t)~(FMC_BCR1_MBKEN     | FMC_BCR1_MUXEN    | FMC_BCR1_MTYP     | \
 80044ee:	68fa      	ldr	r2, [r7, #12]
 80044f0:	4b2f      	ldr	r3, [pc, #188]	; (80045b0 <FMC_NORSRAM_Init+0xdc>)
 80044f2:	4013      	ands	r3, r2
 80044f4:	60fb      	str	r3, [r7, #12]
                       FMC_BCR1_WREN      | FMC_BCR1_WAITEN   | FMC_BCR1_EXTMOD   | \
                       FMC_BCR1_ASYNCWAIT | FMC_BCR1_CBURSTRW | FMC_BCR1_CCLKEN   | \
                       FMC_BCR1_WFDIS));
  
  /* Set NORSRAM device control parameters */
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 80044f6:	683b      	ldr	r3, [r7, #0]
 80044f8:	685a      	ldr	r2, [r3, #4]
                    Init->MemoryType           |\
 80044fa:	683b      	ldr	r3, [r7, #0]
 80044fc:	689b      	ldr	r3, [r3, #8]
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 80044fe:	431a      	orrs	r2, r3
                    Init->MemoryDataWidth      |\
 8004500:	683b      	ldr	r3, [r7, #0]
 8004502:	68db      	ldr	r3, [r3, #12]
                    Init->MemoryType           |\
 8004504:	431a      	orrs	r2, r3
                    Init->BurstAccessMode      |\
 8004506:	683b      	ldr	r3, [r7, #0]
 8004508:	691b      	ldr	r3, [r3, #16]
                    Init->MemoryDataWidth      |\
 800450a:	431a      	orrs	r2, r3
                    Init->WaitSignalPolarity   |\
 800450c:	683b      	ldr	r3, [r7, #0]
 800450e:	695b      	ldr	r3, [r3, #20]
                    Init->BurstAccessMode      |\
 8004510:	431a      	orrs	r2, r3
                    Init->WaitSignalActive     |\
 8004512:	683b      	ldr	r3, [r7, #0]
 8004514:	69db      	ldr	r3, [r3, #28]
                    Init->WaitSignalPolarity   |\
 8004516:	431a      	orrs	r2, r3
                    Init->WriteOperation       |\
 8004518:	683b      	ldr	r3, [r7, #0]
 800451a:	6a1b      	ldr	r3, [r3, #32]
                    Init->WaitSignalActive     |\
 800451c:	431a      	orrs	r2, r3
                    Init->WaitSignal           |\
 800451e:	683b      	ldr	r3, [r7, #0]
 8004520:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                    Init->WriteOperation       |\
 8004522:	431a      	orrs	r2, r3
                    Init->ExtendedMode         |\
 8004524:	683b      	ldr	r3, [r7, #0]
 8004526:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                    Init->WaitSignal           |\
 8004528:	431a      	orrs	r2, r3
                    Init->AsynchronousWait     |\
 800452a:	683b      	ldr	r3, [r7, #0]
 800452c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                    Init->ExtendedMode         |\
 800452e:	431a      	orrs	r2, r3
                    Init->WriteBurst           |\
 8004530:	683b      	ldr	r3, [r7, #0]
 8004532:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                    Init->AsynchronousWait     |\
 8004534:	431a      	orrs	r2, r3
                    Init->ContinuousClock      |\
 8004536:	683b      	ldr	r3, [r7, #0]
 8004538:	6b5b      	ldr	r3, [r3, #52]	; 0x34
                    Init->WriteBurst           |\
 800453a:	431a      	orrs	r2, r3
                    Init->PageSize             |\
 800453c:	683b      	ldr	r3, [r7, #0]
 800453e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                    Init->ContinuousClock      |\
 8004540:	431a      	orrs	r2, r3
                    Init->WriteFifo);
 8004542:	683b      	ldr	r3, [r7, #0]
 8004544:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                    Init->PageSize             |\
 8004546:	4313      	orrs	r3, r2
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 8004548:	68fa      	ldr	r2, [r7, #12]
 800454a:	4313      	orrs	r3, r2
 800454c:	60fb      	str	r3, [r7, #12]
#endif /*  defined(STM32F427xx) || defined(STM32F437xx) || defined(STM32F429xx) || defined(STM32F439xx) */
                    
  if(Init->MemoryType == FMC_MEMORY_TYPE_NOR)
 800454e:	683b      	ldr	r3, [r7, #0]
 8004550:	689b      	ldr	r3, [r3, #8]
 8004552:	2b08      	cmp	r3, #8
 8004554:	d103      	bne.n	800455e <FMC_NORSRAM_Init+0x8a>
  {
    tmpr |= (uint32_t)FMC_NORSRAM_FLASH_ACCESS_ENABLE;
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800455c:	60fb      	str	r3, [r7, #12]
  }
  
  Device->BTCR[Init->NSBank] = tmpr;
 800455e:	683b      	ldr	r3, [r7, #0]
 8004560:	681a      	ldr	r2, [r3, #0]
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	68f9      	ldr	r1, [r7, #12]
 8004566:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Configure synchronous mode when Continuous clock is enabled for bank2..4 */
  if((Init->ContinuousClock == FMC_CONTINUOUS_CLOCK_SYNC_ASYNC) && (Init->NSBank != FMC_NORSRAM_BANK1))
 800456a:	683b      	ldr	r3, [r7, #0]
 800456c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800456e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004572:	d10a      	bne.n	800458a <FMC_NORSRAM_Init+0xb6>
 8004574:	683b      	ldr	r3, [r7, #0]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	2b00      	cmp	r3, #0
 800457a:	d006      	beq.n	800458a <FMC_NORSRAM_Init+0xb6>
  { 
    Device->BTCR[FMC_NORSRAM_BANK1] |= (uint32_t)(Init->ContinuousClock);
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681a      	ldr	r2, [r3, #0]
 8004580:	683b      	ldr	r3, [r7, #0]
 8004582:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004584:	431a      	orrs	r2, r3
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	601a      	str	r2, [r3, #0]
  }

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx)
  if(Init->NSBank != FMC_NORSRAM_BANK1)
 800458a:	683b      	ldr	r3, [r7, #0]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	2b00      	cmp	r3, #0
 8004590:	d006      	beq.n	80045a0 <FMC_NORSRAM_Init+0xcc>
  {
    Device->BTCR[FMC_NORSRAM_BANK1] |= (uint32_t)(Init->WriteFifo);              
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681a      	ldr	r2, [r3, #0]
 8004596:	683b      	ldr	r3, [r7, #0]
 8004598:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800459a:	431a      	orrs	r2, r3
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F446xx || STM32F469xx || STM32F479xx */
  
  return HAL_OK;
 80045a0:	2300      	movs	r3, #0
}
 80045a2:	4618      	mov	r0, r3
 80045a4:	3714      	adds	r7, #20
 80045a6:	46bd      	mov	sp, r7
 80045a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ac:	4770      	bx	lr
 80045ae:	bf00      	nop
 80045b0:	ffc00480 	.word	0xffc00480

080045b4 <FMC_NORSRAM_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NORSRAM_Timing_Init(FMC_NORSRAM_TypeDef *Device, FMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 80045b4:	b480      	push	{r7}
 80045b6:	b087      	sub	sp, #28
 80045b8:	af00      	add	r7, sp, #0
 80045ba:	60f8      	str	r0, [r7, #12]
 80045bc:	60b9      	str	r1, [r7, #8]
 80045be:	607a      	str	r2, [r7, #4]
  uint32_t tmpr = 0U;
 80045c0:	2300      	movs	r3, #0
 80045c2:	617b      	str	r3, [r7, #20]
  assert_param(IS_FMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FMC_NORSRAM_BANK(Bank));
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Bank + 1U];
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	1c5a      	adds	r2, r3, #1
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80045ce:	617b      	str	r3, [r7, #20]

  /* Clear ADDSET, ADDHLD, DATAST, BUSTURN, CLKDIV, DATLAT and ACCMOD bits */
  tmpr &= ((uint32_t)~(FMC_BTR1_ADDSET  | FMC_BTR1_ADDHLD | FMC_BTR1_DATAST | \
 80045d0:	697b      	ldr	r3, [r7, #20]
 80045d2:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 80045d6:	617b      	str	r3, [r7, #20]
                       FMC_BTR1_BUSTURN | FMC_BTR1_CLKDIV | FMC_BTR1_DATLAT | \
                       FMC_BTR1_ACCMOD));
  
  /* Set FMC_NORSRAM device timing parameters */  
  tmpr |= (uint32_t)(Timing->AddressSetupTime                   |\
 80045d8:	68bb      	ldr	r3, [r7, #8]
 80045da:	681a      	ldr	r2, [r3, #0]
                    ((Timing->AddressHoldTime) << 4U)           |\
 80045dc:	68bb      	ldr	r3, [r7, #8]
 80045de:	685b      	ldr	r3, [r3, #4]
 80045e0:	011b      	lsls	r3, r3, #4
  tmpr |= (uint32_t)(Timing->AddressSetupTime                   |\
 80045e2:	431a      	orrs	r2, r3
                    ((Timing->DataSetupTime) << 8U)             |\
 80045e4:	68bb      	ldr	r3, [r7, #8]
 80045e6:	689b      	ldr	r3, [r3, #8]
 80045e8:	021b      	lsls	r3, r3, #8
                    ((Timing->AddressHoldTime) << 4U)           |\
 80045ea:	431a      	orrs	r2, r3
                    ((Timing->BusTurnAroundDuration) << 16U)    |\
 80045ec:	68bb      	ldr	r3, [r7, #8]
 80045ee:	68db      	ldr	r3, [r3, #12]
 80045f0:	041b      	lsls	r3, r3, #16
                    ((Timing->DataSetupTime) << 8U)             |\
 80045f2:	431a      	orrs	r2, r3
                    (((Timing->CLKDivision) - 1U) << 20U)         |\
 80045f4:	68bb      	ldr	r3, [r7, #8]
 80045f6:	691b      	ldr	r3, [r3, #16]
 80045f8:	3b01      	subs	r3, #1
 80045fa:	051b      	lsls	r3, r3, #20
                    ((Timing->BusTurnAroundDuration) << 16U)    |\
 80045fc:	431a      	orrs	r2, r3
                    (((Timing->DataLatency) - 2U) << 24U)         |\
 80045fe:	68bb      	ldr	r3, [r7, #8]
 8004600:	695b      	ldr	r3, [r3, #20]
 8004602:	3b02      	subs	r3, #2
 8004604:	061b      	lsls	r3, r3, #24
                    (((Timing->CLKDivision) - 1U) << 20U)         |\
 8004606:	431a      	orrs	r2, r3
                    (Timing->AccessMode));
 8004608:	68bb      	ldr	r3, [r7, #8]
 800460a:	699b      	ldr	r3, [r3, #24]
  tmpr |= (uint32_t)(Timing->AddressSetupTime                   |\
 800460c:	4313      	orrs	r3, r2
 800460e:	697a      	ldr	r2, [r7, #20]
 8004610:	4313      	orrs	r3, r2
 8004612:	617b      	str	r3, [r7, #20]
  
  Device->BTCR[Bank + 1U] = tmpr;
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	1c5a      	adds	r2, r3, #1
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	6979      	ldr	r1, [r7, #20]
 800461c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  
  /* Configure Clock division value (in NORSRAM bank 1) when continuous clock is enabled */
  if(HAL_IS_BIT_SET(Device->BTCR[FMC_NORSRAM_BANK1], FMC_BCR1_CCLKEN))
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004628:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800462c:	d10e      	bne.n	800464c <FMC_NORSRAM_Timing_Init+0x98>
  {
    tmpr = (uint32_t)(Device->BTCR[FMC_NORSRAM_BANK1 + 1U] & ~(0x0FU << 20U)); 
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	685b      	ldr	r3, [r3, #4]
 8004632:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004636:	617b      	str	r3, [r7, #20]
    tmpr |= (uint32_t)(((Timing->CLKDivision) - 1U) << 20U);
 8004638:	68bb      	ldr	r3, [r7, #8]
 800463a:	691b      	ldr	r3, [r3, #16]
 800463c:	3b01      	subs	r3, #1
 800463e:	051b      	lsls	r3, r3, #20
 8004640:	697a      	ldr	r2, [r7, #20]
 8004642:	4313      	orrs	r3, r2
 8004644:	617b      	str	r3, [r7, #20]
    Device->BTCR[FMC_NORSRAM_BANK1 + 1U] = tmpr;
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	697a      	ldr	r2, [r7, #20]
 800464a:	605a      	str	r2, [r3, #4]
  }  
  
  return HAL_OK;   
 800464c:	2300      	movs	r3, #0
}
 800464e:	4618      	mov	r0, r3
 8004650:	371c      	adds	r7, #28
 8004652:	46bd      	mov	sp, r7
 8004654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004658:	4770      	bx	lr
	...

0800465c <FMC_NORSRAM_Extended_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef  FMC_NORSRAM_Extended_Timing_Init(FMC_NORSRAM_EXTENDED_TypeDef *Device, FMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank, uint32_t ExtendedMode)
{  
 800465c:	b480      	push	{r7}
 800465e:	b087      	sub	sp, #28
 8004660:	af00      	add	r7, sp, #0
 8004662:	60f8      	str	r0, [r7, #12]
 8004664:	60b9      	str	r1, [r7, #8]
 8004666:	607a      	str	r2, [r7, #4]
 8004668:	603b      	str	r3, [r7, #0]
  uint32_t tmpr = 0U;
 800466a:	2300      	movs	r3, #0
 800466c:	617b      	str	r3, [r7, #20]
 
  /* Check the parameters */
  assert_param(IS_FMC_EXTENDED_MODE(ExtendedMode));
  
  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if(ExtendedMode == FMC_EXTENDED_MODE_ENABLE)
 800466e:	683b      	ldr	r3, [r7, #0]
 8004670:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004674:	d122      	bne.n	80046bc <FMC_NORSRAM_Extended_Timing_Init+0x60>
    assert_param(IS_FMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FMC_NORSRAM_BANK(Bank));  
    
    /* Get the BWTR register value */
    tmpr = Device->BWTR[Bank];
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	687a      	ldr	r2, [r7, #4]
 800467a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800467e:	617b      	str	r3, [r7, #20]

    /* Clear ADDSET, ADDHLD, DATAST, BUSTURN and ACCMOD bits */
    tmpr &= ((uint32_t)~(FMC_BWTR1_ADDSET  | FMC_BWTR1_ADDHLD | FMC_BWTR1_DATAST | \
 8004680:	697a      	ldr	r2, [r7, #20]
 8004682:	4b15      	ldr	r3, [pc, #84]	; (80046d8 <FMC_NORSRAM_Extended_Timing_Init+0x7c>)
 8004684:	4013      	ands	r3, r2
 8004686:	617b      	str	r3, [r7, #20]
                         FMC_BWTR1_BUSTURN | FMC_BWTR1_ACCMOD));
    
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8004688:	68bb      	ldr	r3, [r7, #8]
 800468a:	681a      	ldr	r2, [r3, #0]
                      ((Timing->AddressHoldTime) << 4U)          |\
 800468c:	68bb      	ldr	r3, [r7, #8]
 800468e:	685b      	ldr	r3, [r3, #4]
 8004690:	011b      	lsls	r3, r3, #4
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8004692:	431a      	orrs	r2, r3
                      ((Timing->DataSetupTime) << 8U)            |\
 8004694:	68bb      	ldr	r3, [r7, #8]
 8004696:	689b      	ldr	r3, [r3, #8]
 8004698:	021b      	lsls	r3, r3, #8
                      ((Timing->AddressHoldTime) << 4U)          |\
 800469a:	431a      	orrs	r2, r3
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 800469c:	68bb      	ldr	r3, [r7, #8]
 800469e:	68db      	ldr	r3, [r3, #12]
 80046a0:	041b      	lsls	r3, r3, #16
                      ((Timing->DataSetupTime) << 8U)            |\
 80046a2:	431a      	orrs	r2, r3
                      (Timing->AccessMode));
 80046a4:	68bb      	ldr	r3, [r7, #8]
 80046a6:	699b      	ldr	r3, [r3, #24]
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 80046a8:	4313      	orrs	r3, r2
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 80046aa:	697a      	ldr	r2, [r7, #20]
 80046ac:	4313      	orrs	r3, r2
 80046ae:	617b      	str	r3, [r7, #20]

    Device->BWTR[Bank] = tmpr;
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	687a      	ldr	r2, [r7, #4]
 80046b4:	6979      	ldr	r1, [r7, #20]
 80046b6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 80046ba:	e005      	b.n	80046c8 <FMC_NORSRAM_Extended_Timing_Init+0x6c>
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	687a      	ldr	r2, [r7, #4]
 80046c0:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 80046c4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }   
  
  return HAL_OK;  
 80046c8:	2300      	movs	r3, #0
}
 80046ca:	4618      	mov	r0, r3
 80046cc:	371c      	adds	r7, #28
 80046ce:	46bd      	mov	sp, r7
 80046d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d4:	4770      	bx	lr
 80046d6:	bf00      	nop
 80046d8:	cff00000 	.word	0xcff00000

080046dc <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80046dc:	b084      	sub	sp, #16
 80046de:	b580      	push	{r7, lr}
 80046e0:	b084      	sub	sp, #16
 80046e2:	af00      	add	r7, sp, #0
 80046e4:	6078      	str	r0, [r7, #4]
 80046e6:	f107 001c 	add.w	r0, r7, #28
 80046ea:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80046ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046f0:	2b01      	cmp	r3, #1
 80046f2:	d122      	bne.n	800473a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046f8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	68db      	ldr	r3, [r3, #12]
 8004704:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8004708:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800470c:	687a      	ldr	r2, [r7, #4]
 800470e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	68db      	ldr	r3, [r3, #12]
 8004714:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800471c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800471e:	2b01      	cmp	r3, #1
 8004720:	d105      	bne.n	800472e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	68db      	ldr	r3, [r3, #12]
 8004726:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800472e:	6878      	ldr	r0, [r7, #4]
 8004730:	f001 fb16 	bl	8005d60 <USB_CoreReset>
 8004734:	4603      	mov	r3, r0
 8004736:	73fb      	strb	r3, [r7, #15]
 8004738:	e01a      	b.n	8004770 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	68db      	ldr	r3, [r3, #12]
 800473e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004746:	6878      	ldr	r0, [r7, #4]
 8004748:	f001 fb0a 	bl	8005d60 <USB_CoreReset>
 800474c:	4603      	mov	r3, r0
 800474e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004750:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004752:	2b00      	cmp	r3, #0
 8004754:	d106      	bne.n	8004764 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800475a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	639a      	str	r2, [r3, #56]	; 0x38
 8004762:	e005      	b.n	8004770 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004768:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8004770:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004772:	2b01      	cmp	r3, #1
 8004774:	d10b      	bne.n	800478e <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	689b      	ldr	r3, [r3, #8]
 800477a:	f043 0206 	orr.w	r2, r3, #6
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	689b      	ldr	r3, [r3, #8]
 8004786:	f043 0220 	orr.w	r2, r3, #32
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800478e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004790:	4618      	mov	r0, r3
 8004792:	3710      	adds	r7, #16
 8004794:	46bd      	mov	sp, r7
 8004796:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800479a:	b004      	add	sp, #16
 800479c:	4770      	bx	lr
	...

080047a0 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80047a0:	b480      	push	{r7}
 80047a2:	b087      	sub	sp, #28
 80047a4:	af00      	add	r7, sp, #0
 80047a6:	60f8      	str	r0, [r7, #12]
 80047a8:	60b9      	str	r1, [r7, #8]
 80047aa:	4613      	mov	r3, r2
 80047ac:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80047ae:	79fb      	ldrb	r3, [r7, #7]
 80047b0:	2b02      	cmp	r3, #2
 80047b2:	d165      	bne.n	8004880 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80047b4:	68bb      	ldr	r3, [r7, #8]
 80047b6:	4a41      	ldr	r2, [pc, #260]	; (80048bc <USB_SetTurnaroundTime+0x11c>)
 80047b8:	4293      	cmp	r3, r2
 80047ba:	d906      	bls.n	80047ca <USB_SetTurnaroundTime+0x2a>
 80047bc:	68bb      	ldr	r3, [r7, #8]
 80047be:	4a40      	ldr	r2, [pc, #256]	; (80048c0 <USB_SetTurnaroundTime+0x120>)
 80047c0:	4293      	cmp	r3, r2
 80047c2:	d202      	bcs.n	80047ca <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80047c4:	230f      	movs	r3, #15
 80047c6:	617b      	str	r3, [r7, #20]
 80047c8:	e062      	b.n	8004890 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80047ca:	68bb      	ldr	r3, [r7, #8]
 80047cc:	4a3c      	ldr	r2, [pc, #240]	; (80048c0 <USB_SetTurnaroundTime+0x120>)
 80047ce:	4293      	cmp	r3, r2
 80047d0:	d306      	bcc.n	80047e0 <USB_SetTurnaroundTime+0x40>
 80047d2:	68bb      	ldr	r3, [r7, #8]
 80047d4:	4a3b      	ldr	r2, [pc, #236]	; (80048c4 <USB_SetTurnaroundTime+0x124>)
 80047d6:	4293      	cmp	r3, r2
 80047d8:	d202      	bcs.n	80047e0 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80047da:	230e      	movs	r3, #14
 80047dc:	617b      	str	r3, [r7, #20]
 80047de:	e057      	b.n	8004890 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80047e0:	68bb      	ldr	r3, [r7, #8]
 80047e2:	4a38      	ldr	r2, [pc, #224]	; (80048c4 <USB_SetTurnaroundTime+0x124>)
 80047e4:	4293      	cmp	r3, r2
 80047e6:	d306      	bcc.n	80047f6 <USB_SetTurnaroundTime+0x56>
 80047e8:	68bb      	ldr	r3, [r7, #8]
 80047ea:	4a37      	ldr	r2, [pc, #220]	; (80048c8 <USB_SetTurnaroundTime+0x128>)
 80047ec:	4293      	cmp	r3, r2
 80047ee:	d202      	bcs.n	80047f6 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80047f0:	230d      	movs	r3, #13
 80047f2:	617b      	str	r3, [r7, #20]
 80047f4:	e04c      	b.n	8004890 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80047f6:	68bb      	ldr	r3, [r7, #8]
 80047f8:	4a33      	ldr	r2, [pc, #204]	; (80048c8 <USB_SetTurnaroundTime+0x128>)
 80047fa:	4293      	cmp	r3, r2
 80047fc:	d306      	bcc.n	800480c <USB_SetTurnaroundTime+0x6c>
 80047fe:	68bb      	ldr	r3, [r7, #8]
 8004800:	4a32      	ldr	r2, [pc, #200]	; (80048cc <USB_SetTurnaroundTime+0x12c>)
 8004802:	4293      	cmp	r3, r2
 8004804:	d802      	bhi.n	800480c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8004806:	230c      	movs	r3, #12
 8004808:	617b      	str	r3, [r7, #20]
 800480a:	e041      	b.n	8004890 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800480c:	68bb      	ldr	r3, [r7, #8]
 800480e:	4a2f      	ldr	r2, [pc, #188]	; (80048cc <USB_SetTurnaroundTime+0x12c>)
 8004810:	4293      	cmp	r3, r2
 8004812:	d906      	bls.n	8004822 <USB_SetTurnaroundTime+0x82>
 8004814:	68bb      	ldr	r3, [r7, #8]
 8004816:	4a2e      	ldr	r2, [pc, #184]	; (80048d0 <USB_SetTurnaroundTime+0x130>)
 8004818:	4293      	cmp	r3, r2
 800481a:	d802      	bhi.n	8004822 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800481c:	230b      	movs	r3, #11
 800481e:	617b      	str	r3, [r7, #20]
 8004820:	e036      	b.n	8004890 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8004822:	68bb      	ldr	r3, [r7, #8]
 8004824:	4a2a      	ldr	r2, [pc, #168]	; (80048d0 <USB_SetTurnaroundTime+0x130>)
 8004826:	4293      	cmp	r3, r2
 8004828:	d906      	bls.n	8004838 <USB_SetTurnaroundTime+0x98>
 800482a:	68bb      	ldr	r3, [r7, #8]
 800482c:	4a29      	ldr	r2, [pc, #164]	; (80048d4 <USB_SetTurnaroundTime+0x134>)
 800482e:	4293      	cmp	r3, r2
 8004830:	d802      	bhi.n	8004838 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8004832:	230a      	movs	r3, #10
 8004834:	617b      	str	r3, [r7, #20]
 8004836:	e02b      	b.n	8004890 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8004838:	68bb      	ldr	r3, [r7, #8]
 800483a:	4a26      	ldr	r2, [pc, #152]	; (80048d4 <USB_SetTurnaroundTime+0x134>)
 800483c:	4293      	cmp	r3, r2
 800483e:	d906      	bls.n	800484e <USB_SetTurnaroundTime+0xae>
 8004840:	68bb      	ldr	r3, [r7, #8]
 8004842:	4a25      	ldr	r2, [pc, #148]	; (80048d8 <USB_SetTurnaroundTime+0x138>)
 8004844:	4293      	cmp	r3, r2
 8004846:	d202      	bcs.n	800484e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8004848:	2309      	movs	r3, #9
 800484a:	617b      	str	r3, [r7, #20]
 800484c:	e020      	b.n	8004890 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800484e:	68bb      	ldr	r3, [r7, #8]
 8004850:	4a21      	ldr	r2, [pc, #132]	; (80048d8 <USB_SetTurnaroundTime+0x138>)
 8004852:	4293      	cmp	r3, r2
 8004854:	d306      	bcc.n	8004864 <USB_SetTurnaroundTime+0xc4>
 8004856:	68bb      	ldr	r3, [r7, #8]
 8004858:	4a20      	ldr	r2, [pc, #128]	; (80048dc <USB_SetTurnaroundTime+0x13c>)
 800485a:	4293      	cmp	r3, r2
 800485c:	d802      	bhi.n	8004864 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800485e:	2308      	movs	r3, #8
 8004860:	617b      	str	r3, [r7, #20]
 8004862:	e015      	b.n	8004890 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8004864:	68bb      	ldr	r3, [r7, #8]
 8004866:	4a1d      	ldr	r2, [pc, #116]	; (80048dc <USB_SetTurnaroundTime+0x13c>)
 8004868:	4293      	cmp	r3, r2
 800486a:	d906      	bls.n	800487a <USB_SetTurnaroundTime+0xda>
 800486c:	68bb      	ldr	r3, [r7, #8]
 800486e:	4a1c      	ldr	r2, [pc, #112]	; (80048e0 <USB_SetTurnaroundTime+0x140>)
 8004870:	4293      	cmp	r3, r2
 8004872:	d202      	bcs.n	800487a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8004874:	2307      	movs	r3, #7
 8004876:	617b      	str	r3, [r7, #20]
 8004878:	e00a      	b.n	8004890 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800487a:	2306      	movs	r3, #6
 800487c:	617b      	str	r3, [r7, #20]
 800487e:	e007      	b.n	8004890 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8004880:	79fb      	ldrb	r3, [r7, #7]
 8004882:	2b00      	cmp	r3, #0
 8004884:	d102      	bne.n	800488c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8004886:	2309      	movs	r3, #9
 8004888:	617b      	str	r3, [r7, #20]
 800488a:	e001      	b.n	8004890 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800488c:	2309      	movs	r3, #9
 800488e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	68db      	ldr	r3, [r3, #12]
 8004894:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	68da      	ldr	r2, [r3, #12]
 80048a0:	697b      	ldr	r3, [r7, #20]
 80048a2:	029b      	lsls	r3, r3, #10
 80048a4:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 80048a8:	431a      	orrs	r2, r3
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80048ae:	2300      	movs	r3, #0
}
 80048b0:	4618      	mov	r0, r3
 80048b2:	371c      	adds	r7, #28
 80048b4:	46bd      	mov	sp, r7
 80048b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ba:	4770      	bx	lr
 80048bc:	00d8acbf 	.word	0x00d8acbf
 80048c0:	00e4e1c0 	.word	0x00e4e1c0
 80048c4:	00f42400 	.word	0x00f42400
 80048c8:	01067380 	.word	0x01067380
 80048cc:	011a499f 	.word	0x011a499f
 80048d0:	01312cff 	.word	0x01312cff
 80048d4:	014ca43f 	.word	0x014ca43f
 80048d8:	016e3600 	.word	0x016e3600
 80048dc:	01a6ab1f 	.word	0x01a6ab1f
 80048e0:	01e84800 	.word	0x01e84800

080048e4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80048e4:	b480      	push	{r7}
 80048e6:	b083      	sub	sp, #12
 80048e8:	af00      	add	r7, sp, #0
 80048ea:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	689b      	ldr	r3, [r3, #8]
 80048f0:	f043 0201 	orr.w	r2, r3, #1
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80048f8:	2300      	movs	r3, #0
}
 80048fa:	4618      	mov	r0, r3
 80048fc:	370c      	adds	r7, #12
 80048fe:	46bd      	mov	sp, r7
 8004900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004904:	4770      	bx	lr

08004906 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004906:	b480      	push	{r7}
 8004908:	b083      	sub	sp, #12
 800490a:	af00      	add	r7, sp, #0
 800490c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	689b      	ldr	r3, [r3, #8]
 8004912:	f023 0201 	bic.w	r2, r3, #1
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800491a:	2300      	movs	r3, #0
}
 800491c:	4618      	mov	r0, r3
 800491e:	370c      	adds	r7, #12
 8004920:	46bd      	mov	sp, r7
 8004922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004926:	4770      	bx	lr

08004928 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004928:	b580      	push	{r7, lr}
 800492a:	b084      	sub	sp, #16
 800492c:	af00      	add	r7, sp, #0
 800492e:	6078      	str	r0, [r7, #4]
 8004930:	460b      	mov	r3, r1
 8004932:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004934:	2300      	movs	r3, #0
 8004936:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	68db      	ldr	r3, [r3, #12]
 800493c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004944:	78fb      	ldrb	r3, [r7, #3]
 8004946:	2b01      	cmp	r3, #1
 8004948:	d115      	bne.n	8004976 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	68db      	ldr	r3, [r3, #12]
 800494e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004956:	2001      	movs	r0, #1
 8004958:	f7fc fb9e 	bl	8001098 <HAL_Delay>
      ms++;
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	3301      	adds	r3, #1
 8004960:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8004962:	6878      	ldr	r0, [r7, #4]
 8004964:	f001 f96c 	bl	8005c40 <USB_GetMode>
 8004968:	4603      	mov	r3, r0
 800496a:	2b01      	cmp	r3, #1
 800496c:	d01e      	beq.n	80049ac <USB_SetCurrentMode+0x84>
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	2b31      	cmp	r3, #49	; 0x31
 8004972:	d9f0      	bls.n	8004956 <USB_SetCurrentMode+0x2e>
 8004974:	e01a      	b.n	80049ac <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004976:	78fb      	ldrb	r3, [r7, #3]
 8004978:	2b00      	cmp	r3, #0
 800497a:	d115      	bne.n	80049a8 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	68db      	ldr	r3, [r3, #12]
 8004980:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004988:	2001      	movs	r0, #1
 800498a:	f7fc fb85 	bl	8001098 <HAL_Delay>
      ms++;
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	3301      	adds	r3, #1
 8004992:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8004994:	6878      	ldr	r0, [r7, #4]
 8004996:	f001 f953 	bl	8005c40 <USB_GetMode>
 800499a:	4603      	mov	r3, r0
 800499c:	2b00      	cmp	r3, #0
 800499e:	d005      	beq.n	80049ac <USB_SetCurrentMode+0x84>
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	2b31      	cmp	r3, #49	; 0x31
 80049a4:	d9f0      	bls.n	8004988 <USB_SetCurrentMode+0x60>
 80049a6:	e001      	b.n	80049ac <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80049a8:	2301      	movs	r3, #1
 80049aa:	e005      	b.n	80049b8 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	2b32      	cmp	r3, #50	; 0x32
 80049b0:	d101      	bne.n	80049b6 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80049b2:	2301      	movs	r3, #1
 80049b4:	e000      	b.n	80049b8 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80049b6:	2300      	movs	r3, #0
}
 80049b8:	4618      	mov	r0, r3
 80049ba:	3710      	adds	r7, #16
 80049bc:	46bd      	mov	sp, r7
 80049be:	bd80      	pop	{r7, pc}

080049c0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80049c0:	b084      	sub	sp, #16
 80049c2:	b580      	push	{r7, lr}
 80049c4:	b086      	sub	sp, #24
 80049c6:	af00      	add	r7, sp, #0
 80049c8:	6078      	str	r0, [r7, #4]
 80049ca:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80049ce:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80049d2:	2300      	movs	r3, #0
 80049d4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80049da:	2300      	movs	r3, #0
 80049dc:	613b      	str	r3, [r7, #16]
 80049de:	e009      	b.n	80049f4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80049e0:	687a      	ldr	r2, [r7, #4]
 80049e2:	693b      	ldr	r3, [r7, #16]
 80049e4:	3340      	adds	r3, #64	; 0x40
 80049e6:	009b      	lsls	r3, r3, #2
 80049e8:	4413      	add	r3, r2
 80049ea:	2200      	movs	r2, #0
 80049ec:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80049ee:	693b      	ldr	r3, [r7, #16]
 80049f0:	3301      	adds	r3, #1
 80049f2:	613b      	str	r3, [r7, #16]
 80049f4:	693b      	ldr	r3, [r7, #16]
 80049f6:	2b0e      	cmp	r3, #14
 80049f8:	d9f2      	bls.n	80049e0 <USB_DevInit+0x20>
  }

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80049fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d11c      	bne.n	8004a3a <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a06:	685b      	ldr	r3, [r3, #4]
 8004a08:	68fa      	ldr	r2, [r7, #12]
 8004a0a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004a0e:	f043 0302 	orr.w	r3, r3, #2
 8004a12:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a18:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	601a      	str	r2, [r3, #0]
 8004a38:	e005      	b.n	8004a46 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a3e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004a4c:	461a      	mov	r2, r3
 8004a4e:	2300      	movs	r3, #0
 8004a50:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a58:	4619      	mov	r1, r3
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a60:	461a      	mov	r2, r3
 8004a62:	680b      	ldr	r3, [r1, #0]
 8004a64:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004a66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a68:	2b01      	cmp	r3, #1
 8004a6a:	d10c      	bne.n	8004a86 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004a6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d104      	bne.n	8004a7c <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8004a72:	2100      	movs	r1, #0
 8004a74:	6878      	ldr	r0, [r7, #4]
 8004a76:	f000 f945 	bl	8004d04 <USB_SetDevSpeed>
 8004a7a:	e008      	b.n	8004a8e <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004a7c:	2101      	movs	r1, #1
 8004a7e:	6878      	ldr	r0, [r7, #4]
 8004a80:	f000 f940 	bl	8004d04 <USB_SetDevSpeed>
 8004a84:	e003      	b.n	8004a8e <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004a86:	2103      	movs	r1, #3
 8004a88:	6878      	ldr	r0, [r7, #4]
 8004a8a:	f000 f93b 	bl	8004d04 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004a8e:	2110      	movs	r1, #16
 8004a90:	6878      	ldr	r0, [r7, #4]
 8004a92:	f000 f8f3 	bl	8004c7c <USB_FlushTxFifo>
 8004a96:	4603      	mov	r3, r0
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d001      	beq.n	8004aa0 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8004a9c:	2301      	movs	r3, #1
 8004a9e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004aa0:	6878      	ldr	r0, [r7, #4]
 8004aa2:	f000 f90f 	bl	8004cc4 <USB_FlushRxFifo>
 8004aa6:	4603      	mov	r3, r0
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d001      	beq.n	8004ab0 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8004aac:	2301      	movs	r3, #1
 8004aae:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ab6:	461a      	mov	r2, r3
 8004ab8:	2300      	movs	r3, #0
 8004aba:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ac2:	461a      	mov	r2, r3
 8004ac4:	2300      	movs	r3, #0
 8004ac6:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ace:	461a      	mov	r2, r3
 8004ad0:	2300      	movs	r3, #0
 8004ad2:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004ad4:	2300      	movs	r3, #0
 8004ad6:	613b      	str	r3, [r7, #16]
 8004ad8:	e043      	b.n	8004b62 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004ada:	693b      	ldr	r3, [r7, #16]
 8004adc:	015a      	lsls	r2, r3, #5
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	4413      	add	r3, r2
 8004ae2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004aec:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004af0:	d118      	bne.n	8004b24 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8004af2:	693b      	ldr	r3, [r7, #16]
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d10a      	bne.n	8004b0e <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004af8:	693b      	ldr	r3, [r7, #16]
 8004afa:	015a      	lsls	r2, r3, #5
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	4413      	add	r3, r2
 8004b00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b04:	461a      	mov	r2, r3
 8004b06:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004b0a:	6013      	str	r3, [r2, #0]
 8004b0c:	e013      	b.n	8004b36 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004b0e:	693b      	ldr	r3, [r7, #16]
 8004b10:	015a      	lsls	r2, r3, #5
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	4413      	add	r3, r2
 8004b16:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b1a:	461a      	mov	r2, r3
 8004b1c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004b20:	6013      	str	r3, [r2, #0]
 8004b22:	e008      	b.n	8004b36 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004b24:	693b      	ldr	r3, [r7, #16]
 8004b26:	015a      	lsls	r2, r3, #5
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	4413      	add	r3, r2
 8004b2c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b30:	461a      	mov	r2, r3
 8004b32:	2300      	movs	r3, #0
 8004b34:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004b36:	693b      	ldr	r3, [r7, #16]
 8004b38:	015a      	lsls	r2, r3, #5
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	4413      	add	r3, r2
 8004b3e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b42:	461a      	mov	r2, r3
 8004b44:	2300      	movs	r3, #0
 8004b46:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004b48:	693b      	ldr	r3, [r7, #16]
 8004b4a:	015a      	lsls	r2, r3, #5
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	4413      	add	r3, r2
 8004b50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b54:	461a      	mov	r2, r3
 8004b56:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004b5a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004b5c:	693b      	ldr	r3, [r7, #16]
 8004b5e:	3301      	adds	r3, #1
 8004b60:	613b      	str	r3, [r7, #16]
 8004b62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b64:	693a      	ldr	r2, [r7, #16]
 8004b66:	429a      	cmp	r2, r3
 8004b68:	d3b7      	bcc.n	8004ada <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004b6a:	2300      	movs	r3, #0
 8004b6c:	613b      	str	r3, [r7, #16]
 8004b6e:	e043      	b.n	8004bf8 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004b70:	693b      	ldr	r3, [r7, #16]
 8004b72:	015a      	lsls	r2, r3, #5
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	4413      	add	r3, r2
 8004b78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004b82:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004b86:	d118      	bne.n	8004bba <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8004b88:	693b      	ldr	r3, [r7, #16]
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d10a      	bne.n	8004ba4 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004b8e:	693b      	ldr	r3, [r7, #16]
 8004b90:	015a      	lsls	r2, r3, #5
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	4413      	add	r3, r2
 8004b96:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b9a:	461a      	mov	r2, r3
 8004b9c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004ba0:	6013      	str	r3, [r2, #0]
 8004ba2:	e013      	b.n	8004bcc <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004ba4:	693b      	ldr	r3, [r7, #16]
 8004ba6:	015a      	lsls	r2, r3, #5
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	4413      	add	r3, r2
 8004bac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004bb0:	461a      	mov	r2, r3
 8004bb2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004bb6:	6013      	str	r3, [r2, #0]
 8004bb8:	e008      	b.n	8004bcc <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004bba:	693b      	ldr	r3, [r7, #16]
 8004bbc:	015a      	lsls	r2, r3, #5
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	4413      	add	r3, r2
 8004bc2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004bc6:	461a      	mov	r2, r3
 8004bc8:	2300      	movs	r3, #0
 8004bca:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004bcc:	693b      	ldr	r3, [r7, #16]
 8004bce:	015a      	lsls	r2, r3, #5
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	4413      	add	r3, r2
 8004bd4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004bd8:	461a      	mov	r2, r3
 8004bda:	2300      	movs	r3, #0
 8004bdc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004bde:	693b      	ldr	r3, [r7, #16]
 8004be0:	015a      	lsls	r2, r3, #5
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	4413      	add	r3, r2
 8004be6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004bea:	461a      	mov	r2, r3
 8004bec:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004bf0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004bf2:	693b      	ldr	r3, [r7, #16]
 8004bf4:	3301      	adds	r3, #1
 8004bf6:	613b      	str	r3, [r7, #16]
 8004bf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bfa:	693a      	ldr	r2, [r7, #16]
 8004bfc:	429a      	cmp	r2, r3
 8004bfe:	d3b7      	bcc.n	8004b70 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c06:	691b      	ldr	r3, [r3, #16]
 8004c08:	68fa      	ldr	r2, [r7, #12]
 8004c0a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004c0e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004c12:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	2200      	movs	r2, #0
 8004c18:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8004c20:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004c22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d105      	bne.n	8004c34 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	699b      	ldr	r3, [r3, #24]
 8004c2c:	f043 0210 	orr.w	r2, r3, #16
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	699a      	ldr	r2, [r3, #24]
 8004c38:	4b0f      	ldr	r3, [pc, #60]	; (8004c78 <USB_DevInit+0x2b8>)
 8004c3a:	4313      	orrs	r3, r2
 8004c3c:	687a      	ldr	r2, [r7, #4]
 8004c3e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004c40:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d005      	beq.n	8004c52 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	699b      	ldr	r3, [r3, #24]
 8004c4a:	f043 0208 	orr.w	r2, r3, #8
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004c52:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004c54:	2b01      	cmp	r3, #1
 8004c56:	d107      	bne.n	8004c68 <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	699b      	ldr	r3, [r3, #24]
 8004c5c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004c60:	f043 0304 	orr.w	r3, r3, #4
 8004c64:	687a      	ldr	r2, [r7, #4]
 8004c66:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004c68:	7dfb      	ldrb	r3, [r7, #23]
}
 8004c6a:	4618      	mov	r0, r3
 8004c6c:	3718      	adds	r7, #24
 8004c6e:	46bd      	mov	sp, r7
 8004c70:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004c74:	b004      	add	sp, #16
 8004c76:	4770      	bx	lr
 8004c78:	803c3800 	.word	0x803c3800

08004c7c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004c7c:	b480      	push	{r7}
 8004c7e:	b085      	sub	sp, #20
 8004c80:	af00      	add	r7, sp, #0
 8004c82:	6078      	str	r0, [r7, #4]
 8004c84:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004c86:	2300      	movs	r3, #0
 8004c88:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004c8a:	683b      	ldr	r3, [r7, #0]
 8004c8c:	019b      	lsls	r3, r3, #6
 8004c8e:	f043 0220 	orr.w	r2, r3, #32
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	3301      	adds	r3, #1
 8004c9a:	60fb      	str	r3, [r7, #12]
 8004c9c:	4a08      	ldr	r2, [pc, #32]	; (8004cc0 <USB_FlushTxFifo+0x44>)
 8004c9e:	4293      	cmp	r3, r2
 8004ca0:	d901      	bls.n	8004ca6 <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 8004ca2:	2303      	movs	r3, #3
 8004ca4:	e006      	b.n	8004cb4 <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	691b      	ldr	r3, [r3, #16]
 8004caa:	f003 0320 	and.w	r3, r3, #32
 8004cae:	2b20      	cmp	r3, #32
 8004cb0:	d0f1      	beq.n	8004c96 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8004cb2:	2300      	movs	r3, #0
}
 8004cb4:	4618      	mov	r0, r3
 8004cb6:	3714      	adds	r7, #20
 8004cb8:	46bd      	mov	sp, r7
 8004cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cbe:	4770      	bx	lr
 8004cc0:	00030d40 	.word	0x00030d40

08004cc4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004cc4:	b480      	push	{r7}
 8004cc6:	b085      	sub	sp, #20
 8004cc8:	af00      	add	r7, sp, #0
 8004cca:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004ccc:	2300      	movs	r3, #0
 8004cce:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	2210      	movs	r2, #16
 8004cd4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	3301      	adds	r3, #1
 8004cda:	60fb      	str	r3, [r7, #12]
 8004cdc:	4a08      	ldr	r2, [pc, #32]	; (8004d00 <USB_FlushRxFifo+0x3c>)
 8004cde:	4293      	cmp	r3, r2
 8004ce0:	d901      	bls.n	8004ce6 <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 8004ce2:	2303      	movs	r3, #3
 8004ce4:	e006      	b.n	8004cf4 <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	691b      	ldr	r3, [r3, #16]
 8004cea:	f003 0310 	and.w	r3, r3, #16
 8004cee:	2b10      	cmp	r3, #16
 8004cf0:	d0f1      	beq.n	8004cd6 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8004cf2:	2300      	movs	r3, #0
}
 8004cf4:	4618      	mov	r0, r3
 8004cf6:	3714      	adds	r7, #20
 8004cf8:	46bd      	mov	sp, r7
 8004cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cfe:	4770      	bx	lr
 8004d00:	00030d40 	.word	0x00030d40

08004d04 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004d04:	b480      	push	{r7}
 8004d06:	b085      	sub	sp, #20
 8004d08:	af00      	add	r7, sp, #0
 8004d0a:	6078      	str	r0, [r7, #4]
 8004d0c:	460b      	mov	r3, r1
 8004d0e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d1a:	681a      	ldr	r2, [r3, #0]
 8004d1c:	78fb      	ldrb	r3, [r7, #3]
 8004d1e:	68f9      	ldr	r1, [r7, #12]
 8004d20:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004d24:	4313      	orrs	r3, r2
 8004d26:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004d28:	2300      	movs	r3, #0
}
 8004d2a:	4618      	mov	r0, r3
 8004d2c:	3714      	adds	r7, #20
 8004d2e:	46bd      	mov	sp, r7
 8004d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d34:	4770      	bx	lr

08004d36 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8004d36:	b480      	push	{r7}
 8004d38:	b087      	sub	sp, #28
 8004d3a:	af00      	add	r7, sp, #0
 8004d3c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8004d42:	693b      	ldr	r3, [r7, #16]
 8004d44:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d48:	689b      	ldr	r3, [r3, #8]
 8004d4a:	f003 0306 	and.w	r3, r3, #6
 8004d4e:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d102      	bne.n	8004d5c <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8004d56:	2300      	movs	r3, #0
 8004d58:	75fb      	strb	r3, [r7, #23]
 8004d5a:	e00a      	b.n	8004d72 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	2b02      	cmp	r3, #2
 8004d60:	d002      	beq.n	8004d68 <USB_GetDevSpeed+0x32>
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	2b06      	cmp	r3, #6
 8004d66:	d102      	bne.n	8004d6e <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8004d68:	2302      	movs	r3, #2
 8004d6a:	75fb      	strb	r3, [r7, #23]
 8004d6c:	e001      	b.n	8004d72 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8004d6e:	230f      	movs	r3, #15
 8004d70:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8004d72:	7dfb      	ldrb	r3, [r7, #23]
}
 8004d74:	4618      	mov	r0, r3
 8004d76:	371c      	adds	r7, #28
 8004d78:	46bd      	mov	sp, r7
 8004d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d7e:	4770      	bx	lr

08004d80 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004d80:	b480      	push	{r7}
 8004d82:	b085      	sub	sp, #20
 8004d84:	af00      	add	r7, sp, #0
 8004d86:	6078      	str	r0, [r7, #4]
 8004d88:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004d8e:	683b      	ldr	r3, [r7, #0]
 8004d90:	781b      	ldrb	r3, [r3, #0]
 8004d92:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004d94:	683b      	ldr	r3, [r7, #0]
 8004d96:	785b      	ldrb	r3, [r3, #1]
 8004d98:	2b01      	cmp	r3, #1
 8004d9a:	d13a      	bne.n	8004e12 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004da2:	69da      	ldr	r2, [r3, #28]
 8004da4:	683b      	ldr	r3, [r7, #0]
 8004da6:	781b      	ldrb	r3, [r3, #0]
 8004da8:	f003 030f 	and.w	r3, r3, #15
 8004dac:	2101      	movs	r1, #1
 8004dae:	fa01 f303 	lsl.w	r3, r1, r3
 8004db2:	b29b      	uxth	r3, r3
 8004db4:	68f9      	ldr	r1, [r7, #12]
 8004db6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004dba:	4313      	orrs	r3, r2
 8004dbc:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8004dbe:	68bb      	ldr	r3, [r7, #8]
 8004dc0:	015a      	lsls	r2, r3, #5
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	4413      	add	r3, r2
 8004dc6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d155      	bne.n	8004e80 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004dd4:	68bb      	ldr	r3, [r7, #8]
 8004dd6:	015a      	lsls	r2, r3, #5
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	4413      	add	r3, r2
 8004ddc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004de0:	681a      	ldr	r2, [r3, #0]
 8004de2:	683b      	ldr	r3, [r7, #0]
 8004de4:	689b      	ldr	r3, [r3, #8]
 8004de6:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004dea:	683b      	ldr	r3, [r7, #0]
 8004dec:	78db      	ldrb	r3, [r3, #3]
 8004dee:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004df0:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004df2:	68bb      	ldr	r3, [r7, #8]
 8004df4:	059b      	lsls	r3, r3, #22
 8004df6:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004df8:	4313      	orrs	r3, r2
 8004dfa:	68ba      	ldr	r2, [r7, #8]
 8004dfc:	0151      	lsls	r1, r2, #5
 8004dfe:	68fa      	ldr	r2, [r7, #12]
 8004e00:	440a      	add	r2, r1
 8004e02:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004e06:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004e0a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004e0e:	6013      	str	r3, [r2, #0]
 8004e10:	e036      	b.n	8004e80 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e18:	69da      	ldr	r2, [r3, #28]
 8004e1a:	683b      	ldr	r3, [r7, #0]
 8004e1c:	781b      	ldrb	r3, [r3, #0]
 8004e1e:	f003 030f 	and.w	r3, r3, #15
 8004e22:	2101      	movs	r1, #1
 8004e24:	fa01 f303 	lsl.w	r3, r1, r3
 8004e28:	041b      	lsls	r3, r3, #16
 8004e2a:	68f9      	ldr	r1, [r7, #12]
 8004e2c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004e30:	4313      	orrs	r3, r2
 8004e32:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8004e34:	68bb      	ldr	r3, [r7, #8]
 8004e36:	015a      	lsls	r2, r3, #5
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	4413      	add	r3, r2
 8004e3c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d11a      	bne.n	8004e80 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004e4a:	68bb      	ldr	r3, [r7, #8]
 8004e4c:	015a      	lsls	r2, r3, #5
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	4413      	add	r3, r2
 8004e52:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e56:	681a      	ldr	r2, [r3, #0]
 8004e58:	683b      	ldr	r3, [r7, #0]
 8004e5a:	689b      	ldr	r3, [r3, #8]
 8004e5c:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8004e60:	683b      	ldr	r3, [r7, #0]
 8004e62:	78db      	ldrb	r3, [r3, #3]
 8004e64:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004e66:	430b      	orrs	r3, r1
 8004e68:	4313      	orrs	r3, r2
 8004e6a:	68ba      	ldr	r2, [r7, #8]
 8004e6c:	0151      	lsls	r1, r2, #5
 8004e6e:	68fa      	ldr	r2, [r7, #12]
 8004e70:	440a      	add	r2, r1
 8004e72:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004e76:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004e7a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004e7e:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8004e80:	2300      	movs	r3, #0
}
 8004e82:	4618      	mov	r0, r3
 8004e84:	3714      	adds	r7, #20
 8004e86:	46bd      	mov	sp, r7
 8004e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e8c:	4770      	bx	lr
	...

08004e90 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004e90:	b480      	push	{r7}
 8004e92:	b085      	sub	sp, #20
 8004e94:	af00      	add	r7, sp, #0
 8004e96:	6078      	str	r0, [r7, #4]
 8004e98:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004e9e:	683b      	ldr	r3, [r7, #0]
 8004ea0:	781b      	ldrb	r3, [r3, #0]
 8004ea2:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8004ea4:	683b      	ldr	r3, [r7, #0]
 8004ea6:	785b      	ldrb	r3, [r3, #1]
 8004ea8:	2b01      	cmp	r3, #1
 8004eaa:	d161      	bne.n	8004f70 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004eac:	68bb      	ldr	r3, [r7, #8]
 8004eae:	015a      	lsls	r2, r3, #5
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	4413      	add	r3, r2
 8004eb4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004ebe:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004ec2:	d11f      	bne.n	8004f04 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8004ec4:	68bb      	ldr	r3, [r7, #8]
 8004ec6:	015a      	lsls	r2, r3, #5
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	4413      	add	r3, r2
 8004ecc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	68ba      	ldr	r2, [r7, #8]
 8004ed4:	0151      	lsls	r1, r2, #5
 8004ed6:	68fa      	ldr	r2, [r7, #12]
 8004ed8:	440a      	add	r2, r1
 8004eda:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004ede:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004ee2:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8004ee4:	68bb      	ldr	r3, [r7, #8]
 8004ee6:	015a      	lsls	r2, r3, #5
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	4413      	add	r3, r2
 8004eec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	68ba      	ldr	r2, [r7, #8]
 8004ef4:	0151      	lsls	r1, r2, #5
 8004ef6:	68fa      	ldr	r2, [r7, #12]
 8004ef8:	440a      	add	r2, r1
 8004efa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004efe:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004f02:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f0a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004f0c:	683b      	ldr	r3, [r7, #0]
 8004f0e:	781b      	ldrb	r3, [r3, #0]
 8004f10:	f003 030f 	and.w	r3, r3, #15
 8004f14:	2101      	movs	r1, #1
 8004f16:	fa01 f303 	lsl.w	r3, r1, r3
 8004f1a:	b29b      	uxth	r3, r3
 8004f1c:	43db      	mvns	r3, r3
 8004f1e:	68f9      	ldr	r1, [r7, #12]
 8004f20:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004f24:	4013      	ands	r3, r2
 8004f26:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f2e:	69da      	ldr	r2, [r3, #28]
 8004f30:	683b      	ldr	r3, [r7, #0]
 8004f32:	781b      	ldrb	r3, [r3, #0]
 8004f34:	f003 030f 	and.w	r3, r3, #15
 8004f38:	2101      	movs	r1, #1
 8004f3a:	fa01 f303 	lsl.w	r3, r1, r3
 8004f3e:	b29b      	uxth	r3, r3
 8004f40:	43db      	mvns	r3, r3
 8004f42:	68f9      	ldr	r1, [r7, #12]
 8004f44:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004f48:	4013      	ands	r3, r2
 8004f4a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8004f4c:	68bb      	ldr	r3, [r7, #8]
 8004f4e:	015a      	lsls	r2, r3, #5
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	4413      	add	r3, r2
 8004f54:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f58:	681a      	ldr	r2, [r3, #0]
 8004f5a:	68bb      	ldr	r3, [r7, #8]
 8004f5c:	0159      	lsls	r1, r3, #5
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	440b      	add	r3, r1
 8004f62:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f66:	4619      	mov	r1, r3
 8004f68:	4b35      	ldr	r3, [pc, #212]	; (8005040 <USB_DeactivateEndpoint+0x1b0>)
 8004f6a:	4013      	ands	r3, r2
 8004f6c:	600b      	str	r3, [r1, #0]
 8004f6e:	e060      	b.n	8005032 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004f70:	68bb      	ldr	r3, [r7, #8]
 8004f72:	015a      	lsls	r2, r3, #5
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	4413      	add	r3, r2
 8004f78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004f82:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004f86:	d11f      	bne.n	8004fc8 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004f88:	68bb      	ldr	r3, [r7, #8]
 8004f8a:	015a      	lsls	r2, r3, #5
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	4413      	add	r3, r2
 8004f90:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	68ba      	ldr	r2, [r7, #8]
 8004f98:	0151      	lsls	r1, r2, #5
 8004f9a:	68fa      	ldr	r2, [r7, #12]
 8004f9c:	440a      	add	r2, r1
 8004f9e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004fa2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004fa6:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8004fa8:	68bb      	ldr	r3, [r7, #8]
 8004faa:	015a      	lsls	r2, r3, #5
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	4413      	add	r3, r2
 8004fb0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	68ba      	ldr	r2, [r7, #8]
 8004fb8:	0151      	lsls	r1, r2, #5
 8004fba:	68fa      	ldr	r2, [r7, #12]
 8004fbc:	440a      	add	r2, r1
 8004fbe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004fc2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004fc6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004fce:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004fd0:	683b      	ldr	r3, [r7, #0]
 8004fd2:	781b      	ldrb	r3, [r3, #0]
 8004fd4:	f003 030f 	and.w	r3, r3, #15
 8004fd8:	2101      	movs	r1, #1
 8004fda:	fa01 f303 	lsl.w	r3, r1, r3
 8004fde:	041b      	lsls	r3, r3, #16
 8004fe0:	43db      	mvns	r3, r3
 8004fe2:	68f9      	ldr	r1, [r7, #12]
 8004fe4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004fe8:	4013      	ands	r3, r2
 8004fea:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ff2:	69da      	ldr	r2, [r3, #28]
 8004ff4:	683b      	ldr	r3, [r7, #0]
 8004ff6:	781b      	ldrb	r3, [r3, #0]
 8004ff8:	f003 030f 	and.w	r3, r3, #15
 8004ffc:	2101      	movs	r1, #1
 8004ffe:	fa01 f303 	lsl.w	r3, r1, r3
 8005002:	041b      	lsls	r3, r3, #16
 8005004:	43db      	mvns	r3, r3
 8005006:	68f9      	ldr	r1, [r7, #12]
 8005008:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800500c:	4013      	ands	r3, r2
 800500e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8005010:	68bb      	ldr	r3, [r7, #8]
 8005012:	015a      	lsls	r2, r3, #5
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	4413      	add	r3, r2
 8005018:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800501c:	681a      	ldr	r2, [r3, #0]
 800501e:	68bb      	ldr	r3, [r7, #8]
 8005020:	0159      	lsls	r1, r3, #5
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	440b      	add	r3, r1
 8005026:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800502a:	4619      	mov	r1, r3
 800502c:	4b05      	ldr	r3, [pc, #20]	; (8005044 <USB_DeactivateEndpoint+0x1b4>)
 800502e:	4013      	ands	r3, r2
 8005030:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8005032:	2300      	movs	r3, #0
}
 8005034:	4618      	mov	r0, r3
 8005036:	3714      	adds	r7, #20
 8005038:	46bd      	mov	sp, r7
 800503a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800503e:	4770      	bx	lr
 8005040:	ec337800 	.word	0xec337800
 8005044:	eff37800 	.word	0xeff37800

08005048 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005048:	b580      	push	{r7, lr}
 800504a:	b08a      	sub	sp, #40	; 0x28
 800504c:	af02      	add	r7, sp, #8
 800504e:	60f8      	str	r0, [r7, #12]
 8005050:	60b9      	str	r1, [r7, #8]
 8005052:	4613      	mov	r3, r2
 8005054:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800505a:	68bb      	ldr	r3, [r7, #8]
 800505c:	781b      	ldrb	r3, [r3, #0]
 800505e:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005060:	68bb      	ldr	r3, [r7, #8]
 8005062:	785b      	ldrb	r3, [r3, #1]
 8005064:	2b01      	cmp	r3, #1
 8005066:	f040 815c 	bne.w	8005322 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800506a:	68bb      	ldr	r3, [r7, #8]
 800506c:	695b      	ldr	r3, [r3, #20]
 800506e:	2b00      	cmp	r3, #0
 8005070:	d132      	bne.n	80050d8 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005072:	69bb      	ldr	r3, [r7, #24]
 8005074:	015a      	lsls	r2, r3, #5
 8005076:	69fb      	ldr	r3, [r7, #28]
 8005078:	4413      	add	r3, r2
 800507a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800507e:	691b      	ldr	r3, [r3, #16]
 8005080:	69ba      	ldr	r2, [r7, #24]
 8005082:	0151      	lsls	r1, r2, #5
 8005084:	69fa      	ldr	r2, [r7, #28]
 8005086:	440a      	add	r2, r1
 8005088:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800508c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005090:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005094:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005096:	69bb      	ldr	r3, [r7, #24]
 8005098:	015a      	lsls	r2, r3, #5
 800509a:	69fb      	ldr	r3, [r7, #28]
 800509c:	4413      	add	r3, r2
 800509e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050a2:	691b      	ldr	r3, [r3, #16]
 80050a4:	69ba      	ldr	r2, [r7, #24]
 80050a6:	0151      	lsls	r1, r2, #5
 80050a8:	69fa      	ldr	r2, [r7, #28]
 80050aa:	440a      	add	r2, r1
 80050ac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80050b0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80050b4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80050b6:	69bb      	ldr	r3, [r7, #24]
 80050b8:	015a      	lsls	r2, r3, #5
 80050ba:	69fb      	ldr	r3, [r7, #28]
 80050bc:	4413      	add	r3, r2
 80050be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050c2:	691b      	ldr	r3, [r3, #16]
 80050c4:	69ba      	ldr	r2, [r7, #24]
 80050c6:	0151      	lsls	r1, r2, #5
 80050c8:	69fa      	ldr	r2, [r7, #28]
 80050ca:	440a      	add	r2, r1
 80050cc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80050d0:	0cdb      	lsrs	r3, r3, #19
 80050d2:	04db      	lsls	r3, r3, #19
 80050d4:	6113      	str	r3, [r2, #16]
 80050d6:	e074      	b.n	80051c2 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80050d8:	69bb      	ldr	r3, [r7, #24]
 80050da:	015a      	lsls	r2, r3, #5
 80050dc:	69fb      	ldr	r3, [r7, #28]
 80050de:	4413      	add	r3, r2
 80050e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050e4:	691b      	ldr	r3, [r3, #16]
 80050e6:	69ba      	ldr	r2, [r7, #24]
 80050e8:	0151      	lsls	r1, r2, #5
 80050ea:	69fa      	ldr	r2, [r7, #28]
 80050ec:	440a      	add	r2, r1
 80050ee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80050f2:	0cdb      	lsrs	r3, r3, #19
 80050f4:	04db      	lsls	r3, r3, #19
 80050f6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80050f8:	69bb      	ldr	r3, [r7, #24]
 80050fa:	015a      	lsls	r2, r3, #5
 80050fc:	69fb      	ldr	r3, [r7, #28]
 80050fe:	4413      	add	r3, r2
 8005100:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005104:	691b      	ldr	r3, [r3, #16]
 8005106:	69ba      	ldr	r2, [r7, #24]
 8005108:	0151      	lsls	r1, r2, #5
 800510a:	69fa      	ldr	r2, [r7, #28]
 800510c:	440a      	add	r2, r1
 800510e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005112:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005116:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800511a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800511c:	69bb      	ldr	r3, [r7, #24]
 800511e:	015a      	lsls	r2, r3, #5
 8005120:	69fb      	ldr	r3, [r7, #28]
 8005122:	4413      	add	r3, r2
 8005124:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005128:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800512a:	68bb      	ldr	r3, [r7, #8]
 800512c:	6959      	ldr	r1, [r3, #20]
 800512e:	68bb      	ldr	r3, [r7, #8]
 8005130:	689b      	ldr	r3, [r3, #8]
 8005132:	440b      	add	r3, r1
 8005134:	1e59      	subs	r1, r3, #1
 8005136:	68bb      	ldr	r3, [r7, #8]
 8005138:	689b      	ldr	r3, [r3, #8]
 800513a:	fbb1 f3f3 	udiv	r3, r1, r3
 800513e:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8005140:	4b9d      	ldr	r3, [pc, #628]	; (80053b8 <USB_EPStartXfer+0x370>)
 8005142:	400b      	ands	r3, r1
 8005144:	69b9      	ldr	r1, [r7, #24]
 8005146:	0148      	lsls	r0, r1, #5
 8005148:	69f9      	ldr	r1, [r7, #28]
 800514a:	4401      	add	r1, r0
 800514c:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005150:	4313      	orrs	r3, r2
 8005152:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005154:	69bb      	ldr	r3, [r7, #24]
 8005156:	015a      	lsls	r2, r3, #5
 8005158:	69fb      	ldr	r3, [r7, #28]
 800515a:	4413      	add	r3, r2
 800515c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005160:	691a      	ldr	r2, [r3, #16]
 8005162:	68bb      	ldr	r3, [r7, #8]
 8005164:	695b      	ldr	r3, [r3, #20]
 8005166:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800516a:	69b9      	ldr	r1, [r7, #24]
 800516c:	0148      	lsls	r0, r1, #5
 800516e:	69f9      	ldr	r1, [r7, #28]
 8005170:	4401      	add	r1, r0
 8005172:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005176:	4313      	orrs	r3, r2
 8005178:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800517a:	68bb      	ldr	r3, [r7, #8]
 800517c:	78db      	ldrb	r3, [r3, #3]
 800517e:	2b01      	cmp	r3, #1
 8005180:	d11f      	bne.n	80051c2 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8005182:	69bb      	ldr	r3, [r7, #24]
 8005184:	015a      	lsls	r2, r3, #5
 8005186:	69fb      	ldr	r3, [r7, #28]
 8005188:	4413      	add	r3, r2
 800518a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800518e:	691b      	ldr	r3, [r3, #16]
 8005190:	69ba      	ldr	r2, [r7, #24]
 8005192:	0151      	lsls	r1, r2, #5
 8005194:	69fa      	ldr	r2, [r7, #28]
 8005196:	440a      	add	r2, r1
 8005198:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800519c:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80051a0:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80051a2:	69bb      	ldr	r3, [r7, #24]
 80051a4:	015a      	lsls	r2, r3, #5
 80051a6:	69fb      	ldr	r3, [r7, #28]
 80051a8:	4413      	add	r3, r2
 80051aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051ae:	691b      	ldr	r3, [r3, #16]
 80051b0:	69ba      	ldr	r2, [r7, #24]
 80051b2:	0151      	lsls	r1, r2, #5
 80051b4:	69fa      	ldr	r2, [r7, #28]
 80051b6:	440a      	add	r2, r1
 80051b8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80051bc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80051c0:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 80051c2:	79fb      	ldrb	r3, [r7, #7]
 80051c4:	2b01      	cmp	r3, #1
 80051c6:	d14b      	bne.n	8005260 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80051c8:	68bb      	ldr	r3, [r7, #8]
 80051ca:	691b      	ldr	r3, [r3, #16]
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d009      	beq.n	80051e4 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80051d0:	69bb      	ldr	r3, [r7, #24]
 80051d2:	015a      	lsls	r2, r3, #5
 80051d4:	69fb      	ldr	r3, [r7, #28]
 80051d6:	4413      	add	r3, r2
 80051d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051dc:	461a      	mov	r2, r3
 80051de:	68bb      	ldr	r3, [r7, #8]
 80051e0:	691b      	ldr	r3, [r3, #16]
 80051e2:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80051e4:	68bb      	ldr	r3, [r7, #8]
 80051e6:	78db      	ldrb	r3, [r3, #3]
 80051e8:	2b01      	cmp	r3, #1
 80051ea:	d128      	bne.n	800523e <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80051ec:	69fb      	ldr	r3, [r7, #28]
 80051ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80051f2:	689b      	ldr	r3, [r3, #8]
 80051f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d110      	bne.n	800521e <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80051fc:	69bb      	ldr	r3, [r7, #24]
 80051fe:	015a      	lsls	r2, r3, #5
 8005200:	69fb      	ldr	r3, [r7, #28]
 8005202:	4413      	add	r3, r2
 8005204:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	69ba      	ldr	r2, [r7, #24]
 800520c:	0151      	lsls	r1, r2, #5
 800520e:	69fa      	ldr	r2, [r7, #28]
 8005210:	440a      	add	r2, r1
 8005212:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005216:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800521a:	6013      	str	r3, [r2, #0]
 800521c:	e00f      	b.n	800523e <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800521e:	69bb      	ldr	r3, [r7, #24]
 8005220:	015a      	lsls	r2, r3, #5
 8005222:	69fb      	ldr	r3, [r7, #28]
 8005224:	4413      	add	r3, r2
 8005226:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	69ba      	ldr	r2, [r7, #24]
 800522e:	0151      	lsls	r1, r2, #5
 8005230:	69fa      	ldr	r2, [r7, #28]
 8005232:	440a      	add	r2, r1
 8005234:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005238:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800523c:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800523e:	69bb      	ldr	r3, [r7, #24]
 8005240:	015a      	lsls	r2, r3, #5
 8005242:	69fb      	ldr	r3, [r7, #28]
 8005244:	4413      	add	r3, r2
 8005246:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	69ba      	ldr	r2, [r7, #24]
 800524e:	0151      	lsls	r1, r2, #5
 8005250:	69fa      	ldr	r2, [r7, #28]
 8005252:	440a      	add	r2, r1
 8005254:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005258:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800525c:	6013      	str	r3, [r2, #0]
 800525e:	e12f      	b.n	80054c0 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005260:	69bb      	ldr	r3, [r7, #24]
 8005262:	015a      	lsls	r2, r3, #5
 8005264:	69fb      	ldr	r3, [r7, #28]
 8005266:	4413      	add	r3, r2
 8005268:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	69ba      	ldr	r2, [r7, #24]
 8005270:	0151      	lsls	r1, r2, #5
 8005272:	69fa      	ldr	r2, [r7, #28]
 8005274:	440a      	add	r2, r1
 8005276:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800527a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800527e:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005280:	68bb      	ldr	r3, [r7, #8]
 8005282:	78db      	ldrb	r3, [r3, #3]
 8005284:	2b01      	cmp	r3, #1
 8005286:	d015      	beq.n	80052b4 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8005288:	68bb      	ldr	r3, [r7, #8]
 800528a:	695b      	ldr	r3, [r3, #20]
 800528c:	2b00      	cmp	r3, #0
 800528e:	f000 8117 	beq.w	80054c0 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005292:	69fb      	ldr	r3, [r7, #28]
 8005294:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005298:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800529a:	68bb      	ldr	r3, [r7, #8]
 800529c:	781b      	ldrb	r3, [r3, #0]
 800529e:	f003 030f 	and.w	r3, r3, #15
 80052a2:	2101      	movs	r1, #1
 80052a4:	fa01 f303 	lsl.w	r3, r1, r3
 80052a8:	69f9      	ldr	r1, [r7, #28]
 80052aa:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80052ae:	4313      	orrs	r3, r2
 80052b0:	634b      	str	r3, [r1, #52]	; 0x34
 80052b2:	e105      	b.n	80054c0 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80052b4:	69fb      	ldr	r3, [r7, #28]
 80052b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80052ba:	689b      	ldr	r3, [r3, #8]
 80052bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d110      	bne.n	80052e6 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80052c4:	69bb      	ldr	r3, [r7, #24]
 80052c6:	015a      	lsls	r2, r3, #5
 80052c8:	69fb      	ldr	r3, [r7, #28]
 80052ca:	4413      	add	r3, r2
 80052cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	69ba      	ldr	r2, [r7, #24]
 80052d4:	0151      	lsls	r1, r2, #5
 80052d6:	69fa      	ldr	r2, [r7, #28]
 80052d8:	440a      	add	r2, r1
 80052da:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80052de:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80052e2:	6013      	str	r3, [r2, #0]
 80052e4:	e00f      	b.n	8005306 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80052e6:	69bb      	ldr	r3, [r7, #24]
 80052e8:	015a      	lsls	r2, r3, #5
 80052ea:	69fb      	ldr	r3, [r7, #28]
 80052ec:	4413      	add	r3, r2
 80052ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	69ba      	ldr	r2, [r7, #24]
 80052f6:	0151      	lsls	r1, r2, #5
 80052f8:	69fa      	ldr	r2, [r7, #28]
 80052fa:	440a      	add	r2, r1
 80052fc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005300:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005304:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8005306:	68bb      	ldr	r3, [r7, #8]
 8005308:	68d9      	ldr	r1, [r3, #12]
 800530a:	68bb      	ldr	r3, [r7, #8]
 800530c:	781a      	ldrb	r2, [r3, #0]
 800530e:	68bb      	ldr	r3, [r7, #8]
 8005310:	695b      	ldr	r3, [r3, #20]
 8005312:	b298      	uxth	r0, r3
 8005314:	79fb      	ldrb	r3, [r7, #7]
 8005316:	9300      	str	r3, [sp, #0]
 8005318:	4603      	mov	r3, r0
 800531a:	68f8      	ldr	r0, [r7, #12]
 800531c:	f000 fa2b 	bl	8005776 <USB_WritePacket>
 8005320:	e0ce      	b.n	80054c0 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005322:	69bb      	ldr	r3, [r7, #24]
 8005324:	015a      	lsls	r2, r3, #5
 8005326:	69fb      	ldr	r3, [r7, #28]
 8005328:	4413      	add	r3, r2
 800532a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800532e:	691b      	ldr	r3, [r3, #16]
 8005330:	69ba      	ldr	r2, [r7, #24]
 8005332:	0151      	lsls	r1, r2, #5
 8005334:	69fa      	ldr	r2, [r7, #28]
 8005336:	440a      	add	r2, r1
 8005338:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800533c:	0cdb      	lsrs	r3, r3, #19
 800533e:	04db      	lsls	r3, r3, #19
 8005340:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005342:	69bb      	ldr	r3, [r7, #24]
 8005344:	015a      	lsls	r2, r3, #5
 8005346:	69fb      	ldr	r3, [r7, #28]
 8005348:	4413      	add	r3, r2
 800534a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800534e:	691b      	ldr	r3, [r3, #16]
 8005350:	69ba      	ldr	r2, [r7, #24]
 8005352:	0151      	lsls	r1, r2, #5
 8005354:	69fa      	ldr	r2, [r7, #28]
 8005356:	440a      	add	r2, r1
 8005358:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800535c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005360:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005364:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8005366:	68bb      	ldr	r3, [r7, #8]
 8005368:	695b      	ldr	r3, [r3, #20]
 800536a:	2b00      	cmp	r3, #0
 800536c:	d126      	bne.n	80053bc <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800536e:	69bb      	ldr	r3, [r7, #24]
 8005370:	015a      	lsls	r2, r3, #5
 8005372:	69fb      	ldr	r3, [r7, #28]
 8005374:	4413      	add	r3, r2
 8005376:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800537a:	691a      	ldr	r2, [r3, #16]
 800537c:	68bb      	ldr	r3, [r7, #8]
 800537e:	689b      	ldr	r3, [r3, #8]
 8005380:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005384:	69b9      	ldr	r1, [r7, #24]
 8005386:	0148      	lsls	r0, r1, #5
 8005388:	69f9      	ldr	r1, [r7, #28]
 800538a:	4401      	add	r1, r0
 800538c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005390:	4313      	orrs	r3, r2
 8005392:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005394:	69bb      	ldr	r3, [r7, #24]
 8005396:	015a      	lsls	r2, r3, #5
 8005398:	69fb      	ldr	r3, [r7, #28]
 800539a:	4413      	add	r3, r2
 800539c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053a0:	691b      	ldr	r3, [r3, #16]
 80053a2:	69ba      	ldr	r2, [r7, #24]
 80053a4:	0151      	lsls	r1, r2, #5
 80053a6:	69fa      	ldr	r2, [r7, #28]
 80053a8:	440a      	add	r2, r1
 80053aa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80053ae:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80053b2:	6113      	str	r3, [r2, #16]
 80053b4:	e036      	b.n	8005424 <USB_EPStartXfer+0x3dc>
 80053b6:	bf00      	nop
 80053b8:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80053bc:	68bb      	ldr	r3, [r7, #8]
 80053be:	695a      	ldr	r2, [r3, #20]
 80053c0:	68bb      	ldr	r3, [r7, #8]
 80053c2:	689b      	ldr	r3, [r3, #8]
 80053c4:	4413      	add	r3, r2
 80053c6:	1e5a      	subs	r2, r3, #1
 80053c8:	68bb      	ldr	r3, [r7, #8]
 80053ca:	689b      	ldr	r3, [r3, #8]
 80053cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80053d0:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80053d2:	69bb      	ldr	r3, [r7, #24]
 80053d4:	015a      	lsls	r2, r3, #5
 80053d6:	69fb      	ldr	r3, [r7, #28]
 80053d8:	4413      	add	r3, r2
 80053da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053de:	691a      	ldr	r2, [r3, #16]
 80053e0:	8afb      	ldrh	r3, [r7, #22]
 80053e2:	04d9      	lsls	r1, r3, #19
 80053e4:	4b39      	ldr	r3, [pc, #228]	; (80054cc <USB_EPStartXfer+0x484>)
 80053e6:	400b      	ands	r3, r1
 80053e8:	69b9      	ldr	r1, [r7, #24]
 80053ea:	0148      	lsls	r0, r1, #5
 80053ec:	69f9      	ldr	r1, [r7, #28]
 80053ee:	4401      	add	r1, r0
 80053f0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80053f4:	4313      	orrs	r3, r2
 80053f6:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 80053f8:	69bb      	ldr	r3, [r7, #24]
 80053fa:	015a      	lsls	r2, r3, #5
 80053fc:	69fb      	ldr	r3, [r7, #28]
 80053fe:	4413      	add	r3, r2
 8005400:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005404:	691a      	ldr	r2, [r3, #16]
 8005406:	68bb      	ldr	r3, [r7, #8]
 8005408:	689b      	ldr	r3, [r3, #8]
 800540a:	8af9      	ldrh	r1, [r7, #22]
 800540c:	fb01 f303 	mul.w	r3, r1, r3
 8005410:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005414:	69b9      	ldr	r1, [r7, #24]
 8005416:	0148      	lsls	r0, r1, #5
 8005418:	69f9      	ldr	r1, [r7, #28]
 800541a:	4401      	add	r1, r0
 800541c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005420:	4313      	orrs	r3, r2
 8005422:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005424:	79fb      	ldrb	r3, [r7, #7]
 8005426:	2b01      	cmp	r3, #1
 8005428:	d10d      	bne.n	8005446 <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800542a:	68bb      	ldr	r3, [r7, #8]
 800542c:	68db      	ldr	r3, [r3, #12]
 800542e:	2b00      	cmp	r3, #0
 8005430:	d009      	beq.n	8005446 <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005432:	68bb      	ldr	r3, [r7, #8]
 8005434:	68d9      	ldr	r1, [r3, #12]
 8005436:	69bb      	ldr	r3, [r7, #24]
 8005438:	015a      	lsls	r2, r3, #5
 800543a:	69fb      	ldr	r3, [r7, #28]
 800543c:	4413      	add	r3, r2
 800543e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005442:	460a      	mov	r2, r1
 8005444:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8005446:	68bb      	ldr	r3, [r7, #8]
 8005448:	78db      	ldrb	r3, [r3, #3]
 800544a:	2b01      	cmp	r3, #1
 800544c:	d128      	bne.n	80054a0 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800544e:	69fb      	ldr	r3, [r7, #28]
 8005450:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005454:	689b      	ldr	r3, [r3, #8]
 8005456:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800545a:	2b00      	cmp	r3, #0
 800545c:	d110      	bne.n	8005480 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800545e:	69bb      	ldr	r3, [r7, #24]
 8005460:	015a      	lsls	r2, r3, #5
 8005462:	69fb      	ldr	r3, [r7, #28]
 8005464:	4413      	add	r3, r2
 8005466:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	69ba      	ldr	r2, [r7, #24]
 800546e:	0151      	lsls	r1, r2, #5
 8005470:	69fa      	ldr	r2, [r7, #28]
 8005472:	440a      	add	r2, r1
 8005474:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005478:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800547c:	6013      	str	r3, [r2, #0]
 800547e:	e00f      	b.n	80054a0 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8005480:	69bb      	ldr	r3, [r7, #24]
 8005482:	015a      	lsls	r2, r3, #5
 8005484:	69fb      	ldr	r3, [r7, #28]
 8005486:	4413      	add	r3, r2
 8005488:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	69ba      	ldr	r2, [r7, #24]
 8005490:	0151      	lsls	r1, r2, #5
 8005492:	69fa      	ldr	r2, [r7, #28]
 8005494:	440a      	add	r2, r1
 8005496:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800549a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800549e:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80054a0:	69bb      	ldr	r3, [r7, #24]
 80054a2:	015a      	lsls	r2, r3, #5
 80054a4:	69fb      	ldr	r3, [r7, #28]
 80054a6:	4413      	add	r3, r2
 80054a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	69ba      	ldr	r2, [r7, #24]
 80054b0:	0151      	lsls	r1, r2, #5
 80054b2:	69fa      	ldr	r2, [r7, #28]
 80054b4:	440a      	add	r2, r1
 80054b6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80054ba:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80054be:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80054c0:	2300      	movs	r3, #0
}
 80054c2:	4618      	mov	r0, r3
 80054c4:	3720      	adds	r7, #32
 80054c6:	46bd      	mov	sp, r7
 80054c8:	bd80      	pop	{r7, pc}
 80054ca:	bf00      	nop
 80054cc:	1ff80000 	.word	0x1ff80000

080054d0 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80054d0:	b480      	push	{r7}
 80054d2:	b087      	sub	sp, #28
 80054d4:	af00      	add	r7, sp, #0
 80054d6:	60f8      	str	r0, [r7, #12]
 80054d8:	60b9      	str	r1, [r7, #8]
 80054da:	4613      	mov	r3, r2
 80054dc:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 80054e2:	68bb      	ldr	r3, [r7, #8]
 80054e4:	781b      	ldrb	r3, [r3, #0]
 80054e6:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80054e8:	68bb      	ldr	r3, [r7, #8]
 80054ea:	785b      	ldrb	r3, [r3, #1]
 80054ec:	2b01      	cmp	r3, #1
 80054ee:	f040 80cd 	bne.w	800568c <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80054f2:	68bb      	ldr	r3, [r7, #8]
 80054f4:	695b      	ldr	r3, [r3, #20]
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d132      	bne.n	8005560 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80054fa:	693b      	ldr	r3, [r7, #16]
 80054fc:	015a      	lsls	r2, r3, #5
 80054fe:	697b      	ldr	r3, [r7, #20]
 8005500:	4413      	add	r3, r2
 8005502:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005506:	691b      	ldr	r3, [r3, #16]
 8005508:	693a      	ldr	r2, [r7, #16]
 800550a:	0151      	lsls	r1, r2, #5
 800550c:	697a      	ldr	r2, [r7, #20]
 800550e:	440a      	add	r2, r1
 8005510:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005514:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005518:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800551c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800551e:	693b      	ldr	r3, [r7, #16]
 8005520:	015a      	lsls	r2, r3, #5
 8005522:	697b      	ldr	r3, [r7, #20]
 8005524:	4413      	add	r3, r2
 8005526:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800552a:	691b      	ldr	r3, [r3, #16]
 800552c:	693a      	ldr	r2, [r7, #16]
 800552e:	0151      	lsls	r1, r2, #5
 8005530:	697a      	ldr	r2, [r7, #20]
 8005532:	440a      	add	r2, r1
 8005534:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005538:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800553c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800553e:	693b      	ldr	r3, [r7, #16]
 8005540:	015a      	lsls	r2, r3, #5
 8005542:	697b      	ldr	r3, [r7, #20]
 8005544:	4413      	add	r3, r2
 8005546:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800554a:	691b      	ldr	r3, [r3, #16]
 800554c:	693a      	ldr	r2, [r7, #16]
 800554e:	0151      	lsls	r1, r2, #5
 8005550:	697a      	ldr	r2, [r7, #20]
 8005552:	440a      	add	r2, r1
 8005554:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005558:	0cdb      	lsrs	r3, r3, #19
 800555a:	04db      	lsls	r3, r3, #19
 800555c:	6113      	str	r3, [r2, #16]
 800555e:	e04e      	b.n	80055fe <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005560:	693b      	ldr	r3, [r7, #16]
 8005562:	015a      	lsls	r2, r3, #5
 8005564:	697b      	ldr	r3, [r7, #20]
 8005566:	4413      	add	r3, r2
 8005568:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800556c:	691b      	ldr	r3, [r3, #16]
 800556e:	693a      	ldr	r2, [r7, #16]
 8005570:	0151      	lsls	r1, r2, #5
 8005572:	697a      	ldr	r2, [r7, #20]
 8005574:	440a      	add	r2, r1
 8005576:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800557a:	0cdb      	lsrs	r3, r3, #19
 800557c:	04db      	lsls	r3, r3, #19
 800557e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005580:	693b      	ldr	r3, [r7, #16]
 8005582:	015a      	lsls	r2, r3, #5
 8005584:	697b      	ldr	r3, [r7, #20]
 8005586:	4413      	add	r3, r2
 8005588:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800558c:	691b      	ldr	r3, [r3, #16]
 800558e:	693a      	ldr	r2, [r7, #16]
 8005590:	0151      	lsls	r1, r2, #5
 8005592:	697a      	ldr	r2, [r7, #20]
 8005594:	440a      	add	r2, r1
 8005596:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800559a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800559e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80055a2:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 80055a4:	68bb      	ldr	r3, [r7, #8]
 80055a6:	695a      	ldr	r2, [r3, #20]
 80055a8:	68bb      	ldr	r3, [r7, #8]
 80055aa:	689b      	ldr	r3, [r3, #8]
 80055ac:	429a      	cmp	r2, r3
 80055ae:	d903      	bls.n	80055b8 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 80055b0:	68bb      	ldr	r3, [r7, #8]
 80055b2:	689a      	ldr	r2, [r3, #8]
 80055b4:	68bb      	ldr	r3, [r7, #8]
 80055b6:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80055b8:	693b      	ldr	r3, [r7, #16]
 80055ba:	015a      	lsls	r2, r3, #5
 80055bc:	697b      	ldr	r3, [r7, #20]
 80055be:	4413      	add	r3, r2
 80055c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055c4:	691b      	ldr	r3, [r3, #16]
 80055c6:	693a      	ldr	r2, [r7, #16]
 80055c8:	0151      	lsls	r1, r2, #5
 80055ca:	697a      	ldr	r2, [r7, #20]
 80055cc:	440a      	add	r2, r1
 80055ce:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80055d2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80055d6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80055d8:	693b      	ldr	r3, [r7, #16]
 80055da:	015a      	lsls	r2, r3, #5
 80055dc:	697b      	ldr	r3, [r7, #20]
 80055de:	4413      	add	r3, r2
 80055e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055e4:	691a      	ldr	r2, [r3, #16]
 80055e6:	68bb      	ldr	r3, [r7, #8]
 80055e8:	695b      	ldr	r3, [r3, #20]
 80055ea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80055ee:	6939      	ldr	r1, [r7, #16]
 80055f0:	0148      	lsls	r0, r1, #5
 80055f2:	6979      	ldr	r1, [r7, #20]
 80055f4:	4401      	add	r1, r0
 80055f6:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80055fa:	4313      	orrs	r3, r2
 80055fc:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80055fe:	79fb      	ldrb	r3, [r7, #7]
 8005600:	2b01      	cmp	r3, #1
 8005602:	d11e      	bne.n	8005642 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005604:	68bb      	ldr	r3, [r7, #8]
 8005606:	691b      	ldr	r3, [r3, #16]
 8005608:	2b00      	cmp	r3, #0
 800560a:	d009      	beq.n	8005620 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800560c:	693b      	ldr	r3, [r7, #16]
 800560e:	015a      	lsls	r2, r3, #5
 8005610:	697b      	ldr	r3, [r7, #20]
 8005612:	4413      	add	r3, r2
 8005614:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005618:	461a      	mov	r2, r3
 800561a:	68bb      	ldr	r3, [r7, #8]
 800561c:	691b      	ldr	r3, [r3, #16]
 800561e:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005620:	693b      	ldr	r3, [r7, #16]
 8005622:	015a      	lsls	r2, r3, #5
 8005624:	697b      	ldr	r3, [r7, #20]
 8005626:	4413      	add	r3, r2
 8005628:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	693a      	ldr	r2, [r7, #16]
 8005630:	0151      	lsls	r1, r2, #5
 8005632:	697a      	ldr	r2, [r7, #20]
 8005634:	440a      	add	r2, r1
 8005636:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800563a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800563e:	6013      	str	r3, [r2, #0]
 8005640:	e092      	b.n	8005768 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005642:	693b      	ldr	r3, [r7, #16]
 8005644:	015a      	lsls	r2, r3, #5
 8005646:	697b      	ldr	r3, [r7, #20]
 8005648:	4413      	add	r3, r2
 800564a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	693a      	ldr	r2, [r7, #16]
 8005652:	0151      	lsls	r1, r2, #5
 8005654:	697a      	ldr	r2, [r7, #20]
 8005656:	440a      	add	r2, r1
 8005658:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800565c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005660:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8005662:	68bb      	ldr	r3, [r7, #8]
 8005664:	695b      	ldr	r3, [r3, #20]
 8005666:	2b00      	cmp	r3, #0
 8005668:	d07e      	beq.n	8005768 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800566a:	697b      	ldr	r3, [r7, #20]
 800566c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005670:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005672:	68bb      	ldr	r3, [r7, #8]
 8005674:	781b      	ldrb	r3, [r3, #0]
 8005676:	f003 030f 	and.w	r3, r3, #15
 800567a:	2101      	movs	r1, #1
 800567c:	fa01 f303 	lsl.w	r3, r1, r3
 8005680:	6979      	ldr	r1, [r7, #20]
 8005682:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005686:	4313      	orrs	r3, r2
 8005688:	634b      	str	r3, [r1, #52]	; 0x34
 800568a:	e06d      	b.n	8005768 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800568c:	693b      	ldr	r3, [r7, #16]
 800568e:	015a      	lsls	r2, r3, #5
 8005690:	697b      	ldr	r3, [r7, #20]
 8005692:	4413      	add	r3, r2
 8005694:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005698:	691b      	ldr	r3, [r3, #16]
 800569a:	693a      	ldr	r2, [r7, #16]
 800569c:	0151      	lsls	r1, r2, #5
 800569e:	697a      	ldr	r2, [r7, #20]
 80056a0:	440a      	add	r2, r1
 80056a2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80056a6:	0cdb      	lsrs	r3, r3, #19
 80056a8:	04db      	lsls	r3, r3, #19
 80056aa:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80056ac:	693b      	ldr	r3, [r7, #16]
 80056ae:	015a      	lsls	r2, r3, #5
 80056b0:	697b      	ldr	r3, [r7, #20]
 80056b2:	4413      	add	r3, r2
 80056b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056b8:	691b      	ldr	r3, [r3, #16]
 80056ba:	693a      	ldr	r2, [r7, #16]
 80056bc:	0151      	lsls	r1, r2, #5
 80056be:	697a      	ldr	r2, [r7, #20]
 80056c0:	440a      	add	r2, r1
 80056c2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80056c6:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80056ca:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80056ce:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 80056d0:	68bb      	ldr	r3, [r7, #8]
 80056d2:	695b      	ldr	r3, [r3, #20]
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d003      	beq.n	80056e0 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 80056d8:	68bb      	ldr	r3, [r7, #8]
 80056da:	689a      	ldr	r2, [r3, #8]
 80056dc:	68bb      	ldr	r3, [r7, #8]
 80056de:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80056e0:	693b      	ldr	r3, [r7, #16]
 80056e2:	015a      	lsls	r2, r3, #5
 80056e4:	697b      	ldr	r3, [r7, #20]
 80056e6:	4413      	add	r3, r2
 80056e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056ec:	691b      	ldr	r3, [r3, #16]
 80056ee:	693a      	ldr	r2, [r7, #16]
 80056f0:	0151      	lsls	r1, r2, #5
 80056f2:	697a      	ldr	r2, [r7, #20]
 80056f4:	440a      	add	r2, r1
 80056f6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80056fa:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80056fe:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8005700:	693b      	ldr	r3, [r7, #16]
 8005702:	015a      	lsls	r2, r3, #5
 8005704:	697b      	ldr	r3, [r7, #20]
 8005706:	4413      	add	r3, r2
 8005708:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800570c:	691a      	ldr	r2, [r3, #16]
 800570e:	68bb      	ldr	r3, [r7, #8]
 8005710:	689b      	ldr	r3, [r3, #8]
 8005712:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005716:	6939      	ldr	r1, [r7, #16]
 8005718:	0148      	lsls	r0, r1, #5
 800571a:	6979      	ldr	r1, [r7, #20]
 800571c:	4401      	add	r1, r0
 800571e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005722:	4313      	orrs	r3, r2
 8005724:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8005726:	79fb      	ldrb	r3, [r7, #7]
 8005728:	2b01      	cmp	r3, #1
 800572a:	d10d      	bne.n	8005748 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800572c:	68bb      	ldr	r3, [r7, #8]
 800572e:	68db      	ldr	r3, [r3, #12]
 8005730:	2b00      	cmp	r3, #0
 8005732:	d009      	beq.n	8005748 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005734:	68bb      	ldr	r3, [r7, #8]
 8005736:	68d9      	ldr	r1, [r3, #12]
 8005738:	693b      	ldr	r3, [r7, #16]
 800573a:	015a      	lsls	r2, r3, #5
 800573c:	697b      	ldr	r3, [r7, #20]
 800573e:	4413      	add	r3, r2
 8005740:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005744:	460a      	mov	r2, r1
 8005746:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005748:	693b      	ldr	r3, [r7, #16]
 800574a:	015a      	lsls	r2, r3, #5
 800574c:	697b      	ldr	r3, [r7, #20]
 800574e:	4413      	add	r3, r2
 8005750:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	693a      	ldr	r2, [r7, #16]
 8005758:	0151      	lsls	r1, r2, #5
 800575a:	697a      	ldr	r2, [r7, #20]
 800575c:	440a      	add	r2, r1
 800575e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005762:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005766:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005768:	2300      	movs	r3, #0
}
 800576a:	4618      	mov	r0, r3
 800576c:	371c      	adds	r7, #28
 800576e:	46bd      	mov	sp, r7
 8005770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005774:	4770      	bx	lr

08005776 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005776:	b480      	push	{r7}
 8005778:	b089      	sub	sp, #36	; 0x24
 800577a:	af00      	add	r7, sp, #0
 800577c:	60f8      	str	r0, [r7, #12]
 800577e:	60b9      	str	r1, [r7, #8]
 8005780:	4611      	mov	r1, r2
 8005782:	461a      	mov	r2, r3
 8005784:	460b      	mov	r3, r1
 8005786:	71fb      	strb	r3, [r7, #7]
 8005788:	4613      	mov	r3, r2
 800578a:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8005790:	68bb      	ldr	r3, [r7, #8]
 8005792:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8005794:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005798:	2b00      	cmp	r3, #0
 800579a:	d123      	bne.n	80057e4 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800579c:	88bb      	ldrh	r3, [r7, #4]
 800579e:	3303      	adds	r3, #3
 80057a0:	089b      	lsrs	r3, r3, #2
 80057a2:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80057a4:	2300      	movs	r3, #0
 80057a6:	61bb      	str	r3, [r7, #24]
 80057a8:	e018      	b.n	80057dc <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80057aa:	79fb      	ldrb	r3, [r7, #7]
 80057ac:	031a      	lsls	r2, r3, #12
 80057ae:	697b      	ldr	r3, [r7, #20]
 80057b0:	4413      	add	r3, r2
 80057b2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80057b6:	461a      	mov	r2, r3
 80057b8:	69fb      	ldr	r3, [r7, #28]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	6013      	str	r3, [r2, #0]
      pSrc++;
 80057be:	69fb      	ldr	r3, [r7, #28]
 80057c0:	3301      	adds	r3, #1
 80057c2:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80057c4:	69fb      	ldr	r3, [r7, #28]
 80057c6:	3301      	adds	r3, #1
 80057c8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80057ca:	69fb      	ldr	r3, [r7, #28]
 80057cc:	3301      	adds	r3, #1
 80057ce:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80057d0:	69fb      	ldr	r3, [r7, #28]
 80057d2:	3301      	adds	r3, #1
 80057d4:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80057d6:	69bb      	ldr	r3, [r7, #24]
 80057d8:	3301      	adds	r3, #1
 80057da:	61bb      	str	r3, [r7, #24]
 80057dc:	69ba      	ldr	r2, [r7, #24]
 80057de:	693b      	ldr	r3, [r7, #16]
 80057e0:	429a      	cmp	r2, r3
 80057e2:	d3e2      	bcc.n	80057aa <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80057e4:	2300      	movs	r3, #0
}
 80057e6:	4618      	mov	r0, r3
 80057e8:	3724      	adds	r7, #36	; 0x24
 80057ea:	46bd      	mov	sp, r7
 80057ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f0:	4770      	bx	lr

080057f2 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80057f2:	b480      	push	{r7}
 80057f4:	b08b      	sub	sp, #44	; 0x2c
 80057f6:	af00      	add	r7, sp, #0
 80057f8:	60f8      	str	r0, [r7, #12]
 80057fa:	60b9      	str	r1, [r7, #8]
 80057fc:	4613      	mov	r3, r2
 80057fe:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8005804:	68bb      	ldr	r3, [r7, #8]
 8005806:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8005808:	88fb      	ldrh	r3, [r7, #6]
 800580a:	089b      	lsrs	r3, r3, #2
 800580c:	b29b      	uxth	r3, r3
 800580e:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8005810:	88fb      	ldrh	r3, [r7, #6]
 8005812:	f003 0303 	and.w	r3, r3, #3
 8005816:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8005818:	2300      	movs	r3, #0
 800581a:	623b      	str	r3, [r7, #32]
 800581c:	e014      	b.n	8005848 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800581e:	69bb      	ldr	r3, [r7, #24]
 8005820:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005824:	681a      	ldr	r2, [r3, #0]
 8005826:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005828:	601a      	str	r2, [r3, #0]
    pDest++;
 800582a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800582c:	3301      	adds	r3, #1
 800582e:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005830:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005832:	3301      	adds	r3, #1
 8005834:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005836:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005838:	3301      	adds	r3, #1
 800583a:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800583c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800583e:	3301      	adds	r3, #1
 8005840:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8005842:	6a3b      	ldr	r3, [r7, #32]
 8005844:	3301      	adds	r3, #1
 8005846:	623b      	str	r3, [r7, #32]
 8005848:	6a3a      	ldr	r2, [r7, #32]
 800584a:	697b      	ldr	r3, [r7, #20]
 800584c:	429a      	cmp	r2, r3
 800584e:	d3e6      	bcc.n	800581e <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8005850:	8bfb      	ldrh	r3, [r7, #30]
 8005852:	2b00      	cmp	r3, #0
 8005854:	d01e      	beq.n	8005894 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8005856:	2300      	movs	r3, #0
 8005858:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800585a:	69bb      	ldr	r3, [r7, #24]
 800585c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005860:	461a      	mov	r2, r3
 8005862:	f107 0310 	add.w	r3, r7, #16
 8005866:	6812      	ldr	r2, [r2, #0]
 8005868:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800586a:	693a      	ldr	r2, [r7, #16]
 800586c:	6a3b      	ldr	r3, [r7, #32]
 800586e:	b2db      	uxtb	r3, r3
 8005870:	00db      	lsls	r3, r3, #3
 8005872:	fa22 f303 	lsr.w	r3, r2, r3
 8005876:	b2da      	uxtb	r2, r3
 8005878:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800587a:	701a      	strb	r2, [r3, #0]
      i++;
 800587c:	6a3b      	ldr	r3, [r7, #32]
 800587e:	3301      	adds	r3, #1
 8005880:	623b      	str	r3, [r7, #32]
      pDest++;
 8005882:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005884:	3301      	adds	r3, #1
 8005886:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8005888:	8bfb      	ldrh	r3, [r7, #30]
 800588a:	3b01      	subs	r3, #1
 800588c:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800588e:	8bfb      	ldrh	r3, [r7, #30]
 8005890:	2b00      	cmp	r3, #0
 8005892:	d1ea      	bne.n	800586a <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8005894:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005896:	4618      	mov	r0, r3
 8005898:	372c      	adds	r7, #44	; 0x2c
 800589a:	46bd      	mov	sp, r7
 800589c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a0:	4770      	bx	lr

080058a2 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80058a2:	b480      	push	{r7}
 80058a4:	b085      	sub	sp, #20
 80058a6:	af00      	add	r7, sp, #0
 80058a8:	6078      	str	r0, [r7, #4]
 80058aa:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80058b0:	683b      	ldr	r3, [r7, #0]
 80058b2:	781b      	ldrb	r3, [r3, #0]
 80058b4:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80058b6:	683b      	ldr	r3, [r7, #0]
 80058b8:	785b      	ldrb	r3, [r3, #1]
 80058ba:	2b01      	cmp	r3, #1
 80058bc:	d12c      	bne.n	8005918 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80058be:	68bb      	ldr	r3, [r7, #8]
 80058c0:	015a      	lsls	r2, r3, #5
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	4413      	add	r3, r2
 80058c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	db12      	blt.n	80058f6 <USB_EPSetStall+0x54>
 80058d0:	68bb      	ldr	r3, [r7, #8]
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d00f      	beq.n	80058f6 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80058d6:	68bb      	ldr	r3, [r7, #8]
 80058d8:	015a      	lsls	r2, r3, #5
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	4413      	add	r3, r2
 80058de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	68ba      	ldr	r2, [r7, #8]
 80058e6:	0151      	lsls	r1, r2, #5
 80058e8:	68fa      	ldr	r2, [r7, #12]
 80058ea:	440a      	add	r2, r1
 80058ec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80058f0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80058f4:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80058f6:	68bb      	ldr	r3, [r7, #8]
 80058f8:	015a      	lsls	r2, r3, #5
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	4413      	add	r3, r2
 80058fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	68ba      	ldr	r2, [r7, #8]
 8005906:	0151      	lsls	r1, r2, #5
 8005908:	68fa      	ldr	r2, [r7, #12]
 800590a:	440a      	add	r2, r1
 800590c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005910:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005914:	6013      	str	r3, [r2, #0]
 8005916:	e02b      	b.n	8005970 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005918:	68bb      	ldr	r3, [r7, #8]
 800591a:	015a      	lsls	r2, r3, #5
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	4413      	add	r3, r2
 8005920:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	2b00      	cmp	r3, #0
 8005928:	db12      	blt.n	8005950 <USB_EPSetStall+0xae>
 800592a:	68bb      	ldr	r3, [r7, #8]
 800592c:	2b00      	cmp	r3, #0
 800592e:	d00f      	beq.n	8005950 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8005930:	68bb      	ldr	r3, [r7, #8]
 8005932:	015a      	lsls	r2, r3, #5
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	4413      	add	r3, r2
 8005938:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	68ba      	ldr	r2, [r7, #8]
 8005940:	0151      	lsls	r1, r2, #5
 8005942:	68fa      	ldr	r2, [r7, #12]
 8005944:	440a      	add	r2, r1
 8005946:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800594a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800594e:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8005950:	68bb      	ldr	r3, [r7, #8]
 8005952:	015a      	lsls	r2, r3, #5
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	4413      	add	r3, r2
 8005958:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	68ba      	ldr	r2, [r7, #8]
 8005960:	0151      	lsls	r1, r2, #5
 8005962:	68fa      	ldr	r2, [r7, #12]
 8005964:	440a      	add	r2, r1
 8005966:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800596a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800596e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005970:	2300      	movs	r3, #0
}
 8005972:	4618      	mov	r0, r3
 8005974:	3714      	adds	r7, #20
 8005976:	46bd      	mov	sp, r7
 8005978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800597c:	4770      	bx	lr

0800597e <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800597e:	b480      	push	{r7}
 8005980:	b085      	sub	sp, #20
 8005982:	af00      	add	r7, sp, #0
 8005984:	6078      	str	r0, [r7, #4]
 8005986:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800598c:	683b      	ldr	r3, [r7, #0]
 800598e:	781b      	ldrb	r3, [r3, #0]
 8005990:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005992:	683b      	ldr	r3, [r7, #0]
 8005994:	785b      	ldrb	r3, [r3, #1]
 8005996:	2b01      	cmp	r3, #1
 8005998:	d128      	bne.n	80059ec <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800599a:	68bb      	ldr	r3, [r7, #8]
 800599c:	015a      	lsls	r2, r3, #5
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	4413      	add	r3, r2
 80059a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	68ba      	ldr	r2, [r7, #8]
 80059aa:	0151      	lsls	r1, r2, #5
 80059ac:	68fa      	ldr	r2, [r7, #12]
 80059ae:	440a      	add	r2, r1
 80059b0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80059b4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80059b8:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80059ba:	683b      	ldr	r3, [r7, #0]
 80059bc:	78db      	ldrb	r3, [r3, #3]
 80059be:	2b03      	cmp	r3, #3
 80059c0:	d003      	beq.n	80059ca <USB_EPClearStall+0x4c>
 80059c2:	683b      	ldr	r3, [r7, #0]
 80059c4:	78db      	ldrb	r3, [r3, #3]
 80059c6:	2b02      	cmp	r3, #2
 80059c8:	d138      	bne.n	8005a3c <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80059ca:	68bb      	ldr	r3, [r7, #8]
 80059cc:	015a      	lsls	r2, r3, #5
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	4413      	add	r3, r2
 80059d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	68ba      	ldr	r2, [r7, #8]
 80059da:	0151      	lsls	r1, r2, #5
 80059dc:	68fa      	ldr	r2, [r7, #12]
 80059de:	440a      	add	r2, r1
 80059e0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80059e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80059e8:	6013      	str	r3, [r2, #0]
 80059ea:	e027      	b.n	8005a3c <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80059ec:	68bb      	ldr	r3, [r7, #8]
 80059ee:	015a      	lsls	r2, r3, #5
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	4413      	add	r3, r2
 80059f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	68ba      	ldr	r2, [r7, #8]
 80059fc:	0151      	lsls	r1, r2, #5
 80059fe:	68fa      	ldr	r2, [r7, #12]
 8005a00:	440a      	add	r2, r1
 8005a02:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005a06:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005a0a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005a0c:	683b      	ldr	r3, [r7, #0]
 8005a0e:	78db      	ldrb	r3, [r3, #3]
 8005a10:	2b03      	cmp	r3, #3
 8005a12:	d003      	beq.n	8005a1c <USB_EPClearStall+0x9e>
 8005a14:	683b      	ldr	r3, [r7, #0]
 8005a16:	78db      	ldrb	r3, [r3, #3]
 8005a18:	2b02      	cmp	r3, #2
 8005a1a:	d10f      	bne.n	8005a3c <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005a1c:	68bb      	ldr	r3, [r7, #8]
 8005a1e:	015a      	lsls	r2, r3, #5
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	4413      	add	r3, r2
 8005a24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	68ba      	ldr	r2, [r7, #8]
 8005a2c:	0151      	lsls	r1, r2, #5
 8005a2e:	68fa      	ldr	r2, [r7, #12]
 8005a30:	440a      	add	r2, r1
 8005a32:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005a36:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005a3a:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8005a3c:	2300      	movs	r3, #0
}
 8005a3e:	4618      	mov	r0, r3
 8005a40:	3714      	adds	r7, #20
 8005a42:	46bd      	mov	sp, r7
 8005a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a48:	4770      	bx	lr

08005a4a <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8005a4a:	b480      	push	{r7}
 8005a4c:	b085      	sub	sp, #20
 8005a4e:	af00      	add	r7, sp, #0
 8005a50:	6078      	str	r0, [r7, #4]
 8005a52:	460b      	mov	r3, r1
 8005a54:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	68fa      	ldr	r2, [r7, #12]
 8005a64:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005a68:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8005a6c:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a74:	681a      	ldr	r2, [r3, #0]
 8005a76:	78fb      	ldrb	r3, [r7, #3]
 8005a78:	011b      	lsls	r3, r3, #4
 8005a7a:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8005a7e:	68f9      	ldr	r1, [r7, #12]
 8005a80:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005a84:	4313      	orrs	r3, r2
 8005a86:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8005a88:	2300      	movs	r3, #0
}
 8005a8a:	4618      	mov	r0, r3
 8005a8c:	3714      	adds	r7, #20
 8005a8e:	46bd      	mov	sp, r7
 8005a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a94:	4770      	bx	lr

08005a96 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005a96:	b480      	push	{r7}
 8005a98:	b085      	sub	sp, #20
 8005a9a:	af00      	add	r7, sp, #0
 8005a9c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	68fa      	ldr	r2, [r7, #12]
 8005aac:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005ab0:	f023 0303 	bic.w	r3, r3, #3
 8005ab4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005abc:	685b      	ldr	r3, [r3, #4]
 8005abe:	68fa      	ldr	r2, [r7, #12]
 8005ac0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005ac4:	f023 0302 	bic.w	r3, r3, #2
 8005ac8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005aca:	2300      	movs	r3, #0
}
 8005acc:	4618      	mov	r0, r3
 8005ace:	3714      	adds	r7, #20
 8005ad0:	46bd      	mov	sp, r7
 8005ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad6:	4770      	bx	lr

08005ad8 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005ad8:	b480      	push	{r7}
 8005ada:	b085      	sub	sp, #20
 8005adc:	af00      	add	r7, sp, #0
 8005ade:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	68fa      	ldr	r2, [r7, #12]
 8005aee:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005af2:	f023 0303 	bic.w	r3, r3, #3
 8005af6:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005afe:	685b      	ldr	r3, [r3, #4]
 8005b00:	68fa      	ldr	r2, [r7, #12]
 8005b02:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005b06:	f043 0302 	orr.w	r3, r3, #2
 8005b0a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005b0c:	2300      	movs	r3, #0
}
 8005b0e:	4618      	mov	r0, r3
 8005b10:	3714      	adds	r7, #20
 8005b12:	46bd      	mov	sp, r7
 8005b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b18:	4770      	bx	lr

08005b1a <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8005b1a:	b480      	push	{r7}
 8005b1c:	b085      	sub	sp, #20
 8005b1e:	af00      	add	r7, sp, #0
 8005b20:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	695b      	ldr	r3, [r3, #20]
 8005b26:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	699b      	ldr	r3, [r3, #24]
 8005b2c:	68fa      	ldr	r2, [r7, #12]
 8005b2e:	4013      	ands	r3, r2
 8005b30:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005b32:	68fb      	ldr	r3, [r7, #12]
}
 8005b34:	4618      	mov	r0, r3
 8005b36:	3714      	adds	r7, #20
 8005b38:	46bd      	mov	sp, r7
 8005b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b3e:	4770      	bx	lr

08005b40 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005b40:	b480      	push	{r7}
 8005b42:	b085      	sub	sp, #20
 8005b44:	af00      	add	r7, sp, #0
 8005b46:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b52:	699b      	ldr	r3, [r3, #24]
 8005b54:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b5c:	69db      	ldr	r3, [r3, #28]
 8005b5e:	68ba      	ldr	r2, [r7, #8]
 8005b60:	4013      	ands	r3, r2
 8005b62:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8005b64:	68bb      	ldr	r3, [r7, #8]
 8005b66:	0c1b      	lsrs	r3, r3, #16
}
 8005b68:	4618      	mov	r0, r3
 8005b6a:	3714      	adds	r7, #20
 8005b6c:	46bd      	mov	sp, r7
 8005b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b72:	4770      	bx	lr

08005b74 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005b74:	b480      	push	{r7}
 8005b76:	b085      	sub	sp, #20
 8005b78:	af00      	add	r7, sp, #0
 8005b7a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b86:	699b      	ldr	r3, [r3, #24]
 8005b88:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b90:	69db      	ldr	r3, [r3, #28]
 8005b92:	68ba      	ldr	r2, [r7, #8]
 8005b94:	4013      	ands	r3, r2
 8005b96:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8005b98:	68bb      	ldr	r3, [r7, #8]
 8005b9a:	b29b      	uxth	r3, r3
}
 8005b9c:	4618      	mov	r0, r3
 8005b9e:	3714      	adds	r7, #20
 8005ba0:	46bd      	mov	sp, r7
 8005ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba6:	4770      	bx	lr

08005ba8 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005ba8:	b480      	push	{r7}
 8005baa:	b085      	sub	sp, #20
 8005bac:	af00      	add	r7, sp, #0
 8005bae:	6078      	str	r0, [r7, #4]
 8005bb0:	460b      	mov	r3, r1
 8005bb2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8005bb8:	78fb      	ldrb	r3, [r7, #3]
 8005bba:	015a      	lsls	r2, r3, #5
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	4413      	add	r3, r2
 8005bc0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005bc4:	689b      	ldr	r3, [r3, #8]
 8005bc6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005bce:	695b      	ldr	r3, [r3, #20]
 8005bd0:	68ba      	ldr	r2, [r7, #8]
 8005bd2:	4013      	ands	r3, r2
 8005bd4:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005bd6:	68bb      	ldr	r3, [r7, #8]
}
 8005bd8:	4618      	mov	r0, r3
 8005bda:	3714      	adds	r7, #20
 8005bdc:	46bd      	mov	sp, r7
 8005bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be2:	4770      	bx	lr

08005be4 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005be4:	b480      	push	{r7}
 8005be6:	b087      	sub	sp, #28
 8005be8:	af00      	add	r7, sp, #0
 8005bea:	6078      	str	r0, [r7, #4]
 8005bec:	460b      	mov	r3, r1
 8005bee:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8005bf4:	697b      	ldr	r3, [r7, #20]
 8005bf6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005bfa:	691b      	ldr	r3, [r3, #16]
 8005bfc:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8005bfe:	697b      	ldr	r3, [r7, #20]
 8005c00:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c06:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8005c08:	78fb      	ldrb	r3, [r7, #3]
 8005c0a:	f003 030f 	and.w	r3, r3, #15
 8005c0e:	68fa      	ldr	r2, [r7, #12]
 8005c10:	fa22 f303 	lsr.w	r3, r2, r3
 8005c14:	01db      	lsls	r3, r3, #7
 8005c16:	b2db      	uxtb	r3, r3
 8005c18:	693a      	ldr	r2, [r7, #16]
 8005c1a:	4313      	orrs	r3, r2
 8005c1c:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8005c1e:	78fb      	ldrb	r3, [r7, #3]
 8005c20:	015a      	lsls	r2, r3, #5
 8005c22:	697b      	ldr	r3, [r7, #20]
 8005c24:	4413      	add	r3, r2
 8005c26:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c2a:	689b      	ldr	r3, [r3, #8]
 8005c2c:	693a      	ldr	r2, [r7, #16]
 8005c2e:	4013      	ands	r3, r2
 8005c30:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005c32:	68bb      	ldr	r3, [r7, #8]
}
 8005c34:	4618      	mov	r0, r3
 8005c36:	371c      	adds	r7, #28
 8005c38:	46bd      	mov	sp, r7
 8005c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c3e:	4770      	bx	lr

08005c40 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005c40:	b480      	push	{r7}
 8005c42:	b083      	sub	sp, #12
 8005c44:	af00      	add	r7, sp, #0
 8005c46:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	695b      	ldr	r3, [r3, #20]
 8005c4c:	f003 0301 	and.w	r3, r3, #1
}
 8005c50:	4618      	mov	r0, r3
 8005c52:	370c      	adds	r7, #12
 8005c54:	46bd      	mov	sp, r7
 8005c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c5a:	4770      	bx	lr

08005c5c <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8005c5c:	b480      	push	{r7}
 8005c5e:	b085      	sub	sp, #20
 8005c60:	af00      	add	r7, sp, #0
 8005c62:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	68fa      	ldr	r2, [r7, #12]
 8005c72:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005c76:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8005c7a:	f023 0307 	bic.w	r3, r3, #7
 8005c7e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c86:	685b      	ldr	r3, [r3, #4]
 8005c88:	68fa      	ldr	r2, [r7, #12]
 8005c8a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005c8e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005c92:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005c94:	2300      	movs	r3, #0
}
 8005c96:	4618      	mov	r0, r3
 8005c98:	3714      	adds	r7, #20
 8005c9a:	46bd      	mov	sp, r7
 8005c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca0:	4770      	bx	lr
	...

08005ca4 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8005ca4:	b480      	push	{r7}
 8005ca6:	b087      	sub	sp, #28
 8005ca8:	af00      	add	r7, sp, #0
 8005caa:	60f8      	str	r0, [r7, #12]
 8005cac:	460b      	mov	r3, r1
 8005cae:	607a      	str	r2, [r7, #4]
 8005cb0:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	333c      	adds	r3, #60	; 0x3c
 8005cba:	3304      	adds	r3, #4
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8005cc0:	693b      	ldr	r3, [r7, #16]
 8005cc2:	4a26      	ldr	r2, [pc, #152]	; (8005d5c <USB_EP0_OutStart+0xb8>)
 8005cc4:	4293      	cmp	r3, r2
 8005cc6:	d90a      	bls.n	8005cde <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005cc8:	697b      	ldr	r3, [r7, #20]
 8005cca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005cd4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005cd8:	d101      	bne.n	8005cde <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8005cda:	2300      	movs	r3, #0
 8005cdc:	e037      	b.n	8005d4e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8005cde:	697b      	ldr	r3, [r7, #20]
 8005ce0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ce4:	461a      	mov	r2, r3
 8005ce6:	2300      	movs	r3, #0
 8005ce8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005cea:	697b      	ldr	r3, [r7, #20]
 8005cec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005cf0:	691b      	ldr	r3, [r3, #16]
 8005cf2:	697a      	ldr	r2, [r7, #20]
 8005cf4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005cf8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005cfc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8005cfe:	697b      	ldr	r3, [r7, #20]
 8005d00:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d04:	691b      	ldr	r3, [r3, #16]
 8005d06:	697a      	ldr	r2, [r7, #20]
 8005d08:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005d0c:	f043 0318 	orr.w	r3, r3, #24
 8005d10:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8005d12:	697b      	ldr	r3, [r7, #20]
 8005d14:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d18:	691b      	ldr	r3, [r3, #16]
 8005d1a:	697a      	ldr	r2, [r7, #20]
 8005d1c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005d20:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8005d24:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8005d26:	7afb      	ldrb	r3, [r7, #11]
 8005d28:	2b01      	cmp	r3, #1
 8005d2a:	d10f      	bne.n	8005d4c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8005d2c:	697b      	ldr	r3, [r7, #20]
 8005d2e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d32:	461a      	mov	r2, r3
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8005d38:	697b      	ldr	r3, [r7, #20]
 8005d3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	697a      	ldr	r2, [r7, #20]
 8005d42:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005d46:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8005d4a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005d4c:	2300      	movs	r3, #0
}
 8005d4e:	4618      	mov	r0, r3
 8005d50:	371c      	adds	r7, #28
 8005d52:	46bd      	mov	sp, r7
 8005d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d58:	4770      	bx	lr
 8005d5a:	bf00      	nop
 8005d5c:	4f54300a 	.word	0x4f54300a

08005d60 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005d60:	b480      	push	{r7}
 8005d62:	b085      	sub	sp, #20
 8005d64:	af00      	add	r7, sp, #0
 8005d66:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005d68:	2300      	movs	r3, #0
 8005d6a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	3301      	adds	r3, #1
 8005d70:	60fb      	str	r3, [r7, #12]
 8005d72:	4a13      	ldr	r2, [pc, #76]	; (8005dc0 <USB_CoreReset+0x60>)
 8005d74:	4293      	cmp	r3, r2
 8005d76:	d901      	bls.n	8005d7c <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 8005d78:	2303      	movs	r3, #3
 8005d7a:	e01a      	b.n	8005db2 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	691b      	ldr	r3, [r3, #16]
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	daf3      	bge.n	8005d6c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005d84:	2300      	movs	r3, #0
 8005d86:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	691b      	ldr	r3, [r3, #16]
 8005d8c:	f043 0201 	orr.w	r2, r3, #1
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	3301      	adds	r3, #1
 8005d98:	60fb      	str	r3, [r7, #12]
 8005d9a:	4a09      	ldr	r2, [pc, #36]	; (8005dc0 <USB_CoreReset+0x60>)
 8005d9c:	4293      	cmp	r3, r2
 8005d9e:	d901      	bls.n	8005da4 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 8005da0:	2303      	movs	r3, #3
 8005da2:	e006      	b.n	8005db2 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	691b      	ldr	r3, [r3, #16]
 8005da8:	f003 0301 	and.w	r3, r3, #1
 8005dac:	2b01      	cmp	r3, #1
 8005dae:	d0f1      	beq.n	8005d94 <USB_CoreReset+0x34>

  return HAL_OK;
 8005db0:	2300      	movs	r3, #0
}
 8005db2:	4618      	mov	r0, r3
 8005db4:	3714      	adds	r7, #20
 8005db6:	46bd      	mov	sp, r7
 8005db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dbc:	4770      	bx	lr
 8005dbe:	bf00      	nop
 8005dc0:	00030d40 	.word	0x00030d40

08005dc4 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005dc4:	b580      	push	{r7, lr}
 8005dc6:	b084      	sub	sp, #16
 8005dc8:	af00      	add	r7, sp, #0
 8005dca:	6078      	str	r0, [r7, #4]
 8005dcc:	460b      	mov	r3, r1
 8005dce:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8005dd0:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8005dd4:	f002 f9a6 	bl	8008124 <USBD_static_malloc>
 8005dd8:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d105      	bne.n	8005dec <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	2200      	movs	r2, #0
 8005de4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8005de8:	2302      	movs	r3, #2
 8005dea:	e066      	b.n	8005eba <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	68fa      	ldr	r2, [r7, #12]
 8005df0:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	7c1b      	ldrb	r3, [r3, #16]
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d119      	bne.n	8005e30 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8005dfc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005e00:	2202      	movs	r2, #2
 8005e02:	2181      	movs	r1, #129	; 0x81
 8005e04:	6878      	ldr	r0, [r7, #4]
 8005e06:	f002 f81c 	bl	8007e42 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	2201      	movs	r2, #1
 8005e0e:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8005e10:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005e14:	2202      	movs	r2, #2
 8005e16:	2101      	movs	r1, #1
 8005e18:	6878      	ldr	r0, [r7, #4]
 8005e1a:	f002 f812 	bl	8007e42 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	2201      	movs	r2, #1
 8005e22:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	2210      	movs	r2, #16
 8005e2a:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 8005e2e:	e016      	b.n	8005e5e <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8005e30:	2340      	movs	r3, #64	; 0x40
 8005e32:	2202      	movs	r2, #2
 8005e34:	2181      	movs	r1, #129	; 0x81
 8005e36:	6878      	ldr	r0, [r7, #4]
 8005e38:	f002 f803 	bl	8007e42 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	2201      	movs	r2, #1
 8005e40:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8005e42:	2340      	movs	r3, #64	; 0x40
 8005e44:	2202      	movs	r2, #2
 8005e46:	2101      	movs	r1, #1
 8005e48:	6878      	ldr	r0, [r7, #4]
 8005e4a:	f001 fffa 	bl	8007e42 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	2201      	movs	r2, #1
 8005e52:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	2210      	movs	r2, #16
 8005e5a:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8005e5e:	2308      	movs	r3, #8
 8005e60:	2203      	movs	r2, #3
 8005e62:	2182      	movs	r1, #130	; 0x82
 8005e64:	6878      	ldr	r0, [r7, #4]
 8005e66:	f001 ffec 	bl	8007e42 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	2201      	movs	r2, #1
 8005e6e:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	2200      	movs	r2, #0
 8005e80:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	2200      	movs	r2, #0
 8005e88:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	7c1b      	ldrb	r3, [r3, #16]
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d109      	bne.n	8005ea8 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005e9a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005e9e:	2101      	movs	r1, #1
 8005ea0:	6878      	ldr	r0, [r7, #4]
 8005ea2:	f002 f8bd 	bl	8008020 <USBD_LL_PrepareReceive>
 8005ea6:	e007      	b.n	8005eb8 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005eae:	2340      	movs	r3, #64	; 0x40
 8005eb0:	2101      	movs	r1, #1
 8005eb2:	6878      	ldr	r0, [r7, #4]
 8005eb4:	f002 f8b4 	bl	8008020 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8005eb8:	2300      	movs	r3, #0
}
 8005eba:	4618      	mov	r0, r3
 8005ebc:	3710      	adds	r7, #16
 8005ebe:	46bd      	mov	sp, r7
 8005ec0:	bd80      	pop	{r7, pc}

08005ec2 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005ec2:	b580      	push	{r7, lr}
 8005ec4:	b082      	sub	sp, #8
 8005ec6:	af00      	add	r7, sp, #0
 8005ec8:	6078      	str	r0, [r7, #4]
 8005eca:	460b      	mov	r3, r1
 8005ecc:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8005ece:	2181      	movs	r1, #129	; 0x81
 8005ed0:	6878      	ldr	r0, [r7, #4]
 8005ed2:	f001 ffdc 	bl	8007e8e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	2200      	movs	r2, #0
 8005eda:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8005edc:	2101      	movs	r1, #1
 8005ede:	6878      	ldr	r0, [r7, #4]
 8005ee0:	f001 ffd5 	bl	8007e8e <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	2200      	movs	r2, #0
 8005ee8:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8005eec:	2182      	movs	r1, #130	; 0x82
 8005eee:	6878      	ldr	r0, [r7, #4]
 8005ef0:	f001 ffcd 	bl	8007e8e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	2200      	movs	r2, #0
 8005ef8:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	2200      	movs	r2, #0
 8005f00:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d00e      	beq.n	8005f2c <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005f14:	685b      	ldr	r3, [r3, #4]
 8005f16:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005f1e:	4618      	mov	r0, r3
 8005f20:	f002 f90e 	bl	8008140 <USBD_static_free>
    pdev->pClassData = NULL;
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	2200      	movs	r2, #0
 8005f28:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8005f2c:	2300      	movs	r3, #0
}
 8005f2e:	4618      	mov	r0, r3
 8005f30:	3708      	adds	r7, #8
 8005f32:	46bd      	mov	sp, r7
 8005f34:	bd80      	pop	{r7, pc}
	...

08005f38 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8005f38:	b580      	push	{r7, lr}
 8005f3a:	b086      	sub	sp, #24
 8005f3c:	af00      	add	r7, sp, #0
 8005f3e:	6078      	str	r0, [r7, #4]
 8005f40:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005f48:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8005f4a:	2300      	movs	r3, #0
 8005f4c:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8005f4e:	2300      	movs	r3, #0
 8005f50:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8005f52:	2300      	movs	r3, #0
 8005f54:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8005f56:	693b      	ldr	r3, [r7, #16]
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d101      	bne.n	8005f60 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 8005f5c:	2303      	movs	r3, #3
 8005f5e:	e0af      	b.n	80060c0 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005f60:	683b      	ldr	r3, [r7, #0]
 8005f62:	781b      	ldrb	r3, [r3, #0]
 8005f64:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d03f      	beq.n	8005fec <USBD_CDC_Setup+0xb4>
 8005f6c:	2b20      	cmp	r3, #32
 8005f6e:	f040 809f 	bne.w	80060b0 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8005f72:	683b      	ldr	r3, [r7, #0]
 8005f74:	88db      	ldrh	r3, [r3, #6]
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d02e      	beq.n	8005fd8 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8005f7a:	683b      	ldr	r3, [r7, #0]
 8005f7c:	781b      	ldrb	r3, [r3, #0]
 8005f7e:	b25b      	sxtb	r3, r3
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	da16      	bge.n	8005fb2 <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005f8a:	689b      	ldr	r3, [r3, #8]
 8005f8c:	683a      	ldr	r2, [r7, #0]
 8005f8e:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 8005f90:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005f92:	683a      	ldr	r2, [r7, #0]
 8005f94:	88d2      	ldrh	r2, [r2, #6]
 8005f96:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8005f98:	683b      	ldr	r3, [r7, #0]
 8005f9a:	88db      	ldrh	r3, [r3, #6]
 8005f9c:	2b07      	cmp	r3, #7
 8005f9e:	bf28      	it	cs
 8005fa0:	2307      	movcs	r3, #7
 8005fa2:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8005fa4:	693b      	ldr	r3, [r7, #16]
 8005fa6:	89fa      	ldrh	r2, [r7, #14]
 8005fa8:	4619      	mov	r1, r3
 8005faa:	6878      	ldr	r0, [r7, #4]
 8005fac:	f001 fb13 	bl	80075d6 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 8005fb0:	e085      	b.n	80060be <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 8005fb2:	683b      	ldr	r3, [r7, #0]
 8005fb4:	785a      	ldrb	r2, [r3, #1]
 8005fb6:	693b      	ldr	r3, [r7, #16]
 8005fb8:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8005fbc:	683b      	ldr	r3, [r7, #0]
 8005fbe:	88db      	ldrh	r3, [r3, #6]
 8005fc0:	b2da      	uxtb	r2, r3
 8005fc2:	693b      	ldr	r3, [r7, #16]
 8005fc4:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8005fc8:	6939      	ldr	r1, [r7, #16]
 8005fca:	683b      	ldr	r3, [r7, #0]
 8005fcc:	88db      	ldrh	r3, [r3, #6]
 8005fce:	461a      	mov	r2, r3
 8005fd0:	6878      	ldr	r0, [r7, #4]
 8005fd2:	f001 fb2c 	bl	800762e <USBD_CtlPrepareRx>
      break;
 8005fd6:	e072      	b.n	80060be <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005fde:	689b      	ldr	r3, [r3, #8]
 8005fe0:	683a      	ldr	r2, [r7, #0]
 8005fe2:	7850      	ldrb	r0, [r2, #1]
 8005fe4:	2200      	movs	r2, #0
 8005fe6:	6839      	ldr	r1, [r7, #0]
 8005fe8:	4798      	blx	r3
      break;
 8005fea:	e068      	b.n	80060be <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005fec:	683b      	ldr	r3, [r7, #0]
 8005fee:	785b      	ldrb	r3, [r3, #1]
 8005ff0:	2b0b      	cmp	r3, #11
 8005ff2:	d852      	bhi.n	800609a <USBD_CDC_Setup+0x162>
 8005ff4:	a201      	add	r2, pc, #4	; (adr r2, 8005ffc <USBD_CDC_Setup+0xc4>)
 8005ff6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ffa:	bf00      	nop
 8005ffc:	0800602d 	.word	0x0800602d
 8006000:	080060a9 	.word	0x080060a9
 8006004:	0800609b 	.word	0x0800609b
 8006008:	0800609b 	.word	0x0800609b
 800600c:	0800609b 	.word	0x0800609b
 8006010:	0800609b 	.word	0x0800609b
 8006014:	0800609b 	.word	0x0800609b
 8006018:	0800609b 	.word	0x0800609b
 800601c:	0800609b 	.word	0x0800609b
 8006020:	0800609b 	.word	0x0800609b
 8006024:	08006057 	.word	0x08006057
 8006028:	08006081 	.word	0x08006081
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006032:	b2db      	uxtb	r3, r3
 8006034:	2b03      	cmp	r3, #3
 8006036:	d107      	bne.n	8006048 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8006038:	f107 030a 	add.w	r3, r7, #10
 800603c:	2202      	movs	r2, #2
 800603e:	4619      	mov	r1, r3
 8006040:	6878      	ldr	r0, [r7, #4]
 8006042:	f001 fac8 	bl	80075d6 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006046:	e032      	b.n	80060ae <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8006048:	6839      	ldr	r1, [r7, #0]
 800604a:	6878      	ldr	r0, [r7, #4]
 800604c:	f001 fa52 	bl	80074f4 <USBD_CtlError>
            ret = USBD_FAIL;
 8006050:	2303      	movs	r3, #3
 8006052:	75fb      	strb	r3, [r7, #23]
          break;
 8006054:	e02b      	b.n	80060ae <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800605c:	b2db      	uxtb	r3, r3
 800605e:	2b03      	cmp	r3, #3
 8006060:	d107      	bne.n	8006072 <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8006062:	f107 030d 	add.w	r3, r7, #13
 8006066:	2201      	movs	r2, #1
 8006068:	4619      	mov	r1, r3
 800606a:	6878      	ldr	r0, [r7, #4]
 800606c:	f001 fab3 	bl	80075d6 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006070:	e01d      	b.n	80060ae <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8006072:	6839      	ldr	r1, [r7, #0]
 8006074:	6878      	ldr	r0, [r7, #4]
 8006076:	f001 fa3d 	bl	80074f4 <USBD_CtlError>
            ret = USBD_FAIL;
 800607a:	2303      	movs	r3, #3
 800607c:	75fb      	strb	r3, [r7, #23]
          break;
 800607e:	e016      	b.n	80060ae <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006086:	b2db      	uxtb	r3, r3
 8006088:	2b03      	cmp	r3, #3
 800608a:	d00f      	beq.n	80060ac <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 800608c:	6839      	ldr	r1, [r7, #0]
 800608e:	6878      	ldr	r0, [r7, #4]
 8006090:	f001 fa30 	bl	80074f4 <USBD_CtlError>
            ret = USBD_FAIL;
 8006094:	2303      	movs	r3, #3
 8006096:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8006098:	e008      	b.n	80060ac <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800609a:	6839      	ldr	r1, [r7, #0]
 800609c:	6878      	ldr	r0, [r7, #4]
 800609e:	f001 fa29 	bl	80074f4 <USBD_CtlError>
          ret = USBD_FAIL;
 80060a2:	2303      	movs	r3, #3
 80060a4:	75fb      	strb	r3, [r7, #23]
          break;
 80060a6:	e002      	b.n	80060ae <USBD_CDC_Setup+0x176>
          break;
 80060a8:	bf00      	nop
 80060aa:	e008      	b.n	80060be <USBD_CDC_Setup+0x186>
          break;
 80060ac:	bf00      	nop
      }
      break;
 80060ae:	e006      	b.n	80060be <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 80060b0:	6839      	ldr	r1, [r7, #0]
 80060b2:	6878      	ldr	r0, [r7, #4]
 80060b4:	f001 fa1e 	bl	80074f4 <USBD_CtlError>
      ret = USBD_FAIL;
 80060b8:	2303      	movs	r3, #3
 80060ba:	75fb      	strb	r3, [r7, #23]
      break;
 80060bc:	bf00      	nop
  }

  return (uint8_t)ret;
 80060be:	7dfb      	ldrb	r3, [r7, #23]
}
 80060c0:	4618      	mov	r0, r3
 80060c2:	3718      	adds	r7, #24
 80060c4:	46bd      	mov	sp, r7
 80060c6:	bd80      	pop	{r7, pc}

080060c8 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80060c8:	b580      	push	{r7, lr}
 80060ca:	b084      	sub	sp, #16
 80060cc:	af00      	add	r7, sp, #0
 80060ce:	6078      	str	r0, [r7, #4]
 80060d0:	460b      	mov	r3, r1
 80060d2:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80060da:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d101      	bne.n	80060ea <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80060e6:	2303      	movs	r3, #3
 80060e8:	e04f      	b.n	800618a <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80060f0:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 80060f2:	78fa      	ldrb	r2, [r7, #3]
 80060f4:	6879      	ldr	r1, [r7, #4]
 80060f6:	4613      	mov	r3, r2
 80060f8:	009b      	lsls	r3, r3, #2
 80060fa:	4413      	add	r3, r2
 80060fc:	009b      	lsls	r3, r3, #2
 80060fe:	440b      	add	r3, r1
 8006100:	3318      	adds	r3, #24
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	2b00      	cmp	r3, #0
 8006106:	d029      	beq.n	800615c <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8006108:	78fa      	ldrb	r2, [r7, #3]
 800610a:	6879      	ldr	r1, [r7, #4]
 800610c:	4613      	mov	r3, r2
 800610e:	009b      	lsls	r3, r3, #2
 8006110:	4413      	add	r3, r2
 8006112:	009b      	lsls	r3, r3, #2
 8006114:	440b      	add	r3, r1
 8006116:	3318      	adds	r3, #24
 8006118:	681a      	ldr	r2, [r3, #0]
 800611a:	78f9      	ldrb	r1, [r7, #3]
 800611c:	68f8      	ldr	r0, [r7, #12]
 800611e:	460b      	mov	r3, r1
 8006120:	00db      	lsls	r3, r3, #3
 8006122:	1a5b      	subs	r3, r3, r1
 8006124:	009b      	lsls	r3, r3, #2
 8006126:	4403      	add	r3, r0
 8006128:	3344      	adds	r3, #68	; 0x44
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	fbb2 f1f3 	udiv	r1, r2, r3
 8006130:	fb03 f301 	mul.w	r3, r3, r1
 8006134:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8006136:	2b00      	cmp	r3, #0
 8006138:	d110      	bne.n	800615c <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 800613a:	78fa      	ldrb	r2, [r7, #3]
 800613c:	6879      	ldr	r1, [r7, #4]
 800613e:	4613      	mov	r3, r2
 8006140:	009b      	lsls	r3, r3, #2
 8006142:	4413      	add	r3, r2
 8006144:	009b      	lsls	r3, r3, #2
 8006146:	440b      	add	r3, r1
 8006148:	3318      	adds	r3, #24
 800614a:	2200      	movs	r2, #0
 800614c:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800614e:	78f9      	ldrb	r1, [r7, #3]
 8006150:	2300      	movs	r3, #0
 8006152:	2200      	movs	r2, #0
 8006154:	6878      	ldr	r0, [r7, #4]
 8006156:	f001 ff42 	bl	8007fde <USBD_LL_Transmit>
 800615a:	e015      	b.n	8006188 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 800615c:	68bb      	ldr	r3, [r7, #8]
 800615e:	2200      	movs	r2, #0
 8006160:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800616a:	691b      	ldr	r3, [r3, #16]
 800616c:	2b00      	cmp	r3, #0
 800616e:	d00b      	beq.n	8006188 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006176:	691b      	ldr	r3, [r3, #16]
 8006178:	68ba      	ldr	r2, [r7, #8]
 800617a:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800617e:	68ba      	ldr	r2, [r7, #8]
 8006180:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8006184:	78fa      	ldrb	r2, [r7, #3]
 8006186:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8006188:	2300      	movs	r3, #0
}
 800618a:	4618      	mov	r0, r3
 800618c:	3710      	adds	r7, #16
 800618e:	46bd      	mov	sp, r7
 8006190:	bd80      	pop	{r7, pc}

08006192 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006192:	b580      	push	{r7, lr}
 8006194:	b084      	sub	sp, #16
 8006196:	af00      	add	r7, sp, #0
 8006198:	6078      	str	r0, [r7, #4]
 800619a:	460b      	mov	r3, r1
 800619c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80061a4:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d101      	bne.n	80061b4 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80061b0:	2303      	movs	r3, #3
 80061b2:	e015      	b.n	80061e0 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80061b4:	78fb      	ldrb	r3, [r7, #3]
 80061b6:	4619      	mov	r1, r3
 80061b8:	6878      	ldr	r0, [r7, #4]
 80061ba:	f001 ff52 	bl	8008062 <USBD_LL_GetRxDataSize>
 80061be:	4602      	mov	r2, r0
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80061cc:	68db      	ldr	r3, [r3, #12]
 80061ce:	68fa      	ldr	r2, [r7, #12]
 80061d0:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80061d4:	68fa      	ldr	r2, [r7, #12]
 80061d6:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80061da:	4611      	mov	r1, r2
 80061dc:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80061de:	2300      	movs	r3, #0
}
 80061e0:	4618      	mov	r0, r3
 80061e2:	3710      	adds	r7, #16
 80061e4:	46bd      	mov	sp, r7
 80061e6:	bd80      	pop	{r7, pc}

080061e8 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80061e8:	b580      	push	{r7, lr}
 80061ea:	b084      	sub	sp, #16
 80061ec:	af00      	add	r7, sp, #0
 80061ee:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80061f6:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d101      	bne.n	8006202 <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 80061fe:	2303      	movs	r3, #3
 8006200:	e01b      	b.n	800623a <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006208:	2b00      	cmp	r3, #0
 800620a:	d015      	beq.n	8006238 <USBD_CDC_EP0_RxReady+0x50>
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8006212:	2bff      	cmp	r3, #255	; 0xff
 8006214:	d010      	beq.n	8006238 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800621c:	689b      	ldr	r3, [r3, #8]
 800621e:	68fa      	ldr	r2, [r7, #12]
 8006220:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 8006224:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8006226:	68fa      	ldr	r2, [r7, #12]
 8006228:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800622c:	b292      	uxth	r2, r2
 800622e:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	22ff      	movs	r2, #255	; 0xff
 8006234:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8006238:	2300      	movs	r3, #0
}
 800623a:	4618      	mov	r0, r3
 800623c:	3710      	adds	r7, #16
 800623e:	46bd      	mov	sp, r7
 8006240:	bd80      	pop	{r7, pc}
	...

08006244 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8006244:	b480      	push	{r7}
 8006246:	b083      	sub	sp, #12
 8006248:	af00      	add	r7, sp, #0
 800624a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	2243      	movs	r2, #67	; 0x43
 8006250:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 8006252:	4b03      	ldr	r3, [pc, #12]	; (8006260 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8006254:	4618      	mov	r0, r3
 8006256:	370c      	adds	r7, #12
 8006258:	46bd      	mov	sp, r7
 800625a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800625e:	4770      	bx	lr
 8006260:	20000094 	.word	0x20000094

08006264 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8006264:	b480      	push	{r7}
 8006266:	b083      	sub	sp, #12
 8006268:	af00      	add	r7, sp, #0
 800626a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	2243      	movs	r2, #67	; 0x43
 8006270:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 8006272:	4b03      	ldr	r3, [pc, #12]	; (8006280 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8006274:	4618      	mov	r0, r3
 8006276:	370c      	adds	r7, #12
 8006278:	46bd      	mov	sp, r7
 800627a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800627e:	4770      	bx	lr
 8006280:	20000050 	.word	0x20000050

08006284 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8006284:	b480      	push	{r7}
 8006286:	b083      	sub	sp, #12
 8006288:	af00      	add	r7, sp, #0
 800628a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	2243      	movs	r2, #67	; 0x43
 8006290:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 8006292:	4b03      	ldr	r3, [pc, #12]	; (80062a0 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8006294:	4618      	mov	r0, r3
 8006296:	370c      	adds	r7, #12
 8006298:	46bd      	mov	sp, r7
 800629a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800629e:	4770      	bx	lr
 80062a0:	200000d8 	.word	0x200000d8

080062a4 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80062a4:	b480      	push	{r7}
 80062a6:	b083      	sub	sp, #12
 80062a8:	af00      	add	r7, sp, #0
 80062aa:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	220a      	movs	r2, #10
 80062b0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 80062b2:	4b03      	ldr	r3, [pc, #12]	; (80062c0 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80062b4:	4618      	mov	r0, r3
 80062b6:	370c      	adds	r7, #12
 80062b8:	46bd      	mov	sp, r7
 80062ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062be:	4770      	bx	lr
 80062c0:	2000000c 	.word	0x2000000c

080062c4 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 80062c4:	b480      	push	{r7}
 80062c6:	b083      	sub	sp, #12
 80062c8:	af00      	add	r7, sp, #0
 80062ca:	6078      	str	r0, [r7, #4]
 80062cc:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80062ce:	683b      	ldr	r3, [r7, #0]
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d101      	bne.n	80062d8 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80062d4:	2303      	movs	r3, #3
 80062d6:	e004      	b.n	80062e2 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	683a      	ldr	r2, [r7, #0]
 80062dc:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 80062e0:	2300      	movs	r3, #0
}
 80062e2:	4618      	mov	r0, r3
 80062e4:	370c      	adds	r7, #12
 80062e6:	46bd      	mov	sp, r7
 80062e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ec:	4770      	bx	lr

080062ee <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80062ee:	b480      	push	{r7}
 80062f0:	b087      	sub	sp, #28
 80062f2:	af00      	add	r7, sp, #0
 80062f4:	60f8      	str	r0, [r7, #12]
 80062f6:	60b9      	str	r1, [r7, #8]
 80062f8:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006300:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8006302:	697b      	ldr	r3, [r7, #20]
 8006304:	2b00      	cmp	r3, #0
 8006306:	d101      	bne.n	800630c <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8006308:	2303      	movs	r3, #3
 800630a:	e008      	b.n	800631e <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 800630c:	697b      	ldr	r3, [r7, #20]
 800630e:	68ba      	ldr	r2, [r7, #8]
 8006310:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8006314:	697b      	ldr	r3, [r7, #20]
 8006316:	687a      	ldr	r2, [r7, #4]
 8006318:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800631c:	2300      	movs	r3, #0
}
 800631e:	4618      	mov	r0, r3
 8006320:	371c      	adds	r7, #28
 8006322:	46bd      	mov	sp, r7
 8006324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006328:	4770      	bx	lr

0800632a <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800632a:	b480      	push	{r7}
 800632c:	b085      	sub	sp, #20
 800632e:	af00      	add	r7, sp, #0
 8006330:	6078      	str	r0, [r7, #4]
 8006332:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800633a:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	2b00      	cmp	r3, #0
 8006340:	d101      	bne.n	8006346 <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 8006342:	2303      	movs	r3, #3
 8006344:	e004      	b.n	8006350 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	683a      	ldr	r2, [r7, #0]
 800634a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800634e:	2300      	movs	r3, #0
}
 8006350:	4618      	mov	r0, r3
 8006352:	3714      	adds	r7, #20
 8006354:	46bd      	mov	sp, r7
 8006356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800635a:	4770      	bx	lr

0800635c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800635c:	b580      	push	{r7, lr}
 800635e:	b084      	sub	sp, #16
 8006360:	af00      	add	r7, sp, #0
 8006362:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800636a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006372:	2b00      	cmp	r3, #0
 8006374:	d101      	bne.n	800637a <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8006376:	2303      	movs	r3, #3
 8006378:	e016      	b.n	80063a8 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	7c1b      	ldrb	r3, [r3, #16]
 800637e:	2b00      	cmp	r3, #0
 8006380:	d109      	bne.n	8006396 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006388:	f44f 7300 	mov.w	r3, #512	; 0x200
 800638c:	2101      	movs	r1, #1
 800638e:	6878      	ldr	r0, [r7, #4]
 8006390:	f001 fe46 	bl	8008020 <USBD_LL_PrepareReceive>
 8006394:	e007      	b.n	80063a6 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800639c:	2340      	movs	r3, #64	; 0x40
 800639e:	2101      	movs	r1, #1
 80063a0:	6878      	ldr	r0, [r7, #4]
 80063a2:	f001 fe3d 	bl	8008020 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80063a6:	2300      	movs	r3, #0
}
 80063a8:	4618      	mov	r0, r3
 80063aa:	3710      	adds	r7, #16
 80063ac:	46bd      	mov	sp, r7
 80063ae:	bd80      	pop	{r7, pc}

080063b0 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80063b0:	b580      	push	{r7, lr}
 80063b2:	b086      	sub	sp, #24
 80063b4:	af00      	add	r7, sp, #0
 80063b6:	60f8      	str	r0, [r7, #12]
 80063b8:	60b9      	str	r1, [r7, #8]
 80063ba:	4613      	mov	r3, r2
 80063bc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d101      	bne.n	80063c8 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80063c4:	2303      	movs	r3, #3
 80063c6:	e01f      	b.n	8006408 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	2200      	movs	r2, #0
 80063cc:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	2200      	movs	r2, #0
 80063d4:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	2200      	movs	r2, #0
 80063dc:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80063e0:	68bb      	ldr	r3, [r7, #8]
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d003      	beq.n	80063ee <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	68ba      	ldr	r2, [r7, #8]
 80063ea:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	2201      	movs	r2, #1
 80063f2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	79fa      	ldrb	r2, [r7, #7]
 80063fa:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80063fc:	68f8      	ldr	r0, [r7, #12]
 80063fe:	f001 fcb9 	bl	8007d74 <USBD_LL_Init>
 8006402:	4603      	mov	r3, r0
 8006404:	75fb      	strb	r3, [r7, #23]

  return ret;
 8006406:	7dfb      	ldrb	r3, [r7, #23]
}
 8006408:	4618      	mov	r0, r3
 800640a:	3718      	adds	r7, #24
 800640c:	46bd      	mov	sp, r7
 800640e:	bd80      	pop	{r7, pc}

08006410 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8006410:	b580      	push	{r7, lr}
 8006412:	b084      	sub	sp, #16
 8006414:	af00      	add	r7, sp, #0
 8006416:	6078      	str	r0, [r7, #4]
 8006418:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800641a:	2300      	movs	r3, #0
 800641c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800641e:	683b      	ldr	r3, [r7, #0]
 8006420:	2b00      	cmp	r3, #0
 8006422:	d101      	bne.n	8006428 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8006424:	2303      	movs	r3, #3
 8006426:	e016      	b.n	8006456 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	683a      	ldr	r2, [r7, #0]
 800642c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006436:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006438:	2b00      	cmp	r3, #0
 800643a:	d00b      	beq.n	8006454 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006442:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006444:	f107 020e 	add.w	r2, r7, #14
 8006448:	4610      	mov	r0, r2
 800644a:	4798      	blx	r3
 800644c:	4602      	mov	r2, r0
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8006454:	2300      	movs	r3, #0
}
 8006456:	4618      	mov	r0, r3
 8006458:	3710      	adds	r7, #16
 800645a:	46bd      	mov	sp, r7
 800645c:	bd80      	pop	{r7, pc}

0800645e <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800645e:	b580      	push	{r7, lr}
 8006460:	b082      	sub	sp, #8
 8006462:	af00      	add	r7, sp, #0
 8006464:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8006466:	6878      	ldr	r0, [r7, #4]
 8006468:	f001 fcd0 	bl	8007e0c <USBD_LL_Start>
 800646c:	4603      	mov	r3, r0
}
 800646e:	4618      	mov	r0, r3
 8006470:	3708      	adds	r7, #8
 8006472:	46bd      	mov	sp, r7
 8006474:	bd80      	pop	{r7, pc}

08006476 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8006476:	b480      	push	{r7}
 8006478:	b083      	sub	sp, #12
 800647a:	af00      	add	r7, sp, #0
 800647c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800647e:	2300      	movs	r3, #0
}
 8006480:	4618      	mov	r0, r3
 8006482:	370c      	adds	r7, #12
 8006484:	46bd      	mov	sp, r7
 8006486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800648a:	4770      	bx	lr

0800648c <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800648c:	b580      	push	{r7, lr}
 800648e:	b084      	sub	sp, #16
 8006490:	af00      	add	r7, sp, #0
 8006492:	6078      	str	r0, [r7, #4]
 8006494:	460b      	mov	r3, r1
 8006496:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8006498:	2303      	movs	r3, #3
 800649a:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d009      	beq.n	80064ba <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	78fa      	ldrb	r2, [r7, #3]
 80064b0:	4611      	mov	r1, r2
 80064b2:	6878      	ldr	r0, [r7, #4]
 80064b4:	4798      	blx	r3
 80064b6:	4603      	mov	r3, r0
 80064b8:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80064ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80064bc:	4618      	mov	r0, r3
 80064be:	3710      	adds	r7, #16
 80064c0:	46bd      	mov	sp, r7
 80064c2:	bd80      	pop	{r7, pc}

080064c4 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80064c4:	b580      	push	{r7, lr}
 80064c6:	b082      	sub	sp, #8
 80064c8:	af00      	add	r7, sp, #0
 80064ca:	6078      	str	r0, [r7, #4]
 80064cc:	460b      	mov	r3, r1
 80064ce:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d007      	beq.n	80064ea <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80064e0:	685b      	ldr	r3, [r3, #4]
 80064e2:	78fa      	ldrb	r2, [r7, #3]
 80064e4:	4611      	mov	r1, r2
 80064e6:	6878      	ldr	r0, [r7, #4]
 80064e8:	4798      	blx	r3
  }

  return USBD_OK;
 80064ea:	2300      	movs	r3, #0
}
 80064ec:	4618      	mov	r0, r3
 80064ee:	3708      	adds	r7, #8
 80064f0:	46bd      	mov	sp, r7
 80064f2:	bd80      	pop	{r7, pc}

080064f4 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80064f4:	b580      	push	{r7, lr}
 80064f6:	b084      	sub	sp, #16
 80064f8:	af00      	add	r7, sp, #0
 80064fa:	6078      	str	r0, [r7, #4]
 80064fc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006504:	6839      	ldr	r1, [r7, #0]
 8006506:	4618      	mov	r0, r3
 8006508:	f000 ffba 	bl	8007480 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	2201      	movs	r2, #1
 8006510:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800651a:	461a      	mov	r2, r3
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006528:	f003 031f 	and.w	r3, r3, #31
 800652c:	2b02      	cmp	r3, #2
 800652e:	d01a      	beq.n	8006566 <USBD_LL_SetupStage+0x72>
 8006530:	2b02      	cmp	r3, #2
 8006532:	d822      	bhi.n	800657a <USBD_LL_SetupStage+0x86>
 8006534:	2b00      	cmp	r3, #0
 8006536:	d002      	beq.n	800653e <USBD_LL_SetupStage+0x4a>
 8006538:	2b01      	cmp	r3, #1
 800653a:	d00a      	beq.n	8006552 <USBD_LL_SetupStage+0x5e>
 800653c:	e01d      	b.n	800657a <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006544:	4619      	mov	r1, r3
 8006546:	6878      	ldr	r0, [r7, #4]
 8006548:	f000 fa62 	bl	8006a10 <USBD_StdDevReq>
 800654c:	4603      	mov	r3, r0
 800654e:	73fb      	strb	r3, [r7, #15]
      break;
 8006550:	e020      	b.n	8006594 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006558:	4619      	mov	r1, r3
 800655a:	6878      	ldr	r0, [r7, #4]
 800655c:	f000 fac6 	bl	8006aec <USBD_StdItfReq>
 8006560:	4603      	mov	r3, r0
 8006562:	73fb      	strb	r3, [r7, #15]
      break;
 8006564:	e016      	b.n	8006594 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800656c:	4619      	mov	r1, r3
 800656e:	6878      	ldr	r0, [r7, #4]
 8006570:	f000 fb05 	bl	8006b7e <USBD_StdEPReq>
 8006574:	4603      	mov	r3, r0
 8006576:	73fb      	strb	r3, [r7, #15]
      break;
 8006578:	e00c      	b.n	8006594 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006580:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006584:	b2db      	uxtb	r3, r3
 8006586:	4619      	mov	r1, r3
 8006588:	6878      	ldr	r0, [r7, #4]
 800658a:	f001 fc9f 	bl	8007ecc <USBD_LL_StallEP>
 800658e:	4603      	mov	r3, r0
 8006590:	73fb      	strb	r3, [r7, #15]
      break;
 8006592:	bf00      	nop
  }

  return ret;
 8006594:	7bfb      	ldrb	r3, [r7, #15]
}
 8006596:	4618      	mov	r0, r3
 8006598:	3710      	adds	r7, #16
 800659a:	46bd      	mov	sp, r7
 800659c:	bd80      	pop	{r7, pc}

0800659e <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800659e:	b580      	push	{r7, lr}
 80065a0:	b086      	sub	sp, #24
 80065a2:	af00      	add	r7, sp, #0
 80065a4:	60f8      	str	r0, [r7, #12]
 80065a6:	460b      	mov	r3, r1
 80065a8:	607a      	str	r2, [r7, #4]
 80065aa:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80065ac:	7afb      	ldrb	r3, [r7, #11]
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d138      	bne.n	8006624 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80065b8:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80065c0:	2b03      	cmp	r3, #3
 80065c2:	d14a      	bne.n	800665a <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 80065c4:	693b      	ldr	r3, [r7, #16]
 80065c6:	689a      	ldr	r2, [r3, #8]
 80065c8:	693b      	ldr	r3, [r7, #16]
 80065ca:	68db      	ldr	r3, [r3, #12]
 80065cc:	429a      	cmp	r2, r3
 80065ce:	d913      	bls.n	80065f8 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80065d0:	693b      	ldr	r3, [r7, #16]
 80065d2:	689a      	ldr	r2, [r3, #8]
 80065d4:	693b      	ldr	r3, [r7, #16]
 80065d6:	68db      	ldr	r3, [r3, #12]
 80065d8:	1ad2      	subs	r2, r2, r3
 80065da:	693b      	ldr	r3, [r7, #16]
 80065dc:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80065de:	693b      	ldr	r3, [r7, #16]
 80065e0:	68da      	ldr	r2, [r3, #12]
 80065e2:	693b      	ldr	r3, [r7, #16]
 80065e4:	689b      	ldr	r3, [r3, #8]
 80065e6:	4293      	cmp	r3, r2
 80065e8:	bf28      	it	cs
 80065ea:	4613      	movcs	r3, r2
 80065ec:	461a      	mov	r2, r3
 80065ee:	6879      	ldr	r1, [r7, #4]
 80065f0:	68f8      	ldr	r0, [r7, #12]
 80065f2:	f001 f839 	bl	8007668 <USBD_CtlContinueRx>
 80065f6:	e030      	b.n	800665a <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80065fe:	b2db      	uxtb	r3, r3
 8006600:	2b03      	cmp	r3, #3
 8006602:	d10b      	bne.n	800661c <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800660a:	691b      	ldr	r3, [r3, #16]
 800660c:	2b00      	cmp	r3, #0
 800660e:	d005      	beq.n	800661c <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006616:	691b      	ldr	r3, [r3, #16]
 8006618:	68f8      	ldr	r0, [r7, #12]
 800661a:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800661c:	68f8      	ldr	r0, [r7, #12]
 800661e:	f001 f834 	bl	800768a <USBD_CtlSendStatus>
 8006622:	e01a      	b.n	800665a <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800662a:	b2db      	uxtb	r3, r3
 800662c:	2b03      	cmp	r3, #3
 800662e:	d114      	bne.n	800665a <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006636:	699b      	ldr	r3, [r3, #24]
 8006638:	2b00      	cmp	r3, #0
 800663a:	d00e      	beq.n	800665a <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006642:	699b      	ldr	r3, [r3, #24]
 8006644:	7afa      	ldrb	r2, [r7, #11]
 8006646:	4611      	mov	r1, r2
 8006648:	68f8      	ldr	r0, [r7, #12]
 800664a:	4798      	blx	r3
 800664c:	4603      	mov	r3, r0
 800664e:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8006650:	7dfb      	ldrb	r3, [r7, #23]
 8006652:	2b00      	cmp	r3, #0
 8006654:	d001      	beq.n	800665a <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 8006656:	7dfb      	ldrb	r3, [r7, #23]
 8006658:	e000      	b.n	800665c <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 800665a:	2300      	movs	r3, #0
}
 800665c:	4618      	mov	r0, r3
 800665e:	3718      	adds	r7, #24
 8006660:	46bd      	mov	sp, r7
 8006662:	bd80      	pop	{r7, pc}

08006664 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8006664:	b580      	push	{r7, lr}
 8006666:	b086      	sub	sp, #24
 8006668:	af00      	add	r7, sp, #0
 800666a:	60f8      	str	r0, [r7, #12]
 800666c:	460b      	mov	r3, r1
 800666e:	607a      	str	r2, [r7, #4]
 8006670:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8006672:	7afb      	ldrb	r3, [r7, #11]
 8006674:	2b00      	cmp	r3, #0
 8006676:	d16b      	bne.n	8006750 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	3314      	adds	r3, #20
 800667c:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006684:	2b02      	cmp	r3, #2
 8006686:	d156      	bne.n	8006736 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 8006688:	693b      	ldr	r3, [r7, #16]
 800668a:	689a      	ldr	r2, [r3, #8]
 800668c:	693b      	ldr	r3, [r7, #16]
 800668e:	68db      	ldr	r3, [r3, #12]
 8006690:	429a      	cmp	r2, r3
 8006692:	d914      	bls.n	80066be <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8006694:	693b      	ldr	r3, [r7, #16]
 8006696:	689a      	ldr	r2, [r3, #8]
 8006698:	693b      	ldr	r3, [r7, #16]
 800669a:	68db      	ldr	r3, [r3, #12]
 800669c:	1ad2      	subs	r2, r2, r3
 800669e:	693b      	ldr	r3, [r7, #16]
 80066a0:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80066a2:	693b      	ldr	r3, [r7, #16]
 80066a4:	689b      	ldr	r3, [r3, #8]
 80066a6:	461a      	mov	r2, r3
 80066a8:	6879      	ldr	r1, [r7, #4]
 80066aa:	68f8      	ldr	r0, [r7, #12]
 80066ac:	f000 ffae 	bl	800760c <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80066b0:	2300      	movs	r3, #0
 80066b2:	2200      	movs	r2, #0
 80066b4:	2100      	movs	r1, #0
 80066b6:	68f8      	ldr	r0, [r7, #12]
 80066b8:	f001 fcb2 	bl	8008020 <USBD_LL_PrepareReceive>
 80066bc:	e03b      	b.n	8006736 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80066be:	693b      	ldr	r3, [r7, #16]
 80066c0:	68da      	ldr	r2, [r3, #12]
 80066c2:	693b      	ldr	r3, [r7, #16]
 80066c4:	689b      	ldr	r3, [r3, #8]
 80066c6:	429a      	cmp	r2, r3
 80066c8:	d11c      	bne.n	8006704 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80066ca:	693b      	ldr	r3, [r7, #16]
 80066cc:	685a      	ldr	r2, [r3, #4]
 80066ce:	693b      	ldr	r3, [r7, #16]
 80066d0:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80066d2:	429a      	cmp	r2, r3
 80066d4:	d316      	bcc.n	8006704 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80066d6:	693b      	ldr	r3, [r7, #16]
 80066d8:	685a      	ldr	r2, [r3, #4]
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80066e0:	429a      	cmp	r2, r3
 80066e2:	d20f      	bcs.n	8006704 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80066e4:	2200      	movs	r2, #0
 80066e6:	2100      	movs	r1, #0
 80066e8:	68f8      	ldr	r0, [r7, #12]
 80066ea:	f000 ff8f 	bl	800760c <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	2200      	movs	r2, #0
 80066f2:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80066f6:	2300      	movs	r3, #0
 80066f8:	2200      	movs	r2, #0
 80066fa:	2100      	movs	r1, #0
 80066fc:	68f8      	ldr	r0, [r7, #12]
 80066fe:	f001 fc8f 	bl	8008020 <USBD_LL_PrepareReceive>
 8006702:	e018      	b.n	8006736 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800670a:	b2db      	uxtb	r3, r3
 800670c:	2b03      	cmp	r3, #3
 800670e:	d10b      	bne.n	8006728 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006716:	68db      	ldr	r3, [r3, #12]
 8006718:	2b00      	cmp	r3, #0
 800671a:	d005      	beq.n	8006728 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006722:	68db      	ldr	r3, [r3, #12]
 8006724:	68f8      	ldr	r0, [r7, #12]
 8006726:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8006728:	2180      	movs	r1, #128	; 0x80
 800672a:	68f8      	ldr	r0, [r7, #12]
 800672c:	f001 fbce 	bl	8007ecc <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8006730:	68f8      	ldr	r0, [r7, #12]
 8006732:	f000 ffbd 	bl	80076b0 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800673c:	2b01      	cmp	r3, #1
 800673e:	d122      	bne.n	8006786 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8006740:	68f8      	ldr	r0, [r7, #12]
 8006742:	f7ff fe98 	bl	8006476 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	2200      	movs	r2, #0
 800674a:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800674e:	e01a      	b.n	8006786 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006756:	b2db      	uxtb	r3, r3
 8006758:	2b03      	cmp	r3, #3
 800675a:	d114      	bne.n	8006786 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006762:	695b      	ldr	r3, [r3, #20]
 8006764:	2b00      	cmp	r3, #0
 8006766:	d00e      	beq.n	8006786 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800676e:	695b      	ldr	r3, [r3, #20]
 8006770:	7afa      	ldrb	r2, [r7, #11]
 8006772:	4611      	mov	r1, r2
 8006774:	68f8      	ldr	r0, [r7, #12]
 8006776:	4798      	blx	r3
 8006778:	4603      	mov	r3, r0
 800677a:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800677c:	7dfb      	ldrb	r3, [r7, #23]
 800677e:	2b00      	cmp	r3, #0
 8006780:	d001      	beq.n	8006786 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 8006782:	7dfb      	ldrb	r3, [r7, #23]
 8006784:	e000      	b.n	8006788 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 8006786:	2300      	movs	r3, #0
}
 8006788:	4618      	mov	r0, r3
 800678a:	3718      	adds	r7, #24
 800678c:	46bd      	mov	sp, r7
 800678e:	bd80      	pop	{r7, pc}

08006790 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8006790:	b580      	push	{r7, lr}
 8006792:	b082      	sub	sp, #8
 8006794:	af00      	add	r7, sp, #0
 8006796:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	2201      	movs	r2, #1
 800679c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	2200      	movs	r2, #0
 80067a4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	2200      	movs	r2, #0
 80067ac:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	2200      	movs	r2, #0
 80067b2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d101      	bne.n	80067c4 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 80067c0:	2303      	movs	r3, #3
 80067c2:	e02f      	b.n	8006824 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d00f      	beq.n	80067ee <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80067d4:	685b      	ldr	r3, [r3, #4]
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d009      	beq.n	80067ee <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80067e0:	685b      	ldr	r3, [r3, #4]
 80067e2:	687a      	ldr	r2, [r7, #4]
 80067e4:	6852      	ldr	r2, [r2, #4]
 80067e6:	b2d2      	uxtb	r2, r2
 80067e8:	4611      	mov	r1, r2
 80067ea:	6878      	ldr	r0, [r7, #4]
 80067ec:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80067ee:	2340      	movs	r3, #64	; 0x40
 80067f0:	2200      	movs	r2, #0
 80067f2:	2100      	movs	r1, #0
 80067f4:	6878      	ldr	r0, [r7, #4]
 80067f6:	f001 fb24 	bl	8007e42 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	2201      	movs	r2, #1
 80067fe:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	2240      	movs	r2, #64	; 0x40
 8006806:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800680a:	2340      	movs	r3, #64	; 0x40
 800680c:	2200      	movs	r2, #0
 800680e:	2180      	movs	r1, #128	; 0x80
 8006810:	6878      	ldr	r0, [r7, #4]
 8006812:	f001 fb16 	bl	8007e42 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	2201      	movs	r2, #1
 800681a:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	2240      	movs	r2, #64	; 0x40
 8006820:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8006822:	2300      	movs	r3, #0
}
 8006824:	4618      	mov	r0, r3
 8006826:	3708      	adds	r7, #8
 8006828:	46bd      	mov	sp, r7
 800682a:	bd80      	pop	{r7, pc}

0800682c <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800682c:	b480      	push	{r7}
 800682e:	b083      	sub	sp, #12
 8006830:	af00      	add	r7, sp, #0
 8006832:	6078      	str	r0, [r7, #4]
 8006834:	460b      	mov	r3, r1
 8006836:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	78fa      	ldrb	r2, [r7, #3]
 800683c:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800683e:	2300      	movs	r3, #0
}
 8006840:	4618      	mov	r0, r3
 8006842:	370c      	adds	r7, #12
 8006844:	46bd      	mov	sp, r7
 8006846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800684a:	4770      	bx	lr

0800684c <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800684c:	b480      	push	{r7}
 800684e:	b083      	sub	sp, #12
 8006850:	af00      	add	r7, sp, #0
 8006852:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800685a:	b2da      	uxtb	r2, r3
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	2204      	movs	r2, #4
 8006866:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800686a:	2300      	movs	r3, #0
}
 800686c:	4618      	mov	r0, r3
 800686e:	370c      	adds	r7, #12
 8006870:	46bd      	mov	sp, r7
 8006872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006876:	4770      	bx	lr

08006878 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8006878:	b480      	push	{r7}
 800687a:	b083      	sub	sp, #12
 800687c:	af00      	add	r7, sp, #0
 800687e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006886:	b2db      	uxtb	r3, r3
 8006888:	2b04      	cmp	r3, #4
 800688a:	d106      	bne.n	800689a <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8006892:	b2da      	uxtb	r2, r3
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800689a:	2300      	movs	r3, #0
}
 800689c:	4618      	mov	r0, r3
 800689e:	370c      	adds	r7, #12
 80068a0:	46bd      	mov	sp, r7
 80068a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068a6:	4770      	bx	lr

080068a8 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80068a8:	b580      	push	{r7, lr}
 80068aa:	b082      	sub	sp, #8
 80068ac:	af00      	add	r7, sp, #0
 80068ae:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d101      	bne.n	80068be <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 80068ba:	2303      	movs	r3, #3
 80068bc:	e012      	b.n	80068e4 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80068c4:	b2db      	uxtb	r3, r3
 80068c6:	2b03      	cmp	r3, #3
 80068c8:	d10b      	bne.n	80068e2 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80068d0:	69db      	ldr	r3, [r3, #28]
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d005      	beq.n	80068e2 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80068dc:	69db      	ldr	r3, [r3, #28]
 80068de:	6878      	ldr	r0, [r7, #4]
 80068e0:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80068e2:	2300      	movs	r3, #0
}
 80068e4:	4618      	mov	r0, r3
 80068e6:	3708      	adds	r7, #8
 80068e8:	46bd      	mov	sp, r7
 80068ea:	bd80      	pop	{r7, pc}

080068ec <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80068ec:	b580      	push	{r7, lr}
 80068ee:	b082      	sub	sp, #8
 80068f0:	af00      	add	r7, sp, #0
 80068f2:	6078      	str	r0, [r7, #4]
 80068f4:	460b      	mov	r3, r1
 80068f6:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d101      	bne.n	8006906 <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 8006902:	2303      	movs	r3, #3
 8006904:	e014      	b.n	8006930 <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800690c:	b2db      	uxtb	r3, r3
 800690e:	2b03      	cmp	r3, #3
 8006910:	d10d      	bne.n	800692e <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006918:	6a1b      	ldr	r3, [r3, #32]
 800691a:	2b00      	cmp	r3, #0
 800691c:	d007      	beq.n	800692e <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006924:	6a1b      	ldr	r3, [r3, #32]
 8006926:	78fa      	ldrb	r2, [r7, #3]
 8006928:	4611      	mov	r1, r2
 800692a:	6878      	ldr	r0, [r7, #4]
 800692c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800692e:	2300      	movs	r3, #0
}
 8006930:	4618      	mov	r0, r3
 8006932:	3708      	adds	r7, #8
 8006934:	46bd      	mov	sp, r7
 8006936:	bd80      	pop	{r7, pc}

08006938 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8006938:	b580      	push	{r7, lr}
 800693a:	b082      	sub	sp, #8
 800693c:	af00      	add	r7, sp, #0
 800693e:	6078      	str	r0, [r7, #4]
 8006940:	460b      	mov	r3, r1
 8006942:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800694a:	2b00      	cmp	r3, #0
 800694c:	d101      	bne.n	8006952 <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 800694e:	2303      	movs	r3, #3
 8006950:	e014      	b.n	800697c <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006958:	b2db      	uxtb	r3, r3
 800695a:	2b03      	cmp	r3, #3
 800695c:	d10d      	bne.n	800697a <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006964:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006966:	2b00      	cmp	r3, #0
 8006968:	d007      	beq.n	800697a <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006970:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006972:	78fa      	ldrb	r2, [r7, #3]
 8006974:	4611      	mov	r1, r2
 8006976:	6878      	ldr	r0, [r7, #4]
 8006978:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800697a:	2300      	movs	r3, #0
}
 800697c:	4618      	mov	r0, r3
 800697e:	3708      	adds	r7, #8
 8006980:	46bd      	mov	sp, r7
 8006982:	bd80      	pop	{r7, pc}

08006984 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8006984:	b480      	push	{r7}
 8006986:	b083      	sub	sp, #12
 8006988:	af00      	add	r7, sp, #0
 800698a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800698c:	2300      	movs	r3, #0
}
 800698e:	4618      	mov	r0, r3
 8006990:	370c      	adds	r7, #12
 8006992:	46bd      	mov	sp, r7
 8006994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006998:	4770      	bx	lr

0800699a <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800699a:	b580      	push	{r7, lr}
 800699c:	b082      	sub	sp, #8
 800699e:	af00      	add	r7, sp, #0
 80069a0:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	2201      	movs	r2, #1
 80069a6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d009      	beq.n	80069c8 <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80069ba:	685b      	ldr	r3, [r3, #4]
 80069bc:	687a      	ldr	r2, [r7, #4]
 80069be:	6852      	ldr	r2, [r2, #4]
 80069c0:	b2d2      	uxtb	r2, r2
 80069c2:	4611      	mov	r1, r2
 80069c4:	6878      	ldr	r0, [r7, #4]
 80069c6:	4798      	blx	r3
  }

  return USBD_OK;
 80069c8:	2300      	movs	r3, #0
}
 80069ca:	4618      	mov	r0, r3
 80069cc:	3708      	adds	r7, #8
 80069ce:	46bd      	mov	sp, r7
 80069d0:	bd80      	pop	{r7, pc}

080069d2 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80069d2:	b480      	push	{r7}
 80069d4:	b087      	sub	sp, #28
 80069d6:	af00      	add	r7, sp, #0
 80069d8:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80069de:	697b      	ldr	r3, [r7, #20]
 80069e0:	781b      	ldrb	r3, [r3, #0]
 80069e2:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80069e4:	697b      	ldr	r3, [r7, #20]
 80069e6:	3301      	adds	r3, #1
 80069e8:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80069ea:	697b      	ldr	r3, [r7, #20]
 80069ec:	781b      	ldrb	r3, [r3, #0]
 80069ee:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80069f0:	8a3b      	ldrh	r3, [r7, #16]
 80069f2:	021b      	lsls	r3, r3, #8
 80069f4:	b21a      	sxth	r2, r3
 80069f6:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80069fa:	4313      	orrs	r3, r2
 80069fc:	b21b      	sxth	r3, r3
 80069fe:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8006a00:	89fb      	ldrh	r3, [r7, #14]
}
 8006a02:	4618      	mov	r0, r3
 8006a04:	371c      	adds	r7, #28
 8006a06:	46bd      	mov	sp, r7
 8006a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a0c:	4770      	bx	lr
	...

08006a10 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006a10:	b580      	push	{r7, lr}
 8006a12:	b084      	sub	sp, #16
 8006a14:	af00      	add	r7, sp, #0
 8006a16:	6078      	str	r0, [r7, #4]
 8006a18:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006a1a:	2300      	movs	r3, #0
 8006a1c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006a1e:	683b      	ldr	r3, [r7, #0]
 8006a20:	781b      	ldrb	r3, [r3, #0]
 8006a22:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006a26:	2b40      	cmp	r3, #64	; 0x40
 8006a28:	d005      	beq.n	8006a36 <USBD_StdDevReq+0x26>
 8006a2a:	2b40      	cmp	r3, #64	; 0x40
 8006a2c:	d853      	bhi.n	8006ad6 <USBD_StdDevReq+0xc6>
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d00b      	beq.n	8006a4a <USBD_StdDevReq+0x3a>
 8006a32:	2b20      	cmp	r3, #32
 8006a34:	d14f      	bne.n	8006ad6 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006a3c:	689b      	ldr	r3, [r3, #8]
 8006a3e:	6839      	ldr	r1, [r7, #0]
 8006a40:	6878      	ldr	r0, [r7, #4]
 8006a42:	4798      	blx	r3
 8006a44:	4603      	mov	r3, r0
 8006a46:	73fb      	strb	r3, [r7, #15]
      break;
 8006a48:	e04a      	b.n	8006ae0 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006a4a:	683b      	ldr	r3, [r7, #0]
 8006a4c:	785b      	ldrb	r3, [r3, #1]
 8006a4e:	2b09      	cmp	r3, #9
 8006a50:	d83b      	bhi.n	8006aca <USBD_StdDevReq+0xba>
 8006a52:	a201      	add	r2, pc, #4	; (adr r2, 8006a58 <USBD_StdDevReq+0x48>)
 8006a54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a58:	08006aad 	.word	0x08006aad
 8006a5c:	08006ac1 	.word	0x08006ac1
 8006a60:	08006acb 	.word	0x08006acb
 8006a64:	08006ab7 	.word	0x08006ab7
 8006a68:	08006acb 	.word	0x08006acb
 8006a6c:	08006a8b 	.word	0x08006a8b
 8006a70:	08006a81 	.word	0x08006a81
 8006a74:	08006acb 	.word	0x08006acb
 8006a78:	08006aa3 	.word	0x08006aa3
 8006a7c:	08006a95 	.word	0x08006a95
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8006a80:	6839      	ldr	r1, [r7, #0]
 8006a82:	6878      	ldr	r0, [r7, #4]
 8006a84:	f000 f9de 	bl	8006e44 <USBD_GetDescriptor>
          break;
 8006a88:	e024      	b.n	8006ad4 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8006a8a:	6839      	ldr	r1, [r7, #0]
 8006a8c:	6878      	ldr	r0, [r7, #4]
 8006a8e:	f000 fb6d 	bl	800716c <USBD_SetAddress>
          break;
 8006a92:	e01f      	b.n	8006ad4 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8006a94:	6839      	ldr	r1, [r7, #0]
 8006a96:	6878      	ldr	r0, [r7, #4]
 8006a98:	f000 fbac 	bl	80071f4 <USBD_SetConfig>
 8006a9c:	4603      	mov	r3, r0
 8006a9e:	73fb      	strb	r3, [r7, #15]
          break;
 8006aa0:	e018      	b.n	8006ad4 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8006aa2:	6839      	ldr	r1, [r7, #0]
 8006aa4:	6878      	ldr	r0, [r7, #4]
 8006aa6:	f000 fc4b 	bl	8007340 <USBD_GetConfig>
          break;
 8006aaa:	e013      	b.n	8006ad4 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8006aac:	6839      	ldr	r1, [r7, #0]
 8006aae:	6878      	ldr	r0, [r7, #4]
 8006ab0:	f000 fc7c 	bl	80073ac <USBD_GetStatus>
          break;
 8006ab4:	e00e      	b.n	8006ad4 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8006ab6:	6839      	ldr	r1, [r7, #0]
 8006ab8:	6878      	ldr	r0, [r7, #4]
 8006aba:	f000 fcab 	bl	8007414 <USBD_SetFeature>
          break;
 8006abe:	e009      	b.n	8006ad4 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8006ac0:	6839      	ldr	r1, [r7, #0]
 8006ac2:	6878      	ldr	r0, [r7, #4]
 8006ac4:	f000 fcba 	bl	800743c <USBD_ClrFeature>
          break;
 8006ac8:	e004      	b.n	8006ad4 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 8006aca:	6839      	ldr	r1, [r7, #0]
 8006acc:	6878      	ldr	r0, [r7, #4]
 8006ace:	f000 fd11 	bl	80074f4 <USBD_CtlError>
          break;
 8006ad2:	bf00      	nop
      }
      break;
 8006ad4:	e004      	b.n	8006ae0 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 8006ad6:	6839      	ldr	r1, [r7, #0]
 8006ad8:	6878      	ldr	r0, [r7, #4]
 8006ada:	f000 fd0b 	bl	80074f4 <USBD_CtlError>
      break;
 8006ade:	bf00      	nop
  }

  return ret;
 8006ae0:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ae2:	4618      	mov	r0, r3
 8006ae4:	3710      	adds	r7, #16
 8006ae6:	46bd      	mov	sp, r7
 8006ae8:	bd80      	pop	{r7, pc}
 8006aea:	bf00      	nop

08006aec <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006aec:	b580      	push	{r7, lr}
 8006aee:	b084      	sub	sp, #16
 8006af0:	af00      	add	r7, sp, #0
 8006af2:	6078      	str	r0, [r7, #4]
 8006af4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006af6:	2300      	movs	r3, #0
 8006af8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006afa:	683b      	ldr	r3, [r7, #0]
 8006afc:	781b      	ldrb	r3, [r3, #0]
 8006afe:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006b02:	2b40      	cmp	r3, #64	; 0x40
 8006b04:	d005      	beq.n	8006b12 <USBD_StdItfReq+0x26>
 8006b06:	2b40      	cmp	r3, #64	; 0x40
 8006b08:	d82f      	bhi.n	8006b6a <USBD_StdItfReq+0x7e>
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d001      	beq.n	8006b12 <USBD_StdItfReq+0x26>
 8006b0e:	2b20      	cmp	r3, #32
 8006b10:	d12b      	bne.n	8006b6a <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006b18:	b2db      	uxtb	r3, r3
 8006b1a:	3b01      	subs	r3, #1
 8006b1c:	2b02      	cmp	r3, #2
 8006b1e:	d81d      	bhi.n	8006b5c <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8006b20:	683b      	ldr	r3, [r7, #0]
 8006b22:	889b      	ldrh	r3, [r3, #4]
 8006b24:	b2db      	uxtb	r3, r3
 8006b26:	2b01      	cmp	r3, #1
 8006b28:	d813      	bhi.n	8006b52 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006b30:	689b      	ldr	r3, [r3, #8]
 8006b32:	6839      	ldr	r1, [r7, #0]
 8006b34:	6878      	ldr	r0, [r7, #4]
 8006b36:	4798      	blx	r3
 8006b38:	4603      	mov	r3, r0
 8006b3a:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8006b3c:	683b      	ldr	r3, [r7, #0]
 8006b3e:	88db      	ldrh	r3, [r3, #6]
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d110      	bne.n	8006b66 <USBD_StdItfReq+0x7a>
 8006b44:	7bfb      	ldrb	r3, [r7, #15]
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d10d      	bne.n	8006b66 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 8006b4a:	6878      	ldr	r0, [r7, #4]
 8006b4c:	f000 fd9d 	bl	800768a <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8006b50:	e009      	b.n	8006b66 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 8006b52:	6839      	ldr	r1, [r7, #0]
 8006b54:	6878      	ldr	r0, [r7, #4]
 8006b56:	f000 fccd 	bl	80074f4 <USBD_CtlError>
          break;
 8006b5a:	e004      	b.n	8006b66 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 8006b5c:	6839      	ldr	r1, [r7, #0]
 8006b5e:	6878      	ldr	r0, [r7, #4]
 8006b60:	f000 fcc8 	bl	80074f4 <USBD_CtlError>
          break;
 8006b64:	e000      	b.n	8006b68 <USBD_StdItfReq+0x7c>
          break;
 8006b66:	bf00      	nop
      }
      break;
 8006b68:	e004      	b.n	8006b74 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 8006b6a:	6839      	ldr	r1, [r7, #0]
 8006b6c:	6878      	ldr	r0, [r7, #4]
 8006b6e:	f000 fcc1 	bl	80074f4 <USBD_CtlError>
      break;
 8006b72:	bf00      	nop
  }

  return ret;
 8006b74:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b76:	4618      	mov	r0, r3
 8006b78:	3710      	adds	r7, #16
 8006b7a:	46bd      	mov	sp, r7
 8006b7c:	bd80      	pop	{r7, pc}

08006b7e <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006b7e:	b580      	push	{r7, lr}
 8006b80:	b084      	sub	sp, #16
 8006b82:	af00      	add	r7, sp, #0
 8006b84:	6078      	str	r0, [r7, #4]
 8006b86:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8006b88:	2300      	movs	r3, #0
 8006b8a:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8006b8c:	683b      	ldr	r3, [r7, #0]
 8006b8e:	889b      	ldrh	r3, [r3, #4]
 8006b90:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006b92:	683b      	ldr	r3, [r7, #0]
 8006b94:	781b      	ldrb	r3, [r3, #0]
 8006b96:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006b9a:	2b40      	cmp	r3, #64	; 0x40
 8006b9c:	d007      	beq.n	8006bae <USBD_StdEPReq+0x30>
 8006b9e:	2b40      	cmp	r3, #64	; 0x40
 8006ba0:	f200 8145 	bhi.w	8006e2e <USBD_StdEPReq+0x2b0>
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	d00c      	beq.n	8006bc2 <USBD_StdEPReq+0x44>
 8006ba8:	2b20      	cmp	r3, #32
 8006baa:	f040 8140 	bne.w	8006e2e <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006bb4:	689b      	ldr	r3, [r3, #8]
 8006bb6:	6839      	ldr	r1, [r7, #0]
 8006bb8:	6878      	ldr	r0, [r7, #4]
 8006bba:	4798      	blx	r3
 8006bbc:	4603      	mov	r3, r0
 8006bbe:	73fb      	strb	r3, [r7, #15]
      break;
 8006bc0:	e13a      	b.n	8006e38 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006bc2:	683b      	ldr	r3, [r7, #0]
 8006bc4:	785b      	ldrb	r3, [r3, #1]
 8006bc6:	2b03      	cmp	r3, #3
 8006bc8:	d007      	beq.n	8006bda <USBD_StdEPReq+0x5c>
 8006bca:	2b03      	cmp	r3, #3
 8006bcc:	f300 8129 	bgt.w	8006e22 <USBD_StdEPReq+0x2a4>
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	d07f      	beq.n	8006cd4 <USBD_StdEPReq+0x156>
 8006bd4:	2b01      	cmp	r3, #1
 8006bd6:	d03c      	beq.n	8006c52 <USBD_StdEPReq+0xd4>
 8006bd8:	e123      	b.n	8006e22 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006be0:	b2db      	uxtb	r3, r3
 8006be2:	2b02      	cmp	r3, #2
 8006be4:	d002      	beq.n	8006bec <USBD_StdEPReq+0x6e>
 8006be6:	2b03      	cmp	r3, #3
 8006be8:	d016      	beq.n	8006c18 <USBD_StdEPReq+0x9a>
 8006bea:	e02c      	b.n	8006c46 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006bec:	7bbb      	ldrb	r3, [r7, #14]
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d00d      	beq.n	8006c0e <USBD_StdEPReq+0x90>
 8006bf2:	7bbb      	ldrb	r3, [r7, #14]
 8006bf4:	2b80      	cmp	r3, #128	; 0x80
 8006bf6:	d00a      	beq.n	8006c0e <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006bf8:	7bbb      	ldrb	r3, [r7, #14]
 8006bfa:	4619      	mov	r1, r3
 8006bfc:	6878      	ldr	r0, [r7, #4]
 8006bfe:	f001 f965 	bl	8007ecc <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8006c02:	2180      	movs	r1, #128	; 0x80
 8006c04:	6878      	ldr	r0, [r7, #4]
 8006c06:	f001 f961 	bl	8007ecc <USBD_LL_StallEP>
 8006c0a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006c0c:	e020      	b.n	8006c50 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 8006c0e:	6839      	ldr	r1, [r7, #0]
 8006c10:	6878      	ldr	r0, [r7, #4]
 8006c12:	f000 fc6f 	bl	80074f4 <USBD_CtlError>
              break;
 8006c16:	e01b      	b.n	8006c50 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006c18:	683b      	ldr	r3, [r7, #0]
 8006c1a:	885b      	ldrh	r3, [r3, #2]
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d10e      	bne.n	8006c3e <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8006c20:	7bbb      	ldrb	r3, [r7, #14]
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d00b      	beq.n	8006c3e <USBD_StdEPReq+0xc0>
 8006c26:	7bbb      	ldrb	r3, [r7, #14]
 8006c28:	2b80      	cmp	r3, #128	; 0x80
 8006c2a:	d008      	beq.n	8006c3e <USBD_StdEPReq+0xc0>
 8006c2c:	683b      	ldr	r3, [r7, #0]
 8006c2e:	88db      	ldrh	r3, [r3, #6]
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	d104      	bne.n	8006c3e <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8006c34:	7bbb      	ldrb	r3, [r7, #14]
 8006c36:	4619      	mov	r1, r3
 8006c38:	6878      	ldr	r0, [r7, #4]
 8006c3a:	f001 f947 	bl	8007ecc <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8006c3e:	6878      	ldr	r0, [r7, #4]
 8006c40:	f000 fd23 	bl	800768a <USBD_CtlSendStatus>

              break;
 8006c44:	e004      	b.n	8006c50 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 8006c46:	6839      	ldr	r1, [r7, #0]
 8006c48:	6878      	ldr	r0, [r7, #4]
 8006c4a:	f000 fc53 	bl	80074f4 <USBD_CtlError>
              break;
 8006c4e:	bf00      	nop
          }
          break;
 8006c50:	e0ec      	b.n	8006e2c <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006c58:	b2db      	uxtb	r3, r3
 8006c5a:	2b02      	cmp	r3, #2
 8006c5c:	d002      	beq.n	8006c64 <USBD_StdEPReq+0xe6>
 8006c5e:	2b03      	cmp	r3, #3
 8006c60:	d016      	beq.n	8006c90 <USBD_StdEPReq+0x112>
 8006c62:	e030      	b.n	8006cc6 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006c64:	7bbb      	ldrb	r3, [r7, #14]
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d00d      	beq.n	8006c86 <USBD_StdEPReq+0x108>
 8006c6a:	7bbb      	ldrb	r3, [r7, #14]
 8006c6c:	2b80      	cmp	r3, #128	; 0x80
 8006c6e:	d00a      	beq.n	8006c86 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006c70:	7bbb      	ldrb	r3, [r7, #14]
 8006c72:	4619      	mov	r1, r3
 8006c74:	6878      	ldr	r0, [r7, #4]
 8006c76:	f001 f929 	bl	8007ecc <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8006c7a:	2180      	movs	r1, #128	; 0x80
 8006c7c:	6878      	ldr	r0, [r7, #4]
 8006c7e:	f001 f925 	bl	8007ecc <USBD_LL_StallEP>
 8006c82:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006c84:	e025      	b.n	8006cd2 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 8006c86:	6839      	ldr	r1, [r7, #0]
 8006c88:	6878      	ldr	r0, [r7, #4]
 8006c8a:	f000 fc33 	bl	80074f4 <USBD_CtlError>
              break;
 8006c8e:	e020      	b.n	8006cd2 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006c90:	683b      	ldr	r3, [r7, #0]
 8006c92:	885b      	ldrh	r3, [r3, #2]
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d11b      	bne.n	8006cd0 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8006c98:	7bbb      	ldrb	r3, [r7, #14]
 8006c9a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d004      	beq.n	8006cac <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8006ca2:	7bbb      	ldrb	r3, [r7, #14]
 8006ca4:	4619      	mov	r1, r3
 8006ca6:	6878      	ldr	r0, [r7, #4]
 8006ca8:	f001 f92f 	bl	8007f0a <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8006cac:	6878      	ldr	r0, [r7, #4]
 8006cae:	f000 fcec 	bl	800768a <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006cb8:	689b      	ldr	r3, [r3, #8]
 8006cba:	6839      	ldr	r1, [r7, #0]
 8006cbc:	6878      	ldr	r0, [r7, #4]
 8006cbe:	4798      	blx	r3
 8006cc0:	4603      	mov	r3, r0
 8006cc2:	73fb      	strb	r3, [r7, #15]
              }
              break;
 8006cc4:	e004      	b.n	8006cd0 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 8006cc6:	6839      	ldr	r1, [r7, #0]
 8006cc8:	6878      	ldr	r0, [r7, #4]
 8006cca:	f000 fc13 	bl	80074f4 <USBD_CtlError>
              break;
 8006cce:	e000      	b.n	8006cd2 <USBD_StdEPReq+0x154>
              break;
 8006cd0:	bf00      	nop
          }
          break;
 8006cd2:	e0ab      	b.n	8006e2c <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006cda:	b2db      	uxtb	r3, r3
 8006cdc:	2b02      	cmp	r3, #2
 8006cde:	d002      	beq.n	8006ce6 <USBD_StdEPReq+0x168>
 8006ce0:	2b03      	cmp	r3, #3
 8006ce2:	d032      	beq.n	8006d4a <USBD_StdEPReq+0x1cc>
 8006ce4:	e097      	b.n	8006e16 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006ce6:	7bbb      	ldrb	r3, [r7, #14]
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d007      	beq.n	8006cfc <USBD_StdEPReq+0x17e>
 8006cec:	7bbb      	ldrb	r3, [r7, #14]
 8006cee:	2b80      	cmp	r3, #128	; 0x80
 8006cf0:	d004      	beq.n	8006cfc <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 8006cf2:	6839      	ldr	r1, [r7, #0]
 8006cf4:	6878      	ldr	r0, [r7, #4]
 8006cf6:	f000 fbfd 	bl	80074f4 <USBD_CtlError>
                break;
 8006cfa:	e091      	b.n	8006e20 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006cfc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	da0b      	bge.n	8006d1c <USBD_StdEPReq+0x19e>
 8006d04:	7bbb      	ldrb	r3, [r7, #14]
 8006d06:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006d0a:	4613      	mov	r3, r2
 8006d0c:	009b      	lsls	r3, r3, #2
 8006d0e:	4413      	add	r3, r2
 8006d10:	009b      	lsls	r3, r3, #2
 8006d12:	3310      	adds	r3, #16
 8006d14:	687a      	ldr	r2, [r7, #4]
 8006d16:	4413      	add	r3, r2
 8006d18:	3304      	adds	r3, #4
 8006d1a:	e00b      	b.n	8006d34 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006d1c:	7bbb      	ldrb	r3, [r7, #14]
 8006d1e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006d22:	4613      	mov	r3, r2
 8006d24:	009b      	lsls	r3, r3, #2
 8006d26:	4413      	add	r3, r2
 8006d28:	009b      	lsls	r3, r3, #2
 8006d2a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006d2e:	687a      	ldr	r2, [r7, #4]
 8006d30:	4413      	add	r3, r2
 8006d32:	3304      	adds	r3, #4
 8006d34:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8006d36:	68bb      	ldr	r3, [r7, #8]
 8006d38:	2200      	movs	r2, #0
 8006d3a:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006d3c:	68bb      	ldr	r3, [r7, #8]
 8006d3e:	2202      	movs	r2, #2
 8006d40:	4619      	mov	r1, r3
 8006d42:	6878      	ldr	r0, [r7, #4]
 8006d44:	f000 fc47 	bl	80075d6 <USBD_CtlSendData>
              break;
 8006d48:	e06a      	b.n	8006e20 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8006d4a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	da11      	bge.n	8006d76 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8006d52:	7bbb      	ldrb	r3, [r7, #14]
 8006d54:	f003 020f 	and.w	r2, r3, #15
 8006d58:	6879      	ldr	r1, [r7, #4]
 8006d5a:	4613      	mov	r3, r2
 8006d5c:	009b      	lsls	r3, r3, #2
 8006d5e:	4413      	add	r3, r2
 8006d60:	009b      	lsls	r3, r3, #2
 8006d62:	440b      	add	r3, r1
 8006d64:	3324      	adds	r3, #36	; 0x24
 8006d66:	881b      	ldrh	r3, [r3, #0]
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d117      	bne.n	8006d9c <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8006d6c:	6839      	ldr	r1, [r7, #0]
 8006d6e:	6878      	ldr	r0, [r7, #4]
 8006d70:	f000 fbc0 	bl	80074f4 <USBD_CtlError>
                  break;
 8006d74:	e054      	b.n	8006e20 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8006d76:	7bbb      	ldrb	r3, [r7, #14]
 8006d78:	f003 020f 	and.w	r2, r3, #15
 8006d7c:	6879      	ldr	r1, [r7, #4]
 8006d7e:	4613      	mov	r3, r2
 8006d80:	009b      	lsls	r3, r3, #2
 8006d82:	4413      	add	r3, r2
 8006d84:	009b      	lsls	r3, r3, #2
 8006d86:	440b      	add	r3, r1
 8006d88:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006d8c:	881b      	ldrh	r3, [r3, #0]
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d104      	bne.n	8006d9c <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8006d92:	6839      	ldr	r1, [r7, #0]
 8006d94:	6878      	ldr	r0, [r7, #4]
 8006d96:	f000 fbad 	bl	80074f4 <USBD_CtlError>
                  break;
 8006d9a:	e041      	b.n	8006e20 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006d9c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	da0b      	bge.n	8006dbc <USBD_StdEPReq+0x23e>
 8006da4:	7bbb      	ldrb	r3, [r7, #14]
 8006da6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006daa:	4613      	mov	r3, r2
 8006dac:	009b      	lsls	r3, r3, #2
 8006dae:	4413      	add	r3, r2
 8006db0:	009b      	lsls	r3, r3, #2
 8006db2:	3310      	adds	r3, #16
 8006db4:	687a      	ldr	r2, [r7, #4]
 8006db6:	4413      	add	r3, r2
 8006db8:	3304      	adds	r3, #4
 8006dba:	e00b      	b.n	8006dd4 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006dbc:	7bbb      	ldrb	r3, [r7, #14]
 8006dbe:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006dc2:	4613      	mov	r3, r2
 8006dc4:	009b      	lsls	r3, r3, #2
 8006dc6:	4413      	add	r3, r2
 8006dc8:	009b      	lsls	r3, r3, #2
 8006dca:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006dce:	687a      	ldr	r2, [r7, #4]
 8006dd0:	4413      	add	r3, r2
 8006dd2:	3304      	adds	r3, #4
 8006dd4:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8006dd6:	7bbb      	ldrb	r3, [r7, #14]
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	d002      	beq.n	8006de2 <USBD_StdEPReq+0x264>
 8006ddc:	7bbb      	ldrb	r3, [r7, #14]
 8006dde:	2b80      	cmp	r3, #128	; 0x80
 8006de0:	d103      	bne.n	8006dea <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 8006de2:	68bb      	ldr	r3, [r7, #8]
 8006de4:	2200      	movs	r2, #0
 8006de6:	601a      	str	r2, [r3, #0]
 8006de8:	e00e      	b.n	8006e08 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8006dea:	7bbb      	ldrb	r3, [r7, #14]
 8006dec:	4619      	mov	r1, r3
 8006dee:	6878      	ldr	r0, [r7, #4]
 8006df0:	f001 f8aa 	bl	8007f48 <USBD_LL_IsStallEP>
 8006df4:	4603      	mov	r3, r0
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d003      	beq.n	8006e02 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 8006dfa:	68bb      	ldr	r3, [r7, #8]
 8006dfc:	2201      	movs	r2, #1
 8006dfe:	601a      	str	r2, [r3, #0]
 8006e00:	e002      	b.n	8006e08 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 8006e02:	68bb      	ldr	r3, [r7, #8]
 8006e04:	2200      	movs	r2, #0
 8006e06:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006e08:	68bb      	ldr	r3, [r7, #8]
 8006e0a:	2202      	movs	r2, #2
 8006e0c:	4619      	mov	r1, r3
 8006e0e:	6878      	ldr	r0, [r7, #4]
 8006e10:	f000 fbe1 	bl	80075d6 <USBD_CtlSendData>
              break;
 8006e14:	e004      	b.n	8006e20 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 8006e16:	6839      	ldr	r1, [r7, #0]
 8006e18:	6878      	ldr	r0, [r7, #4]
 8006e1a:	f000 fb6b 	bl	80074f4 <USBD_CtlError>
              break;
 8006e1e:	bf00      	nop
          }
          break;
 8006e20:	e004      	b.n	8006e2c <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 8006e22:	6839      	ldr	r1, [r7, #0]
 8006e24:	6878      	ldr	r0, [r7, #4]
 8006e26:	f000 fb65 	bl	80074f4 <USBD_CtlError>
          break;
 8006e2a:	bf00      	nop
      }
      break;
 8006e2c:	e004      	b.n	8006e38 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 8006e2e:	6839      	ldr	r1, [r7, #0]
 8006e30:	6878      	ldr	r0, [r7, #4]
 8006e32:	f000 fb5f 	bl	80074f4 <USBD_CtlError>
      break;
 8006e36:	bf00      	nop
  }

  return ret;
 8006e38:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e3a:	4618      	mov	r0, r3
 8006e3c:	3710      	adds	r7, #16
 8006e3e:	46bd      	mov	sp, r7
 8006e40:	bd80      	pop	{r7, pc}
	...

08006e44 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006e44:	b580      	push	{r7, lr}
 8006e46:	b084      	sub	sp, #16
 8006e48:	af00      	add	r7, sp, #0
 8006e4a:	6078      	str	r0, [r7, #4]
 8006e4c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006e4e:	2300      	movs	r3, #0
 8006e50:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8006e52:	2300      	movs	r3, #0
 8006e54:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8006e56:	2300      	movs	r3, #0
 8006e58:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8006e5a:	683b      	ldr	r3, [r7, #0]
 8006e5c:	885b      	ldrh	r3, [r3, #2]
 8006e5e:	0a1b      	lsrs	r3, r3, #8
 8006e60:	b29b      	uxth	r3, r3
 8006e62:	3b01      	subs	r3, #1
 8006e64:	2b0e      	cmp	r3, #14
 8006e66:	f200 8152 	bhi.w	800710e <USBD_GetDescriptor+0x2ca>
 8006e6a:	a201      	add	r2, pc, #4	; (adr r2, 8006e70 <USBD_GetDescriptor+0x2c>)
 8006e6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e70:	08006ee1 	.word	0x08006ee1
 8006e74:	08006ef9 	.word	0x08006ef9
 8006e78:	08006f39 	.word	0x08006f39
 8006e7c:	0800710f 	.word	0x0800710f
 8006e80:	0800710f 	.word	0x0800710f
 8006e84:	080070af 	.word	0x080070af
 8006e88:	080070db 	.word	0x080070db
 8006e8c:	0800710f 	.word	0x0800710f
 8006e90:	0800710f 	.word	0x0800710f
 8006e94:	0800710f 	.word	0x0800710f
 8006e98:	0800710f 	.word	0x0800710f
 8006e9c:	0800710f 	.word	0x0800710f
 8006ea0:	0800710f 	.word	0x0800710f
 8006ea4:	0800710f 	.word	0x0800710f
 8006ea8:	08006ead 	.word	0x08006ead
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006eb2:	69db      	ldr	r3, [r3, #28]
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d00b      	beq.n	8006ed0 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006ebe:	69db      	ldr	r3, [r3, #28]
 8006ec0:	687a      	ldr	r2, [r7, #4]
 8006ec2:	7c12      	ldrb	r2, [r2, #16]
 8006ec4:	f107 0108 	add.w	r1, r7, #8
 8006ec8:	4610      	mov	r0, r2
 8006eca:	4798      	blx	r3
 8006ecc:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006ece:	e126      	b.n	800711e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8006ed0:	6839      	ldr	r1, [r7, #0]
 8006ed2:	6878      	ldr	r0, [r7, #4]
 8006ed4:	f000 fb0e 	bl	80074f4 <USBD_CtlError>
        err++;
 8006ed8:	7afb      	ldrb	r3, [r7, #11]
 8006eda:	3301      	adds	r3, #1
 8006edc:	72fb      	strb	r3, [r7, #11]
      break;
 8006ede:	e11e      	b.n	800711e <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	687a      	ldr	r2, [r7, #4]
 8006eea:	7c12      	ldrb	r2, [r2, #16]
 8006eec:	f107 0108 	add.w	r1, r7, #8
 8006ef0:	4610      	mov	r0, r2
 8006ef2:	4798      	blx	r3
 8006ef4:	60f8      	str	r0, [r7, #12]
      break;
 8006ef6:	e112      	b.n	800711e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	7c1b      	ldrb	r3, [r3, #16]
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	d10d      	bne.n	8006f1c <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006f06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f08:	f107 0208 	add.w	r2, r7, #8
 8006f0c:	4610      	mov	r0, r2
 8006f0e:	4798      	blx	r3
 8006f10:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	3301      	adds	r3, #1
 8006f16:	2202      	movs	r2, #2
 8006f18:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8006f1a:	e100      	b.n	800711e <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006f22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f24:	f107 0208 	add.w	r2, r7, #8
 8006f28:	4610      	mov	r0, r2
 8006f2a:	4798      	blx	r3
 8006f2c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	3301      	adds	r3, #1
 8006f32:	2202      	movs	r2, #2
 8006f34:	701a      	strb	r2, [r3, #0]
      break;
 8006f36:	e0f2      	b.n	800711e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8006f38:	683b      	ldr	r3, [r7, #0]
 8006f3a:	885b      	ldrh	r3, [r3, #2]
 8006f3c:	b2db      	uxtb	r3, r3
 8006f3e:	2b05      	cmp	r3, #5
 8006f40:	f200 80ac 	bhi.w	800709c <USBD_GetDescriptor+0x258>
 8006f44:	a201      	add	r2, pc, #4	; (adr r2, 8006f4c <USBD_GetDescriptor+0x108>)
 8006f46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f4a:	bf00      	nop
 8006f4c:	08006f65 	.word	0x08006f65
 8006f50:	08006f99 	.word	0x08006f99
 8006f54:	08006fcd 	.word	0x08006fcd
 8006f58:	08007001 	.word	0x08007001
 8006f5c:	08007035 	.word	0x08007035
 8006f60:	08007069 	.word	0x08007069
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006f6a:	685b      	ldr	r3, [r3, #4]
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	d00b      	beq.n	8006f88 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006f76:	685b      	ldr	r3, [r3, #4]
 8006f78:	687a      	ldr	r2, [r7, #4]
 8006f7a:	7c12      	ldrb	r2, [r2, #16]
 8006f7c:	f107 0108 	add.w	r1, r7, #8
 8006f80:	4610      	mov	r0, r2
 8006f82:	4798      	blx	r3
 8006f84:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006f86:	e091      	b.n	80070ac <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8006f88:	6839      	ldr	r1, [r7, #0]
 8006f8a:	6878      	ldr	r0, [r7, #4]
 8006f8c:	f000 fab2 	bl	80074f4 <USBD_CtlError>
            err++;
 8006f90:	7afb      	ldrb	r3, [r7, #11]
 8006f92:	3301      	adds	r3, #1
 8006f94:	72fb      	strb	r3, [r7, #11]
          break;
 8006f96:	e089      	b.n	80070ac <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006f9e:	689b      	ldr	r3, [r3, #8]
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d00b      	beq.n	8006fbc <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006faa:	689b      	ldr	r3, [r3, #8]
 8006fac:	687a      	ldr	r2, [r7, #4]
 8006fae:	7c12      	ldrb	r2, [r2, #16]
 8006fb0:	f107 0108 	add.w	r1, r7, #8
 8006fb4:	4610      	mov	r0, r2
 8006fb6:	4798      	blx	r3
 8006fb8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006fba:	e077      	b.n	80070ac <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8006fbc:	6839      	ldr	r1, [r7, #0]
 8006fbe:	6878      	ldr	r0, [r7, #4]
 8006fc0:	f000 fa98 	bl	80074f4 <USBD_CtlError>
            err++;
 8006fc4:	7afb      	ldrb	r3, [r7, #11]
 8006fc6:	3301      	adds	r3, #1
 8006fc8:	72fb      	strb	r3, [r7, #11]
          break;
 8006fca:	e06f      	b.n	80070ac <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006fd2:	68db      	ldr	r3, [r3, #12]
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	d00b      	beq.n	8006ff0 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006fde:	68db      	ldr	r3, [r3, #12]
 8006fe0:	687a      	ldr	r2, [r7, #4]
 8006fe2:	7c12      	ldrb	r2, [r2, #16]
 8006fe4:	f107 0108 	add.w	r1, r7, #8
 8006fe8:	4610      	mov	r0, r2
 8006fea:	4798      	blx	r3
 8006fec:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006fee:	e05d      	b.n	80070ac <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8006ff0:	6839      	ldr	r1, [r7, #0]
 8006ff2:	6878      	ldr	r0, [r7, #4]
 8006ff4:	f000 fa7e 	bl	80074f4 <USBD_CtlError>
            err++;
 8006ff8:	7afb      	ldrb	r3, [r7, #11]
 8006ffa:	3301      	adds	r3, #1
 8006ffc:	72fb      	strb	r3, [r7, #11]
          break;
 8006ffe:	e055      	b.n	80070ac <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007006:	691b      	ldr	r3, [r3, #16]
 8007008:	2b00      	cmp	r3, #0
 800700a:	d00b      	beq.n	8007024 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007012:	691b      	ldr	r3, [r3, #16]
 8007014:	687a      	ldr	r2, [r7, #4]
 8007016:	7c12      	ldrb	r2, [r2, #16]
 8007018:	f107 0108 	add.w	r1, r7, #8
 800701c:	4610      	mov	r0, r2
 800701e:	4798      	blx	r3
 8007020:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007022:	e043      	b.n	80070ac <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8007024:	6839      	ldr	r1, [r7, #0]
 8007026:	6878      	ldr	r0, [r7, #4]
 8007028:	f000 fa64 	bl	80074f4 <USBD_CtlError>
            err++;
 800702c:	7afb      	ldrb	r3, [r7, #11]
 800702e:	3301      	adds	r3, #1
 8007030:	72fb      	strb	r3, [r7, #11]
          break;
 8007032:	e03b      	b.n	80070ac <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800703a:	695b      	ldr	r3, [r3, #20]
 800703c:	2b00      	cmp	r3, #0
 800703e:	d00b      	beq.n	8007058 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007046:	695b      	ldr	r3, [r3, #20]
 8007048:	687a      	ldr	r2, [r7, #4]
 800704a:	7c12      	ldrb	r2, [r2, #16]
 800704c:	f107 0108 	add.w	r1, r7, #8
 8007050:	4610      	mov	r0, r2
 8007052:	4798      	blx	r3
 8007054:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007056:	e029      	b.n	80070ac <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8007058:	6839      	ldr	r1, [r7, #0]
 800705a:	6878      	ldr	r0, [r7, #4]
 800705c:	f000 fa4a 	bl	80074f4 <USBD_CtlError>
            err++;
 8007060:	7afb      	ldrb	r3, [r7, #11]
 8007062:	3301      	adds	r3, #1
 8007064:	72fb      	strb	r3, [r7, #11]
          break;
 8007066:	e021      	b.n	80070ac <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800706e:	699b      	ldr	r3, [r3, #24]
 8007070:	2b00      	cmp	r3, #0
 8007072:	d00b      	beq.n	800708c <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800707a:	699b      	ldr	r3, [r3, #24]
 800707c:	687a      	ldr	r2, [r7, #4]
 800707e:	7c12      	ldrb	r2, [r2, #16]
 8007080:	f107 0108 	add.w	r1, r7, #8
 8007084:	4610      	mov	r0, r2
 8007086:	4798      	blx	r3
 8007088:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800708a:	e00f      	b.n	80070ac <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800708c:	6839      	ldr	r1, [r7, #0]
 800708e:	6878      	ldr	r0, [r7, #4]
 8007090:	f000 fa30 	bl	80074f4 <USBD_CtlError>
            err++;
 8007094:	7afb      	ldrb	r3, [r7, #11]
 8007096:	3301      	adds	r3, #1
 8007098:	72fb      	strb	r3, [r7, #11]
          break;
 800709a:	e007      	b.n	80070ac <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800709c:	6839      	ldr	r1, [r7, #0]
 800709e:	6878      	ldr	r0, [r7, #4]
 80070a0:	f000 fa28 	bl	80074f4 <USBD_CtlError>
          err++;
 80070a4:	7afb      	ldrb	r3, [r7, #11]
 80070a6:	3301      	adds	r3, #1
 80070a8:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 80070aa:	bf00      	nop
      }
      break;
 80070ac:	e037      	b.n	800711e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	7c1b      	ldrb	r3, [r3, #16]
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	d109      	bne.n	80070ca <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80070bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80070be:	f107 0208 	add.w	r2, r7, #8
 80070c2:	4610      	mov	r0, r2
 80070c4:	4798      	blx	r3
 80070c6:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80070c8:	e029      	b.n	800711e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 80070ca:	6839      	ldr	r1, [r7, #0]
 80070cc:	6878      	ldr	r0, [r7, #4]
 80070ce:	f000 fa11 	bl	80074f4 <USBD_CtlError>
        err++;
 80070d2:	7afb      	ldrb	r3, [r7, #11]
 80070d4:	3301      	adds	r3, #1
 80070d6:	72fb      	strb	r3, [r7, #11]
      break;
 80070d8:	e021      	b.n	800711e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	7c1b      	ldrb	r3, [r3, #16]
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d10d      	bne.n	80070fe <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80070e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070ea:	f107 0208 	add.w	r2, r7, #8
 80070ee:	4610      	mov	r0, r2
 80070f0:	4798      	blx	r3
 80070f2:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	3301      	adds	r3, #1
 80070f8:	2207      	movs	r2, #7
 80070fa:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80070fc:	e00f      	b.n	800711e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 80070fe:	6839      	ldr	r1, [r7, #0]
 8007100:	6878      	ldr	r0, [r7, #4]
 8007102:	f000 f9f7 	bl	80074f4 <USBD_CtlError>
        err++;
 8007106:	7afb      	ldrb	r3, [r7, #11]
 8007108:	3301      	adds	r3, #1
 800710a:	72fb      	strb	r3, [r7, #11]
      break;
 800710c:	e007      	b.n	800711e <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800710e:	6839      	ldr	r1, [r7, #0]
 8007110:	6878      	ldr	r0, [r7, #4]
 8007112:	f000 f9ef 	bl	80074f4 <USBD_CtlError>
      err++;
 8007116:	7afb      	ldrb	r3, [r7, #11]
 8007118:	3301      	adds	r3, #1
 800711a:	72fb      	strb	r3, [r7, #11]
      break;
 800711c:	bf00      	nop
  }

  if (err != 0U)
 800711e:	7afb      	ldrb	r3, [r7, #11]
 8007120:	2b00      	cmp	r3, #0
 8007122:	d11e      	bne.n	8007162 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 8007124:	683b      	ldr	r3, [r7, #0]
 8007126:	88db      	ldrh	r3, [r3, #6]
 8007128:	2b00      	cmp	r3, #0
 800712a:	d016      	beq.n	800715a <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800712c:	893b      	ldrh	r3, [r7, #8]
 800712e:	2b00      	cmp	r3, #0
 8007130:	d00e      	beq.n	8007150 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 8007132:	683b      	ldr	r3, [r7, #0]
 8007134:	88da      	ldrh	r2, [r3, #6]
 8007136:	893b      	ldrh	r3, [r7, #8]
 8007138:	4293      	cmp	r3, r2
 800713a:	bf28      	it	cs
 800713c:	4613      	movcs	r3, r2
 800713e:	b29b      	uxth	r3, r3
 8007140:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8007142:	893b      	ldrh	r3, [r7, #8]
 8007144:	461a      	mov	r2, r3
 8007146:	68f9      	ldr	r1, [r7, #12]
 8007148:	6878      	ldr	r0, [r7, #4]
 800714a:	f000 fa44 	bl	80075d6 <USBD_CtlSendData>
 800714e:	e009      	b.n	8007164 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8007150:	6839      	ldr	r1, [r7, #0]
 8007152:	6878      	ldr	r0, [r7, #4]
 8007154:	f000 f9ce 	bl	80074f4 <USBD_CtlError>
 8007158:	e004      	b.n	8007164 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800715a:	6878      	ldr	r0, [r7, #4]
 800715c:	f000 fa95 	bl	800768a <USBD_CtlSendStatus>
 8007160:	e000      	b.n	8007164 <USBD_GetDescriptor+0x320>
    return;
 8007162:	bf00      	nop
  }
}
 8007164:	3710      	adds	r7, #16
 8007166:	46bd      	mov	sp, r7
 8007168:	bd80      	pop	{r7, pc}
 800716a:	bf00      	nop

0800716c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800716c:	b580      	push	{r7, lr}
 800716e:	b084      	sub	sp, #16
 8007170:	af00      	add	r7, sp, #0
 8007172:	6078      	str	r0, [r7, #4]
 8007174:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8007176:	683b      	ldr	r3, [r7, #0]
 8007178:	889b      	ldrh	r3, [r3, #4]
 800717a:	2b00      	cmp	r3, #0
 800717c:	d131      	bne.n	80071e2 <USBD_SetAddress+0x76>
 800717e:	683b      	ldr	r3, [r7, #0]
 8007180:	88db      	ldrh	r3, [r3, #6]
 8007182:	2b00      	cmp	r3, #0
 8007184:	d12d      	bne.n	80071e2 <USBD_SetAddress+0x76>
 8007186:	683b      	ldr	r3, [r7, #0]
 8007188:	885b      	ldrh	r3, [r3, #2]
 800718a:	2b7f      	cmp	r3, #127	; 0x7f
 800718c:	d829      	bhi.n	80071e2 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800718e:	683b      	ldr	r3, [r7, #0]
 8007190:	885b      	ldrh	r3, [r3, #2]
 8007192:	b2db      	uxtb	r3, r3
 8007194:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007198:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80071a0:	b2db      	uxtb	r3, r3
 80071a2:	2b03      	cmp	r3, #3
 80071a4:	d104      	bne.n	80071b0 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 80071a6:	6839      	ldr	r1, [r7, #0]
 80071a8:	6878      	ldr	r0, [r7, #4]
 80071aa:	f000 f9a3 	bl	80074f4 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80071ae:	e01d      	b.n	80071ec <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	7bfa      	ldrb	r2, [r7, #15]
 80071b4:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80071b8:	7bfb      	ldrb	r3, [r7, #15]
 80071ba:	4619      	mov	r1, r3
 80071bc:	6878      	ldr	r0, [r7, #4]
 80071be:	f000 feef 	bl	8007fa0 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80071c2:	6878      	ldr	r0, [r7, #4]
 80071c4:	f000 fa61 	bl	800768a <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80071c8:	7bfb      	ldrb	r3, [r7, #15]
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d004      	beq.n	80071d8 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	2202      	movs	r2, #2
 80071d2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80071d6:	e009      	b.n	80071ec <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	2201      	movs	r2, #1
 80071dc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80071e0:	e004      	b.n	80071ec <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80071e2:	6839      	ldr	r1, [r7, #0]
 80071e4:	6878      	ldr	r0, [r7, #4]
 80071e6:	f000 f985 	bl	80074f4 <USBD_CtlError>
  }
}
 80071ea:	bf00      	nop
 80071ec:	bf00      	nop
 80071ee:	3710      	adds	r7, #16
 80071f0:	46bd      	mov	sp, r7
 80071f2:	bd80      	pop	{r7, pc}

080071f4 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80071f4:	b580      	push	{r7, lr}
 80071f6:	b084      	sub	sp, #16
 80071f8:	af00      	add	r7, sp, #0
 80071fa:	6078      	str	r0, [r7, #4]
 80071fc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80071fe:	2300      	movs	r3, #0
 8007200:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8007202:	683b      	ldr	r3, [r7, #0]
 8007204:	885b      	ldrh	r3, [r3, #2]
 8007206:	b2da      	uxtb	r2, r3
 8007208:	4b4c      	ldr	r3, [pc, #304]	; (800733c <USBD_SetConfig+0x148>)
 800720a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800720c:	4b4b      	ldr	r3, [pc, #300]	; (800733c <USBD_SetConfig+0x148>)
 800720e:	781b      	ldrb	r3, [r3, #0]
 8007210:	2b01      	cmp	r3, #1
 8007212:	d905      	bls.n	8007220 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8007214:	6839      	ldr	r1, [r7, #0]
 8007216:	6878      	ldr	r0, [r7, #4]
 8007218:	f000 f96c 	bl	80074f4 <USBD_CtlError>
    return USBD_FAIL;
 800721c:	2303      	movs	r3, #3
 800721e:	e088      	b.n	8007332 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007226:	b2db      	uxtb	r3, r3
 8007228:	2b02      	cmp	r3, #2
 800722a:	d002      	beq.n	8007232 <USBD_SetConfig+0x3e>
 800722c:	2b03      	cmp	r3, #3
 800722e:	d025      	beq.n	800727c <USBD_SetConfig+0x88>
 8007230:	e071      	b.n	8007316 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8007232:	4b42      	ldr	r3, [pc, #264]	; (800733c <USBD_SetConfig+0x148>)
 8007234:	781b      	ldrb	r3, [r3, #0]
 8007236:	2b00      	cmp	r3, #0
 8007238:	d01c      	beq.n	8007274 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 800723a:	4b40      	ldr	r3, [pc, #256]	; (800733c <USBD_SetConfig+0x148>)
 800723c:	781b      	ldrb	r3, [r3, #0]
 800723e:	461a      	mov	r2, r3
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007244:	4b3d      	ldr	r3, [pc, #244]	; (800733c <USBD_SetConfig+0x148>)
 8007246:	781b      	ldrb	r3, [r3, #0]
 8007248:	4619      	mov	r1, r3
 800724a:	6878      	ldr	r0, [r7, #4]
 800724c:	f7ff f91e 	bl	800648c <USBD_SetClassConfig>
 8007250:	4603      	mov	r3, r0
 8007252:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8007254:	7bfb      	ldrb	r3, [r7, #15]
 8007256:	2b00      	cmp	r3, #0
 8007258:	d004      	beq.n	8007264 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 800725a:	6839      	ldr	r1, [r7, #0]
 800725c:	6878      	ldr	r0, [r7, #4]
 800725e:	f000 f949 	bl	80074f4 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007262:	e065      	b.n	8007330 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8007264:	6878      	ldr	r0, [r7, #4]
 8007266:	f000 fa10 	bl	800768a <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	2203      	movs	r2, #3
 800726e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8007272:	e05d      	b.n	8007330 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8007274:	6878      	ldr	r0, [r7, #4]
 8007276:	f000 fa08 	bl	800768a <USBD_CtlSendStatus>
      break;
 800727a:	e059      	b.n	8007330 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800727c:	4b2f      	ldr	r3, [pc, #188]	; (800733c <USBD_SetConfig+0x148>)
 800727e:	781b      	ldrb	r3, [r3, #0]
 8007280:	2b00      	cmp	r3, #0
 8007282:	d112      	bne.n	80072aa <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	2202      	movs	r2, #2
 8007288:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800728c:	4b2b      	ldr	r3, [pc, #172]	; (800733c <USBD_SetConfig+0x148>)
 800728e:	781b      	ldrb	r3, [r3, #0]
 8007290:	461a      	mov	r2, r3
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007296:	4b29      	ldr	r3, [pc, #164]	; (800733c <USBD_SetConfig+0x148>)
 8007298:	781b      	ldrb	r3, [r3, #0]
 800729a:	4619      	mov	r1, r3
 800729c:	6878      	ldr	r0, [r7, #4]
 800729e:	f7ff f911 	bl	80064c4 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80072a2:	6878      	ldr	r0, [r7, #4]
 80072a4:	f000 f9f1 	bl	800768a <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80072a8:	e042      	b.n	8007330 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 80072aa:	4b24      	ldr	r3, [pc, #144]	; (800733c <USBD_SetConfig+0x148>)
 80072ac:	781b      	ldrb	r3, [r3, #0]
 80072ae:	461a      	mov	r2, r3
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	685b      	ldr	r3, [r3, #4]
 80072b4:	429a      	cmp	r2, r3
 80072b6:	d02a      	beq.n	800730e <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	685b      	ldr	r3, [r3, #4]
 80072bc:	b2db      	uxtb	r3, r3
 80072be:	4619      	mov	r1, r3
 80072c0:	6878      	ldr	r0, [r7, #4]
 80072c2:	f7ff f8ff 	bl	80064c4 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80072c6:	4b1d      	ldr	r3, [pc, #116]	; (800733c <USBD_SetConfig+0x148>)
 80072c8:	781b      	ldrb	r3, [r3, #0]
 80072ca:	461a      	mov	r2, r3
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80072d0:	4b1a      	ldr	r3, [pc, #104]	; (800733c <USBD_SetConfig+0x148>)
 80072d2:	781b      	ldrb	r3, [r3, #0]
 80072d4:	4619      	mov	r1, r3
 80072d6:	6878      	ldr	r0, [r7, #4]
 80072d8:	f7ff f8d8 	bl	800648c <USBD_SetClassConfig>
 80072dc:	4603      	mov	r3, r0
 80072de:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 80072e0:	7bfb      	ldrb	r3, [r7, #15]
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d00f      	beq.n	8007306 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 80072e6:	6839      	ldr	r1, [r7, #0]
 80072e8:	6878      	ldr	r0, [r7, #4]
 80072ea:	f000 f903 	bl	80074f4 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	685b      	ldr	r3, [r3, #4]
 80072f2:	b2db      	uxtb	r3, r3
 80072f4:	4619      	mov	r1, r3
 80072f6:	6878      	ldr	r0, [r7, #4]
 80072f8:	f7ff f8e4 	bl	80064c4 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	2202      	movs	r2, #2
 8007300:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8007304:	e014      	b.n	8007330 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8007306:	6878      	ldr	r0, [r7, #4]
 8007308:	f000 f9bf 	bl	800768a <USBD_CtlSendStatus>
      break;
 800730c:	e010      	b.n	8007330 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800730e:	6878      	ldr	r0, [r7, #4]
 8007310:	f000 f9bb 	bl	800768a <USBD_CtlSendStatus>
      break;
 8007314:	e00c      	b.n	8007330 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8007316:	6839      	ldr	r1, [r7, #0]
 8007318:	6878      	ldr	r0, [r7, #4]
 800731a:	f000 f8eb 	bl	80074f4 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800731e:	4b07      	ldr	r3, [pc, #28]	; (800733c <USBD_SetConfig+0x148>)
 8007320:	781b      	ldrb	r3, [r3, #0]
 8007322:	4619      	mov	r1, r3
 8007324:	6878      	ldr	r0, [r7, #4]
 8007326:	f7ff f8cd 	bl	80064c4 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800732a:	2303      	movs	r3, #3
 800732c:	73fb      	strb	r3, [r7, #15]
      break;
 800732e:	bf00      	nop
  }

  return ret;
 8007330:	7bfb      	ldrb	r3, [r7, #15]
}
 8007332:	4618      	mov	r0, r3
 8007334:	3710      	adds	r7, #16
 8007336:	46bd      	mov	sp, r7
 8007338:	bd80      	pop	{r7, pc}
 800733a:	bf00      	nop
 800733c:	200001b0 	.word	0x200001b0

08007340 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007340:	b580      	push	{r7, lr}
 8007342:	b082      	sub	sp, #8
 8007344:	af00      	add	r7, sp, #0
 8007346:	6078      	str	r0, [r7, #4]
 8007348:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800734a:	683b      	ldr	r3, [r7, #0]
 800734c:	88db      	ldrh	r3, [r3, #6]
 800734e:	2b01      	cmp	r3, #1
 8007350:	d004      	beq.n	800735c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8007352:	6839      	ldr	r1, [r7, #0]
 8007354:	6878      	ldr	r0, [r7, #4]
 8007356:	f000 f8cd 	bl	80074f4 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800735a:	e023      	b.n	80073a4 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007362:	b2db      	uxtb	r3, r3
 8007364:	2b02      	cmp	r3, #2
 8007366:	dc02      	bgt.n	800736e <USBD_GetConfig+0x2e>
 8007368:	2b00      	cmp	r3, #0
 800736a:	dc03      	bgt.n	8007374 <USBD_GetConfig+0x34>
 800736c:	e015      	b.n	800739a <USBD_GetConfig+0x5a>
 800736e:	2b03      	cmp	r3, #3
 8007370:	d00b      	beq.n	800738a <USBD_GetConfig+0x4a>
 8007372:	e012      	b.n	800739a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	2200      	movs	r2, #0
 8007378:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	3308      	adds	r3, #8
 800737e:	2201      	movs	r2, #1
 8007380:	4619      	mov	r1, r3
 8007382:	6878      	ldr	r0, [r7, #4]
 8007384:	f000 f927 	bl	80075d6 <USBD_CtlSendData>
        break;
 8007388:	e00c      	b.n	80073a4 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	3304      	adds	r3, #4
 800738e:	2201      	movs	r2, #1
 8007390:	4619      	mov	r1, r3
 8007392:	6878      	ldr	r0, [r7, #4]
 8007394:	f000 f91f 	bl	80075d6 <USBD_CtlSendData>
        break;
 8007398:	e004      	b.n	80073a4 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800739a:	6839      	ldr	r1, [r7, #0]
 800739c:	6878      	ldr	r0, [r7, #4]
 800739e:	f000 f8a9 	bl	80074f4 <USBD_CtlError>
        break;
 80073a2:	bf00      	nop
}
 80073a4:	bf00      	nop
 80073a6:	3708      	adds	r7, #8
 80073a8:	46bd      	mov	sp, r7
 80073aa:	bd80      	pop	{r7, pc}

080073ac <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80073ac:	b580      	push	{r7, lr}
 80073ae:	b082      	sub	sp, #8
 80073b0:	af00      	add	r7, sp, #0
 80073b2:	6078      	str	r0, [r7, #4]
 80073b4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80073bc:	b2db      	uxtb	r3, r3
 80073be:	3b01      	subs	r3, #1
 80073c0:	2b02      	cmp	r3, #2
 80073c2:	d81e      	bhi.n	8007402 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80073c4:	683b      	ldr	r3, [r7, #0]
 80073c6:	88db      	ldrh	r3, [r3, #6]
 80073c8:	2b02      	cmp	r3, #2
 80073ca:	d004      	beq.n	80073d6 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 80073cc:	6839      	ldr	r1, [r7, #0]
 80073ce:	6878      	ldr	r0, [r7, #4]
 80073d0:	f000 f890 	bl	80074f4 <USBD_CtlError>
        break;
 80073d4:	e01a      	b.n	800740c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	2201      	movs	r2, #1
 80073da:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	d005      	beq.n	80073f2 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	68db      	ldr	r3, [r3, #12]
 80073ea:	f043 0202 	orr.w	r2, r3, #2
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	330c      	adds	r3, #12
 80073f6:	2202      	movs	r2, #2
 80073f8:	4619      	mov	r1, r3
 80073fa:	6878      	ldr	r0, [r7, #4]
 80073fc:	f000 f8eb 	bl	80075d6 <USBD_CtlSendData>
      break;
 8007400:	e004      	b.n	800740c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8007402:	6839      	ldr	r1, [r7, #0]
 8007404:	6878      	ldr	r0, [r7, #4]
 8007406:	f000 f875 	bl	80074f4 <USBD_CtlError>
      break;
 800740a:	bf00      	nop
  }
}
 800740c:	bf00      	nop
 800740e:	3708      	adds	r7, #8
 8007410:	46bd      	mov	sp, r7
 8007412:	bd80      	pop	{r7, pc}

08007414 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007414:	b580      	push	{r7, lr}
 8007416:	b082      	sub	sp, #8
 8007418:	af00      	add	r7, sp, #0
 800741a:	6078      	str	r0, [r7, #4]
 800741c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800741e:	683b      	ldr	r3, [r7, #0]
 8007420:	885b      	ldrh	r3, [r3, #2]
 8007422:	2b01      	cmp	r3, #1
 8007424:	d106      	bne.n	8007434 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	2201      	movs	r2, #1
 800742a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800742e:	6878      	ldr	r0, [r7, #4]
 8007430:	f000 f92b 	bl	800768a <USBD_CtlSendStatus>
  }
}
 8007434:	bf00      	nop
 8007436:	3708      	adds	r7, #8
 8007438:	46bd      	mov	sp, r7
 800743a:	bd80      	pop	{r7, pc}

0800743c <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800743c:	b580      	push	{r7, lr}
 800743e:	b082      	sub	sp, #8
 8007440:	af00      	add	r7, sp, #0
 8007442:	6078      	str	r0, [r7, #4]
 8007444:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800744c:	b2db      	uxtb	r3, r3
 800744e:	3b01      	subs	r3, #1
 8007450:	2b02      	cmp	r3, #2
 8007452:	d80b      	bhi.n	800746c <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007454:	683b      	ldr	r3, [r7, #0]
 8007456:	885b      	ldrh	r3, [r3, #2]
 8007458:	2b01      	cmp	r3, #1
 800745a:	d10c      	bne.n	8007476 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	2200      	movs	r2, #0
 8007460:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8007464:	6878      	ldr	r0, [r7, #4]
 8007466:	f000 f910 	bl	800768a <USBD_CtlSendStatus>
      }
      break;
 800746a:	e004      	b.n	8007476 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800746c:	6839      	ldr	r1, [r7, #0]
 800746e:	6878      	ldr	r0, [r7, #4]
 8007470:	f000 f840 	bl	80074f4 <USBD_CtlError>
      break;
 8007474:	e000      	b.n	8007478 <USBD_ClrFeature+0x3c>
      break;
 8007476:	bf00      	nop
  }
}
 8007478:	bf00      	nop
 800747a:	3708      	adds	r7, #8
 800747c:	46bd      	mov	sp, r7
 800747e:	bd80      	pop	{r7, pc}

08007480 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8007480:	b580      	push	{r7, lr}
 8007482:	b084      	sub	sp, #16
 8007484:	af00      	add	r7, sp, #0
 8007486:	6078      	str	r0, [r7, #4]
 8007488:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800748a:	683b      	ldr	r3, [r7, #0]
 800748c:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	781a      	ldrb	r2, [r3, #0]
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8007496:	68fb      	ldr	r3, [r7, #12]
 8007498:	3301      	adds	r3, #1
 800749a:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	781a      	ldrb	r2, [r3, #0]
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	3301      	adds	r3, #1
 80074a8:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80074aa:	68f8      	ldr	r0, [r7, #12]
 80074ac:	f7ff fa91 	bl	80069d2 <SWAPBYTE>
 80074b0:	4603      	mov	r3, r0
 80074b2:	461a      	mov	r2, r3
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	3301      	adds	r3, #1
 80074bc:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	3301      	adds	r3, #1
 80074c2:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80074c4:	68f8      	ldr	r0, [r7, #12]
 80074c6:	f7ff fa84 	bl	80069d2 <SWAPBYTE>
 80074ca:	4603      	mov	r3, r0
 80074cc:	461a      	mov	r2, r3
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	3301      	adds	r3, #1
 80074d6:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	3301      	adds	r3, #1
 80074dc:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80074de:	68f8      	ldr	r0, [r7, #12]
 80074e0:	f7ff fa77 	bl	80069d2 <SWAPBYTE>
 80074e4:	4603      	mov	r3, r0
 80074e6:	461a      	mov	r2, r3
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	80da      	strh	r2, [r3, #6]
}
 80074ec:	bf00      	nop
 80074ee:	3710      	adds	r7, #16
 80074f0:	46bd      	mov	sp, r7
 80074f2:	bd80      	pop	{r7, pc}

080074f4 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80074f4:	b580      	push	{r7, lr}
 80074f6:	b082      	sub	sp, #8
 80074f8:	af00      	add	r7, sp, #0
 80074fa:	6078      	str	r0, [r7, #4]
 80074fc:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80074fe:	2180      	movs	r1, #128	; 0x80
 8007500:	6878      	ldr	r0, [r7, #4]
 8007502:	f000 fce3 	bl	8007ecc <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8007506:	2100      	movs	r1, #0
 8007508:	6878      	ldr	r0, [r7, #4]
 800750a:	f000 fcdf 	bl	8007ecc <USBD_LL_StallEP>
}
 800750e:	bf00      	nop
 8007510:	3708      	adds	r7, #8
 8007512:	46bd      	mov	sp, r7
 8007514:	bd80      	pop	{r7, pc}

08007516 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8007516:	b580      	push	{r7, lr}
 8007518:	b086      	sub	sp, #24
 800751a:	af00      	add	r7, sp, #0
 800751c:	60f8      	str	r0, [r7, #12]
 800751e:	60b9      	str	r1, [r7, #8]
 8007520:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8007522:	2300      	movs	r3, #0
 8007524:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	2b00      	cmp	r3, #0
 800752a:	d036      	beq.n	800759a <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8007530:	6938      	ldr	r0, [r7, #16]
 8007532:	f000 f836 	bl	80075a2 <USBD_GetLen>
 8007536:	4603      	mov	r3, r0
 8007538:	3301      	adds	r3, #1
 800753a:	b29b      	uxth	r3, r3
 800753c:	005b      	lsls	r3, r3, #1
 800753e:	b29a      	uxth	r2, r3
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8007544:	7dfb      	ldrb	r3, [r7, #23]
 8007546:	68ba      	ldr	r2, [r7, #8]
 8007548:	4413      	add	r3, r2
 800754a:	687a      	ldr	r2, [r7, #4]
 800754c:	7812      	ldrb	r2, [r2, #0]
 800754e:	701a      	strb	r2, [r3, #0]
  idx++;
 8007550:	7dfb      	ldrb	r3, [r7, #23]
 8007552:	3301      	adds	r3, #1
 8007554:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8007556:	7dfb      	ldrb	r3, [r7, #23]
 8007558:	68ba      	ldr	r2, [r7, #8]
 800755a:	4413      	add	r3, r2
 800755c:	2203      	movs	r2, #3
 800755e:	701a      	strb	r2, [r3, #0]
  idx++;
 8007560:	7dfb      	ldrb	r3, [r7, #23]
 8007562:	3301      	adds	r3, #1
 8007564:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8007566:	e013      	b.n	8007590 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8007568:	7dfb      	ldrb	r3, [r7, #23]
 800756a:	68ba      	ldr	r2, [r7, #8]
 800756c:	4413      	add	r3, r2
 800756e:	693a      	ldr	r2, [r7, #16]
 8007570:	7812      	ldrb	r2, [r2, #0]
 8007572:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8007574:	693b      	ldr	r3, [r7, #16]
 8007576:	3301      	adds	r3, #1
 8007578:	613b      	str	r3, [r7, #16]
    idx++;
 800757a:	7dfb      	ldrb	r3, [r7, #23]
 800757c:	3301      	adds	r3, #1
 800757e:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8007580:	7dfb      	ldrb	r3, [r7, #23]
 8007582:	68ba      	ldr	r2, [r7, #8]
 8007584:	4413      	add	r3, r2
 8007586:	2200      	movs	r2, #0
 8007588:	701a      	strb	r2, [r3, #0]
    idx++;
 800758a:	7dfb      	ldrb	r3, [r7, #23]
 800758c:	3301      	adds	r3, #1
 800758e:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8007590:	693b      	ldr	r3, [r7, #16]
 8007592:	781b      	ldrb	r3, [r3, #0]
 8007594:	2b00      	cmp	r3, #0
 8007596:	d1e7      	bne.n	8007568 <USBD_GetString+0x52>
 8007598:	e000      	b.n	800759c <USBD_GetString+0x86>
    return;
 800759a:	bf00      	nop
  }
}
 800759c:	3718      	adds	r7, #24
 800759e:	46bd      	mov	sp, r7
 80075a0:	bd80      	pop	{r7, pc}

080075a2 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80075a2:	b480      	push	{r7}
 80075a4:	b085      	sub	sp, #20
 80075a6:	af00      	add	r7, sp, #0
 80075a8:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80075aa:	2300      	movs	r3, #0
 80075ac:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80075b2:	e005      	b.n	80075c0 <USBD_GetLen+0x1e>
  {
    len++;
 80075b4:	7bfb      	ldrb	r3, [r7, #15]
 80075b6:	3301      	adds	r3, #1
 80075b8:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80075ba:	68bb      	ldr	r3, [r7, #8]
 80075bc:	3301      	adds	r3, #1
 80075be:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80075c0:	68bb      	ldr	r3, [r7, #8]
 80075c2:	781b      	ldrb	r3, [r3, #0]
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	d1f5      	bne.n	80075b4 <USBD_GetLen+0x12>
  }

  return len;
 80075c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80075ca:	4618      	mov	r0, r3
 80075cc:	3714      	adds	r7, #20
 80075ce:	46bd      	mov	sp, r7
 80075d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075d4:	4770      	bx	lr

080075d6 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80075d6:	b580      	push	{r7, lr}
 80075d8:	b084      	sub	sp, #16
 80075da:	af00      	add	r7, sp, #0
 80075dc:	60f8      	str	r0, [r7, #12]
 80075de:	60b9      	str	r1, [r7, #8]
 80075e0:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	2202      	movs	r2, #2
 80075e6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	687a      	ldr	r2, [r7, #4]
 80075ee:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	687a      	ldr	r2, [r7, #4]
 80075f4:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	68ba      	ldr	r2, [r7, #8]
 80075fa:	2100      	movs	r1, #0
 80075fc:	68f8      	ldr	r0, [r7, #12]
 80075fe:	f000 fcee 	bl	8007fde <USBD_LL_Transmit>

  return USBD_OK;
 8007602:	2300      	movs	r3, #0
}
 8007604:	4618      	mov	r0, r3
 8007606:	3710      	adds	r7, #16
 8007608:	46bd      	mov	sp, r7
 800760a:	bd80      	pop	{r7, pc}

0800760c <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800760c:	b580      	push	{r7, lr}
 800760e:	b084      	sub	sp, #16
 8007610:	af00      	add	r7, sp, #0
 8007612:	60f8      	str	r0, [r7, #12]
 8007614:	60b9      	str	r1, [r7, #8]
 8007616:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	68ba      	ldr	r2, [r7, #8]
 800761c:	2100      	movs	r1, #0
 800761e:	68f8      	ldr	r0, [r7, #12]
 8007620:	f000 fcdd 	bl	8007fde <USBD_LL_Transmit>

  return USBD_OK;
 8007624:	2300      	movs	r3, #0
}
 8007626:	4618      	mov	r0, r3
 8007628:	3710      	adds	r7, #16
 800762a:	46bd      	mov	sp, r7
 800762c:	bd80      	pop	{r7, pc}

0800762e <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800762e:	b580      	push	{r7, lr}
 8007630:	b084      	sub	sp, #16
 8007632:	af00      	add	r7, sp, #0
 8007634:	60f8      	str	r0, [r7, #12]
 8007636:	60b9      	str	r1, [r7, #8]
 8007638:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	2203      	movs	r2, #3
 800763e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	687a      	ldr	r2, [r7, #4]
 8007646:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	687a      	ldr	r2, [r7, #4]
 800764e:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	68ba      	ldr	r2, [r7, #8]
 8007656:	2100      	movs	r1, #0
 8007658:	68f8      	ldr	r0, [r7, #12]
 800765a:	f000 fce1 	bl	8008020 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800765e:	2300      	movs	r3, #0
}
 8007660:	4618      	mov	r0, r3
 8007662:	3710      	adds	r7, #16
 8007664:	46bd      	mov	sp, r7
 8007666:	bd80      	pop	{r7, pc}

08007668 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8007668:	b580      	push	{r7, lr}
 800766a:	b084      	sub	sp, #16
 800766c:	af00      	add	r7, sp, #0
 800766e:	60f8      	str	r0, [r7, #12]
 8007670:	60b9      	str	r1, [r7, #8]
 8007672:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	68ba      	ldr	r2, [r7, #8]
 8007678:	2100      	movs	r1, #0
 800767a:	68f8      	ldr	r0, [r7, #12]
 800767c:	f000 fcd0 	bl	8008020 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007680:	2300      	movs	r3, #0
}
 8007682:	4618      	mov	r0, r3
 8007684:	3710      	adds	r7, #16
 8007686:	46bd      	mov	sp, r7
 8007688:	bd80      	pop	{r7, pc}

0800768a <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800768a:	b580      	push	{r7, lr}
 800768c:	b082      	sub	sp, #8
 800768e:	af00      	add	r7, sp, #0
 8007690:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	2204      	movs	r2, #4
 8007696:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800769a:	2300      	movs	r3, #0
 800769c:	2200      	movs	r2, #0
 800769e:	2100      	movs	r1, #0
 80076a0:	6878      	ldr	r0, [r7, #4]
 80076a2:	f000 fc9c 	bl	8007fde <USBD_LL_Transmit>

  return USBD_OK;
 80076a6:	2300      	movs	r3, #0
}
 80076a8:	4618      	mov	r0, r3
 80076aa:	3708      	adds	r7, #8
 80076ac:	46bd      	mov	sp, r7
 80076ae:	bd80      	pop	{r7, pc}

080076b0 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80076b0:	b580      	push	{r7, lr}
 80076b2:	b082      	sub	sp, #8
 80076b4:	af00      	add	r7, sp, #0
 80076b6:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	2205      	movs	r2, #5
 80076bc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80076c0:	2300      	movs	r3, #0
 80076c2:	2200      	movs	r2, #0
 80076c4:	2100      	movs	r1, #0
 80076c6:	6878      	ldr	r0, [r7, #4]
 80076c8:	f000 fcaa 	bl	8008020 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80076cc:	2300      	movs	r3, #0
}
 80076ce:	4618      	mov	r0, r3
 80076d0:	3708      	adds	r7, #8
 80076d2:	46bd      	mov	sp, r7
 80076d4:	bd80      	pop	{r7, pc}
	...

080076d8 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80076d8:	b580      	push	{r7, lr}
 80076da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80076dc:	2200      	movs	r2, #0
 80076de:	4912      	ldr	r1, [pc, #72]	; (8007728 <MX_USB_DEVICE_Init+0x50>)
 80076e0:	4812      	ldr	r0, [pc, #72]	; (800772c <MX_USB_DEVICE_Init+0x54>)
 80076e2:	f7fe fe65 	bl	80063b0 <USBD_Init>
 80076e6:	4603      	mov	r3, r0
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	d001      	beq.n	80076f0 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80076ec:	f7f9 f996 	bl	8000a1c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80076f0:	490f      	ldr	r1, [pc, #60]	; (8007730 <MX_USB_DEVICE_Init+0x58>)
 80076f2:	480e      	ldr	r0, [pc, #56]	; (800772c <MX_USB_DEVICE_Init+0x54>)
 80076f4:	f7fe fe8c 	bl	8006410 <USBD_RegisterClass>
 80076f8:	4603      	mov	r3, r0
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	d001      	beq.n	8007702 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80076fe:	f7f9 f98d 	bl	8000a1c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8007702:	490c      	ldr	r1, [pc, #48]	; (8007734 <MX_USB_DEVICE_Init+0x5c>)
 8007704:	4809      	ldr	r0, [pc, #36]	; (800772c <MX_USB_DEVICE_Init+0x54>)
 8007706:	f7fe fddd 	bl	80062c4 <USBD_CDC_RegisterInterface>
 800770a:	4603      	mov	r3, r0
 800770c:	2b00      	cmp	r3, #0
 800770e:	d001      	beq.n	8007714 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8007710:	f7f9 f984 	bl	8000a1c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8007714:	4805      	ldr	r0, [pc, #20]	; (800772c <MX_USB_DEVICE_Init+0x54>)
 8007716:	f7fe fea2 	bl	800645e <USBD_Start>
 800771a:	4603      	mov	r3, r0
 800771c:	2b00      	cmp	r3, #0
 800771e:	d001      	beq.n	8007724 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8007720:	f7f9 f97c 	bl	8000a1c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8007724:	bf00      	nop
 8007726:	bd80      	pop	{r7, pc}
 8007728:	20000130 	.word	0x20000130
 800772c:	20000514 	.word	0x20000514
 8007730:	20000018 	.word	0x20000018
 8007734:	2000011c 	.word	0x2000011c

08007738 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8007738:	b580      	push	{r7, lr}
 800773a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800773c:	2200      	movs	r2, #0
 800773e:	4905      	ldr	r1, [pc, #20]	; (8007754 <CDC_Init_FS+0x1c>)
 8007740:	4805      	ldr	r0, [pc, #20]	; (8007758 <CDC_Init_FS+0x20>)
 8007742:	f7fe fdd4 	bl	80062ee <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8007746:	4905      	ldr	r1, [pc, #20]	; (800775c <CDC_Init_FS+0x24>)
 8007748:	4803      	ldr	r0, [pc, #12]	; (8007758 <CDC_Init_FS+0x20>)
 800774a:	f7fe fdee 	bl	800632a <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800774e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8007750:	4618      	mov	r0, r3
 8007752:	bd80      	pop	{r7, pc}
 8007754:	20000fe4 	.word	0x20000fe4
 8007758:	20000514 	.word	0x20000514
 800775c:	200007e4 	.word	0x200007e4

08007760 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8007760:	b480      	push	{r7}
 8007762:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8007764:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8007766:	4618      	mov	r0, r3
 8007768:	46bd      	mov	sp, r7
 800776a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800776e:	4770      	bx	lr

08007770 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8007770:	b480      	push	{r7}
 8007772:	b083      	sub	sp, #12
 8007774:	af00      	add	r7, sp, #0
 8007776:	4603      	mov	r3, r0
 8007778:	6039      	str	r1, [r7, #0]
 800777a:	71fb      	strb	r3, [r7, #7]
 800777c:	4613      	mov	r3, r2
 800777e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8007780:	79fb      	ldrb	r3, [r7, #7]
 8007782:	2b23      	cmp	r3, #35	; 0x23
 8007784:	d84a      	bhi.n	800781c <CDC_Control_FS+0xac>
 8007786:	a201      	add	r2, pc, #4	; (adr r2, 800778c <CDC_Control_FS+0x1c>)
 8007788:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800778c:	0800781d 	.word	0x0800781d
 8007790:	0800781d 	.word	0x0800781d
 8007794:	0800781d 	.word	0x0800781d
 8007798:	0800781d 	.word	0x0800781d
 800779c:	0800781d 	.word	0x0800781d
 80077a0:	0800781d 	.word	0x0800781d
 80077a4:	0800781d 	.word	0x0800781d
 80077a8:	0800781d 	.word	0x0800781d
 80077ac:	0800781d 	.word	0x0800781d
 80077b0:	0800781d 	.word	0x0800781d
 80077b4:	0800781d 	.word	0x0800781d
 80077b8:	0800781d 	.word	0x0800781d
 80077bc:	0800781d 	.word	0x0800781d
 80077c0:	0800781d 	.word	0x0800781d
 80077c4:	0800781d 	.word	0x0800781d
 80077c8:	0800781d 	.word	0x0800781d
 80077cc:	0800781d 	.word	0x0800781d
 80077d0:	0800781d 	.word	0x0800781d
 80077d4:	0800781d 	.word	0x0800781d
 80077d8:	0800781d 	.word	0x0800781d
 80077dc:	0800781d 	.word	0x0800781d
 80077e0:	0800781d 	.word	0x0800781d
 80077e4:	0800781d 	.word	0x0800781d
 80077e8:	0800781d 	.word	0x0800781d
 80077ec:	0800781d 	.word	0x0800781d
 80077f0:	0800781d 	.word	0x0800781d
 80077f4:	0800781d 	.word	0x0800781d
 80077f8:	0800781d 	.word	0x0800781d
 80077fc:	0800781d 	.word	0x0800781d
 8007800:	0800781d 	.word	0x0800781d
 8007804:	0800781d 	.word	0x0800781d
 8007808:	0800781d 	.word	0x0800781d
 800780c:	0800781d 	.word	0x0800781d
 8007810:	0800781d 	.word	0x0800781d
 8007814:	0800781d 	.word	0x0800781d
 8007818:	0800781d 	.word	0x0800781d
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800781c:	bf00      	nop
  }

  return (USBD_OK);
 800781e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8007820:	4618      	mov	r0, r3
 8007822:	370c      	adds	r7, #12
 8007824:	46bd      	mov	sp, r7
 8007826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800782a:	4770      	bx	lr

0800782c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800782c:	b580      	push	{r7, lr}
 800782e:	b082      	sub	sp, #8
 8007830:	af00      	add	r7, sp, #0
 8007832:	6078      	str	r0, [r7, #4]
 8007834:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8007836:	6879      	ldr	r1, [r7, #4]
 8007838:	4805      	ldr	r0, [pc, #20]	; (8007850 <CDC_Receive_FS+0x24>)
 800783a:	f7fe fd76 	bl	800632a <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800783e:	4804      	ldr	r0, [pc, #16]	; (8007850 <CDC_Receive_FS+0x24>)
 8007840:	f7fe fd8c 	bl	800635c <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8007844:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8007846:	4618      	mov	r0, r3
 8007848:	3708      	adds	r7, #8
 800784a:	46bd      	mov	sp, r7
 800784c:	bd80      	pop	{r7, pc}
 800784e:	bf00      	nop
 8007850:	20000514 	.word	0x20000514

08007854 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8007854:	b480      	push	{r7}
 8007856:	b087      	sub	sp, #28
 8007858:	af00      	add	r7, sp, #0
 800785a:	60f8      	str	r0, [r7, #12]
 800785c:	60b9      	str	r1, [r7, #8]
 800785e:	4613      	mov	r3, r2
 8007860:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8007862:	2300      	movs	r3, #0
 8007864:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8007866:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800786a:	4618      	mov	r0, r3
 800786c:	371c      	adds	r7, #28
 800786e:	46bd      	mov	sp, r7
 8007870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007874:	4770      	bx	lr
	...

08007878 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007878:	b480      	push	{r7}
 800787a:	b083      	sub	sp, #12
 800787c:	af00      	add	r7, sp, #0
 800787e:	4603      	mov	r3, r0
 8007880:	6039      	str	r1, [r7, #0]
 8007882:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8007884:	683b      	ldr	r3, [r7, #0]
 8007886:	2212      	movs	r2, #18
 8007888:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800788a:	4b03      	ldr	r3, [pc, #12]	; (8007898 <USBD_FS_DeviceDescriptor+0x20>)
}
 800788c:	4618      	mov	r0, r3
 800788e:	370c      	adds	r7, #12
 8007890:	46bd      	mov	sp, r7
 8007892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007896:	4770      	bx	lr
 8007898:	20000150 	.word	0x20000150

0800789c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800789c:	b480      	push	{r7}
 800789e:	b083      	sub	sp, #12
 80078a0:	af00      	add	r7, sp, #0
 80078a2:	4603      	mov	r3, r0
 80078a4:	6039      	str	r1, [r7, #0]
 80078a6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80078a8:	683b      	ldr	r3, [r7, #0]
 80078aa:	2204      	movs	r2, #4
 80078ac:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80078ae:	4b03      	ldr	r3, [pc, #12]	; (80078bc <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80078b0:	4618      	mov	r0, r3
 80078b2:	370c      	adds	r7, #12
 80078b4:	46bd      	mov	sp, r7
 80078b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ba:	4770      	bx	lr
 80078bc:	20000170 	.word	0x20000170

080078c0 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80078c0:	b580      	push	{r7, lr}
 80078c2:	b082      	sub	sp, #8
 80078c4:	af00      	add	r7, sp, #0
 80078c6:	4603      	mov	r3, r0
 80078c8:	6039      	str	r1, [r7, #0]
 80078ca:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80078cc:	79fb      	ldrb	r3, [r7, #7]
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	d105      	bne.n	80078de <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80078d2:	683a      	ldr	r2, [r7, #0]
 80078d4:	4907      	ldr	r1, [pc, #28]	; (80078f4 <USBD_FS_ProductStrDescriptor+0x34>)
 80078d6:	4808      	ldr	r0, [pc, #32]	; (80078f8 <USBD_FS_ProductStrDescriptor+0x38>)
 80078d8:	f7ff fe1d 	bl	8007516 <USBD_GetString>
 80078dc:	e004      	b.n	80078e8 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80078de:	683a      	ldr	r2, [r7, #0]
 80078e0:	4904      	ldr	r1, [pc, #16]	; (80078f4 <USBD_FS_ProductStrDescriptor+0x34>)
 80078e2:	4805      	ldr	r0, [pc, #20]	; (80078f8 <USBD_FS_ProductStrDescriptor+0x38>)
 80078e4:	f7ff fe17 	bl	8007516 <USBD_GetString>
  }
  return USBD_StrDesc;
 80078e8:	4b02      	ldr	r3, [pc, #8]	; (80078f4 <USBD_FS_ProductStrDescriptor+0x34>)
}
 80078ea:	4618      	mov	r0, r3
 80078ec:	3708      	adds	r7, #8
 80078ee:	46bd      	mov	sp, r7
 80078f0:	bd80      	pop	{r7, pc}
 80078f2:	bf00      	nop
 80078f4:	200017e4 	.word	0x200017e4
 80078f8:	08008224 	.word	0x08008224

080078fc <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80078fc:	b580      	push	{r7, lr}
 80078fe:	b082      	sub	sp, #8
 8007900:	af00      	add	r7, sp, #0
 8007902:	4603      	mov	r3, r0
 8007904:	6039      	str	r1, [r7, #0]
 8007906:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8007908:	683a      	ldr	r2, [r7, #0]
 800790a:	4904      	ldr	r1, [pc, #16]	; (800791c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800790c:	4804      	ldr	r0, [pc, #16]	; (8007920 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800790e:	f7ff fe02 	bl	8007516 <USBD_GetString>
  return USBD_StrDesc;
 8007912:	4b02      	ldr	r3, [pc, #8]	; (800791c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8007914:	4618      	mov	r0, r3
 8007916:	3708      	adds	r7, #8
 8007918:	46bd      	mov	sp, r7
 800791a:	bd80      	pop	{r7, pc}
 800791c:	200017e4 	.word	0x200017e4
 8007920:	0800823c 	.word	0x0800823c

08007924 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007924:	b580      	push	{r7, lr}
 8007926:	b082      	sub	sp, #8
 8007928:	af00      	add	r7, sp, #0
 800792a:	4603      	mov	r3, r0
 800792c:	6039      	str	r1, [r7, #0]
 800792e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8007930:	683b      	ldr	r3, [r7, #0]
 8007932:	221a      	movs	r2, #26
 8007934:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8007936:	f000 f855 	bl	80079e4 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800793a:	4b02      	ldr	r3, [pc, #8]	; (8007944 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800793c:	4618      	mov	r0, r3
 800793e:	3708      	adds	r7, #8
 8007940:	46bd      	mov	sp, r7
 8007942:	bd80      	pop	{r7, pc}
 8007944:	20000174 	.word	0x20000174

08007948 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007948:	b580      	push	{r7, lr}
 800794a:	b082      	sub	sp, #8
 800794c:	af00      	add	r7, sp, #0
 800794e:	4603      	mov	r3, r0
 8007950:	6039      	str	r1, [r7, #0]
 8007952:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8007954:	79fb      	ldrb	r3, [r7, #7]
 8007956:	2b00      	cmp	r3, #0
 8007958:	d105      	bne.n	8007966 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800795a:	683a      	ldr	r2, [r7, #0]
 800795c:	4907      	ldr	r1, [pc, #28]	; (800797c <USBD_FS_ConfigStrDescriptor+0x34>)
 800795e:	4808      	ldr	r0, [pc, #32]	; (8007980 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007960:	f7ff fdd9 	bl	8007516 <USBD_GetString>
 8007964:	e004      	b.n	8007970 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007966:	683a      	ldr	r2, [r7, #0]
 8007968:	4904      	ldr	r1, [pc, #16]	; (800797c <USBD_FS_ConfigStrDescriptor+0x34>)
 800796a:	4805      	ldr	r0, [pc, #20]	; (8007980 <USBD_FS_ConfigStrDescriptor+0x38>)
 800796c:	f7ff fdd3 	bl	8007516 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007970:	4b02      	ldr	r3, [pc, #8]	; (800797c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8007972:	4618      	mov	r0, r3
 8007974:	3708      	adds	r7, #8
 8007976:	46bd      	mov	sp, r7
 8007978:	bd80      	pop	{r7, pc}
 800797a:	bf00      	nop
 800797c:	200017e4 	.word	0x200017e4
 8007980:	08008250 	.word	0x08008250

08007984 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007984:	b580      	push	{r7, lr}
 8007986:	b082      	sub	sp, #8
 8007988:	af00      	add	r7, sp, #0
 800798a:	4603      	mov	r3, r0
 800798c:	6039      	str	r1, [r7, #0]
 800798e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007990:	79fb      	ldrb	r3, [r7, #7]
 8007992:	2b00      	cmp	r3, #0
 8007994:	d105      	bne.n	80079a2 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007996:	683a      	ldr	r2, [r7, #0]
 8007998:	4907      	ldr	r1, [pc, #28]	; (80079b8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800799a:	4808      	ldr	r0, [pc, #32]	; (80079bc <USBD_FS_InterfaceStrDescriptor+0x38>)
 800799c:	f7ff fdbb 	bl	8007516 <USBD_GetString>
 80079a0:	e004      	b.n	80079ac <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80079a2:	683a      	ldr	r2, [r7, #0]
 80079a4:	4904      	ldr	r1, [pc, #16]	; (80079b8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80079a6:	4805      	ldr	r0, [pc, #20]	; (80079bc <USBD_FS_InterfaceStrDescriptor+0x38>)
 80079a8:	f7ff fdb5 	bl	8007516 <USBD_GetString>
  }
  return USBD_StrDesc;
 80079ac:	4b02      	ldr	r3, [pc, #8]	; (80079b8 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80079ae:	4618      	mov	r0, r3
 80079b0:	3708      	adds	r7, #8
 80079b2:	46bd      	mov	sp, r7
 80079b4:	bd80      	pop	{r7, pc}
 80079b6:	bf00      	nop
 80079b8:	200017e4 	.word	0x200017e4
 80079bc:	0800825c 	.word	0x0800825c

080079c0 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80079c0:	b480      	push	{r7}
 80079c2:	b083      	sub	sp, #12
 80079c4:	af00      	add	r7, sp, #0
 80079c6:	4603      	mov	r3, r0
 80079c8:	6039      	str	r1, [r7, #0]
 80079ca:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 80079cc:	683b      	ldr	r3, [r7, #0]
 80079ce:	220c      	movs	r2, #12
 80079d0:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 80079d2:	4b03      	ldr	r3, [pc, #12]	; (80079e0 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 80079d4:	4618      	mov	r0, r3
 80079d6:	370c      	adds	r7, #12
 80079d8:	46bd      	mov	sp, r7
 80079da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079de:	4770      	bx	lr
 80079e0:	20000164 	.word	0x20000164

080079e4 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80079e4:	b580      	push	{r7, lr}
 80079e6:	b084      	sub	sp, #16
 80079e8:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80079ea:	4b0f      	ldr	r3, [pc, #60]	; (8007a28 <Get_SerialNum+0x44>)
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80079f0:	4b0e      	ldr	r3, [pc, #56]	; (8007a2c <Get_SerialNum+0x48>)
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80079f6:	4b0e      	ldr	r3, [pc, #56]	; (8007a30 <Get_SerialNum+0x4c>)
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80079fc:	68fa      	ldr	r2, [r7, #12]
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	4413      	add	r3, r2
 8007a02:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	d009      	beq.n	8007a1e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8007a0a:	2208      	movs	r2, #8
 8007a0c:	4909      	ldr	r1, [pc, #36]	; (8007a34 <Get_SerialNum+0x50>)
 8007a0e:	68f8      	ldr	r0, [r7, #12]
 8007a10:	f000 f814 	bl	8007a3c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8007a14:	2204      	movs	r2, #4
 8007a16:	4908      	ldr	r1, [pc, #32]	; (8007a38 <Get_SerialNum+0x54>)
 8007a18:	68b8      	ldr	r0, [r7, #8]
 8007a1a:	f000 f80f 	bl	8007a3c <IntToUnicode>
  }
}
 8007a1e:	bf00      	nop
 8007a20:	3710      	adds	r7, #16
 8007a22:	46bd      	mov	sp, r7
 8007a24:	bd80      	pop	{r7, pc}
 8007a26:	bf00      	nop
 8007a28:	1fff7a10 	.word	0x1fff7a10
 8007a2c:	1fff7a14 	.word	0x1fff7a14
 8007a30:	1fff7a18 	.word	0x1fff7a18
 8007a34:	20000176 	.word	0x20000176
 8007a38:	20000186 	.word	0x20000186

08007a3c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8007a3c:	b480      	push	{r7}
 8007a3e:	b087      	sub	sp, #28
 8007a40:	af00      	add	r7, sp, #0
 8007a42:	60f8      	str	r0, [r7, #12]
 8007a44:	60b9      	str	r1, [r7, #8]
 8007a46:	4613      	mov	r3, r2
 8007a48:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8007a4a:	2300      	movs	r3, #0
 8007a4c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8007a4e:	2300      	movs	r3, #0
 8007a50:	75fb      	strb	r3, [r7, #23]
 8007a52:	e027      	b.n	8007aa4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8007a54:	68fb      	ldr	r3, [r7, #12]
 8007a56:	0f1b      	lsrs	r3, r3, #28
 8007a58:	2b09      	cmp	r3, #9
 8007a5a:	d80b      	bhi.n	8007a74 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	0f1b      	lsrs	r3, r3, #28
 8007a60:	b2da      	uxtb	r2, r3
 8007a62:	7dfb      	ldrb	r3, [r7, #23]
 8007a64:	005b      	lsls	r3, r3, #1
 8007a66:	4619      	mov	r1, r3
 8007a68:	68bb      	ldr	r3, [r7, #8]
 8007a6a:	440b      	add	r3, r1
 8007a6c:	3230      	adds	r2, #48	; 0x30
 8007a6e:	b2d2      	uxtb	r2, r2
 8007a70:	701a      	strb	r2, [r3, #0]
 8007a72:	e00a      	b.n	8007a8a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	0f1b      	lsrs	r3, r3, #28
 8007a78:	b2da      	uxtb	r2, r3
 8007a7a:	7dfb      	ldrb	r3, [r7, #23]
 8007a7c:	005b      	lsls	r3, r3, #1
 8007a7e:	4619      	mov	r1, r3
 8007a80:	68bb      	ldr	r3, [r7, #8]
 8007a82:	440b      	add	r3, r1
 8007a84:	3237      	adds	r2, #55	; 0x37
 8007a86:	b2d2      	uxtb	r2, r2
 8007a88:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8007a8a:	68fb      	ldr	r3, [r7, #12]
 8007a8c:	011b      	lsls	r3, r3, #4
 8007a8e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8007a90:	7dfb      	ldrb	r3, [r7, #23]
 8007a92:	005b      	lsls	r3, r3, #1
 8007a94:	3301      	adds	r3, #1
 8007a96:	68ba      	ldr	r2, [r7, #8]
 8007a98:	4413      	add	r3, r2
 8007a9a:	2200      	movs	r2, #0
 8007a9c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8007a9e:	7dfb      	ldrb	r3, [r7, #23]
 8007aa0:	3301      	adds	r3, #1
 8007aa2:	75fb      	strb	r3, [r7, #23]
 8007aa4:	7dfa      	ldrb	r2, [r7, #23]
 8007aa6:	79fb      	ldrb	r3, [r7, #7]
 8007aa8:	429a      	cmp	r2, r3
 8007aaa:	d3d3      	bcc.n	8007a54 <IntToUnicode+0x18>
  }
}
 8007aac:	bf00      	nop
 8007aae:	bf00      	nop
 8007ab0:	371c      	adds	r7, #28
 8007ab2:	46bd      	mov	sp, r7
 8007ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ab8:	4770      	bx	lr
	...

08007abc <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8007abc:	b580      	push	{r7, lr}
 8007abe:	b098      	sub	sp, #96	; 0x60
 8007ac0:	af00      	add	r7, sp, #0
 8007ac2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007ac4:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8007ac8:	2200      	movs	r2, #0
 8007aca:	601a      	str	r2, [r3, #0]
 8007acc:	605a      	str	r2, [r3, #4]
 8007ace:	609a      	str	r2, [r3, #8]
 8007ad0:	60da      	str	r2, [r3, #12]
 8007ad2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8007ad4:	f107 0310 	add.w	r3, r7, #16
 8007ad8:	223c      	movs	r2, #60	; 0x3c
 8007ada:	2100      	movs	r1, #0
 8007adc:	4618      	mov	r0, r3
 8007ade:	f000 fb89 	bl	80081f4 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007aea:	d148      	bne.n	8007b7e <HAL_PCD_MspInit+0xc2>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8007aec:	2380      	movs	r3, #128	; 0x80
 8007aee:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 8007af0:	2300      	movs	r3, #0
 8007af2:	647b      	str	r3, [r7, #68]	; 0x44
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8007af4:	f107 0310 	add.w	r3, r7, #16
 8007af8:	4618      	mov	r0, r3
 8007afa:	f7fb fccf 	bl	800349c <HAL_RCCEx_PeriphCLKConfig>
 8007afe:	4603      	mov	r3, r0
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	d001      	beq.n	8007b08 <HAL_PCD_MspInit+0x4c>
    {
      Error_Handler();
 8007b04:	f7f8 ff8a 	bl	8000a1c <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007b08:	2300      	movs	r3, #0
 8007b0a:	60fb      	str	r3, [r7, #12]
 8007b0c:	4b1e      	ldr	r3, [pc, #120]	; (8007b88 <HAL_PCD_MspInit+0xcc>)
 8007b0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b10:	4a1d      	ldr	r2, [pc, #116]	; (8007b88 <HAL_PCD_MspInit+0xcc>)
 8007b12:	f043 0301 	orr.w	r3, r3, #1
 8007b16:	6313      	str	r3, [r2, #48]	; 0x30
 8007b18:	4b1b      	ldr	r3, [pc, #108]	; (8007b88 <HAL_PCD_MspInit+0xcc>)
 8007b1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b1c:	f003 0301 	and.w	r3, r3, #1
 8007b20:	60fb      	str	r3, [r7, #12]
 8007b22:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8007b24:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8007b28:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007b2a:	2302      	movs	r3, #2
 8007b2c:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007b2e:	2300      	movs	r3, #0
 8007b30:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007b32:	2303      	movs	r3, #3
 8007b34:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8007b36:	230a      	movs	r3, #10
 8007b38:	65fb      	str	r3, [r7, #92]	; 0x5c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007b3a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8007b3e:	4619      	mov	r1, r3
 8007b40:	4812      	ldr	r0, [pc, #72]	; (8007b8c <HAL_PCD_MspInit+0xd0>)
 8007b42:	f7f9 fbdf 	bl	8001304 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8007b46:	4b10      	ldr	r3, [pc, #64]	; (8007b88 <HAL_PCD_MspInit+0xcc>)
 8007b48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007b4a:	4a0f      	ldr	r2, [pc, #60]	; (8007b88 <HAL_PCD_MspInit+0xcc>)
 8007b4c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007b50:	6353      	str	r3, [r2, #52]	; 0x34
 8007b52:	2300      	movs	r3, #0
 8007b54:	60bb      	str	r3, [r7, #8]
 8007b56:	4b0c      	ldr	r3, [pc, #48]	; (8007b88 <HAL_PCD_MspInit+0xcc>)
 8007b58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007b5a:	4a0b      	ldr	r2, [pc, #44]	; (8007b88 <HAL_PCD_MspInit+0xcc>)
 8007b5c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007b60:	6453      	str	r3, [r2, #68]	; 0x44
 8007b62:	4b09      	ldr	r3, [pc, #36]	; (8007b88 <HAL_PCD_MspInit+0xcc>)
 8007b64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007b66:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007b6a:	60bb      	str	r3, [r7, #8]
 8007b6c:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8007b6e:	2200      	movs	r2, #0
 8007b70:	2100      	movs	r1, #0
 8007b72:	2043      	movs	r0, #67	; 0x43
 8007b74:	f7f9 fb8f 	bl	8001296 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8007b78:	2043      	movs	r0, #67	; 0x43
 8007b7a:	f7f9 fba8 	bl	80012ce <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8007b7e:	bf00      	nop
 8007b80:	3760      	adds	r7, #96	; 0x60
 8007b82:	46bd      	mov	sp, r7
 8007b84:	bd80      	pop	{r7, pc}
 8007b86:	bf00      	nop
 8007b88:	40023800 	.word	0x40023800
 8007b8c:	40020000 	.word	0x40020000

08007b90 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007b90:	b580      	push	{r7, lr}
 8007b92:	b082      	sub	sp, #8
 8007b94:	af00      	add	r7, sp, #0
 8007b96:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8007ba4:	4619      	mov	r1, r3
 8007ba6:	4610      	mov	r0, r2
 8007ba8:	f7fe fca4 	bl	80064f4 <USBD_LL_SetupStage>
}
 8007bac:	bf00      	nop
 8007bae:	3708      	adds	r7, #8
 8007bb0:	46bd      	mov	sp, r7
 8007bb2:	bd80      	pop	{r7, pc}

08007bb4 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007bb4:	b580      	push	{r7, lr}
 8007bb6:	b082      	sub	sp, #8
 8007bb8:	af00      	add	r7, sp, #0
 8007bba:	6078      	str	r0, [r7, #4]
 8007bbc:	460b      	mov	r3, r1
 8007bbe:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8007bc6:	78fa      	ldrb	r2, [r7, #3]
 8007bc8:	6879      	ldr	r1, [r7, #4]
 8007bca:	4613      	mov	r3, r2
 8007bcc:	00db      	lsls	r3, r3, #3
 8007bce:	1a9b      	subs	r3, r3, r2
 8007bd0:	009b      	lsls	r3, r3, #2
 8007bd2:	440b      	add	r3, r1
 8007bd4:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8007bd8:	681a      	ldr	r2, [r3, #0]
 8007bda:	78fb      	ldrb	r3, [r7, #3]
 8007bdc:	4619      	mov	r1, r3
 8007bde:	f7fe fcde 	bl	800659e <USBD_LL_DataOutStage>
}
 8007be2:	bf00      	nop
 8007be4:	3708      	adds	r7, #8
 8007be6:	46bd      	mov	sp, r7
 8007be8:	bd80      	pop	{r7, pc}

08007bea <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007bea:	b580      	push	{r7, lr}
 8007bec:	b082      	sub	sp, #8
 8007bee:	af00      	add	r7, sp, #0
 8007bf0:	6078      	str	r0, [r7, #4]
 8007bf2:	460b      	mov	r3, r1
 8007bf4:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8007bfc:	78fa      	ldrb	r2, [r7, #3]
 8007bfe:	6879      	ldr	r1, [r7, #4]
 8007c00:	4613      	mov	r3, r2
 8007c02:	00db      	lsls	r3, r3, #3
 8007c04:	1a9b      	subs	r3, r3, r2
 8007c06:	009b      	lsls	r3, r3, #2
 8007c08:	440b      	add	r3, r1
 8007c0a:	3348      	adds	r3, #72	; 0x48
 8007c0c:	681a      	ldr	r2, [r3, #0]
 8007c0e:	78fb      	ldrb	r3, [r7, #3]
 8007c10:	4619      	mov	r1, r3
 8007c12:	f7fe fd27 	bl	8006664 <USBD_LL_DataInStage>
}
 8007c16:	bf00      	nop
 8007c18:	3708      	adds	r7, #8
 8007c1a:	46bd      	mov	sp, r7
 8007c1c:	bd80      	pop	{r7, pc}

08007c1e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007c1e:	b580      	push	{r7, lr}
 8007c20:	b082      	sub	sp, #8
 8007c22:	af00      	add	r7, sp, #0
 8007c24:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007c2c:	4618      	mov	r0, r3
 8007c2e:	f7fe fe3b 	bl	80068a8 <USBD_LL_SOF>
}
 8007c32:	bf00      	nop
 8007c34:	3708      	adds	r7, #8
 8007c36:	46bd      	mov	sp, r7
 8007c38:	bd80      	pop	{r7, pc}

08007c3a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007c3a:	b580      	push	{r7, lr}
 8007c3c:	b084      	sub	sp, #16
 8007c3e:	af00      	add	r7, sp, #0
 8007c40:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8007c42:	2301      	movs	r3, #1
 8007c44:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	68db      	ldr	r3, [r3, #12]
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	d102      	bne.n	8007c54 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8007c4e:	2300      	movs	r3, #0
 8007c50:	73fb      	strb	r3, [r7, #15]
 8007c52:	e008      	b.n	8007c66 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	68db      	ldr	r3, [r3, #12]
 8007c58:	2b02      	cmp	r3, #2
 8007c5a:	d102      	bne.n	8007c62 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8007c5c:	2301      	movs	r3, #1
 8007c5e:	73fb      	strb	r3, [r7, #15]
 8007c60:	e001      	b.n	8007c66 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8007c62:	f7f8 fedb 	bl	8000a1c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007c6c:	7bfa      	ldrb	r2, [r7, #15]
 8007c6e:	4611      	mov	r1, r2
 8007c70:	4618      	mov	r0, r3
 8007c72:	f7fe fddb 	bl	800682c <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007c7c:	4618      	mov	r0, r3
 8007c7e:	f7fe fd87 	bl	8006790 <USBD_LL_Reset>
}
 8007c82:	bf00      	nop
 8007c84:	3710      	adds	r7, #16
 8007c86:	46bd      	mov	sp, r7
 8007c88:	bd80      	pop	{r7, pc}
	...

08007c8c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007c8c:	b580      	push	{r7, lr}
 8007c8e:	b082      	sub	sp, #8
 8007c90:	af00      	add	r7, sp, #0
 8007c92:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007c9a:	4618      	mov	r0, r3
 8007c9c:	f7fe fdd6 	bl	800684c <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	687a      	ldr	r2, [r7, #4]
 8007cac:	6812      	ldr	r2, [r2, #0]
 8007cae:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007cb2:	f043 0301 	orr.w	r3, r3, #1
 8007cb6:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	6a1b      	ldr	r3, [r3, #32]
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	d005      	beq.n	8007ccc <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007cc0:	4b04      	ldr	r3, [pc, #16]	; (8007cd4 <HAL_PCD_SuspendCallback+0x48>)
 8007cc2:	691b      	ldr	r3, [r3, #16]
 8007cc4:	4a03      	ldr	r2, [pc, #12]	; (8007cd4 <HAL_PCD_SuspendCallback+0x48>)
 8007cc6:	f043 0306 	orr.w	r3, r3, #6
 8007cca:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8007ccc:	bf00      	nop
 8007cce:	3708      	adds	r7, #8
 8007cd0:	46bd      	mov	sp, r7
 8007cd2:	bd80      	pop	{r7, pc}
 8007cd4:	e000ed00 	.word	0xe000ed00

08007cd8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007cd8:	b580      	push	{r7, lr}
 8007cda:	b082      	sub	sp, #8
 8007cdc:	af00      	add	r7, sp, #0
 8007cde:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007ce6:	4618      	mov	r0, r3
 8007ce8:	f7fe fdc6 	bl	8006878 <USBD_LL_Resume>
}
 8007cec:	bf00      	nop
 8007cee:	3708      	adds	r7, #8
 8007cf0:	46bd      	mov	sp, r7
 8007cf2:	bd80      	pop	{r7, pc}

08007cf4 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007cf4:	b580      	push	{r7, lr}
 8007cf6:	b082      	sub	sp, #8
 8007cf8:	af00      	add	r7, sp, #0
 8007cfa:	6078      	str	r0, [r7, #4]
 8007cfc:	460b      	mov	r3, r1
 8007cfe:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007d06:	78fa      	ldrb	r2, [r7, #3]
 8007d08:	4611      	mov	r1, r2
 8007d0a:	4618      	mov	r0, r3
 8007d0c:	f7fe fe14 	bl	8006938 <USBD_LL_IsoOUTIncomplete>
}
 8007d10:	bf00      	nop
 8007d12:	3708      	adds	r7, #8
 8007d14:	46bd      	mov	sp, r7
 8007d16:	bd80      	pop	{r7, pc}

08007d18 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007d18:	b580      	push	{r7, lr}
 8007d1a:	b082      	sub	sp, #8
 8007d1c:	af00      	add	r7, sp, #0
 8007d1e:	6078      	str	r0, [r7, #4]
 8007d20:	460b      	mov	r3, r1
 8007d22:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007d2a:	78fa      	ldrb	r2, [r7, #3]
 8007d2c:	4611      	mov	r1, r2
 8007d2e:	4618      	mov	r0, r3
 8007d30:	f7fe fddc 	bl	80068ec <USBD_LL_IsoINIncomplete>
}
 8007d34:	bf00      	nop
 8007d36:	3708      	adds	r7, #8
 8007d38:	46bd      	mov	sp, r7
 8007d3a:	bd80      	pop	{r7, pc}

08007d3c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007d3c:	b580      	push	{r7, lr}
 8007d3e:	b082      	sub	sp, #8
 8007d40:	af00      	add	r7, sp, #0
 8007d42:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007d4a:	4618      	mov	r0, r3
 8007d4c:	f7fe fe1a 	bl	8006984 <USBD_LL_DevConnected>
}
 8007d50:	bf00      	nop
 8007d52:	3708      	adds	r7, #8
 8007d54:	46bd      	mov	sp, r7
 8007d56:	bd80      	pop	{r7, pc}

08007d58 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007d58:	b580      	push	{r7, lr}
 8007d5a:	b082      	sub	sp, #8
 8007d5c:	af00      	add	r7, sp, #0
 8007d5e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007d66:	4618      	mov	r0, r3
 8007d68:	f7fe fe17 	bl	800699a <USBD_LL_DevDisconnected>
}
 8007d6c:	bf00      	nop
 8007d6e:	3708      	adds	r7, #8
 8007d70:	46bd      	mov	sp, r7
 8007d72:	bd80      	pop	{r7, pc}

08007d74 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8007d74:	b580      	push	{r7, lr}
 8007d76:	b082      	sub	sp, #8
 8007d78:	af00      	add	r7, sp, #0
 8007d7a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	781b      	ldrb	r3, [r3, #0]
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	d13c      	bne.n	8007dfe <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8007d84:	4a20      	ldr	r2, [pc, #128]	; (8007e08 <USBD_LL_Init+0x94>)
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	4a1e      	ldr	r2, [pc, #120]	; (8007e08 <USBD_LL_Init+0x94>)
 8007d90:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8007d94:	4b1c      	ldr	r3, [pc, #112]	; (8007e08 <USBD_LL_Init+0x94>)
 8007d96:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8007d9a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8007d9c:	4b1a      	ldr	r3, [pc, #104]	; (8007e08 <USBD_LL_Init+0x94>)
 8007d9e:	2206      	movs	r2, #6
 8007da0:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8007da2:	4b19      	ldr	r3, [pc, #100]	; (8007e08 <USBD_LL_Init+0x94>)
 8007da4:	2202      	movs	r2, #2
 8007da6:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8007da8:	4b17      	ldr	r3, [pc, #92]	; (8007e08 <USBD_LL_Init+0x94>)
 8007daa:	2200      	movs	r2, #0
 8007dac:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8007dae:	4b16      	ldr	r3, [pc, #88]	; (8007e08 <USBD_LL_Init+0x94>)
 8007db0:	2202      	movs	r2, #2
 8007db2:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8007db4:	4b14      	ldr	r3, [pc, #80]	; (8007e08 <USBD_LL_Init+0x94>)
 8007db6:	2200      	movs	r2, #0
 8007db8:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8007dba:	4b13      	ldr	r3, [pc, #76]	; (8007e08 <USBD_LL_Init+0x94>)
 8007dbc:	2200      	movs	r2, #0
 8007dbe:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8007dc0:	4b11      	ldr	r3, [pc, #68]	; (8007e08 <USBD_LL_Init+0x94>)
 8007dc2:	2200      	movs	r2, #0
 8007dc4:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8007dc6:	4b10      	ldr	r3, [pc, #64]	; (8007e08 <USBD_LL_Init+0x94>)
 8007dc8:	2200      	movs	r2, #0
 8007dca:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8007dcc:	4b0e      	ldr	r3, [pc, #56]	; (8007e08 <USBD_LL_Init+0x94>)
 8007dce:	2200      	movs	r2, #0
 8007dd0:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8007dd2:	480d      	ldr	r0, [pc, #52]	; (8007e08 <USBD_LL_Init+0x94>)
 8007dd4:	f7f9 ffc3 	bl	8001d5e <HAL_PCD_Init>
 8007dd8:	4603      	mov	r3, r0
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	d001      	beq.n	8007de2 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8007dde:	f7f8 fe1d 	bl	8000a1c <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8007de2:	2180      	movs	r1, #128	; 0x80
 8007de4:	4808      	ldr	r0, [pc, #32]	; (8007e08 <USBD_LL_Init+0x94>)
 8007de6:	f7fb f954 	bl	8003092 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8007dea:	2240      	movs	r2, #64	; 0x40
 8007dec:	2100      	movs	r1, #0
 8007dee:	4806      	ldr	r0, [pc, #24]	; (8007e08 <USBD_LL_Init+0x94>)
 8007df0:	f7fb f908 	bl	8003004 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8007df4:	2280      	movs	r2, #128	; 0x80
 8007df6:	2101      	movs	r1, #1
 8007df8:	4803      	ldr	r0, [pc, #12]	; (8007e08 <USBD_LL_Init+0x94>)
 8007dfa:	f7fb f903 	bl	8003004 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8007dfe:	2300      	movs	r3, #0
}
 8007e00:	4618      	mov	r0, r3
 8007e02:	3708      	adds	r7, #8
 8007e04:	46bd      	mov	sp, r7
 8007e06:	bd80      	pop	{r7, pc}
 8007e08:	200019e4 	.word	0x200019e4

08007e0c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8007e0c:	b580      	push	{r7, lr}
 8007e0e:	b084      	sub	sp, #16
 8007e10:	af00      	add	r7, sp, #0
 8007e12:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007e14:	2300      	movs	r3, #0
 8007e16:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007e18:	2300      	movs	r3, #0
 8007e1a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007e22:	4618      	mov	r0, r3
 8007e24:	f7fa f8bf 	bl	8001fa6 <HAL_PCD_Start>
 8007e28:	4603      	mov	r3, r0
 8007e2a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007e2c:	7bfb      	ldrb	r3, [r7, #15]
 8007e2e:	4618      	mov	r0, r3
 8007e30:	f000 f990 	bl	8008154 <USBD_Get_USB_Status>
 8007e34:	4603      	mov	r3, r0
 8007e36:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007e38:	7bbb      	ldrb	r3, [r7, #14]
}
 8007e3a:	4618      	mov	r0, r3
 8007e3c:	3710      	adds	r7, #16
 8007e3e:	46bd      	mov	sp, r7
 8007e40:	bd80      	pop	{r7, pc}

08007e42 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8007e42:	b580      	push	{r7, lr}
 8007e44:	b084      	sub	sp, #16
 8007e46:	af00      	add	r7, sp, #0
 8007e48:	6078      	str	r0, [r7, #4]
 8007e4a:	4608      	mov	r0, r1
 8007e4c:	4611      	mov	r1, r2
 8007e4e:	461a      	mov	r2, r3
 8007e50:	4603      	mov	r3, r0
 8007e52:	70fb      	strb	r3, [r7, #3]
 8007e54:	460b      	mov	r3, r1
 8007e56:	70bb      	strb	r3, [r7, #2]
 8007e58:	4613      	mov	r3, r2
 8007e5a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007e5c:	2300      	movs	r3, #0
 8007e5e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007e60:	2300      	movs	r3, #0
 8007e62:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8007e6a:	78bb      	ldrb	r3, [r7, #2]
 8007e6c:	883a      	ldrh	r2, [r7, #0]
 8007e6e:	78f9      	ldrb	r1, [r7, #3]
 8007e70:	f7fa fcd0 	bl	8002814 <HAL_PCD_EP_Open>
 8007e74:	4603      	mov	r3, r0
 8007e76:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007e78:	7bfb      	ldrb	r3, [r7, #15]
 8007e7a:	4618      	mov	r0, r3
 8007e7c:	f000 f96a 	bl	8008154 <USBD_Get_USB_Status>
 8007e80:	4603      	mov	r3, r0
 8007e82:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007e84:	7bbb      	ldrb	r3, [r7, #14]
}
 8007e86:	4618      	mov	r0, r3
 8007e88:	3710      	adds	r7, #16
 8007e8a:	46bd      	mov	sp, r7
 8007e8c:	bd80      	pop	{r7, pc}

08007e8e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007e8e:	b580      	push	{r7, lr}
 8007e90:	b084      	sub	sp, #16
 8007e92:	af00      	add	r7, sp, #0
 8007e94:	6078      	str	r0, [r7, #4]
 8007e96:	460b      	mov	r3, r1
 8007e98:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007e9a:	2300      	movs	r3, #0
 8007e9c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007e9e:	2300      	movs	r3, #0
 8007ea0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007ea8:	78fa      	ldrb	r2, [r7, #3]
 8007eaa:	4611      	mov	r1, r2
 8007eac:	4618      	mov	r0, r3
 8007eae:	f7fa fd19 	bl	80028e4 <HAL_PCD_EP_Close>
 8007eb2:	4603      	mov	r3, r0
 8007eb4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007eb6:	7bfb      	ldrb	r3, [r7, #15]
 8007eb8:	4618      	mov	r0, r3
 8007eba:	f000 f94b 	bl	8008154 <USBD_Get_USB_Status>
 8007ebe:	4603      	mov	r3, r0
 8007ec0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007ec2:	7bbb      	ldrb	r3, [r7, #14]
}
 8007ec4:	4618      	mov	r0, r3
 8007ec6:	3710      	adds	r7, #16
 8007ec8:	46bd      	mov	sp, r7
 8007eca:	bd80      	pop	{r7, pc}

08007ecc <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007ecc:	b580      	push	{r7, lr}
 8007ece:	b084      	sub	sp, #16
 8007ed0:	af00      	add	r7, sp, #0
 8007ed2:	6078      	str	r0, [r7, #4]
 8007ed4:	460b      	mov	r3, r1
 8007ed6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007ed8:	2300      	movs	r3, #0
 8007eda:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007edc:	2300      	movs	r3, #0
 8007ede:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007ee6:	78fa      	ldrb	r2, [r7, #3]
 8007ee8:	4611      	mov	r1, r2
 8007eea:	4618      	mov	r0, r3
 8007eec:	f7fa fdf1 	bl	8002ad2 <HAL_PCD_EP_SetStall>
 8007ef0:	4603      	mov	r3, r0
 8007ef2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007ef4:	7bfb      	ldrb	r3, [r7, #15]
 8007ef6:	4618      	mov	r0, r3
 8007ef8:	f000 f92c 	bl	8008154 <USBD_Get_USB_Status>
 8007efc:	4603      	mov	r3, r0
 8007efe:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007f00:	7bbb      	ldrb	r3, [r7, #14]
}
 8007f02:	4618      	mov	r0, r3
 8007f04:	3710      	adds	r7, #16
 8007f06:	46bd      	mov	sp, r7
 8007f08:	bd80      	pop	{r7, pc}

08007f0a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007f0a:	b580      	push	{r7, lr}
 8007f0c:	b084      	sub	sp, #16
 8007f0e:	af00      	add	r7, sp, #0
 8007f10:	6078      	str	r0, [r7, #4]
 8007f12:	460b      	mov	r3, r1
 8007f14:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007f16:	2300      	movs	r3, #0
 8007f18:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007f1a:	2300      	movs	r3, #0
 8007f1c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007f24:	78fa      	ldrb	r2, [r7, #3]
 8007f26:	4611      	mov	r1, r2
 8007f28:	4618      	mov	r0, r3
 8007f2a:	f7fa fe36 	bl	8002b9a <HAL_PCD_EP_ClrStall>
 8007f2e:	4603      	mov	r3, r0
 8007f30:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007f32:	7bfb      	ldrb	r3, [r7, #15]
 8007f34:	4618      	mov	r0, r3
 8007f36:	f000 f90d 	bl	8008154 <USBD_Get_USB_Status>
 8007f3a:	4603      	mov	r3, r0
 8007f3c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007f3e:	7bbb      	ldrb	r3, [r7, #14]
}
 8007f40:	4618      	mov	r0, r3
 8007f42:	3710      	adds	r7, #16
 8007f44:	46bd      	mov	sp, r7
 8007f46:	bd80      	pop	{r7, pc}

08007f48 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007f48:	b480      	push	{r7}
 8007f4a:	b085      	sub	sp, #20
 8007f4c:	af00      	add	r7, sp, #0
 8007f4e:	6078      	str	r0, [r7, #4]
 8007f50:	460b      	mov	r3, r1
 8007f52:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007f5a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8007f5c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007f60:	2b00      	cmp	r3, #0
 8007f62:	da0b      	bge.n	8007f7c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8007f64:	78fb      	ldrb	r3, [r7, #3]
 8007f66:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007f6a:	68f9      	ldr	r1, [r7, #12]
 8007f6c:	4613      	mov	r3, r2
 8007f6e:	00db      	lsls	r3, r3, #3
 8007f70:	1a9b      	subs	r3, r3, r2
 8007f72:	009b      	lsls	r3, r3, #2
 8007f74:	440b      	add	r3, r1
 8007f76:	333e      	adds	r3, #62	; 0x3e
 8007f78:	781b      	ldrb	r3, [r3, #0]
 8007f7a:	e00b      	b.n	8007f94 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8007f7c:	78fb      	ldrb	r3, [r7, #3]
 8007f7e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007f82:	68f9      	ldr	r1, [r7, #12]
 8007f84:	4613      	mov	r3, r2
 8007f86:	00db      	lsls	r3, r3, #3
 8007f88:	1a9b      	subs	r3, r3, r2
 8007f8a:	009b      	lsls	r3, r3, #2
 8007f8c:	440b      	add	r3, r1
 8007f8e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8007f92:	781b      	ldrb	r3, [r3, #0]
  }
}
 8007f94:	4618      	mov	r0, r3
 8007f96:	3714      	adds	r7, #20
 8007f98:	46bd      	mov	sp, r7
 8007f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f9e:	4770      	bx	lr

08007fa0 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8007fa0:	b580      	push	{r7, lr}
 8007fa2:	b084      	sub	sp, #16
 8007fa4:	af00      	add	r7, sp, #0
 8007fa6:	6078      	str	r0, [r7, #4]
 8007fa8:	460b      	mov	r3, r1
 8007faa:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007fac:	2300      	movs	r3, #0
 8007fae:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007fb0:	2300      	movs	r3, #0
 8007fb2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007fba:	78fa      	ldrb	r2, [r7, #3]
 8007fbc:	4611      	mov	r1, r2
 8007fbe:	4618      	mov	r0, r3
 8007fc0:	f7fa fc03 	bl	80027ca <HAL_PCD_SetAddress>
 8007fc4:	4603      	mov	r3, r0
 8007fc6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007fc8:	7bfb      	ldrb	r3, [r7, #15]
 8007fca:	4618      	mov	r0, r3
 8007fcc:	f000 f8c2 	bl	8008154 <USBD_Get_USB_Status>
 8007fd0:	4603      	mov	r3, r0
 8007fd2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007fd4:	7bbb      	ldrb	r3, [r7, #14]
}
 8007fd6:	4618      	mov	r0, r3
 8007fd8:	3710      	adds	r7, #16
 8007fda:	46bd      	mov	sp, r7
 8007fdc:	bd80      	pop	{r7, pc}

08007fde <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007fde:	b580      	push	{r7, lr}
 8007fe0:	b086      	sub	sp, #24
 8007fe2:	af00      	add	r7, sp, #0
 8007fe4:	60f8      	str	r0, [r7, #12]
 8007fe6:	607a      	str	r2, [r7, #4]
 8007fe8:	603b      	str	r3, [r7, #0]
 8007fea:	460b      	mov	r3, r1
 8007fec:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007fee:	2300      	movs	r3, #0
 8007ff0:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007ff2:	2300      	movs	r3, #0
 8007ff4:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8007ff6:	68fb      	ldr	r3, [r7, #12]
 8007ff8:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8007ffc:	7af9      	ldrb	r1, [r7, #11]
 8007ffe:	683b      	ldr	r3, [r7, #0]
 8008000:	687a      	ldr	r2, [r7, #4]
 8008002:	f7fa fd1c 	bl	8002a3e <HAL_PCD_EP_Transmit>
 8008006:	4603      	mov	r3, r0
 8008008:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800800a:	7dfb      	ldrb	r3, [r7, #23]
 800800c:	4618      	mov	r0, r3
 800800e:	f000 f8a1 	bl	8008154 <USBD_Get_USB_Status>
 8008012:	4603      	mov	r3, r0
 8008014:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008016:	7dbb      	ldrb	r3, [r7, #22]
}
 8008018:	4618      	mov	r0, r3
 800801a:	3718      	adds	r7, #24
 800801c:	46bd      	mov	sp, r7
 800801e:	bd80      	pop	{r7, pc}

08008020 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008020:	b580      	push	{r7, lr}
 8008022:	b086      	sub	sp, #24
 8008024:	af00      	add	r7, sp, #0
 8008026:	60f8      	str	r0, [r7, #12]
 8008028:	607a      	str	r2, [r7, #4]
 800802a:	603b      	str	r3, [r7, #0]
 800802c:	460b      	mov	r3, r1
 800802e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008030:	2300      	movs	r3, #0
 8008032:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008034:	2300      	movs	r3, #0
 8008036:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8008038:	68fb      	ldr	r3, [r7, #12]
 800803a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800803e:	7af9      	ldrb	r1, [r7, #11]
 8008040:	683b      	ldr	r3, [r7, #0]
 8008042:	687a      	ldr	r2, [r7, #4]
 8008044:	f7fa fc98 	bl	8002978 <HAL_PCD_EP_Receive>
 8008048:	4603      	mov	r3, r0
 800804a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800804c:	7dfb      	ldrb	r3, [r7, #23]
 800804e:	4618      	mov	r0, r3
 8008050:	f000 f880 	bl	8008154 <USBD_Get_USB_Status>
 8008054:	4603      	mov	r3, r0
 8008056:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008058:	7dbb      	ldrb	r3, [r7, #22]
}
 800805a:	4618      	mov	r0, r3
 800805c:	3718      	adds	r7, #24
 800805e:	46bd      	mov	sp, r7
 8008060:	bd80      	pop	{r7, pc}

08008062 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008062:	b580      	push	{r7, lr}
 8008064:	b082      	sub	sp, #8
 8008066:	af00      	add	r7, sp, #0
 8008068:	6078      	str	r0, [r7, #4]
 800806a:	460b      	mov	r3, r1
 800806c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008074:	78fa      	ldrb	r2, [r7, #3]
 8008076:	4611      	mov	r1, r2
 8008078:	4618      	mov	r0, r3
 800807a:	f7fa fcc8 	bl	8002a0e <HAL_PCD_EP_GetRxCount>
 800807e:	4603      	mov	r3, r0
}
 8008080:	4618      	mov	r0, r3
 8008082:	3708      	adds	r7, #8
 8008084:	46bd      	mov	sp, r7
 8008086:	bd80      	pop	{r7, pc}

08008088 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8008088:	b580      	push	{r7, lr}
 800808a:	b082      	sub	sp, #8
 800808c:	af00      	add	r7, sp, #0
 800808e:	6078      	str	r0, [r7, #4]
 8008090:	460b      	mov	r3, r1
 8008092:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 8008094:	78fb      	ldrb	r3, [r7, #3]
 8008096:	2b00      	cmp	r3, #0
 8008098:	d002      	beq.n	80080a0 <HAL_PCDEx_LPM_Callback+0x18>
 800809a:	2b01      	cmp	r3, #1
 800809c:	d01f      	beq.n	80080de <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 800809e:	e03b      	b.n	8008118 <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	6a1b      	ldr	r3, [r3, #32]
 80080a4:	2b00      	cmp	r3, #0
 80080a6:	d007      	beq.n	80080b8 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClock_Config();
 80080a8:	f7f8 fa4a 	bl	8000540 <SystemClock_Config>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80080ac:	4b1c      	ldr	r3, [pc, #112]	; (8008120 <HAL_PCDEx_LPM_Callback+0x98>)
 80080ae:	691b      	ldr	r3, [r3, #16]
 80080b0:	4a1b      	ldr	r2, [pc, #108]	; (8008120 <HAL_PCDEx_LPM_Callback+0x98>)
 80080b2:	f023 0306 	bic.w	r3, r3, #6
 80080b6:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	687a      	ldr	r2, [r7, #4]
 80080c4:	6812      	ldr	r2, [r2, #0]
 80080c6:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80080ca:	f023 0301 	bic.w	r3, r3, #1
 80080ce:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80080d6:	4618      	mov	r0, r3
 80080d8:	f7fe fbce 	bl	8006878 <USBD_LL_Resume>
    break;
 80080dc:	e01c      	b.n	8008118 <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	687a      	ldr	r2, [r7, #4]
 80080ea:	6812      	ldr	r2, [r2, #0]
 80080ec:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80080f0:	f043 0301 	orr.w	r3, r3, #1
 80080f4:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80080fc:	4618      	mov	r0, r3
 80080fe:	f7fe fba5 	bl	800684c <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	6a1b      	ldr	r3, [r3, #32]
 8008106:	2b00      	cmp	r3, #0
 8008108:	d005      	beq.n	8008116 <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800810a:	4b05      	ldr	r3, [pc, #20]	; (8008120 <HAL_PCDEx_LPM_Callback+0x98>)
 800810c:	691b      	ldr	r3, [r3, #16]
 800810e:	4a04      	ldr	r2, [pc, #16]	; (8008120 <HAL_PCDEx_LPM_Callback+0x98>)
 8008110:	f043 0306 	orr.w	r3, r3, #6
 8008114:	6113      	str	r3, [r2, #16]
    break;
 8008116:	bf00      	nop
}
 8008118:	bf00      	nop
 800811a:	3708      	adds	r7, #8
 800811c:	46bd      	mov	sp, r7
 800811e:	bd80      	pop	{r7, pc}
 8008120:	e000ed00 	.word	0xe000ed00

08008124 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8008124:	b480      	push	{r7}
 8008126:	b083      	sub	sp, #12
 8008128:	af00      	add	r7, sp, #0
 800812a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800812c:	4b03      	ldr	r3, [pc, #12]	; (800813c <USBD_static_malloc+0x18>)
}
 800812e:	4618      	mov	r0, r3
 8008130:	370c      	adds	r7, #12
 8008132:	46bd      	mov	sp, r7
 8008134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008138:	4770      	bx	lr
 800813a:	bf00      	nop
 800813c:	200001b4 	.word	0x200001b4

08008140 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8008140:	b480      	push	{r7}
 8008142:	b083      	sub	sp, #12
 8008144:	af00      	add	r7, sp, #0
 8008146:	6078      	str	r0, [r7, #4]

}
 8008148:	bf00      	nop
 800814a:	370c      	adds	r7, #12
 800814c:	46bd      	mov	sp, r7
 800814e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008152:	4770      	bx	lr

08008154 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008154:	b480      	push	{r7}
 8008156:	b085      	sub	sp, #20
 8008158:	af00      	add	r7, sp, #0
 800815a:	4603      	mov	r3, r0
 800815c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800815e:	2300      	movs	r3, #0
 8008160:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008162:	79fb      	ldrb	r3, [r7, #7]
 8008164:	2b03      	cmp	r3, #3
 8008166:	d817      	bhi.n	8008198 <USBD_Get_USB_Status+0x44>
 8008168:	a201      	add	r2, pc, #4	; (adr r2, 8008170 <USBD_Get_USB_Status+0x1c>)
 800816a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800816e:	bf00      	nop
 8008170:	08008181 	.word	0x08008181
 8008174:	08008187 	.word	0x08008187
 8008178:	0800818d 	.word	0x0800818d
 800817c:	08008193 	.word	0x08008193
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8008180:	2300      	movs	r3, #0
 8008182:	73fb      	strb	r3, [r7, #15]
    break;
 8008184:	e00b      	b.n	800819e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008186:	2303      	movs	r3, #3
 8008188:	73fb      	strb	r3, [r7, #15]
    break;
 800818a:	e008      	b.n	800819e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800818c:	2301      	movs	r3, #1
 800818e:	73fb      	strb	r3, [r7, #15]
    break;
 8008190:	e005      	b.n	800819e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008192:	2303      	movs	r3, #3
 8008194:	73fb      	strb	r3, [r7, #15]
    break;
 8008196:	e002      	b.n	800819e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8008198:	2303      	movs	r3, #3
 800819a:	73fb      	strb	r3, [r7, #15]
    break;
 800819c:	bf00      	nop
  }
  return usb_status;
 800819e:	7bfb      	ldrb	r3, [r7, #15]
}
 80081a0:	4618      	mov	r0, r3
 80081a2:	3714      	adds	r7, #20
 80081a4:	46bd      	mov	sp, r7
 80081a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081aa:	4770      	bx	lr

080081ac <__libc_init_array>:
 80081ac:	b570      	push	{r4, r5, r6, lr}
 80081ae:	4d0d      	ldr	r5, [pc, #52]	; (80081e4 <__libc_init_array+0x38>)
 80081b0:	4c0d      	ldr	r4, [pc, #52]	; (80081e8 <__libc_init_array+0x3c>)
 80081b2:	1b64      	subs	r4, r4, r5
 80081b4:	10a4      	asrs	r4, r4, #2
 80081b6:	2600      	movs	r6, #0
 80081b8:	42a6      	cmp	r6, r4
 80081ba:	d109      	bne.n	80081d0 <__libc_init_array+0x24>
 80081bc:	4d0b      	ldr	r5, [pc, #44]	; (80081ec <__libc_init_array+0x40>)
 80081be:	4c0c      	ldr	r4, [pc, #48]	; (80081f0 <__libc_init_array+0x44>)
 80081c0:	f000 f820 	bl	8008204 <_init>
 80081c4:	1b64      	subs	r4, r4, r5
 80081c6:	10a4      	asrs	r4, r4, #2
 80081c8:	2600      	movs	r6, #0
 80081ca:	42a6      	cmp	r6, r4
 80081cc:	d105      	bne.n	80081da <__libc_init_array+0x2e>
 80081ce:	bd70      	pop	{r4, r5, r6, pc}
 80081d0:	f855 3b04 	ldr.w	r3, [r5], #4
 80081d4:	4798      	blx	r3
 80081d6:	3601      	adds	r6, #1
 80081d8:	e7ee      	b.n	80081b8 <__libc_init_array+0xc>
 80081da:	f855 3b04 	ldr.w	r3, [r5], #4
 80081de:	4798      	blx	r3
 80081e0:	3601      	adds	r6, #1
 80081e2:	e7f2      	b.n	80081ca <__libc_init_array+0x1e>
 80081e4:	0800828c 	.word	0x0800828c
 80081e8:	0800828c 	.word	0x0800828c
 80081ec:	0800828c 	.word	0x0800828c
 80081f0:	08008290 	.word	0x08008290

080081f4 <memset>:
 80081f4:	4402      	add	r2, r0
 80081f6:	4603      	mov	r3, r0
 80081f8:	4293      	cmp	r3, r2
 80081fa:	d100      	bne.n	80081fe <memset+0xa>
 80081fc:	4770      	bx	lr
 80081fe:	f803 1b01 	strb.w	r1, [r3], #1
 8008202:	e7f9      	b.n	80081f8 <memset+0x4>

08008204 <_init>:
 8008204:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008206:	bf00      	nop
 8008208:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800820a:	bc08      	pop	{r3}
 800820c:	469e      	mov	lr, r3
 800820e:	4770      	bx	lr

08008210 <_fini>:
 8008210:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008212:	bf00      	nop
 8008214:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008216:	bc08      	pop	{r3}
 8008218:	469e      	mov	lr, r3
 800821a:	4770      	bx	lr
